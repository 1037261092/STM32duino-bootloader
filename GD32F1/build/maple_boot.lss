
build/maple_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000017e4  080000f0  080000f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002c8  20000000  080018d4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000044  200002c8  08001b9c  000102c8  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  2000030c  08001be0  000102c8  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  20000310  08001be4  000102c8  2**2
                  ALLOC
  6 .bss.recvBuffer 00000800  20000314  08001be8  000102c8  2**2
                  ALLOC
  7 .bss.uploadBlockLen 00000002  20000b14  080023e8  000102c8  2**1
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000b16  080023ea  000102c8  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000b18  080023ec  000102c8  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000b1c  080023f0  000102c8  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000006  20000b1d  080023f1  000102c8  2**0
                  ALLOC
 12 .bss.dfuBusy  00000001  20000b23  080023f7  000102c8  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000b24  080023f8  000102c8  2**0
                  ALLOC
 14 ._usrstack    00000103  20000b25  080023f9  000102c8  2**0
                  ALLOC
 15 .comment      00000070  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY
 16 .ARM.attributes 0000002f  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 000005d0  00000000  00000000  00010368  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   00004430  00000000  00000000  00010938  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000138c  00000000  00000000  00014d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0000146d  00000000  00000000  000160f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00000c34  00000000  00000000  00017564  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0000176d  00000000  00000000  00018198  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00001fea  00000000  00000000  00019905  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_ranges 00000600  00000000  00000000  0001b8f0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	0800016d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8}
 8000008:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800000c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000010:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000014:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000018:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
	...
 800002c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000030:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800003c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000040:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000044:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000048:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800004c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000050:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000054:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000058:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800005c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000060:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000064:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000068:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800006c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000070:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000074:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000078:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800007c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000080:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000084:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000088:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800008c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000090:	08000571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl}
 8000094:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000098:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800009c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000a0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000a4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000a8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000ac:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000b0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000b4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000b8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000bc:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000c0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000c4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000c8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000cc:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000d0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000d4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000d8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000dc:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000e0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000e4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000e8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <__WFI>:




.thumb_func
__WFE:
 80000f0:	bf30      	wfi

 80000f2:	4770      	bx	lr

080000f4 <__WFE>:




.thumb_func
__SEV:
 80000f4:	bf20      	wfe

 80000f6:	4770      	bx	lr

080000f8 <__SEV>:




.thumb_func
__ISB:
 80000f8:	bf40      	sev

 80000fa:	4770      	bx	lr

080000fc <__ISB>:




.thumb_func
__DSB:
 80000fc:	f3bf 8f6f 	isb	sy

 8000100:	4770      	bx	lr

08000102 <__DSB>:




.thumb_func
__DMB:
 8000102:	f3bf 8f4f 	dsb	sy

 8000106:	4770      	bx	lr

08000108 <__DMB>:




.thumb_func
__SVC:
 8000108:	f3bf 8f5f 	dmb	sy

 800010c:	4770      	bx	lr

0800010e <__SVC>:




.thumb_func
__MRS_CONTROL:
 800010e:	df01      	svc	1

 8000110:	4770      	bx	lr

08000112 <__MRS_CONTROL>:




.thumb_func
__MSR_CONTROL:
 8000112:	f3ef 8014 	mrs	r0, CONTROL

 8000116:	4770      	bx	lr

08000118 <__MSR_CONTROL>:




.thumb_func
__MRS_PSP:
 8000118:	f380 8814 	msr	CONTROL, r0

 800011c:	f3bf 8f6f 	isb	sy
  MRS r0, psp
 8000120:	4770      	bx	lr

08000122 <__MRS_PSP>:




.thumb_func
__MSR_PSP:
 8000122:	f3ef 8009 	mrs	r0, PSP

 8000126:	4770      	bx	lr

08000128 <__MSR_PSP>:




.thumb_func
__MRS_MSP:
 8000128:	f380 8809 	msr	PSP, r0

 800012c:	4770      	bx	lr

0800012e <__MRS_MSP>:




.thumb_func
__MSR_MSP:
 800012e:	f3ef 8008 	mrs	r0, MSP

 8000132:	4770      	bx	lr

08000134 <__MSR_MSP>:




.thumb_func
__RESETPRIMASK:
 8000134:	f380 8808 	msr	MSP, r0

 8000138:	4770      	bx	lr

0800013a <__RESETPRIMASK>:




.thumb_func
__SETPRIMASK:
 800013a:	b662      	cpsie	i

 800013c:	4770      	bx	lr

0800013e <__SETPRIMASK>:




.thumb_func
__READ_PRIMASK:
 800013e:	b672      	cpsid	i

 8000140:	4770      	bx	lr

08000142 <__READ_PRIMASK>:




.thumb_func
__RESETFAULTMASK:
 8000142:	f3ef 8010 	mrs	r0, PRIMASK

 8000146:	4770      	bx	lr

08000148 <__RESETFAULTMASK>:




.thumb_func
__SETFAULTMASK:
 8000148:	b661      	cpsie	f

 800014a:	4770      	bx	lr

0800014c <__SETFAULTMASK>:




.thumb_func
__READ_FAULTMASK:
 800014c:	b671      	cpsid	f

 800014e:	4770      	bx	lr

08000150 <__READ_FAULTMASK>:




.thumb_func
__BASEPRICONFIG:
 8000150:	f3ef 8013 	mrs	r0, FAULTMASK

 8000154:	4770      	bx	lr

08000156 <__BASEPRICONFIG>:




.thumb_func
__GetBASEPRI:
 8000156:	f380 8811 	msr	BASEPRI, r0

 800015a:	4770      	bx	lr

0800015c <__GetBASEPRI>:



.thumb_func
__REV_HalfWord:

 800015c:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  REV16 r0, r0
 8000160:	4770      	bx	lr

08000162 <__REV_HalfWord>:




.thumb_func
__REV_Word:
 8000162:	ba40      	rev16	r0, r0

 8000164:	4770      	bx	lr

08000166 <__REV_Word>:
 8000166:	ba00      	rev	r0, r0
 8000168:	4770      	bx	lr
	...

0800016c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800016c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800016e:	f000 b804 	b.w	800017a <LoopCopyDataInit>

08000172 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000172:	4b0b      	ldr	r3, [pc, #44]	; (80001a0 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 8000174:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000176:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000178:	3104      	adds	r1, #4

0800017a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800017a:	480a      	ldr	r0, [pc, #40]	; (80001a4 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 800017e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000180:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000182:	f4ff aff6 	bcc.w	8000172 <CopyDataInit>
	ldr	r2, =_sbss
 8000186:	4a09      	ldr	r2, [pc, #36]	; (80001ac <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 8000188:	f000 b803 	b.w	8000192 <LoopFillZerobss>

0800018c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800018c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800018e:	f842 3b04 	str.w	r3, [r2], #4

08000192 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000192:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000194:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000196:	f4ff aff9 	bcc.w	800018c <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 800019a:	f000 fa43 	bl	8000624 <main>
	bx	lr
 800019e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80001a0:	080018d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, ip}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001a4:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 80001a8:	200002c8 	andcs	r0, r0, r8, asr #5
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80001ac:	200002c8 	andcs	r0, r0, r8, asr #5
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80001b0:	2000030c 	andcs	r0, r0, ip, lsl #6

080001b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001b4:	f7ff bffe 	b.w	80001b4 <ADC1_2_IRQHandler>

080001b8 <nothingProc>:
    volatile RESUME_STATE eState;
    volatile u8 bESOFcnt;
} ResumeS;

/* dummy proc */
void nothingProc(void) {
 80001b8:	4770      	bx	lr

080001ba <usbStatusIn>:

    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void) {
 80001ba:	4770      	bx	lr

080001bc <usbStatusOut>:
}

void usbStatusOut(void) {
 80001bc:	4770      	bx	lr

080001be <usbGetInterfaceSetting>:
}

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting) {
    /* alt setting 0 -> program RAM, alt setting 1 -> FLASH */
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 80001be:	2803      	cmp	r0, #3
    } else {
        return USB_SUCCESS;
    }
}
 80001c0:	bf8c      	ite	hi
 80001c2:	2002      	movhi	r0, #2
 80001c4:	2000      	movls	r0, #0
 80001c6:	4770      	bx	lr

080001c8 <usbGetConfiguration>:
 * These are the USER STANDARD REQUESTS, they are handled
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void) {
 80001c8:	4770      	bx	lr
	...

080001cc <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void) {
    if (pInformation->Current_Configuration != 0) {
 80001cc:	4b03      	ldr	r3, [pc, #12]	; (80001dc <usbSetConfiguration+0x10>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	7a9b      	ldrb	r3, [r3, #10]
 80001d2:	b113      	cbz	r3, 80001da <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 80001d4:	4b02      	ldr	r3, [pc, #8]	; (80001e0 <usbSetConfiguration+0x14>)
 80001d6:	2205      	movs	r2, #5
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	4770      	bx	lr
 80001dc:	20000304 	andcs	r0, r0, r4, lsl #6
 80001e0:	20000310 	andcs	r0, r0, r0, lsl r3

080001e4 <usbGetInterface>:
    }
}

void usbGetInterface(void) {
 80001e4:	4770      	bx	lr

080001e6 <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void) {
 80001e6:	4770      	bx	lr

080001e8 <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void) {
 80001e8:	4770      	bx	lr

080001ea <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void) {
 80001ea:	4770      	bx	lr

080001ec <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void) {
 80001ec:	4770      	bx	lr

080001ee <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void) {
 80001ee:	4770      	bx	lr

080001f0 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void) {
    bDeviceState = ADDRESSED;
 80001f0:	4b01      	ldr	r3, [pc, #4]	; (80001f8 <usbSetDeviceAddress+0x8>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	4770      	bx	lr
 80001f8:	20000310 	andcs	r0, r0, r0, lsl r3

080001fc <usbReset>:

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
    bDeviceState = UNCONNECTED;
}

void usbReset(void) {
 80001fc:	b510      	push	{r4, lr}
    dfuUpdateByReset();
 80001fe:	f000 fc1f 	bl	8000a40 <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000202:	4b21      	ldr	r3, [pc, #132]	; (8000288 <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000204:	4a21      	ldr	r2, [pc, #132]	; (800028c <usbReset+0x90>)
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2400      	movs	r4, #0
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 800020a:	6812      	ldr	r2, [r2, #0]
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 800020c:	729c      	strb	r4, [r3, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 800020e:	79d2      	ldrb	r2, [r2, #7]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000210:	4620      	mov	r0, r4

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000212:	725a      	strb	r2, [r3, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000214:	4a1e      	ldr	r2, [pc, #120]	; (8000290 <usbReset+0x94>)

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 8000216:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <usbReset+0x98>)
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);
 8000218:	6014      	str	r4, [r2, #0]

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800021a:	6819      	ldr	r1, [r3, #0]
 800021c:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 8000220:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8000224:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000228:	b289      	uxth	r1, r1
 800022a:	6019      	str	r1, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8000232:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000236:	b289      	uxth	r1, r1
 8000238:	f081 0110 	eor.w	r1, r1, #16
 800023c:	6019      	str	r1, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800023e:	6811      	ldr	r1, [r2, #0]
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <usbReset+0x9c>)
 8000242:	b289      	uxth	r1, r1
 8000244:	440b      	add	r3, r1
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	2140      	movs	r1, #64	; 0x40
 800024a:	6019      	str	r1, [r3, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800024c:	6813      	ldr	r3, [r2, #0]
 800024e:	2280      	movs	r2, #128	; 0x80
 8000250:	b29b      	uxth	r3, r3
 8000252:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000256:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800025a:	005b      	lsls	r3, r3, #1
 800025c:	601a      	str	r2, [r3, #0]

    Clear_Status_Out(ENDP0);
 800025e:	f000 fdcb 	bl	8000df8 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <usbReset+0xa0>)
 8000264:	4620      	mov	r0, r4
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800026c:	f000 fe1c 	bl	8000ea8 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 8000270:	4620      	mov	r0, r4
 8000272:	f000 fdb2 	bl	8000dda <SetEPRxValid>

    bDeviceState = ATTACHED;
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <usbReset+0xa4>)
 8000278:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 800027a:	4620      	mov	r0, r4
}
 800027c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000280:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000282:	f001 bab3 	b.w	80017ec <SetDeviceAddress>
 8000286:	bf00      	nop
 8000288:	20000304 	andcs	r0, r0, r4, lsl #6
 800028c:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 8000290:	40005c50 	andmi	r5, r0, r0, asr ip
 8000294:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000298:	20003004 	andcs	r3, r0, r4
 800029c:	200002dc 	ldrdcs	r0, [r0], -ip
 80002a0:	20000310 	andcs	r0, r0, r0, lsl r3

080002a4 <usbDataSetup>:
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 80002a4:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <usbDataSetup+0x4c>)
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 80002a8:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	461c      	mov	r4, r3
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80002b4:	2a21      	cmp	r2, #33	; 0x21
 80002b6:	d119      	bne.n	80002ec <usbDataSetup+0x48>
        if (dfuUpdateByRequest()) {
 80002b8:	f000 fc58 	bl	8000b6c <dfuUpdateByRequest>
 80002bc:	b1b0      	cbz	r0, 80002ec <usbDataSetup+0x48>
            /* successfull state transition, handle the request */
            switch (request) {
 80002be:	1e68      	subs	r0, r5, #1
 80002c0:	2804      	cmp	r0, #4
 80002c2:	d813      	bhi.n	80002ec <usbDataSetup+0x48>
 80002c4:	e8df f000 	tbb	[pc, r0]
 80002c8:	12070503 	andne	r0, r7, #12582912	; 0xc00000
 80002cc:	4b090009 	blmi	82402f8 <_etext+0x23ea24>
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
 80002d0:	e004      	b.n	80002dc <usbDataSetup+0x38>
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <usbDataSetup+0x54>)
                break;
 80002d4:	e002      	b.n	80002dc <usbDataSetup+0x38>
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            /* successfull state transition, handle the request */
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <usbDataSetup+0x58>)
 80002d8:	e000      	b.n	80002dc <usbDataSetup+0x38>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <usbDataSetup+0x5c>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80002dc:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 80002de:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 80002e0:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80002e2:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 80002e4:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 80002e6:	4798      	blx	r3

        return USB_SUCCESS;
 80002e8:	4620      	mov	r0, r4
 80002ea:	bd38      	pop	{r3, r4, r5, pc}
    }

    return USB_UNSUPPORT;
 80002ec:	2002      	movs	r0, #2
}
 80002ee:	bd38      	pop	{r3, r4, r5, pc}
 80002f0:	20000304 	andcs	r0, r0, r4, lsl #6
 80002f4:	08000ab5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r9, fp}
 80002f8:	08000add 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, r9, fp}
 80002fc:	08000a9d 	stmdaeq	r0, {r0, r2, r3, r4, r7, r9, fp}
 8000300:	08000a85 	stmdaeq	r0, {r0, r2, r7, r9, fp}

08000304 <usbGetDeviceDescriptor>:
        return USB_SUCCESS;
    }
}

u8 *usbGetDeviceDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000304:	4901      	ldr	r1, [pc, #4]	; (800030c <usbGetDeviceDescriptor+0x8>)
 8000306:	f001 b871 	b.w	80013ec <Standard_GetDescriptorData>
 800030a:	bf00      	nop
 800030c:	20000144 	andcs	r0, r0, r4, asr #2

08000310 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000310:	4901      	ldr	r1, [pc, #4]	; (8000318 <usbGetConfigDescriptor+0x8>)
 8000312:	f001 b86b 	b.w	80013ec <Standard_GetDescriptorData>
 8000316:	bf00      	nop
 8000318:	200002b8 			; <UNDEFINED> instruction: 0x200002b8

0800031c <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len) {
    u8 strIndex = pInformation->USBwValue0;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <usbGetStringDescriptor+0x18>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 8000322:	2b07      	cmp	r3, #7
 8000324:	d804      	bhi.n	8000330 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 8000326:	4904      	ldr	r1, [pc, #16]	; (8000338 <usbGetStringDescriptor+0x1c>)
 8000328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800032c:	f001 b85e 	b.w	80013ec <Standard_GetDescriptorData>
    }
}
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	20000304 	andcs	r0, r0, r4, lsl #6
 8000338:	20000094 	mulcs	r0, r4, r0

0800033c <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 800033c:	4901      	ldr	r1, [pc, #4]	; (8000344 <usbGetFunctionalDescriptor+0x8>)
 800033e:	f001 b855 	b.w	80013ec <Standard_GetDescriptorData>
 8000342:	bf00      	nop
 8000344:	200000e0 	andcs	r0, r0, r0, ror #1

08000348 <usbNoDataSetup>:
    }

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request) {
 8000348:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <usbNoDataSetup+0x24>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	2b21      	cmp	r3, #33	; 0x21
 8000356:	d106      	bne.n	8000366 <usbNoDataSetup+0x1e>
        /* todo, keep track of the destination interface, often stored in wIndex */
        if (dfuUpdateByRequest()) {
 8000358:	f000 fc08 	bl	8000b6c <dfuUpdateByRequest>
 800035c:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 800035e:	bf0c      	ite	eq
 8000360:	2002      	moveq	r0, #2
 8000362:	2000      	movne	r0, #0
 8000364:	bd08      	pop	{r3, pc}
        }
    }
    return USB_UNSUPPORT;
 8000366:	2002      	movs	r0, #2
}
 8000368:	bd08      	pop	{r3, pc}
 800036a:	bf00      	nop
 800036c:	20000304 	andcs	r0, r0, r4, lsl #6

08000370 <setupUSB>:


extern u8 u8_usbConfigDescriptorDFU[];
extern u8 u8_usbFunctionalDescriptor[];

void setupUSB (void) {
 8000370:	b537      	push	{r0, r1, r2, r4, r5, lr}

/* Generic boards don't have disconnect hardware, so we drive PA12 which is connected to the usb D+ line*/
#define USB_DISC_BANK         GPIOA
#define USB_DISC              12

  SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC),
 8000372:	4c18      	ldr	r4, [pc, #96]	; (80003d4 <setupUSB+0x64>)
 8000374:	200c      	movs	r0, #12
 8000376:	6825      	ldr	r5, [r4, #0]
 8000378:	f000 fb16 	bl	80009a8 <crMask>
 800037c:	4028      	ands	r0, r5
 800037e:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000382:	6025      	str	r5, [r4, #0]
          (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC)) & crMask(USB_DISC)) | CR_OUTPUT_PP << CR_SHITF(USB_DISC));

  gpio_write_bit(USB_DISC_BANK,USB_DISC,0);  /* present ourselves to the host */
 8000384:	4814      	ldr	r0, [pc, #80]	; (80003d8 <setupUSB+0x68>)
 8000386:	210c      	movs	r1, #12
 8000388:	2200      	movs	r2, #0
 800038a:	f000 f9a7 	bl	80006dc <gpio_write_bit>
  
  volatile unsigned int delay;
  for(delay = 0;delay<256;delay++);
 800038e:	2300      	movs	r3, #0
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	9b01      	ldr	r3, [sp, #4]
 8000394:	2bff      	cmp	r3, #255	; 0xff
 8000396:	d802      	bhi.n	800039e <setupUSB+0x2e>
 8000398:	9b01      	ldr	r3, [sp, #4]
 800039a:	3301      	adds	r3, #1
 800039c:	e7f8      	b.n	8000390 <setupUSB+0x20>

  //  volatile unsigned x = 1024; do { ; }while(--x);// wait a moment
  /* turn on the USB clock */
   SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC),
 800039e:	200c      	movs	r0, #12
 80003a0:	6825      	ldr	r5, [r4, #0]
 80003a2:	f000 fb01 	bl	80009a8 <crMask>
 80003a6:	4028      	ands	r0, r5
 80003a8:	f440 2580 	orr.w	r5, r0, #262144	; 0x40000
 80003ac:	6025      	str	r5, [r4, #0]
          (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC)) & crMask(USB_DISC)) | CR_INPUT << CR_SHITF(USB_DISC)); //Sets the PA12 as floating input
 //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif  
  /* initialize the usb application */
  
  wTransferSize=getFlashPageSize();
 80003ae:	f000 fb0d 	bl	80009cc <getFlashPageSize>
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <setupUSB+0x6c>)
  u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 80003b4:	b2c2      	uxtb	r2, r0
          (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC)) & crMask(USB_DISC)) | CR_INPUT << CR_SHITF(USB_DISC)); //Sets the PA12 as floating input
 //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif  
  /* initialize the usb application */
  
  wTransferSize=getFlashPageSize();
 80003b6:	6018      	str	r0, [r3, #0]
  u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <setupUSB+0x70>)
  u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 80003ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif  
  /* initialize the usb application */
  
  wTransferSize=getFlashPageSize();
  u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 80003be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 80003c2:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
  
  u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <setupUSB+0x74>)
 80003c8:	715a      	strb	r2, [r3, #5]
  u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;  
 80003ca:	7198      	strb	r0, [r3, #6]

/* Function Definitions */
void usbAppInit(void) {
    /* hook in to usb_core, depends on all those damn
       non encapsulated externs! */
    USB_Init();
 80003cc:	f000 fe36 	bl	800103c <USB_Init>
  u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
  u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;  
  
  usbAppInit();

}
 80003d0:	b003      	add	sp, #12
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	40010804 	andmi	r0, r1, r4, lsl #16
 80003d8:	40010800 	andmi	r0, r1, r0, lsl #16
 80003dc:	200002c8 	andcs	r0, r0, r8, asr #5
 80003e0:	200000ec 	andcs	r0, r0, ip, ror #1
 80003e4:	20000129 	andcs	r0, r0, r9, lsr #2

080003e8 <usbSuspend>:
    USB_Init();
}

void usbSuspend(void) {
    u16 wCNTR;
    wCNTR = _GetCNTR();
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <usbSuspend+0x14>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	b292      	uxth	r2, r2
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 80003ee:	f042 020c 	orr.w	r2, r2, #12
 80003f2:	601a      	str	r2, [r3, #0]

    /* run any power reduction handlers */
    bDeviceState = SUSPENDED;
 80003f4:	4b02      	ldr	r3, [pc, #8]	; (8000400 <usbSuspend+0x18>)
 80003f6:	2203      	movs	r2, #3
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	4770      	bx	lr
 80003fc:	40005c40 	andmi	r5, r0, r0, asr #24
 8000400:	20000310 	andcs	r0, r0, r0, lsl r3

08000404 <usbResumeInit>:
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <usbResumeInit+0x14>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000406:	f64f 72fb 	movw	r2, #65531	; 0xfffb
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 800040a:	6819      	ldr	r1, [r3, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 800040c:	400a      	ands	r2, r1
 800040e:	601a      	str	r2, [r3, #0]

    /* undo power reduction handlers here */

    _SetCNTR(ISR_MSK);
 8000410:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	4770      	bx	lr
 8000418:	40005c40 	andmi	r5, r0, r0, asr #24

0800041c <usbResume>:
}

void usbResume(RESUME_STATE eResumeSetVal) {
 800041c:	b510      	push	{r4, lr}
 800041e:	4c1e      	ldr	r4, [pc, #120]	; (8000498 <usbResume+0x7c>)
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 8000420:	2807      	cmp	r0, #7
        ResumeS.eState = eResumeSetVal;
 8000422:	bf18      	it	ne
 8000424:	7020      	strbne	r0, [r4, #0]

    switch (ResumeS.eState) {
 8000426:	7823      	ldrb	r3, [r4, #0]
 8000428:	2b05      	cmp	r3, #5
 800042a:	d832      	bhi.n	8000492 <usbResume+0x76>
 800042c:	e8df f003 	tbb	[pc, r3]
 8000430:	0e0a0603 	cfmadd32eq	mvax0, mvfx0, mvfx10, mvfx3
 8000434:	f7ff2116 			; <UNDEFINED> instruction: 0xf7ff2116
    case RESUME_EXTERNAL:
        usbResumeInit();
 8000438:	ffe5 e02a 	vaddl.u32	q15, d5, d26
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
 800043c:	f7ff ffe2 	bl	8000404 <usbResumeInit>
        ResumeS.eState = RESUME_START;
 8000440:	2304      	movs	r3, #4
 8000442:	e027      	b.n	8000494 <usbResume+0x78>
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 8000444:	2302      	movs	r3, #2
 8000446:	7063      	strb	r3, [r4, #1]
        ResumeS.eState = RESUME_WAIT;
 8000448:	2303      	movs	r3, #3
 800044a:	e023      	b.n	8000494 <usbResume+0x78>
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 800044c:	7863      	ldrb	r3, [r4, #1]
 800044e:	3b01      	subs	r3, #1
 8000450:	b2db      	uxtb	r3, r3
 8000452:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0)
 8000454:	7863      	ldrb	r3, [r4, #1]
 8000456:	b9f3      	cbnz	r3, 8000496 <usbResume+0x7a>
            ResumeS.eState = RESUME_START;
 8000458:	2204      	movs	r2, #4
 800045a:	e017      	b.n	800048c <usbResume+0x70>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <usbResume+0x80>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	b292      	uxth	r2, r2
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 8000462:	f042 0210 	orr.w	r2, r2, #16
 8000466:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_ON;
 8000468:	2305      	movs	r3, #5
 800046a:	7023      	strb	r3, [r4, #0]
        ResumeS.bESOFcnt = 10;
 800046c:	230a      	movs	r3, #10
 800046e:	7063      	strb	r3, [r4, #1]
        break;
 8000470:	bd10      	pop	{r4, pc}
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 8000472:	7863      	ldrb	r3, [r4, #1]
 8000474:	3b01      	subs	r3, #1
 8000476:	b2db      	uxtb	r3, r3
 8000478:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0) {
 800047a:	7863      	ldrb	r3, [r4, #1]
 800047c:	b95b      	cbnz	r3, 8000496 <usbResume+0x7a>
            wCNTR = _GetCNTR();
 800047e:	4a07      	ldr	r2, [pc, #28]	; (800049c <usbResume+0x80>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000480:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 8000484:	6811      	ldr	r1, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000486:	400b      	ands	r3, r1
 8000488:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 800048a:	2206      	movs	r2, #6
 800048c:	4b02      	ldr	r3, [pc, #8]	; (8000498 <usbResume+0x7c>)
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	bd10      	pop	{r4, pc}
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 8000492:	2306      	movs	r3, #6
 8000494:	7023      	strb	r3, [r4, #0]
 8000496:	bd10      	pop	{r4, pc}
 8000498:	200002ce 	andcs	r0, r0, lr, asr #5
 800049c:	40005c40 	andmi	r5, r0, r0, asr #24

080004a0 <usbPowerOn>:

RESULT usbPowerOn(void) {
    u16 wRegVal;

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <usbPowerOn+0x1c>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	601a      	str	r2, [r3, #0]

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
    _SetISTR(0);
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <usbPowerOn+0x20>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 80004a8:	2000      	movs	r0, #0
    _SetISTR(0);
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 80004aa:	4906      	ldr	r1, [pc, #24]	; (80004c4 <usbPowerOn+0x24>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 80004ac:	6018      	str	r0, [r3, #0]
    _SetISTR(0);
 80004ae:	6010      	str	r0, [r2, #0]
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 80004b0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80004b4:	800a      	strh	r2, [r1, #0]
    _SetCNTR(wInterrupt_Mask);
 80004b6:	601a      	str	r2, [r3, #0]

    return USB_SUCCESS;
}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40005c40 	andmi	r5, r0, r0, asr #24
 80004c0:	40005c44 	andmi	r5, r0, r4, asr #24
 80004c4:	20000308 	andcs	r0, r0, r8, lsl #6

080004c8 <usbPowerOff>:

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <usbPowerOff+0x14>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <usbPowerOff+0x18>)
 80004d0:	2000      	movs	r0, #0
 80004d2:	6010      	str	r0, [r2, #0]
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 80004d4:	2203      	movs	r2, #3
 80004d6:	601a      	str	r2, [r3, #0]
       usb peripheral. we have no disabled the clocks,
       pulled the usb_disc pin back up, or reset the
       application state machines */

    return USB_SUCCESS;
}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40005c40 	andmi	r5, r0, r0, asr #24
 80004e0:	40005c44 	andmi	r5, r0, r4, asr #24

080004e4 <usbDsbBus>:



void usbDsbBus(void) {
// setPin(USB_DISC_BANK,USB_DISC);
usbPowerOff();
 80004e4:	f7ff bff0 	b.w	80004c8 <usbPowerOff>

080004e8 <usbEnbISR>:
    bDeviceState = ADDRESSED;
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void) {
 80004e8:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 80004ea:	2314      	movs	r3, #20
 80004ec:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80004f6:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 80004fa:	a801      	add	r0, sp, #4


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 80004fc:	2301      	movs	r3, #1
 80004fe:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 8000502:	f000 f997 	bl	8000834 <nvicInit>
}
 8000506:	b003      	add	sp, #12
 8000508:	f85d fb04 	ldr.w	pc, [sp], #4

0800050c <usbInit>:
       application state machines */

    return USB_SUCCESS;
}

void usbInit(void) {
 800050c:	b510      	push	{r4, lr}
    dfuInit();
 800050e:	f000 fa69 	bl	80009e4 <dfuInit>

    pInformation->Current_Configuration = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <usbInit+0x2c>)
 8000514:	2400      	movs	r4, #0
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	729c      	strb	r4, [r3, #10]
    usbPowerOn();
 800051a:	f7ff ffc1 	bl	80004a0 <usbPowerOn>

    _SetISTR(0);
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <usbInit+0x30>)
    wInterrupt_Mask = ISR_MSK;
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <usbInit+0x34>)
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 8000522:	601c      	str	r4, [r3, #0]
    wInterrupt_Mask = ISR_MSK;
 8000524:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8000528:	8013      	strh	r3, [r2, #0]
    _SetCNTR(wInterrupt_Mask);
 800052a:	4a06      	ldr	r2, [pc, #24]	; (8000544 <usbInit+0x38>)
 800052c:	6013      	str	r3, [r2, #0]

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
 800052e:	f7ff ffdb 	bl	80004e8 <usbEnbISR>
    bDeviceState = UNCONNECTED;
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <usbInit+0x3c>)
 8000534:	601c      	str	r4, [r3, #0]
 8000536:	bd10      	pop	{r4, pc}
 8000538:	20000304 	andcs	r0, r0, r4, lsl #6
 800053c:	40005c44 	andmi	r5, r0, r4, asr #24
 8000540:	20000308 	andcs	r0, r0, r8, lsl #6
 8000544:	40005c40 	andmi	r5, r0, r0, asr #24
 8000548:	20000310 	andcs	r0, r0, r0, lsl r3

0800054c <usbDsbISR>:
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
}

void usbDsbISR(void) {
 800054c:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 800054e:	2314      	movs	r3, #20
 8000550:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 8000554:	a801      	add	r0, sp, #4
}

void usbDsbISR(void) {
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800055c:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
 8000560:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 8000564:	f000 f966 	bl	8000834 <nvicInit>
}
 8000568:	b003      	add	sp, #12
 800056a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000570 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 8000570:	b570      	push	{r4, r5, r6, lr}
    wIstr = _GetISTR();
 8000572:	4d27      	ldr	r5, [pc, #156]	; (8000610 <USB_LP_CAN1_RX0_IRQHandler+0xa0>)
 8000574:	4c27      	ldr	r4, [pc, #156]	; (8000614 <USB_LP_CAN1_RX0_IRQHandler+0xa4>)
 8000576:	682b      	ldr	r3, [r5, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000578:	4e27      	ldr	r6, [pc, #156]	; (8000618 <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void) {
    wIstr = _GetISTR();
 800057a:	b29b      	uxth	r3, r3
 800057c:	8023      	strh	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 800057e:	8822      	ldrh	r2, [r4, #0]
 8000580:	8833      	ldrh	r3, [r6, #0]
 8000582:	4013      	ands	r3, r2
 8000584:	0559      	lsls	r1, r3, #21
 8000586:	d505      	bpl.n	8000594 <USB_LP_CAN1_RX0_IRQHandler+0x24>
        _SetISTR((u16)CLR_RESET);
 8000588:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 800058c:	602b      	str	r3, [r5, #0]
        Device_Property.Reset();
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4798      	blx	r3
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 8000594:	8822      	ldrh	r2, [r4, #0]
 8000596:	8833      	ldrh	r3, [r6, #0]
 8000598:	401a      	ands	r2, r3
 800059a:	0492      	lsls	r2, r2, #18
        _SetISTR((u16)CLR_ERR);
 800059c:	bf44      	itt	mi
 800059e:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 80005a2:	602a      	strmi	r2, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 80005a4:	8822      	ldrh	r2, [r4, #0]
 80005a6:	4013      	ands	r3, r2
 80005a8:	04db      	lsls	r3, r3, #19
 80005aa:	d505      	bpl.n	80005b8 <USB_LP_CAN1_RX0_IRQHandler+0x48>
        _SetISTR((u16)CLR_WKUP);
 80005ac:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80005b0:	602b      	str	r3, [r5, #0]
        usbResume(RESUME_EXTERNAL);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ff32 	bl	800041c <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 80005b8:	8822      	ldrh	r2, [r4, #0]
 80005ba:	8833      	ldrh	r3, [r6, #0]
 80005bc:	4013      	ands	r3, r2
 80005be:	0518      	lsls	r0, r3, #20
 80005c0:	d504      	bpl.n	80005cc <USB_LP_CAN1_RX0_IRQHandler+0x5c>

        /* check if SUSPEND is possible */
        if (F_SUSPEND_ENABLED) {
            usbSuspend();
 80005c2:	f7ff ff11 	bl	80003e8 <usbSuspend>
        } else {
            /* if not possible then resume after xx ms */
            usbResume(RESUME_LATER);
        }
        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
        _SetISTR((u16)CLR_SUSP);
 80005c6:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80005ca:	602b      	str	r3, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 80005cc:	8822      	ldrh	r2, [r4, #0]
 80005ce:	8833      	ldrh	r3, [r6, #0]
 80005d0:	401a      	ands	r2, r3
 80005d2:	0591      	lsls	r1, r2, #22
 80005d4:	d507      	bpl.n	80005e6 <USB_LP_CAN1_RX0_IRQHandler+0x76>
        _SetISTR((u16)CLR_SOF);
 80005d6:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 80005da:	602a      	str	r2, [r5, #0]
        bIntPackSOF++;
 80005dc:	4a10      	ldr	r2, [pc, #64]	; (8000620 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 80005de:	7811      	ldrb	r1, [r2, #0]
 80005e0:	3101      	adds	r1, #1
 80005e2:	b2c9      	uxtb	r1, r1
 80005e4:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 80005e6:	8822      	ldrh	r2, [r4, #0]
 80005e8:	4013      	ands	r3, r2
 80005ea:	05da      	lsls	r2, r3, #23
 80005ec:	d505      	bpl.n	80005fa <USB_LP_CAN1_RX0_IRQHandler+0x8a>
        _SetISTR((u16)CLR_ESOF);
 80005ee:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80005f2:	602b      	str	r3, [r5, #0]
        /* resume handling timing is made with ESOFs */
        usbResume(RESUME_ESOF); /* request without change of the machine state */
 80005f4:	2007      	movs	r0, #7
 80005f6:	f7ff ff11 	bl	800041c <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 80005fa:	8822      	ldrh	r2, [r4, #0]
 80005fc:	8833      	ldrh	r3, [r6, #0]
 80005fe:	4013      	ands	r3, r2
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	d503      	bpl.n	800060c <USB_LP_CAN1_RX0_IRQHandler+0x9c>
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
    }
#endif

}
 8000604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8000608:	f000 bc6e 	b.w	8000ee8 <CTR_LP>
 800060c:	bd70      	pop	{r4, r5, r6, pc}
 800060e:	bf00      	nop
 8000610:	40005c44 	andmi	r5, r0, r4, asr #24
 8000614:	200002cc 	andcs	r0, r0, ip, asr #5
 8000618:	20000308 	andcs	r0, r0, r8, lsl #6
 800061c:	20000000 	andcs	r0, r0, r0
 8000620:	2000030c 	andcs	r0, r0, ip, lsl #6

08000624 <main>:
#include "common.h"
#include "dfu.h"
extern volatile dfuUploadTypes_t userUploadType;

int main() 
{
 8000624:	b537      	push	{r0, r1, r2, r4, r5, lr}
    systemReset(); // peripherals but not PC
 8000626:	f000 f88f 	bl	8000748 <systemReset>
    setupCLK();
 800062a:	f000 f8b1 	bl	8000790 <setupCLK>
    setupLEDAndButton();
 800062e:	f000 f8df 	bl	80007f0 <setupLEDAndButton>
    setupUSB();
 8000632:	f7ff fe9d 	bl	8000370 <setupUSB>
    setupFLASH();
 8000636:	f000 f8e5 	bl	8000804 <setupFLASH>
	
//	strobePin(LED_BANK, LED_PIN, 9999, BLINK_SLOW,LED_ON_STATE);
	
	strobePin(LED_BANK, LED_PIN, STARTUP_BLINKS, BLINK_FAST,LED_ON_STATE);
 800063a:	2300      	movs	r3, #0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4824      	ldr	r0, [pc, #144]	; (80006d0 <main+0xac>)
 8000640:	210d      	movs	r1, #13
 8000642:	2205      	movs	r2, #5
 8000644:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000648:	f000 f855 	bl	80006f6 <strobePin>


	/* wait for host to upload program or halt bootloader */
	bool no_user_jump = (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000)) || readButtonState() ;
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <main+0xb0>)
 800064e:	f000 f8e7 	bl	8000820 <checkUserCode>
 8000652:	b128      	cbz	r0, 8000660 <main+0x3c>
 8000654:	f000 f84d 	bl	80006f2 <readButtonState>
 8000658:	3000      	adds	r0, #0
 800065a:	bf18      	it	ne
 800065c:	2001      	movne	r0, #1
 800065e:	e005      	b.n	800066c <main+0x48>
 8000660:	481d      	ldr	r0, [pc, #116]	; (80006d8 <main+0xb4>)
 8000662:	f000 f8dd 	bl	8000820 <checkUserCode>
 8000666:	2800      	cmp	r0, #0
 8000668:	d1f4      	bne.n	8000654 <main+0x30>
 800066a:	2001      	movs	r0, #1
 800066c:	b2c5      	uxtb	r5, r0
	
	int delay_count = 0;

    while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 800066e:	2400      	movs	r4, #0
 8000670:	2c05      	cmp	r4, #5
 8000672:	dc0f      	bgt.n	8000694 <main+0x70>
	{

        strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 8000674:	2300      	movs	r3, #0
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4815      	ldr	r0, [pc, #84]	; (80006d0 <main+0xac>)
 800067a:	210d      	movs	r1, #13
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000682:	f000 f838 	bl	80006f6 <strobePin>

        if (dfuUploadStarted()) 
 8000686:	f000 fb8b 	bl	8000da0 <dfuUploadStarted>
 800068a:	b108      	cbz	r0, 8000690 <main+0x6c>
		{
            dfuFinishUpload(); // systemHardReset from DFU once done
 800068c:	f000 fb8e 	bl	8000dac <dfuFinishUpload>
 8000690:	3401      	adds	r4, #1
 8000692:	e7ed      	b.n	8000670 <main+0x4c>
	/* wait for host to upload program or halt bootloader */
	bool no_user_jump = (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000)) || readButtonState() ;
	
	int delay_count = 0;

    while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 8000694:	2d00      	cmp	r5, #0
 8000696:	d1ed      	bne.n	8000674 <main+0x50>
            dfuFinishUpload(); // systemHardReset from DFU once done
        }
    }


	if (checkUserCode(USER_CODE_FLASH0X8002000)) 
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <main+0xb4>)
 800069a:	f000 f8c1 	bl	8000820 <checkUserCode>
 800069e:	b108      	cbz	r0, 80006a4 <main+0x80>
	{
		jumpToUser(USER_CODE_FLASH0X8002000);
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <main+0xb4>)
 80006a2:	e004      	b.n	80006ae <main+0x8a>
	} 
	else 
	{
		if (checkUserCode(USER_CODE_FLASH0X8005000))
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <main+0xb0>)
 80006a6:	f000 f8bb 	bl	8000820 <checkUserCode>
 80006aa:	b118      	cbz	r0, 80006b4 <main+0x90>
		{
			jumpToUser(USER_CODE_FLASH0X8005000);
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <main+0xb0>)
 80006ae:	f000 f909 	bl	80008c4 <jumpToUser>
 80006b2:	e009      	b.n	80006c8 <main+0xa4>
		} 
		else
		{
			// Nothing to execute in either Flash or RAM
			strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 80006b4:	4806      	ldr	r0, [pc, #24]	; (80006d0 <main+0xac>)
 80006b6:	210d      	movs	r1, #13
 80006b8:	2205      	movs	r2, #5
 80006ba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006be:	9500      	str	r5, [sp, #0]
 80006c0:	f000 f819 	bl	80006f6 <strobePin>
			systemHardReset();
 80006c4:	f000 f914 	bl	80008f0 <systemHardReset>
		}
	}

	return 0;// Added to please the compiler
 80006c8:	2000      	movs	r0, #0
 80006ca:	b003      	add	sp, #12
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	bf00      	nop
 80006d0:	40011000 	andmi	r1, r1, r0
 80006d4:	08005000 	stmdaeq	r0, {ip, lr}
 80006d8:	08002000 	stmdaeq	r0, {sp}

080006dc <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80006dc:	2301      	movs	r3, #1
 80006de:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
 80006e2:	f1d2 0201 	rsbs	r2, r2, #1
 80006e6:	bf38      	it	cc
 80006e8:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80006ea:	0113      	lsls	r3, r2, #4
 80006ec:	4099      	lsls	r1, r3
 80006ee:	6101      	str	r1, [r0, #16]
 80006f0:	4770      	bx	lr

080006f2 <readButtonState>:
	{
		state=!state;
	}
#endif
	return state;
}
 80006f2:	2000      	movs	r0, #0
 80006f4:	4770      	bx	lr

080006f6 <strobePin>:

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 80006f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006fa:	f89d a020 	ldrb.w	sl, [sp, #32]
 80006fe:	4614      	mov	r4, r2
    gpio_write_bit( bank,pin,1-onState);
 8000700:	f1ca 0701 	rsb	r7, sl, #1
 8000704:	b2ff      	uxtb	r7, r7
 8000706:	463a      	mov	r2, r7
#endif
	return state;
}

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 8000708:	4680      	mov	r8, r0
 800070a:	4689      	mov	r9, r1
 800070c:	461e      	mov	r6, r3
    gpio_write_bit( bank,pin,1-onState);
 800070e:	f7ff ffe5 	bl	80006dc <gpio_write_bit>

    u32 c;
    while (count-- > 0) 
 8000712:	b1b4      	cbz	r4, 8000742 <strobePin+0x4c>
 8000714:	4635      	mov	r5, r6
	{
        for (c = rate; c > 0; c--)
 8000716:	b115      	cbz	r5, 800071e <strobePin+0x28>
		{
            asm volatile("nop");
 8000718:	bf00      	nop
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
	{
        for (c = rate; c > 0; c--)
 800071a:	3d01      	subs	r5, #1
 800071c:	e7fb      	b.n	8000716 <strobePin+0x20>
		{
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
 800071e:	4640      	mov	r0, r8
 8000720:	4649      	mov	r1, r9
 8000722:	4652      	mov	r2, sl
 8000724:	f7ff ffda 	bl	80006dc <gpio_write_bit>
		
        for (c = rate; c > 0; c--)
 8000728:	4635      	mov	r5, r6
 800072a:	b115      	cbz	r5, 8000732 <strobePin+0x3c>
		{
            asm volatile("nop");
 800072c:	bf00      	nop
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
		
        for (c = rate; c > 0; c--)
 800072e:	3d01      	subs	r5, #1
 8000730:	e7fb      	b.n	800072a <strobePin+0x34>
		{
            asm volatile("nop");
        }
        gpio_write_bit( bank,pin,1-onState);
 8000732:	4640      	mov	r0, r8
 8000734:	4649      	mov	r1, r9
 8000736:	463a      	mov	r2, r7
 8000738:	3c01      	subs	r4, #1
 800073a:	f7ff ffcf 	bl	80006dc <gpio_write_bit>
 800073e:	b2e4      	uxtb	r4, r4
 8000740:	e7e7      	b.n	8000712 <strobePin+0x1c>
 8000742:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08000748 <systemReset>:
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000748:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <systemReset+0x38>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 800074a:	490e      	ldr	r1, [pc, #56]	; (8000784 <systemReset+0x3c>)
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	f042 0201 	orr.w	r2, r2, #1
 8000752:	601a      	str	r2, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8000754:	4a0c      	ldr	r2, [pc, #48]	; (8000788 <systemReset+0x40>)
 8000756:	6810      	ldr	r0, [r2, #0]
 8000758:	4001      	ands	r1, r0
 800075a:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 800075c:	6819      	ldr	r1, [r3, #0]
 800075e:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 8000762:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000766:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 8000768:	6819      	ldr	r1, [r3, #0]
 800076a:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800076e:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 8000770:	6813      	ldr	r3, [r2, #0]
 8000772:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000776:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8000778:	4b04      	ldr	r3, [pc, #16]	; (800078c <systemReset+0x44>)
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	4770      	bx	lr
 8000780:	40021000 	andmi	r1, r2, r0
 8000784:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8000788:	40021004 	andmi	r1, r2, r4
 800078c:	40021008 	andmi	r1, r2, r8

08000790 <setupCLK>:
}

void setupCLK(void) {
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 8000790:	4b15      	ldr	r3, [pc, #84]	; (80007e8 <setupCLK+0x58>)
 8000792:	681a      	ldr	r2, [r3, #0]
 8000794:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 8000798:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	4812      	ldr	r0, [pc, #72]	; (80007e8 <setupCLK+0x58>)
 800079e:	0392      	lsls	r2, r2, #14
 80007a0:	d5fb      	bpl.n	800079a <setupCLK+0xa>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 80007a2:	4a12      	ldr	r2, [pc, #72]	; (80007ec <setupCLK+0x5c>)
 80007a4:	2112      	movs	r1, #18
 80007a6:	6011      	str	r1, [r2, #0]
#define PLLMF 10 
#define PLLMF_SHIFT 18
#define USBPS 0B10
#define USBPS_SHIFT 22

    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | (USBPS<< USBPS_SHIFT) | (PLLMF-2)<<PLLMF_SHIFT |  (PLLSEL<<PLLSEL_SHIFT) |  (APB1PS<<APB1PS_SHIFT) );// 0x001D0400); /* pll=108Mhz,APB1=36Mhz,AHB=72Mhz */
 80007a8:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
 80007ac:	6811      	ldr	r1, [r2, #0]
 80007ae:	f441 0121 	orr.w	r1, r1, #10551296	; 0xa10000
 80007b2:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80007b6:	6011      	str	r1, [r2, #0]
 //   SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0B100111010000010000000000);
//									    987654321098765432109876543210							
   SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 80007b8:	6801      	ldr	r1, [r0, #0]
 80007ba:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80007be:	6001      	str	r1, [r0, #0]
    while ((GET_REG(RCC_CR) & 0x03000000) == 0);         /* wait for it to come on */
 80007c0:	6819      	ldr	r1, [r3, #0]
 80007c2:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
 80007c6:	d0fb      	beq.n	80007c0 <setupCLK+0x30>

    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80007c8:	6811      	ldr	r1, [r2, #0]
 80007ca:	f041 0102 	orr.w	r1, r1, #2
 80007ce:	6011      	str	r1, [r2, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80007d0:	6811      	ldr	r1, [r2, #0]
 80007d2:	0709      	lsls	r1, r1, #28
 80007d4:	d5fc      	bpl.n	80007d0 <setupCLK+0x40>
	
    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80007d6:	699a      	ldr	r2, [r3, #24]
 80007d8:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80007dc:	619a      	str	r2, [r3, #24]
	pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80007de:	69da      	ldr	r2, [r3, #28]
 80007e0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007e4:	61da      	str	r2, [r3, #28]
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	andmi	r1, r2, r0
 80007ec:	40022000 	andmi	r2, r2, r0

080007f0 <setupLEDAndButton>:
 #if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
  SET_REG(GPIO_CR(BUTTON_BANK,BUTTON_PIN),(GPIO_CR(BUTTON_BANK,BUTTON_PIN) & crMask(BUTTON_PIN)) | CR_INPUT_PU_PD << CR_SHITF(BUTTON_PIN));
  
  gpio_write_bit(BUTTON_BANK, BUTTON_PIN,1-BUTTON_PRESSED_STATE);// set pulldown resistor in case there is no button.
 #endif
  SET_REG(GPIO_CR(LED_BANK,LED_PIN),(GET_REG(GPIO_CR(LED_BANK,LED_PIN)) & crMask(LED_PIN)) | CR_OUTPUT_PP << CR_SHITF(LED_PIN));
 80007f0:	4b03      	ldr	r3, [pc, #12]	; (8000800 <setupLEDAndButton+0x10>)
 80007f2:	681a      	ldr	r2, [r3, #0]
 80007f4:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80007f8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	4770      	bx	lr
 8000800:	40011004 	andmi	r1, r1, r4

08000804 <setupFLASH>:
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 8000804:	4b05      	ldr	r3, [pc, #20]	; (800081c <setupFLASH+0x18>)
 8000806:	681a      	ldr	r2, [r3, #0]
 8000808:	07d1      	lsls	r1, r2, #31
 800080a:	d403      	bmi.n	8000814 <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 800080c:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 800080e:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 8000812:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	0792      	lsls	r2, r2, #30
 8000818:	d5fc      	bpl.n	8000814 <setupFLASH+0x10>
}
 800081a:	4770      	bx	lr
 800081c:	40021000 	andmi	r1, r2, r0

08000820 <checkUserCode>:

bool checkUserCode(u32 usrAddr) {
    u32 sp = *(vu32 *) usrAddr;
 8000820:	6803      	ldr	r3, [r0, #0]

    if ((sp & 0x2FFE0000) == 0x20000000) {
 8000822:	4803      	ldr	r0, [pc, #12]	; (8000830 <checkUserCode+0x10>)
 8000824:	4018      	ands	r0, r3
        return (TRUE);
    } else {
        return (FALSE);
    }
}
 8000826:	f1b0 5300 	subs.w	r3, r0, #536870912	; 0x20000000
 800082a:	4258      	negs	r0, r3
 800082c:	4158      	adcs	r0, r3
 800082e:	4770      	bx	lr
 8000830:	2ffe0000 	svccs	0x00fe0000

08000834 <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8000834:	4b18      	ldr	r3, [pc, #96]	; (8000898 <nvicInit+0x64>)
    __MSR_MSP(*(vu32 *) usrAddr);             /* set the users stack ptr */

    usrMain();                                /* go! */
}

void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 8000836:	b530      	push	{r4, r5, lr}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8000838:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800083a:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 800083c:	43db      	mvns	r3, r3
 800083e:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000842:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000846:	fa04 f202 	lsl.w	r2, r4, r2


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 800084a:	240f      	movs	r4, #15
 800084c:	40dc      	lsrs	r4, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800084e:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000850:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000852:	400c      	ands	r4, r1
 8000854:	4314      	orrs	r4, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000856:	f003 0103 	and.w	r1, r3, #3
 800085a:	00c9      	lsls	r1, r1, #3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 800085c:	0124      	lsls	r4, r4, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800085e:	22ff      	movs	r2, #255	; 0xff

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000860:	408c      	lsls	r4, r1

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000862:	408a      	lsls	r2, r1
 8000864:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8000868:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800086c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8000870:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8000874:	ea25 0102 	bic.w	r1, r5, r2
    tmppriority &= tmpmask;
 8000878:	4022      	ands	r2, r4
    tmpreg |= tmppriority;
 800087a:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 800087c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000880:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000882:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 8000884:	0959      	lsrs	r1, r3, #5
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 8000886:	f003 031f 	and.w	r3, r3, #31
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 800088e:	4a03      	ldr	r2, [pc, #12]	; (800089c <nvicInit+0x68>)
 8000890:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8000894:	bd30      	pop	{r4, r5, pc}
 8000896:	bf00      	nop
 8000898:	e000ed00 	and	lr, r0, r0, lsl #26
 800089c:	e000e100 	and	lr, r0, r0, lsl #2

080008a0 <nvicDisableInterrupts>:
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80008a0:	4b07      	ldr	r3, [pc, #28]	; (80008c0 <nvicDisableInterrupts+0x20>)
 80008a2:	f04f 32ff 	mov.w	r2, #4294967295
 80008a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 80008aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 80008ae:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 80008b2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 80008b6:	2204      	movs	r2, #4
 80008b8:	f843 2cf0 	str.w	r2, [r3, #-240]
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	e000e100 	and	lr, r0, r0, lsl #2

080008c4 <jumpToUser>:
    } else {
        return (FALSE);
    }
}

void jumpToUser(u32 usrAddr) {
 80008c4:	b538      	push	{r3, r4, r5, lr}

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <jumpToUser+0x28>)
 80008c8:	2280      	movs	r2, #128	; 0x80
}

void jumpToUser(u32 usrAddr) {
    typedef void (*funcPtr)(void);

    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 80008ca:	6845      	ldr	r5, [r0, #4]
    } else {
        return (FALSE);
    }
}

void jumpToUser(u32 usrAddr) {
 80008cc:	4604      	mov	r4, r0

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80008ce:	601a      	str	r2, [r3, #0]

    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative
    flashLock();
    usbDsbISR();
 80008d0:	f7ff fe3c 	bl	800054c <usbDsbISR>
    nvicDisableInterrupts();
 80008d4:	f7ff ffe4 	bl	80008a0 <nvicDisableInterrupts>
	
#ifndef HAS_MAPLE_HARDWARE	
	usbDsbBus();
 80008d8:	f7ff fe04 	bl	80004e4 <usbDsbBus>
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
 80008dc:	f7ff ff34 	bl	8000748 <systemReset>


    __MSR_MSP(*(vu32 *) usrAddr);             /* set the users stack ptr */
 80008e0:	6820      	ldr	r0, [r4, #0]
 80008e2:	f7ff fc27 	bl	8000134 <__MSR_MSP>

    usrMain();                                /* go! */
 80008e6:	47a8      	blx	r5
 80008e8:	bd38      	pop	{r3, r4, r5, pc}
 80008ea:	bf00      	nop
 80008ec:	40022010 	andmi	r2, r2, r0, lsl r0

080008f0 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 80008f0:	4a02      	ldr	r2, [pc, #8]	; (80008fc <systemHardReset+0xc>)
 80008f2:	4b03      	ldr	r3, [pc, #12]	; (8000900 <systemHardReset+0x10>)
 80008f4:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 80008f6:	bf00      	nop
 80008f8:	e7fd      	b.n	80008f6 <systemHardReset+0x6>
 80008fa:	bf00      	nop
 80008fc:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8000900:	e000ed00 	and	lr, r0, r0, lsl #26

08000904 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <flashErasePage+0x2c>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 8000906:	b510      	push	{r4, lr}
    u32 rwmVal = GET_REG(FLASH_CR);
 8000908:	681a      	ldr	r2, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800090a:	2202      	movs	r2, #2
 800090c:	601a      	str	r2, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800090e:	4a09      	ldr	r2, [pc, #36]	; (8000934 <flashErasePage+0x30>)
 8000910:	6811      	ldr	r1, [r2, #0]
 8000912:	4614      	mov	r4, r2
 8000914:	f011 0f01 	tst.w	r1, #1
 8000918:	d1f9      	bne.n	800090e <flashErasePage+0xa>
    SET_REG(FLASH_AR, pageAddr);
 800091a:	6090      	str	r0, [r2, #8]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 800091c:	2242      	movs	r2, #66	; 0x42
 800091e:	601a      	str	r2, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8000920:	6822      	ldr	r2, [r4, #0]
 8000922:	f012 0101 	ands.w	r1, r2, #1
 8000926:	d1fb      	bne.n	8000920 <flashErasePage+0x1c>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 8000928:	6019      	str	r1, [r3, #0]

    return TRUE;
}
 800092a:	2001      	movs	r0, #1
 800092c:	bd10      	pop	{r4, pc}
 800092e:	bf00      	nop
 8000930:	40022010 	andmi	r2, r2, r0, lsl r0
 8000934:	4002200c 	andmi	r2, r2, ip

08000938 <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 8000938:	b537      	push	{r0, r1, r2, r4, r5, lr}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 800093a:	b28b      	uxth	r3, r1
 800093c:	9300      	str	r3, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 800093e:	0c0b      	lsrs	r3, r1, #16
 8000940:	9301      	str	r3, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <flashWriteWord+0x44>)
    SET_REG(FLASH_CR, FLASH_CR_PG);
 8000944:	2201      	movs	r2, #1
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 8000946:	681c      	ldr	r4, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 8000948:	601a      	str	r2, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <flashWriteWord+0x48>)
 800094c:	6815      	ldr	r5, [r2, #0]
 800094e:	07ed      	lsls	r5, r5, #31
 8000950:	d4fb      	bmi.n	800094a <flashWriteWord+0x12>
    *(flashAddr + 0x01) = (vu16)hhWord;
 8000952:	9d01      	ldr	r5, [sp, #4]
 8000954:	b2ad      	uxth	r5, r5
 8000956:	8045      	strh	r5, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8000958:	6815      	ldr	r5, [r2, #0]
 800095a:	07ed      	lsls	r5, r5, #31
 800095c:	d4fc      	bmi.n	8000958 <flashWriteWord+0x20>
    *(flashAddr) = (vu16)lhWord;
 800095e:	9d00      	ldr	r5, [sp, #0]
 8000960:	b2ad      	uxth	r5, r5
 8000962:	8005      	strh	r5, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8000964:	6815      	ldr	r5, [r2, #0]
 8000966:	07ed      	lsls	r5, r5, #31
 8000968:	d4fc      	bmi.n	8000964 <flashWriteWord+0x2c>

    rwmVal &= 0xFFFFFFFE;
 800096a:	f024 0201 	bic.w	r2, r4, #1
    SET_REG(FLASH_CR, rwmVal);
 800096e:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 8000970:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 8000972:	1a43      	subs	r3, r0, r1
 8000974:	4258      	negs	r0, r3
 8000976:	4158      	adcs	r0, r3
 8000978:	b003      	add	sp, #12
 800097a:	bd30      	pop	{r4, r5, pc}
 800097c:	40022010 	andmi	r2, r2, r0, lsl r0
 8000980:	4002200c 	andmi	r2, r2, ip

08000984 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 8000984:	4b01      	ldr	r3, [pc, #4]	; (800098c <flashLock+0x8>)
 8000986:	2280      	movs	r2, #128	; 0x80
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	4770      	bx	lr
 800098c:	40022010 	andmi	r2, r2, r0, lsl r0

08000990 <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 8000990:	4b03      	ldr	r3, [pc, #12]	; (80009a0 <flashUnlock+0x10>)
 8000992:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <flashUnlock+0x14>)
 8000994:	601a      	str	r2, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 8000996:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	40022004 	andmi	r2, r2, r4
 80009a4:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

080009a8 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
	unsigned int mask;
	if (pin>=8)
 80009a8:	2807      	cmp	r0, #7
	{
		pin-=8;
 80009aa:	bfc8      	it	gt
 80009ac:	3808      	subgt	r0, #8
	}
	mask = 0x0F << (pin<<2);
 80009ae:	230f      	movs	r3, #15
 80009b0:	0080      	lsls	r0, r0, #2
 80009b2:	fa03 f000 	lsl.w	r0, r3, r0
	return ~mask;
}	
 80009b6:	43c0      	mvns	r0, r0
 80009b8:	4770      	bx	lr
	...

080009bc <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 80009bc:	4b02      	ldr	r3, [pc, #8]	; (80009c8 <getFlashEnd+0xc>)
 80009be:	8818      	ldrh	r0, [r3, #0]
 80009c0:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 80009c4:	0280      	lsls	r0, r0, #10
 80009c6:	4770      	bx	lr
 80009c8:	1ffff7e0 	svcne	0x00fff7e0

080009cc <getFlashPageSize>:

int getFlashPageSize(void)
{

	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	if ((*flashSize & 0xffff) > 128)
 80009cc:	4b04      	ldr	r3, [pc, #16]	; (80009e0 <getFlashPageSize+0x14>)
 80009ce:	881b      	ldrh	r3, [r3, #0]
	{
		return 0x800;
 80009d0:	2b81      	cmp	r3, #129	; 0x81
	}
	else
	{
		return 0x400;
	}
}
 80009d2:	bf34      	ite	cc
 80009d4:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 80009d8:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	1ffff7e0 	svcne	0x00fff7e0

080009e4 <dfuInit>:

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <dfuInit+0x38>)
 80009e6:	2300      	movs	r3, #0
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 80009e8:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 80009ea:	7013      	strb	r3, [r2, #0]
    dfuAppStatus.bwPollTimeout0 = 0x00;
 80009ec:	7053      	strb	r3, [r2, #1]
    dfuAppStatus.bwPollTimeout1 = 0x00;
 80009ee:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 80009f0:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 80009f2:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 80009f4:	7153      	strb	r3, [r2, #5]
    userFirmwareLen = 0;
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <dfuInit+0x3c>)
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 80009f8:	490a      	ldr	r1, [pc, #40]	; (8000a24 <dfuInit+0x40>)
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 80009fa:	6013      	str	r3, [r2, #0]
    thisBlockLen = 0;;
 80009fc:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <dfuInit+0x44>)
 80009fe:	8013      	strh	r3, [r2, #0]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000a00:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <dfuInit+0x48>)
 8000a02:	6011      	str	r1, [r2, #0]
    userAppEnd = RAM_END;
 8000a04:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <dfuInit+0x4c>)
 8000a06:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 8000a0a:	6011      	str	r1, [r2, #0]
    userUploadType=DFU_UPLOAD_NONE;
 8000a0c:	4a09      	ldr	r2, [pc, #36]	; (8000a34 <dfuInit+0x50>)
    code_copy_lock = WAIT;
 8000a0e:	2103      	movs	r1, #3
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 8000a10:	7013      	strb	r3, [r2, #0]
    code_copy_lock = WAIT;
 8000a12:	4a09      	ldr	r2, [pc, #36]	; (8000a38 <dfuInit+0x54>)
 8000a14:	7011      	strb	r1, [r2, #0]
    dfuBusy = FALSE;
 8000a16:	4a09      	ldr	r2, [pc, #36]	; (8000a3c <dfuInit+0x58>)
 8000a18:	7013      	strb	r3, [r2, #0]
 8000a1a:	4770      	bx	lr
 8000a1c:	20000b1d 	andcs	r0, r0, sp, lsl fp
 8000a20:	20000b18 	andcs	r0, r0, r8, lsl fp
 8000a24:	20000c00 	andcs	r0, r0, r0, lsl #24
 8000a28:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000a2c:	200002c4 	andcs	r0, r0, r4, asr #5
 8000a30:	200002c0 	andcs	r0, r0, r0, asr #5
 8000a34:	20000b1c 	andcs	r0, r0, ip, lsl fp
 8000a38:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8000a3c:	20000b23 	andcs	r0, r0, r3, lsr #22

08000a40 <dfuUpdateByReset>:
    } else {
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
 8000a40:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	; (8000a7c <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 8000a44:	480e      	ldr	r0, [pc, #56]	; (8000a80 <dfuUpdateByReset+0x40>)
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8000a46:	7919      	ldrb	r1, [r3, #4]
    userFirmwareLen = 0;
 8000a48:	2200      	movs	r2, #0
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8000a4a:	b2c9      	uxtb	r1, r1
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 8000a4c:	2901      	cmp	r1, #1
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 8000a4e:	6002      	str	r2, [r0, #0]

    if (startState == appDETACH) {
 8000a50:	d108      	bne.n	8000a64 <dfuUpdateByReset+0x24>
        dfuAppStatus.bState = dfuIDLE;
 8000a52:	2102      	movs	r1, #2
 8000a54:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 8000a56:	701a      	strb	r2, [r3, #0]

        nvicDisableInterrupts();
 8000a58:	f7ff ff22 	bl	80008a0 <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 8000a5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 8000a60:	f7ff bd42 	b.w	80004e8 <usbEnbISR>

    } else if (startState == appIDLE || startState == dfuIDLE) {
 8000a64:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8000a68:	d006      	beq.n	8000a78 <dfuUpdateByReset+0x38>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 8000a6a:	2102      	movs	r1, #2
 8000a6c:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 8000a6e:	701a      	strb	r2, [r3, #0]

        systemHardReset();
    }
}
 8000a70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 8000a74:	f7ff bf3c 	b.w	80008f0 <systemHardReset>
 8000a78:	bd08      	pop	{r3, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000b1d 	andcs	r0, r0, sp, lsl fp
 8000a80:	20000b18 	andcs	r0, r0, r8, lsl fp

08000a84 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 8000a84:	b920      	cbnz	r0, 8000a90 <dfuCopyState+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 1;
 8000a86:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <dfuCopyState+0x10>)
 8000a88:	2201      	movs	r2, #1
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000a8e:	4770      	bx	lr
    } else {
        return (&(dfuAppStatus.bState));
 8000a90:	4801      	ldr	r0, [pc, #4]	; (8000a98 <dfuCopyState+0x14>)
    }
}
 8000a92:	4770      	bx	lr
 8000a94:	20000304 	andcs	r0, r0, r4, lsl #6
 8000a98:	20000b21 	andcs	r0, r0, r1, lsr #22

08000a9c <dfuCopyStatus>:

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 8000a9c:	b920      	cbnz	r0, 8000aa8 <dfuCopyStatus+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 6;
 8000a9e:	4b03      	ldr	r3, [pc, #12]	; (8000aac <dfuCopyStatus+0x10>)
 8000aa0:	2206      	movs	r2, #6
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000aa6:	4770      	bx	lr
    } else {
        return (u8*)(&dfuAppStatus);
 8000aa8:	4801      	ldr	r0, [pc, #4]	; (8000ab0 <dfuCopyStatus+0x14>)
    }
}
 8000aaa:	4770      	bx	lr
 8000aac:	20000304 	andcs	r0, r0, r4, lsl #6
 8000ab0:	20000b1d 	andcs	r0, r0, sp, lsl fp

08000ab4 <dfuCopyDNLOAD>:


u8 *dfuCopyDNLOAD(u16 length) {
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <dfuCopyDNLOAD+0x1c>)
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000ab6:	681b      	ldr	r3, [r3, #0]
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8000ab8:	b930      	cbnz	r0, 8000ac8 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000aba:	88da      	ldrh	r2, [r3, #6]
 8000abc:	8a59      	ldrh	r1, [r3, #18]
 8000abe:	1a51      	subs	r1, r2, r1
 8000ac0:	8219      	strh	r1, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
 8000ac2:	4b04      	ldr	r3, [pc, #16]	; (8000ad4 <dfuCopyDNLOAD+0x20>)
 8000ac4:	801a      	strh	r2, [r3, #0]
        return NULL;
 8000ac6:	4770      	bx	lr
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8000ac8:	8a5b      	ldrh	r3, [r3, #18]
 8000aca:	4803      	ldr	r0, [pc, #12]	; (8000ad8 <dfuCopyDNLOAD+0x24>)
 8000acc:	4418      	add	r0, r3
    }
}
 8000ace:	4770      	bx	lr
 8000ad0:	20000304 	andcs	r0, r0, r4, lsl #6
 8000ad4:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000ad8:	20000314 	andcs	r0, r0, r4, lsl r3

08000adc <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <dfuCopyUPLOAD+0x24>)
    if (length == 0) {
 8000ade:	b930      	cbnz	r0, 8000aee <dfuCopyUPLOAD+0x12>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a08      	ldr	r2, [pc, #32]	; (8000b04 <dfuCopyUPLOAD+0x28>)
 8000ae4:	8811      	ldrh	r1, [r2, #0]
 8000ae6:	8a5a      	ldrh	r2, [r3, #18]
 8000ae8:	1a8a      	subs	r2, r1, r2
 8000aea:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000aec:	4770      	bx	lr
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8000aee:	4906      	ldr	r1, [pc, #24]	; (8000b08 <dfuCopyUPLOAD+0x2c>)
 8000af0:	4a06      	ldr	r2, [pc, #24]	; (8000b0c <dfuCopyUPLOAD+0x30>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	6812      	ldr	r2, [r2, #0]
 8000af6:	6808      	ldr	r0, [r1, #0]
 8000af8:	8a5b      	ldrh	r3, [r3, #18]
 8000afa:	4410      	add	r0, r2
 8000afc:	4418      	add	r0, r3
    }
}
 8000afe:	4770      	bx	lr
 8000b00:	20000304 	andcs	r0, r0, r4, lsl #6
 8000b04:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000b08:	200002c4 	andcs	r0, r0, r4, asr #5
 8000b0c:	20000b18 	andcs	r0, r0, r8, lsl fp

08000b10 <dfuCopyBufferToExec>:

void dfuCopyBufferToExec() {
 8000b10:	b570      	push	{r4, r5, r6, lr}
        }
    } 
	else 
*/
	{
		if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000b12:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <dfuCopyBufferToExec+0x4c>)
 8000b14:	4e12      	ldr	r6, [pc, #72]	; (8000b60 <dfuCopyBufferToExec+0x50>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
		{
			userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000b18:	6834      	ldr	r4, [r6, #0]
        }
    } 
	else 
*/
	{
		if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000b1a:	2b02      	cmp	r3, #2
		{
			userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000b1c:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 8000b20:	bf0c      	ite	eq
 8000b22:	f504 44a0 	addeq.w	r4, r4, #20480	; 0x5000
		}
		else
		{
			userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
 8000b26:	f504 5400 	addne.w	r4, r4, #8192	; 0x2000
		}

        flashErasePage((u32)(userSpace));
 8000b2a:	4620      	mov	r0, r4
 8000b2c:	f7ff feea 	bl	8000904 <flashErasePage>

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000b30:	2500      	movs	r5, #0
 8000b32:	4b0c      	ldr	r3, [pc, #48]	; (8000b64 <dfuCopyBufferToExec+0x54>)
 8000b34:	881a      	ldrh	r2, [r3, #0]
 8000b36:	b292      	uxth	r2, r2
 8000b38:	4295      	cmp	r5, r2
 8000b3a:	da06      	bge.n	8000b4a <dfuCopyBufferToExec+0x3a>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <dfuCopyBufferToExec+0x58>)
 8000b3e:	1960      	adds	r0, r4, r5
 8000b40:	58e9      	ldr	r1, [r5, r3]
 8000b42:	f7ff fef9 	bl	8000938 <flashWriteWord>
			userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
		}

        flashErasePage((u32)(userSpace));

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000b46:	3504      	adds	r5, #4
 8000b48:	e7f3      	b.n	8000b32 <dfuCopyBufferToExec+0x22>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
        }

    }
    userFirmwareLen += thisBlockLen;
 8000b4a:	6831      	ldr	r1, [r6, #0]
 8000b4c:	881a      	ldrh	r2, [r3, #0]
 8000b4e:	b292      	uxth	r2, r2
 8000b50:	440a      	add	r2, r1
 8000b52:	6032      	str	r2, [r6, #0]

    thisBlockLen = 0;
 8000b54:	2200      	movs	r2, #0
 8000b56:	801a      	strh	r2, [r3, #0]
 8000b58:	bd70      	pop	{r4, r5, r6, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000b1c 	andcs	r0, r0, ip, lsl fp
 8000b60:	20000b18 	andcs	r0, r0, r8, lsl fp
 8000b64:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000b68:	20000314 	andcs	r0, r0, r4, lsl r3

08000b6c <dfuUpdateByRequest>:
}




bool dfuUpdateByRequest(void) {
 8000b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b70:	497f      	ldr	r1, [pc, #508]	; (8000d70 <dfuUpdateByRequest+0x204>)
	


    u8 startState = dfuAppStatus.bState;
 8000b72:	4c80      	ldr	r4, [pc, #512]	; (8000d74 <dfuUpdateByRequest+0x208>)


bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b74:	2001      	movs	r0, #1
 8000b76:	7008      	strb	r0, [r1, #0]
	


    u8 startState = dfuAppStatus.bState;
 8000b78:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 8000b7a:	2200      	movs	r2, #0
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
	


    u8 startState = dfuAppStatus.bState;
 8000b7c:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000b7e:	2b02      	cmp	r3, #2
    dfuBusy = TRUE;
	


    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 8000b80:	7022      	strb	r2, [r4, #0]
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000b82:	d156      	bne.n	8000c32 <dfuUpdateByRequest+0xc6>
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 8000b84:	7008      	strb	r0, [r1, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000b86:	497c      	ldr	r1, [pc, #496]	; (8000d78 <dfuUpdateByRequest+0x20c>)
 8000b88:	6809      	ldr	r1, [r1, #0]
 8000b8a:	7848      	ldrb	r0, [r1, #1]
 8000b8c:	2801      	cmp	r0, #1
 8000b8e:	d126      	bne.n	8000bde <dfuUpdateByRequest+0x72>

            if (pInformation->USBwLengths.w > 0) {
 8000b90:	88c8      	ldrh	r0, [r1, #6]
 8000b92:	2800      	cmp	r0, #0
 8000b94:	f000 80c1 	beq.w	8000d1a <dfuUpdateByRequest+0x1ae>
                userFirmwareLen = 0;
 8000b98:	4878      	ldr	r0, [pc, #480]	; (8000d7c <dfuUpdateByRequest+0x210>)
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
				switch(pInformation->Current_AlternateSetting)
 8000b9a:	7b09      	ldrb	r1, [r1, #12]
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
 8000b9c:	6002      	str	r2, [r0, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
				switch(pInformation->Current_AlternateSetting)
 8000b9e:	2901      	cmp	r1, #1

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000ba0:	f04f 0203 	mov.w	r2, #3
 8000ba4:	7122      	strb	r2, [r4, #4]
				switch(pInformation->Current_AlternateSetting)
 8000ba6:	d00b      	beq.n	8000bc0 <dfuUpdateByRequest+0x54>
 8000ba8:	2902      	cmp	r1, #2
 8000baa:	d116      	bne.n	8000bda <dfuUpdateByRequest+0x6e>
						flashUnlock();
						// Clear lower memory so that we can check on cold boot, whether the last upload was to 0x8002000 or 0x8005000
						flashErasePage((u32)USER_CODE_FLASH0X8002000);
						break;
					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 8000bac:	4b74      	ldr	r3, [pc, #464]	; (8000d80 <dfuUpdateByRequest+0x214>)
 8000bae:	701a      	strb	r2, [r3, #0]
						userAppAddr = USER_CODE_FLASH0X8002000;
 8000bb0:	4a74      	ldr	r2, [pc, #464]	; (8000d84 <dfuUpdateByRequest+0x218>)
 8000bb2:	4b75      	ldr	r3, [pc, #468]	; (8000d88 <dfuUpdateByRequest+0x21c>)
 8000bb4:	601a      	str	r2, [r3, #0]
						/* make sure the flash is setup properly, unlock it */
						setupFLASH();
 8000bb6:	f7ff fe25 	bl	8000804 <setupFLASH>
						flashUnlock();
 8000bba:	f7ff fee9 	bl	8000990 <flashUnlock>
						break;
 8000bbe:	e0cf      	b.n	8000d60 <dfuUpdateByRequest+0x1f4>
					    userAppAddr = USER_CODE_RAM;
						userUploadType = DFU_UPLOAD_RAM;
						break;
						*/
					case 1:
					    userAppAddr = USER_CODE_FLASH0X8005000;
 8000bc0:	4972      	ldr	r1, [pc, #456]	; (8000d8c <dfuUpdateByRequest+0x220>)
 8000bc2:	4a71      	ldr	r2, [pc, #452]	; (8000d88 <dfuUpdateByRequest+0x21c>)
 8000bc4:	6011      	str	r1, [r2, #0]
						userUploadType = DFU_UPLOAD_FLASH_0X8005000;
 8000bc6:	4a6e      	ldr	r2, [pc, #440]	; (8000d80 <dfuUpdateByRequest+0x214>)
 8000bc8:	7013      	strb	r3, [r2, #0]
						
						/* make sure the flash is setup properly, unlock it */
						setupFLASH();
 8000bca:	f7ff fe1b 	bl	8000804 <setupFLASH>
						flashUnlock();
 8000bce:	f7ff fedf 	bl	8000990 <flashUnlock>
						// Clear lower memory so that we can check on cold boot, whether the last upload was to 0x8002000 or 0x8005000
						flashErasePage((u32)USER_CODE_FLASH0X8002000);
 8000bd2:	486c      	ldr	r0, [pc, #432]	; (8000d84 <dfuUpdateByRequest+0x218>)
 8000bd4:	f7ff fe96 	bl	8000904 <flashErasePage>
						break;
 8000bd8:	e0c2      	b.n	8000d60 <dfuUpdateByRequest+0x1f4>
						setupFLASH();
						flashUnlock();
						break;
					default:
					// Roger Clark. Report error 
						dfuAppStatus.bState  = dfuERROR;
 8000bda:	230a      	movs	r3, #10
 8000bdc:	e062      	b.n	8000ca4 <dfuUpdateByRequest+0x138>
				}
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000bde:	2802      	cmp	r0, #2
 8000be0:	d121      	bne.n	8000c26 <dfuUpdateByRequest+0xba>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000be2:	2309      	movs	r3, #9
 8000be4:	7123      	strb	r3, [r4, #4]
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8000be6:	88ca      	ldrh	r2, [r1, #6]
 8000be8:	4b69      	ldr	r3, [pc, #420]	; (8000d90 <dfuUpdateByRequest+0x224>)
 8000bea:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 8000bec:	8818      	ldrh	r0, [r3, #0]
 8000bee:	4a69      	ldr	r2, [pc, #420]	; (8000d94 <dfuUpdateByRequest+0x228>)
 8000bf0:	b280      	uxth	r0, r0
 8000bf2:	8010      	strh	r0, [r2, #0]
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000bf4:	881a      	ldrh	r2, [r3, #0]
 8000bf6:	884b      	ldrh	r3, [r1, #2]
 8000bf8:	b292      	uxth	r2, r2
 8000bfa:	435a      	muls	r2, r3
 8000bfc:	4b5f      	ldr	r3, [pc, #380]	; (8000d7c <dfuUpdateByRequest+0x210>)
 8000bfe:	601a      	str	r2, [r3, #0]
			switch(pInformation->Current_AlternateSetting)
 8000c00:	7b0b      	ldrb	r3, [r1, #12]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d003      	beq.n	8000c0e <dfuUpdateByRequest+0xa2>
 8000c06:	2b02      	cmp	r3, #2
 8000c08:	d109      	bne.n	8000c1e <dfuUpdateByRequest+0xb2>
				case 1:
				    userAppAddr = USER_CODE_FLASH0X8005000;
					userAppEnd = getFlashEnd();
					break;
				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 8000c0a:	4a5e      	ldr	r2, [pc, #376]	; (8000d84 <dfuUpdateByRequest+0x218>)
 8000c0c:	e000      	b.n	8000c10 <dfuUpdateByRequest+0xa4>
				case 0:
					userAppAddr = USER_CODE_RAM;
					userAppEnd = RAM_END;
					*/
				case 1:
				    userAppAddr = USER_CODE_FLASH0X8005000;
 8000c0e:	4a5f      	ldr	r2, [pc, #380]	; (8000d8c <dfuUpdateByRequest+0x220>)
					userAppEnd = getFlashEnd();
					break;
				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 8000c10:	4b5d      	ldr	r3, [pc, #372]	; (8000d88 <dfuUpdateByRequest+0x21c>)
 8000c12:	601a      	str	r2, [r3, #0]
					userAppEnd = getFlashEnd();
 8000c14:	f7ff fed2 	bl	80009bc <getFlashEnd>
 8000c18:	4b5f      	ldr	r3, [pc, #380]	; (8000d98 <dfuUpdateByRequest+0x22c>)
 8000c1a:	6018      	str	r0, [r3, #0]
					break;
 8000c1c:	e0a0      	b.n	8000d60 <dfuUpdateByRequest+0x1f4>
				default:
				// Roger Clark. 
				// Changed this to report error that its unable to write to this memory
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	7123      	strb	r3, [r4, #4]
					dfuAppStatus.bStatus = errWRITE;
 8000c22:	2303      	movs	r3, #3
 8000c24:	e09b      	b.n	8000d5e <dfuUpdateByRequest+0x1f2>
					break;					
			}
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000c26:	2806      	cmp	r0, #6
 8000c28:	d03c      	beq.n	8000ca4 <dfuUpdateByRequest+0x138>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c2a:	2803      	cmp	r0, #3
 8000c2c:	d019      	beq.n	8000c62 <dfuUpdateByRequest+0xf6>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c2e:	2805      	cmp	r0, #5
 8000c30:	e03c      	b.n	8000cac <dfuUpdateByRequest+0x140>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 8000c32:	2b03      	cmp	r3, #3
 8000c34:	d10b      	bne.n	8000c4e <dfuUpdateByRequest+0xe2>
        /* device received block, waiting for DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c36:	4a50      	ldr	r2, [pc, #320]	; (8000d78 <dfuUpdateByRequest+0x20c>)
 8000c38:	6812      	ldr	r2, [r2, #0]
 8000c3a:	7852      	ldrb	r2, [r2, #1]
 8000c3c:	2a03      	cmp	r2, #3
 8000c3e:	d104      	bne.n	8000c4a <dfuUpdateByRequest+0xde>

            } 
			else 
			*/
			{
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000c40:	2305      	movs	r3, #5
 8000c42:	7123      	strb	r3, [r4, #4]
                dfuCopyBufferToExec();
 8000c44:	f7ff ff64 	bl	8000b10 <dfuCopyBufferToExec>
 8000c48:	e08a      	b.n	8000d60 <dfuUpdateByRequest+0x1f4>
            }

        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c4a:	2a05      	cmp	r2, #5
 8000c4c:	e02e      	b.n	8000cac <dfuUpdateByRequest+0x140>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNBUSY)              {
 8000c4e:	2b04      	cmp	r3, #4
 8000c50:	d109      	bne.n	8000c66 <dfuUpdateByRequest+0xfa>
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 8000c52:	4952      	ldr	r1, [pc, #328]	; (8000d9c <dfuUpdateByRequest+0x230>)
 8000c54:	7808      	ldrb	r0, [r1, #0]
 8000c56:	2802      	cmp	r0, #2
 8000c58:	d103      	bne.n	8000c62 <dfuUpdateByRequest+0xf6>
            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8000c5a:	2303      	movs	r3, #3
        }

    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
            dfuAppStatus.bwPollTimeout0 = 0x00;
 8000c5c:	7062      	strb	r2, [r4, #1]
            code_copy_lock = WAIT;
 8000c5e:	700b      	strb	r3, [r1, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000c60:	2305      	movs	r3, #5
 8000c62:	7123      	strb	r3, [r4, #4]
 8000c64:	e07c      	b.n	8000d60 <dfuUpdateByRequest+0x1f4>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }

    } else if (startState == dfuDNLOAD_IDLE)         {
 8000c66:	2b05      	cmp	r3, #5
 8000c68:	d114      	bne.n	8000c94 <dfuUpdateByRequest+0x128>
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000c6a:	4b43      	ldr	r3, [pc, #268]	; (8000d78 <dfuUpdateByRequest+0x20c>)
 8000c6c:	681a      	ldr	r2, [r3, #0]
 8000c6e:	7853      	ldrb	r3, [r2, #1]
 8000c70:	2b01      	cmp	r3, #1
 8000c72:	d108      	bne.n	8000c86 <dfuUpdateByRequest+0x11a>
            if (pInformation->USBwLengths.w > 0) {
 8000c74:	88d3      	ldrh	r3, [r2, #6]
 8000c76:	b10b      	cbz	r3, 8000c7c <dfuUpdateByRequest+0x110>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e7f2      	b.n	8000c62 <dfuUpdateByRequest+0xf6>
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8000c7c:	2306      	movs	r3, #6
 8000c7e:	7123      	strb	r3, [r4, #4]

                /* relock the flash */
                flashLock();
 8000c80:	f7ff fe80 	bl	8000984 <flashLock>
 8000c84:	e06c      	b.n	8000d60 <dfuUpdateByRequest+0x1f4>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000c86:	2b06      	cmp	r3, #6
 8000c88:	d04d      	beq.n	8000d26 <dfuUpdateByRequest+0x1ba>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d04b      	beq.n	8000d26 <dfuUpdateByRequest+0x1ba>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	d162      	bne.n	8000d58 <dfuUpdateByRequest+0x1ec>
 8000c92:	e048      	b.n	8000d26 <dfuUpdateByRequest+0x1ba>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC)       {
 8000c94:	2b06      	cmp	r3, #6
 8000c96:	d10b      	bne.n	8000cb0 <dfuUpdateByRequest+0x144>
        /* device has received last block, waiting DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c98:	4937      	ldr	r1, [pc, #220]	; (8000d78 <dfuUpdateByRequest+0x20c>)
 8000c9a:	6809      	ldr	r1, [r1, #0]
 8000c9c:	7849      	ldrb	r1, [r1, #1]
 8000c9e:	2903      	cmp	r1, #3
 8000ca0:	d103      	bne.n	8000caa <dfuUpdateByRequest+0x13e>
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 8000ca2:	2308      	movs	r3, #8
 8000ca4:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000ca6:	7022      	strb	r2, [r4, #0]
 8000ca8:	e05a      	b.n	8000d60 <dfuUpdateByRequest+0x1f4>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000caa:	2905      	cmp	r1, #5
 8000cac:	d154      	bne.n	8000d58 <dfuUpdateByRequest+0x1ec>
 8000cae:	e7d8      	b.n	8000c62 <dfuUpdateByRequest+0xf6>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST)            {
 8000cb0:	2b07      	cmp	r3, #7
 8000cb2:	d0f6      	beq.n	8000ca2 <dfuUpdateByRequest+0x136>

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;

    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 8000cb4:	2b08      	cmp	r3, #8
 8000cb6:	d0d4      	beq.n	8000c62 <dfuUpdateByRequest+0xf6>
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;

    } else if (startState == dfuUPLOAD_IDLE)         {
 8000cb8:	2b09      	cmp	r3, #9
 8000cba:	d13c      	bne.n	8000d36 <dfuUpdateByRequest+0x1ca>
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000cbc:	4b2e      	ldr	r3, [pc, #184]	; (8000d78 <dfuUpdateByRequest+0x20c>)
 8000cbe:	681a      	ldr	r2, [r3, #0]
 8000cc0:	7853      	ldrb	r3, [r2, #1]
 8000cc2:	2b02      	cmp	r3, #2
 8000cc4:	d12d      	bne.n	8000d22 <dfuUpdateByRequest+0x1b6>
            if (pInformation->USBwLengths.w > 0) {
 8000cc6:	88d0      	ldrh	r0, [r2, #6]
 8000cc8:	b338      	cbz	r0, 8000d1a <dfuUpdateByRequest+0x1ae>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000cca:	4931      	ldr	r1, [pc, #196]	; (8000d90 <dfuUpdateByRequest+0x224>)
 8000ccc:	8852      	ldrh	r2, [r2, #2]
 8000cce:	880b      	ldrh	r3, [r1, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000cd0:	4d2d      	ldr	r5, [pc, #180]	; (8000d88 <dfuUpdateByRequest+0x21c>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	4353      	muls	r3, r2
 8000cd6:	4a29      	ldr	r2, [pc, #164]	; (8000d7c <dfuUpdateByRequest+0x210>)
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000cd8:	4e2f      	ldr	r6, [pc, #188]	; (8000d98 <dfuUpdateByRequest+0x22c>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000cda:	6013      	str	r3, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000cdc:	682f      	ldr	r7, [r5, #0]
 8000cde:	f8d2 8000 	ldr.w	r8, [r2]
 8000ce2:	f8b1 c000 	ldrh.w	ip, [r1]
 8000ce6:	4447      	add	r7, r8
 8000ce8:	6833      	ldr	r3, [r6, #0]
 8000cea:	fa1f fc8c 	uxth.w	ip, ip
 8000cee:	4467      	add	r7, ip
 8000cf0:	429f      	cmp	r7, r3
 8000cf2:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <dfuUpdateByRequest+0x228>)
 8000cf4:	d803      	bhi.n	8000cfe <dfuUpdateByRequest+0x192>
                    thisBlockLen = uploadBlockLen;
 8000cf6:	880a      	ldrh	r2, [r1, #0]
 8000cf8:	b292      	uxth	r2, r2
 8000cfa:	801a      	strh	r2, [r3, #0]
 8000cfc:	e019      	b.n	8000d32 <dfuUpdateByRequest+0x1c6>
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8000cfe:	6836      	ldr	r6, [r6, #0]
 8000d00:	682d      	ldr	r5, [r5, #0]
 8000d02:	6811      	ldr	r1, [r2, #0]
 8000d04:	1b72      	subs	r2, r6, r5
 8000d06:	1a52      	subs	r2, r2, r1
 8000d08:	b292      	uxth	r2, r2
 8000d0a:	801a      	strh	r2, [r3, #0]
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8000d0c:	881a      	ldrh	r2, [r3, #0]
 8000d0e:	b292      	uxth	r2, r2
 8000d10:	4282      	cmp	r2, r0
 8000d12:	d308      	bcc.n	8000d26 <dfuUpdateByRequest+0x1ba>
                        thisBlockLen = 0;
 8000d14:	2200      	movs	r2, #0
 8000d16:	801a      	strh	r2, [r3, #0]
 8000d18:	e005      	b.n	8000d26 <dfuUpdateByRequest+0x1ba>
                    }
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	7123      	strb	r3, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8000d1e:	2309      	movs	r3, #9
 8000d20:	e01d      	b.n	8000d5e <dfuUpdateByRequest+0x1f2>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000d22:	2b06      	cmp	r3, #6
 8000d24:	d101      	bne.n	8000d2a <dfuUpdateByRequest+0x1be>
            dfuAppStatus.bState  = dfuIDLE;
 8000d26:	2302      	movs	r3, #2
 8000d28:	e79b      	b.n	8000c62 <dfuUpdateByRequest+0xf6>
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000d2a:	2b03      	cmp	r3, #3
 8000d2c:	d001      	beq.n	8000d32 <dfuUpdateByRequest+0x1c6>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000d2e:	2b05      	cmp	r3, #5
 8000d30:	d112      	bne.n	8000d58 <dfuUpdateByRequest+0x1ec>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000d32:	2309      	movs	r3, #9
 8000d34:	e795      	b.n	8000c62 <dfuUpdateByRequest+0xf6>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }


    } else if (startState == dfuERROR)               {
 8000d36:	2b0a      	cmp	r3, #10
 8000d38:	d10e      	bne.n	8000d58 <dfuUpdateByRequest+0x1ec>
        /* status is in error, awaiting DFU_CLRSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000d3a:	4b0f      	ldr	r3, [pc, #60]	; (8000d78 <dfuUpdateByRequest+0x20c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	785b      	ldrb	r3, [r3, #1]
 8000d40:	2b03      	cmp	r3, #3
 8000d42:	d101      	bne.n	8000d48 <dfuUpdateByRequest+0x1dc>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
 8000d44:	230a      	movs	r3, #10
 8000d46:	e78c      	b.n	8000c62 <dfuUpdateByRequest+0xf6>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000d48:	2b05      	cmp	r3, #5
 8000d4a:	d0fb      	beq.n	8000d44 <dfuUpdateByRequest+0x1d8>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8000d4c:	2b04      	cmp	r3, #4
 8000d4e:	d103      	bne.n	8000d58 <dfuUpdateByRequest+0x1ec>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8000d50:	2302      	movs	r3, #2
 8000d52:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	e002      	b.n	8000d5e <dfuUpdateByRequest+0x1f2>
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8000d58:	230a      	movs	r3, #10
 8000d5a:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8000d5c:	230f      	movs	r3, #15
 8000d5e:	7023      	strb	r3, [r4, #0]
    }

    if (dfuAppStatus.bStatus == OK) {
 8000d60:	7820      	ldrb	r0, [r4, #0]
        return TRUE;
    } else {
        return FALSE;
    }
}
 8000d62:	f1d0 0001 	rsbs	r0, r0, #1
 8000d66:	bf38      	it	cc
 8000d68:	2000      	movcc	r0, #0
 8000d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000b23 	andcs	r0, r0, r3, lsr #22
 8000d74:	20000b1d 	andcs	r0, r0, sp, lsl fp
 8000d78:	20000304 	andcs	r0, r0, r4, lsl #6
 8000d7c:	20000b18 	andcs	r0, r0, r8, lsl fp
 8000d80:	20000b1c 	andcs	r0, r0, ip, lsl fp
 8000d84:	08002000 	stmdaeq	r0, {sp}
 8000d88:	200002c4 	andcs	r0, r0, r4, asr #5
 8000d8c:	08005000 	stmdaeq	r0, {ip, lr}
 8000d90:	20000b14 	andcs	r0, r0, r4, lsl fp
 8000d94:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000d98:	200002c0 	andcs	r0, r0, r0, asr #5
 8000d9c:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08000da0 <dfuUploadStarted>:
void dfuSetState(u8 newState) {
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted() {
    return dfuBusy;
 8000da0:	4b01      	ldr	r3, [pc, #4]	; (8000da8 <dfuUploadStarted+0x8>)
 8000da2:	7818      	ldrb	r0, [r3, #0]
}
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000b23 	andcs	r0, r0, r3, lsr #22

08000dac <dfuFinishUpload>:

void dfuFinishUpload() {
    while (1)
	{
		__asm("nop");
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <dfuFinishUpload>

08000db0 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8000db0:	0080      	lsls	r0, r0, #2
 8000db2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000db6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000dba:	6803      	ldr	r3, [r0, #0]
 8000dbc:	06ca      	lsls	r2, r1, #27
 8000dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000dc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	bf48      	it	mi
 8000dca:	f083 0310 	eormi.w	r3, r3, #16
 8000dce:	068a      	lsls	r2, r1, #26
 8000dd0:	bf48      	it	mi
 8000dd2:	f083 0320 	eormi.w	r3, r3, #32
 8000dd6:	6003      	str	r3, [r0, #0]
 8000dd8:	4770      	bx	lr

08000dda <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8000dda:	0080      	lsls	r0, r0, #2
 8000ddc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000de0:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000de4:	6803      	ldr	r3, [r0, #0]
 8000de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000dee:	b29b      	uxth	r3, r3
 8000df0:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000df4:	6003      	str	r3, [r0, #0]
 8000df6:	4770      	bx	lr

08000df8 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8000df8:	0080      	lsls	r0, r0, #2
 8000dfa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000dfe:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000e02:	6803      	ldr	r3, [r0, #0]
 8000e04:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8000e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e0c:	041b      	lsls	r3, r3, #16
 8000e0e:	0c1b      	lsrs	r3, r3, #16
 8000e10:	6003      	str	r3, [r0, #0]
 8000e12:	4770      	bx	lr

08000e14 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8000e14:	0080      	lsls	r0, r0, #2
 8000e16:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000e1a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000e1e:	6803      	ldr	r3, [r0, #0]
 8000e20:	045b      	lsls	r3, r3, #17
 8000e22:	d506      	bpl.n	8000e32 <ClearDTOG_RX+0x1e>
 8000e24:	6802      	ldr	r2, [r0, #0]
 8000e26:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e30:	6003      	str	r3, [r0, #0]
 8000e32:	4770      	bx	lr

08000e34 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8000e34:	0080      	lsls	r0, r0, #2
 8000e36:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000e3a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000e3e:	6803      	ldr	r3, [r0, #0]
 8000e40:	065b      	lsls	r3, r3, #25
 8000e42:	d506      	bpl.n	8000e52 <ClearDTOG_TX+0x1e>
 8000e44:	6802      	ldr	r2, [r0, #0]
 8000e46:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e50:	6003      	str	r3, [r0, #0]
 8000e52:	4770      	bx	lr

08000e54 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8000e54:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <GetEPTxAddr+0x18>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e5e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8000e62:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8000e66:	0040      	lsls	r0, r0, #1
}
 8000e68:	8800      	ldrh	r0, [r0, #0]
 8000e6a:	4770      	bx	lr
 8000e6c:	40005c50 	andmi	r5, r0, r0, asr ip

08000e70 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <GetEPRxAddr+0x14>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e7a:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <GetEPRxAddr+0x18>)
 8000e7c:	4403      	add	r3, r0
 8000e7e:	005b      	lsls	r3, r3, #1
}
 8000e80:	8818      	ldrh	r0, [r3, #0]
 8000e82:	4770      	bx	lr
 8000e84:	40005c50 	andmi	r5, r0, r0, asr ip
 8000e88:	20003004 	andcs	r3, r0, r4

08000e8c <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <SetEPTxCount+0x14>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e96:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <SetEPTxCount+0x18>)
 8000e98:	4403      	add	r3, r0
 8000e9a:	005b      	lsls	r3, r3, #1
 8000e9c:	6019      	str	r1, [r3, #0]
 8000e9e:	4770      	bx	lr
 8000ea0:	40005c50 	andmi	r5, r0, r0, asr ip
 8000ea4:	20003002 	andcs	r3, r0, r2

08000ea8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	; (8000ee0 <SetEPRxCount+0x38>)
 8000eaa:	293e      	cmp	r1, #62	; 0x3e
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000eb4:	4b0b      	ldr	r3, [pc, #44]	; (8000ee4 <SetEPRxCount+0x3c>)
 8000eb6:	4403      	add	r3, r0
 8000eb8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8000ebc:	d909      	bls.n	8000ed2 <SetEPRxCount+0x2a>
 8000ebe:	094b      	lsrs	r3, r1, #5
 8000ec0:	06c8      	lsls	r0, r1, #27
 8000ec2:	bf04      	itt	eq
 8000ec4:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000ec8:	b29b      	uxtheq	r3, r3
 8000eca:	029b      	lsls	r3, r3, #10
 8000ecc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ed0:	e004      	b.n	8000edc <SetEPRxCount+0x34>
 8000ed2:	084b      	lsrs	r3, r1, #1
 8000ed4:	07c9      	lsls	r1, r1, #31
 8000ed6:	bf48      	it	mi
 8000ed8:	3301      	addmi	r3, #1
 8000eda:	029b      	lsls	r3, r3, #10
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	4770      	bx	lr
 8000ee0:	40005c50 	andmi	r5, r0, r0, asr ip
 8000ee4:	20003006 	andcs	r3, r0, r6

08000ee8 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8000ee8:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8000eea:	4a4c      	ldr	r2, [pc, #304]	; (800101c <CTR_LP+0x134>)
 8000eec:	4b4c      	ldr	r3, [pc, #304]	; (8001020 <CTR_LP+0x138>)
 8000eee:	6811      	ldr	r1, [r2, #0]
 8000ef0:	b288      	uxth	r0, r1
 8000ef2:	040c      	lsls	r4, r1, #16
 8000ef4:	8018      	strh	r0, [r3, #0]
 8000ef6:	f140 8090 	bpl.w	800101a <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8000efa:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000efe:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8000f00:	881a      	ldrh	r2, [r3, #0]
 8000f02:	4c48      	ldr	r4, [pc, #288]	; (8001024 <CTR_LP+0x13c>)
 8000f04:	f002 020f 	and.w	r2, r2, #15
 8000f08:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8000f0a:	2a00      	cmp	r2, #0
 8000f0c:	d15f      	bne.n	8000fce <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000f0e:	4c46      	ldr	r4, [pc, #280]	; (8001028 <CTR_LP+0x140>)
 8000f10:	4d46      	ldr	r5, [pc, #280]	; (800102c <CTR_LP+0x144>)
 8000f12:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000f14:	4e46      	ldr	r6, [pc, #280]	; (8001030 <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000f16:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8000f1a:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000f1c:	6822      	ldr	r2, [r4, #0]
 8000f1e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8000f22:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8000f24:	6822      	ldr	r2, [r4, #0]
 8000f26:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f2a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f2e:	b292      	uxth	r2, r2
 8000f30:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000f34:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8000f36:	6822      	ldr	r2, [r4, #0]
 8000f38:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f40:	b292      	uxth	r2, r2
 8000f42:	f082 0220 	eor.w	r2, r2, #32
 8000f46:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	06d8      	lsls	r0, r3, #27
 8000f4c:	d502      	bpl.n	8000f54 <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8000f4e:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8000f50:	0619      	lsls	r1, r3, #24
 8000f52:	d507      	bpl.n	8000f64 <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8000f54:	6822      	ldr	r2, [r4, #0]
 8000f56:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	6023      	str	r3, [r4, #0]
          In0_Process();
 8000f5e:	f000 fc61 	bl	8001824 <In0_Process>
 8000f62:	e012      	b.n	8000f8a <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8000f64:	051a      	lsls	r2, r3, #20
 8000f66:	d507      	bpl.n	8000f78 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8000f68:	6822      	ldr	r2, [r4, #0]
 8000f6a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000f6e:	4013      	ands	r3, r2
 8000f70:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8000f72:	f000 fa69 	bl	8001448 <Setup0_Process>
 8000f76:	e008      	b.n	8000f8a <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8000f78:	0418      	lsls	r0, r3, #16
 8000f7a:	d5b6      	bpl.n	8000eea <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000f82:	4013      	ands	r3, r2
 8000f84:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8000f86:	f000 fbcd 	bl	8001724 <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8000f8a:	6823      	ldr	r3, [r4, #0]
 8000f8c:	882a      	ldrh	r2, [r5, #0]
 8000f8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f96:	b29b      	uxth	r3, r3
 8000f98:	04d1      	lsls	r1, r2, #19
 8000f9a:	bf48      	it	mi
 8000f9c:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8000fa0:	0495      	lsls	r5, r2, #18
 8000fa2:	4a21      	ldr	r2, [pc, #132]	; (8001028 <CTR_LP+0x140>)
 8000fa4:	bf48      	it	mi
 8000fa6:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8000faa:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8000fac:	6813      	ldr	r3, [r2, #0]
 8000fae:	8831      	ldrh	r1, [r6, #0]
 8000fb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000fb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	06cc      	lsls	r4, r1, #27
 8000fbc:	bf48      	it	mi
 8000fbe:	f083 0310 	eormi.w	r3, r3, #16
 8000fc2:	0688      	lsls	r0, r1, #26
 8000fc4:	bf48      	it	mi
 8000fc6:	f083 0320 	eormi.w	r3, r3, #32
 8000fca:	6013      	str	r3, [r2, #0]
          return;
 8000fcc:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8000fce:	0093      	lsls	r3, r2, #2
 8000fd0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000fd4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000fd8:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8000fda:	0429      	lsls	r1, r5, #16
 8000fdc:	d509      	bpl.n	8000ff2 <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8000fde:	6818      	ldr	r0, [r3, #0]
 8000fe0:	f640 718f 	movw	r1, #3983	; 0xf8f
 8000fe4:	4001      	ands	r1, r0
 8000fe6:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <CTR_LP+0x14c>)
 8000fea:	3a01      	subs	r2, #1
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8000ff2:	062b      	lsls	r3, r5, #24
 8000ff4:	f57f af79 	bpl.w	8000eea <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8000ff8:	7821      	ldrb	r1, [r4, #0]
 8000ffa:	f648 720f 	movw	r2, #36623	; 0x8f0f
 8000ffe:	008b      	lsls	r3, r1, #2
 8001000:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001004:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001008:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800100a:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800100c:	4002      	ands	r2, r0
 800100e:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8001010:	4b09      	ldr	r3, [pc, #36]	; (8001038 <CTR_LP+0x150>)
 8001012:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001016:	4798      	blx	r3
 8001018:	e767      	b.n	8000eea <CTR_LP+0x2>
 800101a:	bd70      	pop	{r4, r5, r6, pc}
 800101c:	40005c44 	andmi	r5, r0, r4, asr #24
 8001020:	200002cc 	andcs	r0, r0, ip, asr #5
 8001024:	200002e0 	andcs	r0, r0, r0, ror #5
 8001028:	40005c00 	andmi	r5, r0, r0, lsl #24
 800102c:	200002d2 	ldrdcs	r0, [r0], -r2
 8001030:	200002d4 	ldrdcs	r0, [r0], -r4
 8001034:	20000050 	andcs	r0, r0, r0, asr r0
 8001038:	20000034 	andcs	r0, r0, r4, lsr r0

0800103c <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800103c:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 800103e:	4a07      	ldr	r2, [pc, #28]	; (800105c <USB_Init+0x20>)
 8001040:	4b07      	ldr	r3, [pc, #28]	; (8001060 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8001042:	4908      	ldr	r1, [pc, #32]	; (8001064 <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8001044:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8001046:	2202      	movs	r2, #2
 8001048:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 800104a:	4b07      	ldr	r3, [pc, #28]	; (8001068 <USB_Init+0x2c>)
 800104c:	4a07      	ldr	r2, [pc, #28]	; (800106c <USB_Init+0x30>)
 800104e:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8001050:	4a07      	ldr	r2, [pc, #28]	; (8001070 <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 8001052:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8001054:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8001056:	4798      	blx	r3
 8001058:	bd08      	pop	{r3, pc}
 800105a:	bf00      	nop
 800105c:	20000304 	andcs	r0, r0, r4, lsl #6
 8001060:	200002e4 	andcs	r0, r0, r4, ror #5
 8001064:	2000006c 	andcs	r0, r0, ip, rrx
 8001068:	20000000 	andcs	r0, r0, r0
 800106c:	200002dc 	ldrdcs	r0, [r0], -ip
 8001070:	20000300 	andcs	r0, r0, r0, lsl #6

08001074 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 8001074:	b510      	push	{r4, lr}
 8001076:	4c06      	ldr	r4, [pc, #24]	; (8001090 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8001078:	b918      	cbnz	r0, 8001082 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800107a:	6823      	ldr	r3, [r4, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 8001080:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 8001082:	4b04      	ldr	r3, [pc, #16]	; (8001094 <Standard_GetConfiguration+0x20>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 800108a:	6820      	ldr	r0, [r4, #0]
 800108c:	300a      	adds	r0, #10
}
 800108e:	bd10      	pop	{r4, pc}
 8001090:	20000304 	andcs	r0, r0, r4, lsl #6
 8001094:	20000300 	andcs	r0, r0, r0, lsl #6

08001098 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 8001098:	b510      	push	{r4, lr}
 800109a:	4c06      	ldr	r4, [pc, #24]	; (80010b4 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 800109c:	b918      	cbnz	r0, 80010a6 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800109e:	6823      	ldr	r3, [r4, #0]
 80010a0:	2201      	movs	r2, #1
 80010a2:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80010a4:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 80010a6:	4b04      	ldr	r3, [pc, #16]	; (80010b8 <Standard_GetInterface+0x20>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	689b      	ldr	r3, [r3, #8]
 80010ac:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 80010ae:	6820      	ldr	r0, [r4, #0]
 80010b0:	300c      	adds	r0, #12
}
 80010b2:	bd10      	pop	{r4, pc}
 80010b4:	20000304 	andcs	r0, r0, r4, lsl #6
 80010b8:	20000300 	andcs	r0, r0, r0, lsl #6

080010bc <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 80010bc:	b510      	push	{r4, lr}
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <Standard_GetStatus+0x84>)
  if (Length == 0)
 80010c0:	b918      	cbnz	r0, 80010ca <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2202      	movs	r2, #2
 80010c6:	821a      	strh	r2, [r3, #16]
    return 0;
 80010c8:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 80010ca:	4a1e      	ldr	r2, [pc, #120]	; (8001144 <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80010cc:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 80010ce:	2000      	movs	r0, #0
 80010d0:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80010d2:	780c      	ldrb	r4, [r1, #0]
 80010d4:	4613      	mov	r3, r2
 80010d6:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 80010da:	d10d      	bne.n	80010f8 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 80010dc:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80010de:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 80010e0:	bf44      	itt	mi
 80010e2:	2102      	movmi	r1, #2
 80010e4:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 80010e6:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 80010ea:	781a      	ldrb	r2, [r3, #0]
 80010ec:	bf14      	ite	ne
 80010ee:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 80010f2:	f042 0201 	orreq.w	r2, r2, #1
 80010f6:	e014      	b.n	8001122 <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80010f8:	2c01      	cmp	r4, #1
 80010fa:	d01f      	beq.n	800113c <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80010fc:	2c02      	cmp	r4, #2
 80010fe:	d11e      	bne.n	800113e <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 8001100:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 8001102:	f001 020f 	and.w	r2, r1, #15
 8001106:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001108:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800110c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001110:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001114:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001116:	d006      	beq.n	8001126 <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001118:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800111c:	2a10      	cmp	r2, #16
 800111e:	d107      	bne.n	8001130 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8001120:	2201      	movs	r2, #1
 8001122:	701a      	strb	r2, [r3, #0]
 8001124:	e004      	b.n	8001130 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001126:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800112a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800112e:	e7f6      	b.n	800111e <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8001130:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Standard_GetStatus+0x8c>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	691b      	ldr	r3, [r3, #16]
 8001136:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <Standard_GetStatus+0x88>)
 800113a:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 800113c:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 800113e:	bd10      	pop	{r4, pc}
 8001140:	20000304 	andcs	r0, r0, r4, lsl #6
 8001144:	2000030a 	andcs	r0, r0, sl, lsl #6
 8001148:	20000300 	andcs	r0, r0, r0, lsl #6

0800114c <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800114c:	4a23      	ldr	r2, [pc, #140]	; (80011dc <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800114e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8001152:	6814      	ldr	r4, [r2, #0]
 8001154:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 8001156:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 8001158:	7a26      	ldrb	r6, [r4, #8]
 800115a:	4f21      	ldr	r7, [pc, #132]	; (80011e0 <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800115c:	b9a3      	cbnz	r3, 8001188 <DataStageIn+0x3c>
 800115e:	2e04      	cmp	r6, #4
 8001160:	d112      	bne.n	8001188 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8001162:	4920      	ldr	r1, [pc, #128]	; (80011e4 <DataStageIn+0x98>)
 8001164:	780a      	ldrb	r2, [r1, #0]
 8001166:	2a01      	cmp	r2, #1
 8001168:	d10a      	bne.n	8001180 <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800116a:	4a1f      	ldr	r2, [pc, #124]	; (80011e8 <DataStageIn+0x9c>)
 800116c:	6810      	ldr	r0, [r2, #0]
 800116e:	4a1f      	ldr	r2, [pc, #124]	; (80011ec <DataStageIn+0xa0>)
 8001170:	b280      	uxth	r0, r0
 8001172:	4402      	add	r2, r0
 8001174:	0052      	lsls	r2, r2, #1
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	2230      	movs	r2, #48	; 0x30
 800117a:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800117c:	700b      	strb	r3, [r1, #0]
 800117e:	e027      	b.n	80011d0 <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 8001180:	2310      	movs	r3, #16
 8001182:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 8001184:	2607      	movs	r6, #7
 8001186:	e023      	b.n	80011d0 <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 8001188:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 800118a:	42ab      	cmp	r3, r5
 800118c:	bf8c      	ite	hi
 800118e:	2602      	movhi	r6, #2
 8001190:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 8001192:	429d      	cmp	r5, r3
 8001194:	bf28      	it	cs
 8001196:	461d      	movcs	r5, r3
 8001198:	4628      	mov	r0, r5
 800119a:	69a3      	ldr	r3, [r4, #24]
 800119c:	4798      	blx	r3
 800119e:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff fe57 	bl	8000e54 <GetEPTxAddr>
 80011a6:	462a      	mov	r2, r5
 80011a8:	4601      	mov	r1, r0
 80011aa:	4648      	mov	r0, r9
 80011ac:	f000 fb68 	bl	8001880 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 80011b0:	4629      	mov	r1, r5
 80011b2:	2000      	movs	r0, #0
 80011b4:	f7ff fe6a 	bl	8000e8c <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 80011b8:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80011ba:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80011be:	1b5b      	subs	r3, r3, r5
 80011c0:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80011c2:	8a63      	ldrh	r3, [r4, #18]
 80011c4:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 80011c6:	2330      	movs	r3, #48	; 0x30
 80011c8:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80011ca:	4b09      	ldr	r3, [pc, #36]	; (80011f0 <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 80011cc:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80011ce:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80011d0:	f8d8 3000 	ldr.w	r3, [r8]
 80011d4:	721e      	strb	r6, [r3, #8]
 80011d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011da:	bf00      	nop
 80011dc:	20000304 	andcs	r0, r0, r4, lsl #6
 80011e0:	200002d4 	ldrdcs	r0, [r0], -r4
 80011e4:	20000b24 	andcs	r0, r0, r4, lsr #22
 80011e8:	40005c50 	andmi	r5, r0, r0, asr ip
 80011ec:	20003002 	andcs	r3, r0, r2
 80011f0:	200002d2 	ldrdcs	r0, [r0], -r2

080011f4 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 80011f4:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 80011f6:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 80011f8:	490a      	ldr	r1, [pc, #40]	; (8001224 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	7849      	ldrb	r1, [r1, #1]
 80011fe:	789a      	ldrb	r2, [r3, #2]
 8001200:	4291      	cmp	r1, r2
 8001202:	d30a      	bcc.n	800121a <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001204:	78d9      	ldrb	r1, [r3, #3]
 8001206:	b941      	cbnz	r1, 800121a <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001208:	889c      	ldrh	r4, [r3, #4]
 800120a:	b934      	cbnz	r4, 800121a <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800120c:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <Standard_SetConfiguration+0x34>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	4798      	blx	r3
    return USB_SUCCESS;
 8001216:	4620      	mov	r0, r4
 8001218:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 800121a:	2002      	movs	r0, #2
  }
}
 800121c:	bd10      	pop	{r4, pc}
 800121e:	bf00      	nop
 8001220:	20000304 	andcs	r0, r0, r4, lsl #6
 8001224:	20000090 	mulcs	r0, r0, r0
 8001228:	20000300 	andcs	r0, r0, r0, lsl #6

0800122c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800122c:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800122e:	4a0e      	ldr	r2, [pc, #56]	; (8001268 <Standard_SetInterface+0x3c>)
 8001230:	4c0e      	ldr	r4, [pc, #56]	; (800126c <Standard_SetInterface+0x40>)
 8001232:	6812      	ldr	r2, [r2, #0]
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	6992      	ldr	r2, [r2, #24]
 8001238:	7918      	ldrb	r0, [r3, #4]
 800123a:	7899      	ldrb	r1, [r3, #2]
 800123c:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800123e:	6823      	ldr	r3, [r4, #0]
 8001240:	7a9a      	ldrb	r2, [r3, #10]
 8001242:	b17a      	cbz	r2, 8001264 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8001244:	b970      	cbnz	r0, 8001264 <Standard_SetInterface+0x38>
 8001246:	795a      	ldrb	r2, [r3, #5]
 8001248:	b962      	cbnz	r2, 8001264 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 800124a:	78dd      	ldrb	r5, [r3, #3]
 800124c:	b955      	cbnz	r5, 8001264 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800124e:	4b08      	ldr	r3, [pc, #32]	; (8001270 <Standard_SetInterface+0x44>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	68db      	ldr	r3, [r3, #12]
 8001254:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001256:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8001258:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800125a:	791a      	ldrb	r2, [r3, #4]
 800125c:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800125e:	789a      	ldrb	r2, [r3, #2]
 8001260:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8001262:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 8001264:	2002      	movs	r0, #2
}
 8001266:	bd38      	pop	{r3, r4, r5, pc}
 8001268:	200002dc 	ldrdcs	r0, [r0], -ip
 800126c:	20000304 	andcs	r0, r0, r4, lsl #6
 8001270:	20000300 	andcs	r0, r0, r0, lsl #6

08001274 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8001274:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <Standard_ClearFeature+0xc0>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800127c:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 8001280:	d104      	bne.n	800128c <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 8001282:	7a5a      	ldrb	r2, [r3, #9]
 8001284:	f022 0220 	bic.w	r2, r2, #32
 8001288:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 800128a:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800128c:	2802      	cmp	r0, #2
 800128e:	d14e      	bne.n	800132e <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 8001290:	885a      	ldrh	r2, [r3, #2]
 8001292:	2a00      	cmp	r2, #0
 8001294:	d14c      	bne.n	8001330 <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 8001296:	795a      	ldrb	r2, [r3, #5]
 8001298:	2a00      	cmp	r2, #0
 800129a:	d149      	bne.n	8001330 <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 800129c:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 800129e:	4d26      	ldr	r5, [pc, #152]	; (8001338 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 80012a0:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80012a4:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80012a6:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 80012aa:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80012ae:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80012b0:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80012b2:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80012b6:	bf14      	ite	ne
 80012b8:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80012bc:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80012c0:	42a8      	cmp	r0, r5
 80012c2:	d234      	bcs.n	800132e <Standard_ClearFeature+0xba>
 80012c4:	2900      	cmp	r1, #0
 80012c6:	d032      	beq.n	800132e <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 80012c8:	7a9b      	ldrb	r3, [r3, #10]
 80012ca:	b383      	cbz	r3, 800132e <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80012cc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80012d0:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80012d4:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80012d6:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80012d8:	d50c      	bpl.n	80012f4 <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80012da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012de:	2b10      	cmp	r3, #16
 80012e0:	d11f      	bne.n	8001322 <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 80012e2:	b2c4      	uxtb	r4, r0
 80012e4:	4620      	mov	r0, r4
 80012e6:	f7ff fda5 	bl	8000e34 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 80012ea:	4620      	mov	r0, r4
 80012ec:	2130      	movs	r1, #48	; 0x30
 80012ee:	f7ff fd5f 	bl	8000db0 <SetEPTxStatus>
 80012f2:	e016      	b.n	8001322 <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 80012f4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80012f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012fc:	d111      	bne.n	8001322 <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 80012fe:	b928      	cbnz	r0, 800130c <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001300:	4b0e      	ldr	r3, [pc, #56]	; (800133c <Standard_ClearFeature+0xc8>)
 8001302:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001306:	f7ff fdcf 	bl	8000ea8 <SetEPRxCount>
 800130a:	e001      	b.n	8001310 <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800130c:	f7ff fd82 	bl	8000e14 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800131a:	b29b      	uxth	r3, r3
 800131c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001320:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <Standard_ClearFeature+0xcc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	4798      	blx	r3
    return USB_SUCCESS;
 800132a:	2000      	movs	r0, #0
 800132c:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 800132e:	2002      	movs	r0, #2
}
 8001330:	bd38      	pop	{r3, r4, r5, pc}
 8001332:	bf00      	nop
 8001334:	20000304 	andcs	r0, r0, r4, lsl #6
 8001338:	20000090 	mulcs	r0, r0, r0
 800133c:	20000000 	andcs	r0, r0, r0
 8001340:	20000300 	andcs	r0, r0, r0, lsl #6

08001344 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8001344:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 8001346:	4b1d      	ldr	r3, [pc, #116]	; (80013bc <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001348:	4d1d      	ldr	r5, [pc, #116]	; (80013c0 <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 800134a:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800134c:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 800134e:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 8001350:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 8001354:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001356:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800135a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800135e:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8001360:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001364:	bf14      	ite	ne
 8001366:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800136a:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800136e:	42ac      	cmp	r4, r5
 8001370:	d222      	bcs.n	80013b8 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 8001372:	884c      	ldrh	r4, [r1, #2]
 8001374:	bb04      	cbnz	r4, 80013b8 <Standard_SetEndPointFeature+0x74>
 8001376:	b1f8      	cbz	r0, 80013b8 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 8001378:	7a89      	ldrb	r1, [r1, #10]
 800137a:	b1e9      	cbz	r1, 80013b8 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800137c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001380:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 8001384:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 8001388:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 800138a:	d007      	beq.n	800139c <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800138c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8001390:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001394:	b292      	uxth	r2, r2
 8001396:	f082 0210 	eor.w	r2, r2, #16
 800139a:	e006      	b.n	80013aa <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 800139c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013a0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013a4:	b292      	uxth	r2, r2
 80013a6:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80013aa:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80013ac:	4b05      	ldr	r3, [pc, #20]	; (80013c4 <Standard_SetEndPointFeature+0x80>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	4798      	blx	r3
  return USB_SUCCESS;
 80013b4:	2000      	movs	r0, #0
 80013b6:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80013b8:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 80013ba:	bd38      	pop	{r3, r4, r5, pc}
 80013bc:	20000304 	andcs	r0, r0, r4, lsl #6
 80013c0:	20000090 	mulcs	r0, r0, r0
 80013c4:	20000300 	andcs	r0, r0, r0, lsl #6

080013c8 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 80013c8:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 80013ca:	4b06      	ldr	r3, [pc, #24]	; (80013e4 <Standard_SetDeviceFeature+0x1c>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	7a5a      	ldrb	r2, [r3, #9]
 80013d0:	f042 0220 	orr.w	r2, r2, #32
 80013d4:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80013d6:	4b04      	ldr	r3, [pc, #16]	; (80013e8 <Standard_SetDeviceFeature+0x20>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	69db      	ldr	r3, [r3, #28]
 80013dc:	4798      	blx	r3
  return USB_SUCCESS;
}
 80013de:	2000      	movs	r0, #0
 80013e0:	bd08      	pop	{r3, pc}
 80013e2:	bf00      	nop
 80013e4:	20000304 	andcs	r0, r0, r4, lsl #6
 80013e8:	20000300 	andcs	r0, r0, r0, lsl #6

080013ec <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <Standard_GetDescriptorData+0x18>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 80013f2:	b918      	cbnz	r0, 80013fc <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 80013f4:	8889      	ldrh	r1, [r1, #4]
 80013f6:	1acb      	subs	r3, r1, r3
 80013f8:	8213      	strh	r3, [r2, #16]
    return 0;
 80013fa:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 80013fc:	6808      	ldr	r0, [r1, #0]
 80013fe:	4418      	add	r0, r3
}
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	20000304 	andcs	r0, r0, r4, lsl #6

08001408 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8001408:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <Post0_Process+0x30>)
 800140c:	2000      	movs	r0, #0
 800140e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001412:	f7ff fd49 	bl	8000ea8 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8001416:	4b09      	ldr	r3, [pc, #36]	; (800143c <Post0_Process+0x34>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	7a18      	ldrb	r0, [r3, #8]
 800141c:	2808      	cmp	r0, #8
 800141e:	d106      	bne.n	800142e <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001420:	4b07      	ldr	r3, [pc, #28]	; (8001440 <Post0_Process+0x38>)
 8001422:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001426:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <Post0_Process+0x3c>)
 800142a:	2210      	movs	r2, #16
 800142c:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800142e:	f1b0 0309 	subs.w	r3, r0, #9
 8001432:	4258      	negs	r0, r3
 8001434:	4158      	adcs	r0, r3
 8001436:	bd08      	pop	{r3, pc}
 8001438:	20000000 	andcs	r0, r0, r0
 800143c:	20000304 	andcs	r0, r0, r4, lsl #6
 8001440:	200002d2 	ldrdcs	r0, [r0], -r2
 8001444:	200002d4 	ldrdcs	r0, [r0], -r4

08001448 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 8001448:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800144a:	4e96      	ldr	r6, [pc, #600]	; (80016a4 <Setup0_Process+0x25c>)
 800144c:	4b96      	ldr	r3, [pc, #600]	; (80016a8 <Setup0_Process+0x260>)
 800144e:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 8001450:	4d96      	ldr	r5, [pc, #600]	; (80016ac <Setup0_Process+0x264>)
 8001452:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001454:	4413      	add	r3, r2
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800145a:	682b      	ldr	r3, [r5, #0]
 800145c:	7a19      	ldrb	r1, [r3, #8]
 800145e:	2909      	cmp	r1, #9
 8001460:	d00f      	beq.n	8001482 <Setup0_Process+0x3a>
 8001462:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001464:	0052      	lsls	r2, r2, #1
 8001466:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800146a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800146e:	7811      	ldrb	r1, [r2, #0]
 8001470:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8001472:	7851      	ldrb	r1, [r2, #1]
 8001474:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 8001476:	8891      	ldrh	r1, [r2, #4]
 8001478:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 800147a:	8911      	ldrh	r1, [r2, #8]
 800147c:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 800147e:	8992      	ldrh	r2, [r2, #12]
 8001480:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 8001482:	2201      	movs	r2, #1
 8001484:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 8001486:	88da      	ldrh	r2, [r3, #6]
 8001488:	785c      	ldrb	r4, [r3, #1]
 800148a:	2a00      	cmp	r2, #0
 800148c:	d161      	bne.n	8001552 <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800148e:	781a      	ldrb	r2, [r3, #0]
 8001490:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 8001494:	d13a      	bne.n	800150c <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 8001496:	2c09      	cmp	r4, #9
 8001498:	d102      	bne.n	80014a0 <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 800149a:	f7ff feab 	bl	80011f4 <Standard_SetConfiguration>
 800149e:	e044      	b.n	800152a <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 80014a0:	2c05      	cmp	r4, #5
 80014a2:	d10f      	bne.n	80014c4 <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80014a4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80014a8:	2a00      	cmp	r2, #0
 80014aa:	da01      	bge.n	80014b0 <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 80014ac:	2308      	movs	r3, #8
 80014ae:	e04d      	b.n	800154c <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80014b0:	78da      	ldrb	r2, [r3, #3]
 80014b2:	2a00      	cmp	r2, #0
 80014b4:	d1fa      	bne.n	80014ac <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 80014b6:	889a      	ldrh	r2, [r3, #4]
 80014b8:	2a00      	cmp	r2, #0
 80014ba:	d1f7      	bne.n	80014ac <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 80014bc:	7a9b      	ldrb	r3, [r3, #10]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d037      	beq.n	8001532 <Setup0_Process+0xea>
 80014c2:	e7f3      	b.n	80014ac <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 80014c4:	2c03      	cmp	r4, #3
 80014c6:	d113      	bne.n	80014f0 <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 80014c8:	789a      	ldrb	r2, [r3, #2]
 80014ca:	2a01      	cmp	r2, #1
 80014cc:	d007      	beq.n	80014de <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80014ce:	4b78      	ldr	r3, [pc, #480]	; (80016b0 <Setup0_Process+0x268>)
 80014d0:	4620      	mov	r0, r4
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80014d8:	2803      	cmp	r0, #3
 80014da:	d128      	bne.n	800152e <Setup0_Process+0xe6>
 80014dc:	e035      	b.n	800154a <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 80014de:	889a      	ldrh	r2, [r3, #4]
 80014e0:	2a00      	cmp	r2, #0
 80014e2:	d1f4      	bne.n	80014ce <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 80014e4:	7a5b      	ldrb	r3, [r3, #9]
 80014e6:	0698      	lsls	r0, r3, #26
 80014e8:	d5f1      	bpl.n	80014ce <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 80014ea:	f7ff ff6d 	bl	80013c8 <Standard_SetDeviceFeature>
 80014ee:	e01c      	b.n	800152a <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 80014f0:	2c01      	cmp	r4, #1
 80014f2:	d1ec      	bne.n	80014ce <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 80014f4:	789a      	ldrb	r2, [r3, #2]
 80014f6:	2a01      	cmp	r2, #1
 80014f8:	d1e9      	bne.n	80014ce <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 80014fa:	889a      	ldrh	r2, [r3, #4]
 80014fc:	2a00      	cmp	r2, #0
 80014fe:	d1e6      	bne.n	80014ce <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 8001500:	7a5b      	ldrb	r3, [r3, #9]
 8001502:	0699      	lsls	r1, r3, #26
 8001504:	d5e3      	bpl.n	80014ce <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 8001506:	f7ff feb5 	bl	8001274 <Standard_ClearFeature>
 800150a:	e00e      	b.n	800152a <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800150c:	2a01      	cmp	r2, #1
 800150e:	d104      	bne.n	800151a <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001510:	2c0b      	cmp	r4, #11
 8001512:	d1dc      	bne.n	80014ce <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 8001514:	f7ff fe8a 	bl	800122c <Standard_SetInterface>
 8001518:	e007      	b.n	800152a <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800151a:	2a02      	cmp	r2, #2
 800151c:	d1d7      	bne.n	80014ce <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800151e:	2c01      	cmp	r4, #1
 8001520:	d0f1      	beq.n	8001506 <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8001522:	2c03      	cmp	r4, #3
 8001524:	d1d3      	bne.n	80014ce <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 8001526:	f7ff ff0d 	bl	8001344 <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800152a:	b110      	cbz	r0, 8001532 <Setup0_Process+0xea>
 800152c:	e7cf      	b.n	80014ce <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800152e:	2800      	cmp	r0, #0
 8001530:	d1bc      	bne.n	80014ac <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001532:	6832      	ldr	r2, [r6, #0]
 8001534:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <Setup0_Process+0x26c>)
 8001536:	b292      	uxth	r2, r2
 8001538:	4413      	add	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
 8001540:	4b5d      	ldr	r3, [pc, #372]	; (80016b8 <Setup0_Process+0x270>)
 8001542:	2230      	movs	r2, #48	; 0x30
 8001544:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8001546:	2306      	movs	r3, #6
 8001548:	e000      	b.n	800154c <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 800154a:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800154c:	682a      	ldr	r2, [r5, #0]
 800154e:	7213      	strb	r3, [r2, #8]
 8001550:	e0d4      	b.n	80016fc <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 8001552:	2c06      	cmp	r4, #6
 8001554:	d118      	bne.n	8001588 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001556:	781a      	ldrb	r2, [r3, #0]
 8001558:	0652      	lsls	r2, r2, #25
 800155a:	d17c      	bne.n	8001656 <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 800155c:	78da      	ldrb	r2, [r3, #3]
 800155e:	4b54      	ldr	r3, [pc, #336]	; (80016b0 <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 8001560:	2a01      	cmp	r2, #1
 8001562:	d102      	bne.n	800156a <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	69db      	ldr	r3, [r3, #28]
 8001568:	e06c      	b.n	8001644 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800156a:	2a02      	cmp	r2, #2
 800156c:	d102      	bne.n	8001574 <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6a1b      	ldr	r3, [r3, #32]
 8001572:	e067      	b.n	8001644 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8001574:	2a03      	cmp	r2, #3
 8001576:	d102      	bne.n	800157e <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157c:	e062      	b.n	8001644 <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 800157e:	2a21      	cmp	r2, #33	; 0x21
 8001580:	d169      	bne.n	8001656 <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001586:	e05d      	b.n	8001644 <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 8001588:	2c00      	cmp	r4, #0
 800158a:	d13c      	bne.n	8001606 <Setup0_Process+0x1be>
 800158c:	8859      	ldrh	r1, [r3, #2]
 800158e:	2900      	cmp	r1, #0
 8001590:	d161      	bne.n	8001656 <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001598:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800159c:	d15b      	bne.n	8001656 <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800159e:	781a      	ldrb	r2, [r3, #0]
 80015a0:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80015a4:	d104      	bne.n	80015b0 <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 80015a6:	889b      	ldrh	r3, [r3, #4]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f000 80ab 	beq.w	8001704 <Setup0_Process+0x2bc>
 80015ae:	e052      	b.n	8001656 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80015b0:	2a01      	cmp	r2, #1
 80015b2:	d10c      	bne.n	80015ce <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80015b4:	4a3e      	ldr	r2, [pc, #248]	; (80016b0 <Setup0_Process+0x268>)
 80015b6:	7918      	ldrb	r0, [r3, #4]
 80015b8:	6812      	ldr	r2, [r2, #0]
 80015ba:	6992      	ldr	r2, [r2, #24]
 80015bc:	4790      	blx	r2
 80015be:	2800      	cmp	r0, #0
 80015c0:	d149      	bne.n	8001656 <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 80015c2:	682b      	ldr	r3, [r5, #0]
 80015c4:	7a9b      	ldrb	r3, [r3, #10]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	f040 809c 	bne.w	8001704 <Setup0_Process+0x2bc>
 80015cc:	e043      	b.n	8001656 <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80015ce:	2a02      	cmp	r2, #2
 80015d0:	d141      	bne.n	8001656 <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80015d2:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80015d4:	4839      	ldr	r0, [pc, #228]	; (80016bc <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80015d6:	f003 010f 	and.w	r1, r3, #15
 80015da:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80015dc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80015e0:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 80015e4:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80015e6:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 80015e8:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80015ec:	bf14      	ite	ne
 80015ee:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 80015f2:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80015f6:	4281      	cmp	r1, r0
 80015f8:	d22d      	bcs.n	8001656 <Setup0_Process+0x20e>
 80015fa:	f013 0f70 	tst.w	r3, #112	; 0x70
 80015fe:	d12a      	bne.n	8001656 <Setup0_Process+0x20e>
          && (Status != 0))
 8001600:	2a00      	cmp	r2, #0
 8001602:	d17f      	bne.n	8001704 <Setup0_Process+0x2bc>
 8001604:	e027      	b.n	8001656 <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001606:	2c08      	cmp	r4, #8
 8001608:	d103      	bne.n	8001612 <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	065b      	lsls	r3, r3, #25
 800160e:	d07b      	beq.n	8001708 <Setup0_Process+0x2c0>
 8001610:	e021      	b.n	8001656 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8001612:	2c0a      	cmp	r4, #10
 8001614:	d11f      	bne.n	8001656 <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001616:	781a      	ldrb	r2, [r3, #0]
 8001618:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800161c:	2a01      	cmp	r2, #1
 800161e:	d11a      	bne.n	8001656 <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001620:	7a9a      	ldrb	r2, [r3, #10]
 8001622:	b1c2      	cbz	r2, 8001656 <Setup0_Process+0x20e>
 8001624:	8859      	ldrh	r1, [r3, #2]
 8001626:	b9b1      	cbnz	r1, 8001656 <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800162e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001632:	d110      	bne.n	8001656 <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001634:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <Setup0_Process+0x268>)
 8001636:	7918      	ldrb	r0, [r3, #4]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	6992      	ldr	r2, [r2, #24]
 800163c:	4790      	blx	r2
 800163e:	2800      	cmp	r0, #0
 8001640:	d064      	beq.n	800170c <Setup0_Process+0x2c4>
 8001642:	e008      	b.n	8001656 <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 8001644:	b13b      	cbz	r3, 8001656 <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001646:	682a      	ldr	r2, [r5, #0]
 8001648:	2400      	movs	r4, #0
 800164a:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800164c:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800164e:	4620      	mov	r0, r4
 8001650:	4798      	blx	r3
    Result = USB_SUCCESS;
 8001652:	4620      	mov	r0, r4
 8001654:	e00a      	b.n	800166c <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001656:	4b16      	ldr	r3, [pc, #88]	; (80016b0 <Setup0_Process+0x268>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	6912      	ldr	r2, [r2, #16]
 800165e:	7858      	ldrb	r0, [r3, #1]
 8001660:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8001662:	2803      	cmp	r0, #3
 8001664:	d102      	bne.n	800166c <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 8001666:	4b11      	ldr	r3, [pc, #68]	; (80016ac <Setup0_Process+0x264>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	e005      	b.n	8001678 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800166c:	682b      	ldr	r3, [r5, #0]
 800166e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001672:	8a1a      	ldrh	r2, [r3, #16]
 8001674:	428a      	cmp	r2, r1
 8001676:	d101      	bne.n	800167c <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001678:	2209      	movs	r2, #9
 800167a:	e003      	b.n	8001684 <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800167c:	2802      	cmp	r0, #2
 800167e:	d000      	beq.n	8001682 <Setup0_Process+0x23a>
 8001680:	b912      	cbnz	r2, 8001688 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 8001682:	2208      	movs	r2, #8
 8001684:	721a      	strb	r2, [r3, #8]
 8001686:	e039      	b.n	80016fc <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 8001688:	f993 1000 	ldrsb.w	r1, [r3]
 800168c:	2900      	cmp	r1, #0
 800168e:	da2f      	bge.n	80016f0 <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 8001690:	88d9      	ldrh	r1, [r3, #6]
 8001692:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 8001694:	9801      	ldr	r0, [sp, #4]
 8001696:	4282      	cmp	r2, r0
 8001698:	4805      	ldr	r0, [pc, #20]	; (80016b0 <Setup0_Process+0x268>)
 800169a:	d911      	bls.n	80016c0 <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 800169c:	9a01      	ldr	r2, [sp, #4]
 800169e:	821a      	strh	r2, [r3, #16]
 80016a0:	e01f      	b.n	80016e2 <Setup0_Process+0x29a>
 80016a2:	bf00      	nop
 80016a4:	40005c50 	andmi	r5, r0, r0, asr ip
 80016a8:	20003004 	andcs	r3, r0, r4
 80016ac:	20000304 	andcs	r0, r0, r4, lsl #6
 80016b0:	200002dc 	ldrdcs	r0, [r0], -ip
 80016b4:	20003002 	andcs	r3, r0, r2
 80016b8:	200002d4 	ldrdcs	r0, [r0], -r4
 80016bc:	20000090 	mulcs	r0, r0, r0
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 80016c0:	428a      	cmp	r2, r1
 80016c2:	d20e      	bcs.n	80016e2 <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 80016c4:	6801      	ldr	r1, [r0, #0]
 80016c6:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 80016ca:	428a      	cmp	r2, r1
 80016cc:	d201      	bcs.n	80016d2 <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 80016ce:	2100      	movs	r1, #0
 80016d0:	e005      	b.n	80016de <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 80016d2:	fb92 f4f1 	sdiv	r4, r2, r1
 80016d6:	fb01 2214 	mls	r2, r1, r4, r2
 80016da:	b912      	cbnz	r2, 80016e2 <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 80016dc:	2101      	movs	r1, #1
 80016de:	4a0c      	ldr	r2, [pc, #48]	; (8001710 <Setup0_Process+0x2c8>)
 80016e0:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 80016e2:	6802      	ldr	r2, [r0, #0]
 80016e4:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 80016e8:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 80016ea:	f7ff fd2f 	bl	800114c <DataStageIn>
 80016ee:	e005      	b.n	80016fc <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 80016f0:	2203      	movs	r2, #3
 80016f2:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <Setup0_Process+0x2cc>)
 80016f6:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 80016fa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 80016fc:	f7ff fe84 	bl	8001408 <Post0_Process>
}
 8001700:	b002      	add	sp, #8
 8001702:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <Setup0_Process+0x2d0>)
 8001706:	e79e      	b.n	8001646 <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <Setup0_Process+0x2d4>)
 800170a:	e79c      	b.n	8001646 <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 800170c:	4b04      	ldr	r3, [pc, #16]	; (8001720 <Setup0_Process+0x2d8>)
 800170e:	e79a      	b.n	8001646 <Setup0_Process+0x1fe>
 8001710:	20000b24 	andcs	r0, r0, r4, lsr #22
 8001714:	200002d2 	ldrdcs	r0, [r0], -r2
 8001718:	080010bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, ip}
 800171c:	08001075 	stmdaeq	r0, {r0, r2, r4, r5, r6, ip}
 8001720:	08001099 	stmdaeq	r0, {r0, r3, r4, r7, ip}

08001724 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 8001724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 8001726:	4d2b      	ldr	r5, [pc, #172]	; (80017d4 <Out0_Process+0xb0>)
 8001728:	682c      	ldr	r4, [r5, #0]
 800172a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800172c:	2b03      	cmp	r3, #3
 800172e:	d001      	beq.n	8001734 <Out0_Process+0x10>
 8001730:	2b05      	cmp	r3, #5
 8001732:	d141      	bne.n	80017b8 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8001734:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8001736:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8001738:	b1ab      	cbz	r3, 8001766 <Out0_Process+0x42>
 800173a:	b1a2      	cbz	r2, 8001766 <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 800173c:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800173e:	4296      	cmp	r6, r2
 8001740:	bf28      	it	cs
 8001742:	4616      	movcs	r6, r2
 8001744:	4630      	mov	r0, r6
 8001746:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8001748:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800174a:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800174c:	1b9b      	subs	r3, r3, r6
 800174e:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8001750:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8001752:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8001754:	4433      	add	r3, r6
 8001756:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8001758:	f7ff fb8a 	bl	8000e70 <GetEPRxAddr>
 800175c:	4632      	mov	r2, r6
 800175e:	4601      	mov	r1, r0
 8001760:	4638      	mov	r0, r7
 8001762:	f000 f8a5 	bl	80018b0 <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 8001766:	8a23      	ldrh	r3, [r4, #16]
 8001768:	b153      	cbz	r3, 8001780 <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800176a:	4b1b      	ldr	r3, [pc, #108]	; (80017d8 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 800176c:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800176e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8001772:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001774:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8001776:	f7ff fb89 	bl	8000e8c <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800177a:	4b18      	ldr	r3, [pc, #96]	; (80017dc <Out0_Process+0xb8>)
 800177c:	2230      	movs	r2, #48	; 0x30
 800177e:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 8001780:	8a23      	ldrh	r3, [r4, #16]
 8001782:	8aa2      	ldrh	r2, [r4, #20]
 8001784:	429a      	cmp	r2, r3
 8001786:	d802      	bhi.n	800178e <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 8001788:	682b      	ldr	r3, [r5, #0]
 800178a:	2203      	movs	r2, #3
 800178c:	e002      	b.n	8001794 <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 800178e:	b11b      	cbz	r3, 8001798 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 8001790:	682b      	ldr	r3, [r5, #0]
 8001792:	2205      	movs	r2, #5
 8001794:	721a      	strb	r2, [r3, #8]
 8001796:	e00c      	b.n	80017b2 <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 8001798:	682a      	ldr	r2, [r5, #0]
 800179a:	2106      	movs	r1, #6
 800179c:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 800179e:	4a10      	ldr	r2, [pc, #64]	; (80017e0 <Out0_Process+0xbc>)
 80017a0:	6811      	ldr	r1, [r2, #0]
 80017a2:	4a10      	ldr	r2, [pc, #64]	; (80017e4 <Out0_Process+0xc0>)
 80017a4:	b289      	uxth	r1, r1
 80017a6:	440a      	add	r2, r1
 80017a8:	0052      	lsls	r2, r2, #1
 80017aa:	6013      	str	r3, [r2, #0]
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <Out0_Process+0xb8>)
 80017ae:	2230      	movs	r2, #48	; 0x30
 80017b0:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 80017b2:	682b      	ldr	r3, [r5, #0]
 80017b4:	7a1b      	ldrb	r3, [r3, #8]
 80017b6:	e006      	b.n	80017c6 <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80017b8:	2b07      	cmp	r3, #7
 80017ba:	d103      	bne.n	80017c4 <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <Out0_Process+0xc4>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 80017c4:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80017c6:	682a      	ldr	r2, [r5, #0]
 80017c8:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 80017ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80017ce:	f7ff be1b 	b.w	8001408 <Post0_Process>
 80017d2:	bf00      	nop
 80017d4:	20000304 	andcs	r0, r0, r4, lsl #6
 80017d8:	200002d2 	ldrdcs	r0, [r0], -r2
 80017dc:	200002d4 	ldrdcs	r0, [r0], -r4
 80017e0:	40005c50 	andmi	r5, r0, r0, asr ip
 80017e4:	20003002 	andcs	r3, r0, r2
 80017e8:	200002dc 	ldrdcs	r0, [r0], -ip

080017ec <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 80017ec:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 80017ee:	4b0b      	ldr	r3, [pc, #44]	; (800181c <SetDeviceAddress+0x30>)
 80017f0:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 80017f2:	2300      	movs	r3, #0
 80017f4:	42a3      	cmp	r3, r4
 80017f6:	d20c      	bcs.n	8001812 <SetDeviceAddress+0x26>
 80017f8:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 80017fc:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8001800:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 8001802:	680d      	ldr	r5, [r1, #0]
 8001804:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8001808:	402a      	ands	r2, r5
 800180a:	431a      	orrs	r2, r3
 800180c:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800180e:	3301      	adds	r3, #1
 8001810:	e7f0      	b.n	80017f4 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8001812:	4b03      	ldr	r3, [pc, #12]	; (8001820 <SetDeviceAddress+0x34>)
 8001814:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001818:	6018      	str	r0, [r3, #0]
 800181a:	bd30      	pop	{r4, r5, pc}
 800181c:	20000090 	mulcs	r0, r0, r0
 8001820:	40005c4c 	andmi	r5, r0, ip, asr #24

08001824 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 8001824:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 8001826:	4c13      	ldr	r4, [pc, #76]	; (8001874 <In0_Process+0x50>)
 8001828:	6823      	ldr	r3, [r4, #0]
 800182a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800182c:	2a02      	cmp	r2, #2
 800182e:	d001      	beq.n	8001834 <In0_Process+0x10>
 8001830:	2a04      	cmp	r2, #4
 8001832:	d104      	bne.n	800183e <In0_Process+0x1a>
  {
    DataStageIn();
 8001834:	f7ff fc8a 	bl	800114c <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8001838:	6823      	ldr	r3, [r4, #0]
 800183a:	7a1b      	ldrb	r3, [r3, #8]
 800183c:	e013      	b.n	8001866 <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 800183e:	2a06      	cmp	r2, #6
 8001840:	d110      	bne.n	8001864 <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001842:	785a      	ldrb	r2, [r3, #1]
 8001844:	2a05      	cmp	r2, #5
 8001846:	d109      	bne.n	800185c <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8001848:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800184a:	0652      	lsls	r2, r2, #25
 800184c:	d106      	bne.n	800185c <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800184e:	7898      	ldrb	r0, [r3, #2]
 8001850:	f7ff ffcc 	bl	80017ec <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <In0_Process+0x54>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6a1b      	ldr	r3, [r3, #32]
 800185a:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 800185c:	4b07      	ldr	r3, [pc, #28]	; (800187c <In0_Process+0x58>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 8001864:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 8001866:	6822      	ldr	r2, [r4, #0]
 8001868:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 800186a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800186e:	f7ff bdcb 	b.w	8001408 <Post0_Process>
 8001872:	bf00      	nop
 8001874:	20000304 	andcs	r0, r0, r4, lsl #6
 8001878:	20000300 	andcs	r0, r0, r0, lsl #6
 800187c:	200002dc 	ldrdcs	r0, [r0], -ip

08001880 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 8001880:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8001882:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 8001886:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 8001888:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 800188c:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 800188e:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 8001890:	2300      	movs	r3, #0
 8001892:	4293      	cmp	r3, r2
 8001894:	f100 0002 	add.w	r0, r0, #2
 8001898:	d009      	beq.n	80018ae <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 800189a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 800189e:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 80018a2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 80018a6:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 80018aa:	3301      	adds	r3, #1
 80018ac:	e7f1      	b.n	8001892 <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 80018ae:	bd30      	pop	{r4, r5, pc}

080018b0 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80018b0:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80018b2:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 80018b6:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80018b8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 80018bc:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80018be:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80018c0:	2300      	movs	r3, #0
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d005      	beq.n	80018d2 <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 80018c6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80018ca:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 80018ce:	3301      	adds	r3, #1
 80018d0:	e7f7      	b.n	80018c2 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 80018d2:	bd10      	pop	{r4, pc}

Disassembly of section .data:

20000000 <Device_Property>:
20000000:	0800050d 	stmdaeq	r0, {r0, r2, r3, r8, sl}
20000004:	080001fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8}
20000008:	080001bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r8}
2000000c:	080001bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8}
20000010:	080002a5 	stmdaeq	r0, {r0, r2, r5, r7, r9}
20000014:	08000349 	stmdaeq	r0, {r0, r3, r6, r8, r9}
20000018:	080001bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8}
2000001c:	08000305 	stmdaeq	r0, {r0, r2, r8, r9}
20000020:	08000311 	stmdaeq	r0, {r0, r4, r8, r9}
20000024:	0800031d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9}
20000028:	0800033d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9}
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000040 	andeq	r0, r0, r0, asr #32

20000034 <pEpInt_IN>:
20000034:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000038:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
2000003c:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000040:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000044:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000048:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
2000004c:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}

20000050 <pEpInt_OUT>:
20000050:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000054:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000058:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
2000005c:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000060:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000064:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000068:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}

2000006c <User_Standard_Requests>:
2000006c:	080001c9 	stmdaeq	r0, {r0, r3, r6, r7, r8}
20000070:	080001cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8}
20000074:	080001e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8}
20000078:	080001e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8}
2000007c:	080001e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8}
20000080:	080001eb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8}
20000084:	080001ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8}
20000088:	080001ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8}
2000008c:	080001f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8}

20000090 <Device_Table>:
20000090:	00000101 	andeq	r0, r0, r1, lsl #2

20000094 <usbStringDescriptor>:
20000094:	200000e8 	andcs	r0, r0, r8, ror #1
20000098:	00000004 	andeq	r0, r0, r4
2000009c:	20000132 	andcs	r0, r0, r2, lsr r1
200000a0:	00000012 	andeq	r0, r0, r2, lsl r0
200000a4:	2000014c 	andcs	r0, r0, ip, asr #2
200000a8:	00000014 	andeq	r0, r0, r4, lsl r0
200000ac:	20000119 	andcs	r0, r0, r9, lsl r1
200000b0:	00000010 	andeq	r0, r0, r0, lsl r0
200000b4:	20000160 	andcs	r0, r0, r0, ror #2
200000b8:	00000080 	andeq	r0, r0, r0, lsl #1
200000bc:	200001e0 	andcs	r0, r0, r0, ror #3
200000c0:	0000006c 	andeq	r0, r0, ip, rrx
200000c4:	2000024c 	andcs	r0, r0, ip, asr #4
200000c8:	0000006c 	andeq	r0, r0, ip, rrx

200000cc <u8_usbDeviceDescriptorDFU>:
200000cc:	01000112 	tsteq	r0, r2, lsl r1
200000d0:	40000000 	andmi	r0, r0, r0
200000d4:	00031eaf 	andeq	r1, r3, pc, lsr #29
200000d8:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000dc:	00000103 	andeq	r0, r0, r3, lsl #2

200000e0 <usbFunctionalDescriptor>:
200000e0:	20000129 	andcs	r0, r0, r9, lsr #2
200000e4:	00000009 	andeq	r0, r0, r9

200000e8 <u8_usbStringLangId>:
200000e8:	04090304 	streq	r0, [r9], #-772	; 0x304

200000ec <u8_usbConfigDescriptorDFU>:
200000ec:	002d0209 	eoreq	r0, sp, r9, lsl #4
200000f0:	80000101 	andhi	r0, r0, r1, lsl #2
200000f4:	00040932 	andeq	r0, r4, r2, lsr r9
200000f8:	01fe0000 	mvnseq	r0, r0
200000fc:	04090402 	streq	r0, [r9], #-1026	; 0x402
20000100:	fe000100 	cdp2	1, 0, cr0, cr0, cr0, {0}
20000104:	09050201 	stmdbeq	r5, {r0, r9}
20000108:	00020004 	andeq	r0, r2, r4
2000010c:	060201fe 			; <UNDEFINED> instruction: 0x060201fe
20000110:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000114:	10080000 	andne	r0, r8, r0
20000118:	4c031001 	stcmi	0, cr1, [r3], {1}

20000119 <u8_usbStringSerial>:
20000119:	004c0310 	subeq	r0, ip, r0, lsl r3
2000011d:	004d004c 	subeq	r0, sp, ip, asr #32
20000121:	00300020 	eorseq	r0, r0, r0, lsr #32
20000125:	00330030 	eorseq	r0, r3, r0, lsr r0

20000129 <u8_usbFunctionalDescriptor>:
20000129:	ff032109 			; <UNDEFINED> instruction: 0xff032109
2000012d:	10080000 	andne	r0, r8, r0
20000131:	4c031201 	sfmmi	f1, 4, [r3], {1}

20000132 <u8_usbStringVendor>:
20000132:	004c0312 	subeq	r0, ip, r2, lsl r3
20000136:	00610065 	rsbeq	r0, r1, r5, rrx
2000013a:	004c0066 	subeq	r0, ip, r6, rrx
2000013e:	00620061 	rsbeq	r0, r2, r1, rrx
20000142:	00cc0073 	sbceq	r0, ip, r3, ror r0

20000144 <usbDeviceDescriptorDFU>:
20000144:	200000cc 	andcs	r0, r0, ip, asr #1
20000148:	00000012 	andeq	r0, r0, r2, lsl r0

2000014c <u8_usbStringProduct>:
2000014c:	004d0314 	subeq	r0, sp, r4, lsl r3
20000150:	00700061 	rsbseq	r0, r0, r1, rrx
20000154:	0065006c 	rsbeq	r0, r5, ip, rrx
20000158:	00300020 	eorseq	r0, r0, r0, lsr #32
2000015c:	00330030 	eorseq	r0, r3, r0, lsr r0

20000160 <u8_usbStringAlt0>:
20000160:	00530380 	subseq	r0, r3, r0, lsl #7
20000164:	004d0054 	subeq	r0, sp, r4, asr r0
20000168:	00320033 	eorseq	r0, r2, r3, lsr r0
2000016c:	00750064 	rsbseq	r0, r5, r4, rrx
20000170:	006e0069 	rsbeq	r0, lr, r9, rrx
20000174:	0020006f 	eoreq	r0, r0, pc, rrx
20000178:	006f0062 	rsbeq	r0, pc, r2, rrx
2000017c:	0074006f 	rsbseq	r0, r4, pc, rrx
20000180:	006f006c 	rsbeq	r0, pc, ip, rrx
20000184:	00640061 	rsbeq	r0, r4, r1, rrx
20000188:	00720065 	rsbseq	r0, r2, r5, rrx
2000018c:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000190:	002e0031 	eoreq	r0, lr, r1, lsr r0
20000194:	00200030 	eoreq	r0, r0, r0, lsr r0
20000198:	00450020 	subeq	r0, r5, r0, lsr #32
2000019c:	00520052 	subseq	r0, r2, r2, asr r0
200001a0:	0052004f 	subseq	r0, r2, pc, asr #32
200001a4:	0020002e 	eoreq	r0, r0, lr, lsr #32
200001a8:	00700055 	rsbseq	r0, r0, r5, asr r0
200001ac:	006f006c 	rsbeq	r0, pc, ip, rrx
200001b0:	00640061 	rsbeq	r0, r4, r1, rrx
200001b4:	00740020 	rsbseq	r0, r4, r0, lsr #32
200001b8:	0020006f 	eoreq	r0, r0, pc, rrx
200001bc:	00410052 	subeq	r0, r1, r2, asr r0
200001c0:	0020004d 	eoreq	r0, r0, sp, asr #32
200001c4:	006f006e 	rsbeq	r0, pc, lr, rrx
200001c8:	00200074 	eoreq	r0, r0, r4, ror r0
200001cc:	00750073 	rsbseq	r0, r5, r3, ror r0
200001d0:	00700070 	rsbseq	r0, r0, r0, ror r0
200001d4:	0072006f 	rsbseq	r0, r2, pc, rrx
200001d8:	00650074 	rsbeq	r0, r5, r4, ror r0
200001dc:	002e0064 	eoreq	r0, lr, r4, rrx

200001e0 <u8_usbStringAlt1>:
200001e0:	0053036c 	subseq	r0, r3, ip, ror #6
200001e4:	004d0054 	subeq	r0, sp, r4, asr r0
200001e8:	00320033 	eorseq	r0, r2, r3, lsr r0
200001ec:	00750064 	rsbseq	r0, r5, r4, rrx
200001f0:	006e0069 	rsbeq	r0, lr, r9, rrx
200001f4:	0020006f 	eoreq	r0, r0, pc, rrx
200001f8:	006f0062 	rsbeq	r0, pc, r2, rrx
200001fc:	0074006f 	rsbseq	r0, r4, pc, rrx
20000200:	006f006c 	rsbeq	r0, pc, ip, rrx
20000204:	00640061 	rsbeq	r0, r4, r1, rrx
20000208:	00720065 	rsbseq	r0, r2, r5, rrx
2000020c:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000210:	002e0031 	eoreq	r0, lr, r1, lsr r0
20000214:	00200030 	eoreq	r0, r0, r0, lsr r0
20000218:	00550020 	subseq	r0, r5, r0, lsr #32
2000021c:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000220:	0061006f 	rsbeq	r0, r1, pc, rrx
20000224:	00200064 	eoreq	r0, r0, r4, rrx
20000228:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
2000022c:	00460020 	subeq	r0, r6, r0, lsr #32
20000230:	0061006c 	rsbeq	r0, r1, ip, rrx
20000234:	00680073 	rsbeq	r0, r8, r3, ror r0
20000238:	00300020 	eorseq	r0, r0, r0, lsr #32
2000023c:	00380078 	eorseq	r0, r8, r8, ror r0
20000240:	00300030 	eorseq	r0, r0, r0, lsr r0
20000244:	00300035 	eorseq	r0, r0, r5, lsr r0
20000248:	00300030 	eorseq	r0, r0, r0, lsr r0

2000024c <u8_usbStringAlt2>:
2000024c:	0053036c 	subseq	r0, r3, ip, ror #6
20000250:	004d0054 	subeq	r0, sp, r4, asr r0
20000254:	00320033 	eorseq	r0, r2, r3, lsr r0
20000258:	00750064 	rsbseq	r0, r5, r4, rrx
2000025c:	006e0069 	rsbeq	r0, lr, r9, rrx
20000260:	0020006f 	eoreq	r0, r0, pc, rrx
20000264:	006f0062 	rsbeq	r0, pc, r2, rrx
20000268:	0074006f 	rsbseq	r0, r4, pc, rrx
2000026c:	006f006c 	rsbeq	r0, pc, ip, rrx
20000270:	00640061 	rsbeq	r0, r4, r1, rrx
20000274:	00720065 	rsbseq	r0, r2, r5, rrx
20000278:	00760020 	rsbseq	r0, r6, r0, lsr #32
2000027c:	002e0031 	eoreq	r0, lr, r1, lsr r0
20000280:	00200030 	eoreq	r0, r0, r0, lsr r0
20000284:	00550020 	subseq	r0, r5, r0, lsr #32
20000288:	006c0070 	rsbeq	r0, ip, r0, ror r0
2000028c:	0061006f 	rsbeq	r0, r1, pc, rrx
20000290:	00200064 	eoreq	r0, r0, r4, rrx
20000294:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000298:	00460020 	subeq	r0, r6, r0, lsr #32
2000029c:	0061006c 	rsbeq	r0, r1, ip, rrx
200002a0:	00680073 	rsbeq	r0, r8, r3, ror r0
200002a4:	00300020 	eorseq	r0, r0, r0, lsr #32
200002a8:	00380078 	eorseq	r0, r8, r8, ror r0
200002ac:	00300030 	eorseq	r0, r0, r0, lsr r0
200002b0:	00300032 	eorseq	r0, r0, r2, lsr r0
200002b4:	00300030 	eorseq	r0, r0, r0, lsr r0

200002b8 <usbConfigDescriptorDFU>:
200002b8:	200000ec 	andcs	r0, r0, ip, ror #1
200002bc:	0000002d 	andeq	r0, r0, sp, lsr #32

200002c0 <userAppEnd>:
200002c0:	20005000 	andcs	r5, r0, r0

200002c4 <userAppAddr>:
200002c4:	20000c00 	andcs	r0, r0, r0, lsl #24

Disassembly of section .bss:

200002c8 <_sbss>:
200002c8:	00000000 	andeq	r0, r0, r0

200002cc <wIstr>:
	...

200002ce <ResumeS>:
	...

200002d0 <code_copy_lock>:
	...

200002d2 <SaveRState>:
	...

200002d4 <SaveTState>:
200002d4:	00000000 	andeq	r0, r0, r0

200002d8 <SaveState>:
200002d8:	00000000 	andeq	r0, r0, r0

200002dc <pProperty>:
200002dc:	00000000 	andeq	r0, r0, r0

200002e0 <EPindex>:
200002e0:	00000000 	andeq	r0, r0, r0

200002e4 <Device_Info>:
	...

20000300 <pUser_Standard_Requests>:
20000300:	00000000 	andeq	r0, r0, r0

20000304 <pInformation>:
20000304:	00000000 	andeq	r0, r0, r0

20000308 <wInterrupt_Mask>:
	...

2000030a <StatusInfo>:
	...

Disassembly of section .bss.bIntPackSOF:

2000030c <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

20000310 <bDeviceState>:
20000310:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

20000314 <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000b14 <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000b16 <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000b18 <userFirmwareLen>:
20000b18:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000b1c <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000b1d <dfuAppStatus>:
20000b1d:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .bss.dfuBusy:

20000b23 <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000b24 <Data_Mul_MaxPacketSize>:
	...

Disassembly of section ._usrstack:

20000b25 <_susrstack-0x3>:
20000b25:	00000000 	andeq	r0, r0, r0

20000b28 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
  34:	30343130 	eorscc	r3, r4, r0, lsr r1
  38:	20383232 	eorscs	r3, r8, r2, lsr r2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <BootRAM+0xef6fa9f>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	33383032 	teqcc	r8, #50	; 0x32
  6c:	005d3232 	subseq	r3, sp, r2, lsr r2

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x45c3c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x0000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	080001b4 	stmdaeq	r0, {r2, r4, r5, r7, r8}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	007e0002 	rsbseq	r0, lr, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	00000114 	andeq	r0, r0, r4, lsl r1
  4c:	01020002 	tsteq	r2, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	080001b8 	stmdaeq	r0, {r3, r4, r5, r7, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	080001ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8}
  64:	00000002 	andeq	r0, r0, r2
  68:	080001bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8}
  6c:	00000002 	andeq	r0, r0, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}
  74:	0000000a 	andeq	r0, r0, sl
  78:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	080001e4 	stmdaeq	r0, {r2, r5, r6, r7, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
  94:	00000002 	andeq	r0, r0, r2
  98:	080001e8 	stmdaeq	r0, {r3, r5, r6, r7, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
  a4:	00000002 	andeq	r0, r0, r2
  a8:	080001ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
  b4:	00000002 	andeq	r0, r0, r2
  b8:	080001f0 	stmdaeq	r0, {r4, r5, r6, r7, r8}
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	08000304 	stmdaeq	r0, {r2, r8, r9}
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000310 	stmdaeq	r0, {r4, r8, r9}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
  e4:	00000020 	andeq	r0, r0, r0, lsr #32
  e8:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	08000348 	stmdaeq	r0, {r3, r6, r8, r9}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  fc:	00000078 	andeq	r0, r0, r8, ror r0
 100:	00000000 	andeq	r0, r0, r0
 104:	00000004 	andeq	r0, r0, r4
 108:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	08000404 	stmdaeq	r0, {r2, sl}
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
 11c:	00000084 	andeq	r0, r0, r4, lsl #1
 120:	080004a0 	stmdaeq	r0, {r5, r7, sl}
 124:	00000028 	andeq	r0, r0, r8, lsr #32
 128:	080004c8 	stmdaeq	r0, {r3, r6, r7, sl}
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	080004e4 	stmdaeq	r0, {r2, r5, r6, r7, sl}
 134:	00000004 	andeq	r0, r0, r4
 138:	080004e8 	stmdaeq	r0, {r3, r5, r6, r7, sl}
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	0800054c 	stmdaeq	r0, {r2, r3, r6, r8, sl}
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
 154:	000000b4 	strheq	r0, [r0], -r4
	...
 160:	00000014 	andeq	r0, r0, r4, lsl r0
 164:	0e120002 	cdpeq	0, 1, cr0, cr2, cr2, {0}
 168:	00040000 	andeq	r0, r4, r0
	...
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	10530002 	subsne	r0, r3, r2
 180:	00040000 	andeq	r0, r4, r0
 184:	00000000 	andeq	r0, r0, r0
 188:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 18c:	000000b8 	strheq	r0, [r0], -r8
	...
 198:	000000bc 	strheq	r0, [r0], -ip
 19c:	13250002 	teqne	r5, #2
 1a0:	00040000 	andeq	r0, r4, r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
 1ac:	00000016 	andeq	r0, r0, r6, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000012 	andeq	r0, r0, r2, lsl r0
 1b8:	080006f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl}
 1bc:	00000004 	andeq	r0, r0, r4
 1c0:	080006f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl}
 1c4:	00000050 	andeq	r0, r0, r0, asr r0
 1c8:	08000748 	stmdaeq	r0, {r3, r6, r8, r9, sl}
 1cc:	00000048 	andeq	r0, r0, r8, asr #32
 1d0:	08000790 	stmdaeq	r0, {r4, r7, r8, r9, sl}
 1d4:	00000060 	andeq	r0, r0, r0, rrx
 1d8:	080007f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl}
 1dc:	00000014 	andeq	r0, r0, r4, lsl r0
 1e0:	08000804 	stmdaeq	r0, {r2, fp}
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	08000820 	stmdaeq	r0, {r5, fp}
 1ec:	00000014 	andeq	r0, r0, r4, lsl r0
 1f0:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 1f4:	0000006c 	andeq	r0, r0, ip, rrx
 1f8:	080008a0 	stmdaeq	r0, {r5, r7, fp}
 1fc:	00000024 	andeq	r0, r0, r4, lsr #32
 200:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
 204:	0000002c 	andeq	r0, r0, ip, lsr #32
 208:	080008f0 	stmdaeq	r0, {r4, r5, r6, r7, fp}
 20c:	00000014 	andeq	r0, r0, r4, lsl r0
 210:	08000904 	stmdaeq	r0, {r2, r8, fp}
 214:	00000034 	andeq	r0, r0, r4, lsr r0
 218:	00000000 	andeq	r0, r0, r0
 21c:	00000030 	andeq	r0, r0, r0, lsr r0
 220:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 224:	0000004c 	andeq	r0, r0, ip, asr #32
 228:	08000984 	stmdaeq	r0, {r2, r7, r8, fp}
 22c:	0000000c 	andeq	r0, r0, ip
 230:	08000990 	stmdaeq	r0, {r4, r7, r8, fp}
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	080009a8 	stmdaeq	r0, {r3, r5, r7, r8, fp}
 23c:	00000012 	andeq	r0, r0, r2, lsl r0
 240:	080009bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp}
 244:	00000010 	andeq	r0, r0, r0, lsl r0
 248:	080009cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp}
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 258:	0000007c 	andeq	r0, r0, ip, ror r0
 25c:	1c1a0002 	ldcne	0, cr0, [sl], {2}
 260:	00040000 	andeq	r0, r4, r0
 264:	00000000 	andeq	r0, r0, r0
 268:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
 26c:	0000005c 	andeq	r0, r0, ip, asr r0
 270:	08000a40 	stmdaeq	r0, {r6, r9, fp}
 274:	00000044 	andeq	r0, r0, r4, asr #32
 278:	00000000 	andeq	r0, r0, r0
 27c:	00000002 	andeq	r0, r0, r2
 280:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
 284:	00000018 	andeq	r0, r0, r8, lsl r0
 288:	08000a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp}
 28c:	00000018 	andeq	r0, r0, r8, lsl r0
 290:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
 294:	00000028 	andeq	r0, r0, r8, lsr #32
 298:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 29c:	00000034 	andeq	r0, r0, r4, lsr r0
 2a0:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
 2a4:	0000005c 	andeq	r0, r0, ip, asr r0
 2a8:	08000b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp}
 2ac:	00000234 	andeq	r0, r0, r4, lsr r2
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	0000000c 	andeq	r0, r0, ip
 2c0:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 2cc:	00000004 	andeq	r0, r0, r4
	...
 2d8:	000001ec 	andeq	r0, r0, ip, ror #3
 2dc:	22730002 	rsbscs	r0, r3, #2
 2e0:	00040000 	andeq	r0, r4, r0
	...
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000000c 	andeq	r0, r0, ip
 300:	00000000 	andeq	r0, r0, r0
 304:	0000000c 	andeq	r0, r0, ip
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000000c 	andeq	r0, r0, ip
 310:	00000000 	andeq	r0, r0, r0
 314:	0000000c 	andeq	r0, r0, ip
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	00000010 	andeq	r0, r0, r0, lsl r0
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000000e 	andeq	r0, r0, lr
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000010 	andeq	r0, r0, r0, lsl r0
 340:	00000000 	andeq	r0, r0, r0
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	00000000 	andeq	r0, r0, r0
 34c:	00000012 	andeq	r0, r0, r2, lsl r0
 350:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
 354:	0000002a 	andeq	r0, r0, sl, lsr #32
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000002a 	andeq	r0, r0, sl, lsr #32
 360:	00000000 	andeq	r0, r0, r0
 364:	00000024 	andeq	r0, r0, r4, lsr #32
 368:	00000000 	andeq	r0, r0, r0
 36c:	00000012 	andeq	r0, r0, r2, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	00000012 	andeq	r0, r0, r2, lsl r0
 378:	00000000 	andeq	r0, r0, r0
 37c:	0000001e 	andeq	r0, r0, lr, lsl r0
 380:	08000dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp}
 384:	0000001e 	andeq	r0, r0, lr, lsl r0
 388:	00000000 	andeq	r0, r0, r0
 38c:	0000001e 	andeq	r0, r0, lr, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	0000001c 	andeq	r0, r0, ip, lsl r0
 398:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	0000001e 	andeq	r0, r0, lr, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	00000018 	andeq	r0, r0, r8, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	00000020 	andeq	r0, r0, r0, lsr #32
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	00000020 	andeq	r0, r0, r0, lsr #32
 3e8:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
 3ec:	00000020 	andeq	r0, r0, r0, lsr #32
 3f0:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 3f4:	00000020 	andeq	r0, r0, r0, lsr #32
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	0000001e 	andeq	r0, r0, lr, lsl r0
 400:	00000000 	andeq	r0, r0, r0
 404:	00000012 	andeq	r0, r0, r2, lsl r0
 408:	00000000 	andeq	r0, r0, r0
 40c:	00000020 	andeq	r0, r0, r0, lsr #32
 410:	00000000 	andeq	r0, r0, r0
 414:	00000020 	andeq	r0, r0, r0, lsr #32
 418:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	08000e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp}
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	00000026 	andeq	r0, r0, r6, lsr #32
 438:	08000ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp}
 43c:	00000040 	andeq	r0, r0, r0, asr #32
 440:	00000000 	andeq	r0, r0, r0
 444:	00000020 	andeq	r0, r0, r0, lsr #32
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000020 	andeq	r0, r0, r0, lsr #32
 450:	00000000 	andeq	r0, r0, r0
 454:	00000038 	andeq	r0, r0, r8, lsr r0
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	00000000 	andeq	r0, r0, r0
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	00000000 	andeq	r0, r0, r0
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	00000000 	andeq	r0, r0, r0
 47c:	000000a8 	andeq	r0, r0, r8, lsr #1
 480:	00000000 	andeq	r0, r0, r0
 484:	0000005c 	andeq	r0, r0, ip, asr r0
 488:	00000000 	andeq	r0, r0, r0
 48c:	0000005c 	andeq	r0, r0, ip, asr r0
 490:	00000000 	andeq	r0, r0, r0
 494:	00000020 	andeq	r0, r0, r0, lsr #32
 498:	00000000 	andeq	r0, r0, r0
 49c:	00000020 	andeq	r0, r0, r0, lsr #32
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	00000044 	andeq	r0, r0, r4, asr #32
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	0000003a 	andeq	r0, r0, sl, lsr r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00000006 	andeq	r0, r0, r6
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	0000000a 	andeq	r0, r0, sl
	...
 4c8:	00000024 	andeq	r0, r0, r4, lsr #32
 4cc:	2eff0002 	cdpcs	0, 15, cr0, cr15, cr2, {0}
 4d0:	00040000 	andeq	r0, r4, r0
 4d4:	00000000 	andeq	r0, r0, r0
 4d8:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
 4dc:	00000154 	andeq	r0, r0, r4, asr r1
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000070 	andeq	r0, r0, r0, ror r0
	...
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	30db0002 	sbcscc	r0, fp, r2
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
 500:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
 504:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 510:	00000094 	muleq	r0, r4, r0
 514:	34d80002 	ldrbcc	r0, [r8], #2
 518:	00040000 	andeq	r0, r4, r0
 51c:	00000000 	andeq	r0, r0, r0
 520:	08001074 	stmdaeq	r0, {r2, r4, r5, r6, ip}
 524:	00000024 	andeq	r0, r0, r4, lsr #32
 528:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
 52c:	00000024 	andeq	r0, r0, r4, lsr #32
 530:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
 534:	00000090 	muleq	r0, r0, r0
 538:	0800114c 	stmdaeq	r0, {r2, r3, r6, r8, ip}
 53c:	000000a8 	andeq	r0, r0, r8, lsr #1
 540:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
 544:	00000038 	andeq	r0, r0, r8, lsr r0
 548:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
 54c:	00000048 	andeq	r0, r0, r8, asr #32
 550:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
 554:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 558:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 55c:	00000084 	andeq	r0, r0, r4, lsl #1
 560:	080013c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip}
 564:	00000024 	andeq	r0, r0, r4, lsr #32
 568:	080013ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip}
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	08001408 	stmdaeq	r0, {r3, sl, ip}
 574:	00000040 	andeq	r0, r0, r0, asr #32
 578:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
 57c:	000002dc 	ldrdeq	r0, [r0], -ip
 580:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
 584:	000000c8 	andeq	r0, r0, r8, asr #1
 588:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 58c:	00000038 	andeq	r0, r0, r8, lsr r0
 590:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
 594:	0000005c 	andeq	r0, r0, ip, asr r0
 598:	00000000 	andeq	r0, r0, r0
 59c:	00000002 	andeq	r0, r0, r2
	...
 5a8:	00000024 	andeq	r0, r0, r4, lsr #32
 5ac:	42bc0002 	adcsmi	r0, ip, #2
 5b0:	00040000 	andeq	r0, r4, r0
 5b4:	00000000 	andeq	r0, r0, r0
 5b8:	08001880 	stmdaeq	r0, {r7, fp, ip}
 5bc:	00000030 	andeq	r0, r0, r0, lsr r0
 5c0:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
 5c4:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000007a 	andeq	r0, r0, sl, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	4300732e 	movwmi	r7, #814	; 0x32e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      34:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
      38:	616c6372 	smcvs	50738	; 0xc632

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	445c6b72 	ldrbmi	r6, [ip], #-2930	; 0xb72

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	73746e65 	cmnvc	r4, #1616	; 0x650
      48:	6472415c 	ldrbtvs	r4, [r2], #-348	; 0x15c
      4c:	6f6e6975 	svcvs	0x006e6975

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	6d74735c 	ldclvs	3, cr7, [r4, #-368]!	; 0xfffffe90
      54:	75643233 	strbvc	r3, [r4, #-563]!	; 0x233
      58:	2d6f6e69 	stclcs	14, cr6, [pc, #-420]!	; fffffebc <BootRAM+0xef7065d>
      5c:	746f6f62 	strbtvc	r6, [pc], #-3938	; 64 <_Minimum_Stack_Size-0x9c>
      60:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
      64:	475c7265 	ldrbmi	r7, [ip, -r5, ror #4]
      68:	46323344 	ldrtmi	r3, [r2], -r4, asr #6
      6c:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
      70:	53412055 	movtpl	r2, #4181	; 0x1055
      74:	322e3220 	eorcc	r3, lr, #32, 4
      78:	00322e33 	eorseq	r2, r2, r3, lsr lr
      7c:	00808001 	addeq	r8, r0, r1
      80:	00020000 	andeq	r0, r2, r0
      84:	00000012 	andeq	r0, r0, r2, lsl r0
      88:	00750104 	rsbseq	r0, r5, r4, lsl #2
      8c:	00f00000 	rscseq	r0, r0, r0
      90:	016a0800 	cmneq	sl, r0, lsl #16
      94:	2f2e0800 	svccs	0x002e0800
      98:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      9c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      a0:	6f632f62 	svcvs	0x00632f62
      a4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
      a8:	6d5f336d 	ldclvs	3, cr3, [pc, #-436]	; fffffefc <BootRAM+0xef7069d>
      ac:	6f726361 	svcvs	0x00726361
      b0:	4300532e 	movwmi	r5, #814	; 0x32e
      b4:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      b8:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
      bc:	616c6372 	smcvs	50738	; 0xc632
      c0:	445c6b72 	ldrbmi	r6, [ip], #-2930	; 0xb72
      c4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
      c8:	73746e65 	cmnvc	r4, #1616	; 0x650
      cc:	6472415c 	ldrbtvs	r4, [r2], #-348	; 0x15c
      d0:	6f6e6975 	svcvs	0x006e6975
      d4:	6d74735c 	ldclvs	3, cr7, [r4, #-368]!	; 0xfffffe90
      d8:	75643233 	strbvc	r3, [r4, #-563]!	; 0x233
      dc:	2d6f6e69 	stclcs	14, cr6, [pc, #-420]!	; ffffff40 <BootRAM+0xef706e1>
      e0:	746f6f62 	strbtvc	r6, [pc], #-3938	; e8 <_Minimum_Stack_Size-0x18>
      e4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
      e8:	475c7265 	ldrbmi	r7, [ip, -r5, ror #4]
      ec:	46323344 	ldrtmi	r3, [r2], -r4, asr #6
      f0:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
      f4:	53412055 	movtpl	r2, #4181	; 0x1055
      f8:	322e3220 	eorcc	r3, lr, #32, 4
      fc:	00322e33 	eorseq	r2, r2, r3, lsr lr
     100:	0d0c8001 	stceq	0, cr8, [ip, #-4]
     104:	00040000 	andeq	r0, r4, r0
     108:	00000026 	andeq	r0, r0, r6, lsr #32
     10c:	01580104 	cmpeq	r8, r4, lsl #2
     110:	17010000 	strne	r0, [r1, -r0]
     114:	26000001 	strcs	r0, [r0], -r1
     118:	20000009 	andcs	r0, r0, r9
     11c:	00000000 	andeq	r0, r0, r0
     120:	1b000000 	blne	128 <_Minimum_Stack_Size+0x28>
     124:	02000001 	andeq	r0, r0, #1
     128:	01f60504 	mvnseq	r0, r4, lsl #10
     12c:	02020000 	andeq	r0, r2, #0
     130:	0006a505 	andeq	sl, r6, r5, lsl #10
     134:	06010200 	streq	r0, [r1], -r0, lsl #4
     138:	00000651 	andeq	r0, r0, r1, asr r6
     13c:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
     140:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
     144:	02000000 	andeq	r0, r0, #0
     148:	037b0704 	cmneq	fp, #4, 14	; 0x100000
     14c:	75030000 	strvc	r0, [r3, #-0]
     150:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
     154:	00005728 	andeq	r5, r0, r8, lsr #14
     158:	07020200 	streq	r0, [r2, -r0, lsl #4]
     15c:	000003d7 	ldrdeq	r0, [r0], -r7
     160:	00387503 	eorseq	r7, r8, r3, lsl #10
     164:	00682902 	rsbeq	r2, r8, r2, lsl #18
     168:	01020000 	mrseq	r0, (UNDEF: 2)
     16c:	00064f08 	andeq	r4, r6, r8, lsl #30
     170:	04460400 	strbeq	r0, [r6], #-1024	; 0x400
     174:	2f020000 	svccs	0x00020000
     178:	0000007a 	andeq	r0, r0, sl, ror r0
     17c:	00004505 	andeq	r4, r0, r5, lsl #10
     180:	01530400 	cmpeq	r3, r0, lsl #8
     184:	30020000 	andcc	r0, r2, r0
     188:	0000008a 	andeq	r0, r0, sl, lsl #1
     18c:	00005705 	andeq	r5, r0, r5, lsl #14
     190:	75760300 	ldrbvc	r0, [r6, #-768]!	; 0x300
     194:	31020038 	tstcc	r2, r8, lsr r0
     198:	0000009a 	muleq	r0, sl, r0
     19c:	00006805 	andeq	r6, r0, r5, lsl #16
     1a0:	02010600 	andeq	r0, r1, #0, 12
     1a4:	0000b437 	andeq	fp, r0, r7, lsr r4
     1a8:	05dc0700 	ldrbeq	r0, [ip, #1792]	; 0x700
     1ac:	07000000 	streq	r0, [r0, -r0]
     1b0:	0000074a 	andeq	r0, r0, sl, asr #14
     1b4:	33040001 	movwcc	r0, #16385	; 0x4001
     1b8:	02000004 	andeq	r0, r0, #4
     1bc:	00009f37 	andeq	r9, r0, r7, lsr pc
     1c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
     1c4:	00000515 	andeq	r0, r0, r5, lsl r5
     1c8:	a9030408 	stmdbge	r3, {r3, sl}
     1cc:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     1d0:	00044b09 	andeq	r4, r4, r9, lsl #22
     1d4:	5eaa0300 	cdppl	3, 10, cr0, cr10, cr0, {0}
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	00046e09 	andeq	r6, r4, r9, lsl #28
     1e0:	5eab0300 	cdppl	3, 10, cr0, cr11, cr0, {0}
     1e4:	01000000 	mrseq	r0, (UNDEF: 0)
     1e8:	00035009 	andeq	r5, r3, r9
     1ec:	5eac0300 	cdppl	3, 10, cr0, cr12, cr0, {0}
     1f0:	02000000 	andeq	r0, r0, #0
     1f4:	00000009 	andeq	r0, r0, r9
     1f8:	b4ad0300 	strtlt	r0, [sp], #768	; 0x300
     1fc:	03000000 	movweq	r0, #0
     200:	04900400 	ldreq	r0, [r0], #1024	; 0x400
     204:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
     208:	000000c6 	andeq	r0, r0, r6, asr #1
     20c:	0110040a 	tsteq	r0, sl, lsl #8
     210:	0c0b0000 	stceq	0, cr0, [fp], {-0}
     214:	0000036b 	andeq	r0, r0, fp, ror #6
     218:	36160501 	ldrcc	r0, [r6], -r1, lsl #10
     21c:	07000001 	streq	r0, [r0, -r1]
     220:	000000fe 	strdeq	r0, [r0], -lr
     224:	02aa0700 	adceq	r0, sl, #0, 14
     228:	07010000 	streq	r0, [r1, -r0]
     22c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     230:	04230702 	strteq	r0, [r3], #-1794	; 0x702
     234:	00030000 	andeq	r0, r3, r0
     238:	00008c0d 	andeq	r8, r0, sp, lsl #24
     23c:	24040800 	strcs	r0, [r4], #-2048	; 0x800
     240:	0000015b 	andeq	r0, r0, fp, asr r1
     244:	00013d09 	andeq	r3, r1, r9, lsl #26
     248:	5b260400 	blpl	981250 <__Stack_Size+0x980e50>
     24c:	00000001 	andeq	r0, r0, r1
     250:	00059309 	andeq	r9, r5, r9, lsl #6
     254:	4c270400 	cfstrsmi	mvf0, [r7], #-0
     258:	04000000 	streq	r0, [r0], #-0
     25c:	5e040a00 	vmlapl.f32	s0, s8, s0
     260:	04000000 	streq	r0, [r0], #-0
     264:	000002d6 	ldrdeq	r0, [r0], -r6
     268:	01362904 	teqeq	r6, r4, lsl #18
     26c:	d5040000 	strle	r0, [r4, #-0]
     270:	04000002 	streq	r0, [r0], #-2
     274:	00017729 	andeq	r7, r1, r9, lsr #14
     278:	36040a00 	strcc	r0, [r4], -r0, lsl #20
     27c:	0c000001 	stceq	0, cr0, [r0], {1}
     280:	00000742 	andeq	r0, r0, r2, asr #14
     284:	a22d0401 	eorge	r0, sp, #16777216	; 0x1000000
     288:	07000001 	streq	r0, [r0, -r1]
     28c:	000008d3 	ldrdeq	r0, [r0], -r3
     290:	03ea0700 	mvneq	r0, #0, 14
     294:	07010000 	streq	r0, [r1, -r0]
     298:	00000781 	andeq	r0, r0, r1, lsl #15
     29c:	02220702 	eoreq	r0, r2, #524288	; 0x80000
     2a0:	00030000 	andeq	r0, r3, r0
     2a4:	00074304 	andeq	r4, r7, r4, lsl #6
     2a8:	7d340400 	cfldrsvc	mvf0, [r4, #-0]
     2ac:	0d000001 	stceq	0, cr0, [r0, #-4]
     2b0:	000008f8 	strdeq	r0, [r0], -r8
     2b4:	ea38040c 	b	e012ec <__Stack_Size+0xe00eec>
     2b8:	09000001 	stmdbeq	r0, {r0}
     2bc:	00000290 	muleq	r0, r0, r2
     2c0:	004c5004 	subeq	r5, ip, r4
     2c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     2c8:	00000319 	andeq	r0, r0, r9, lsl r3
     2cc:	004c5104 	subeq	r5, ip, r4, lsl #2
     2d0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     2d4:	000014f9 	strdeq	r1, [r0], -r9
     2d8:	004c5204 	subeq	r5, ip, r4, lsl #4
     2dc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     2e0:	000000e3 	andeq	r0, r0, r3, ror #1
     2e4:	01f95304 	mvnseq	r5, r4, lsl #6
     2e8:	00080000 	andeq	r0, r8, r0
     2ec:	00015b0e 	andeq	r5, r1, lr, lsl #22
     2f0:	0001f900 	andeq	pc, r1, r0, lsl #18
     2f4:	004c0f00 	subeq	r0, ip, r0, lsl #30
     2f8:	0a000000 	beq	300 <_Minimum_Stack_Size+0x200>
     2fc:	0001ea04 	andeq	lr, r1, r4, lsl #20
     300:	08f90400 	ldmeq	r9!, {sl}^
     304:	54040000 	strpl	r0, [r4], #-0
     308:	000001ad 	andeq	r0, r0, sp, lsr #3
     30c:	0007da0d 	andeq	sp, r7, sp, lsl #20
     310:	58040200 	stmdapl	r4, {r9}
     314:	0000022f 	andeq	r0, r0, pc, lsr #4
     318:	00091709 	andeq	r1, r9, r9, lsl #14
     31c:	5e5a0400 	cdppl	4, 5, cr0, cr10, cr0, {0}
     320:	00000000 	andeq	r0, r0, r0
     324:	0003b009 	andeq	fp, r3, r9
     328:	5e5b0400 	cdppl	4, 5, cr0, cr11, cr0, {0}
     32c:	01000000 	mrseq	r0, (UNDEF: 0)
     330:	07db0400 	ldrbeq	r0, [fp, r0, lsl #8]
     334:	5d040000 	stcpl	0, cr0, [r4, #-0]
     338:	0000020a 	andeq	r0, r0, sl, lsl #4
     33c:	00574210 	subseq	r4, r7, r0, lsl r2
     340:	5e620402 	cdppl	4, 6, cr0, cr2, cr2, {0}
     344:	11000002 	tstne	r0, r2
     348:	00306262 	eorseq	r6, r0, r2, ror #4
     34c:	005e6504 	subseq	r6, lr, r4, lsl #10
     350:	11000000 	mrsne	r0, (UNDEF: 0)
     354:	00316262 	eorseq	r6, r1, r2, ror #4
     358:	005e6604 	subseq	r6, lr, r4, lsl #12
     35c:	00010000 	andeq	r0, r1, r0
     360:	5f040212 	svcpl	0x00040212
     364:	0000027a 	andeq	r0, r0, sl, ror r2
     368:	04007713 	streq	r7, [r0], #-1811	; 0x713
     36c:	00004c61 	andeq	r4, r0, r1, ror #24
     370:	77621300 	strbvc	r1, [r2, -r0, lsl #6]!
     374:	3a680400 	bcc	1a0137c <__Stack_Size+0x1a00f7c>
     378:	00000002 	andeq	r0, r0, r2
     37c:	0003ff04 	andeq	pc, r3, r4, lsl #30
     380:	5e690400 	cdppl	4, 6, cr0, cr9, cr0, {0}
     384:	0d000002 	stceq	0, cr0, [r0, #-8]
     388:	0000003c 	andeq	r0, r0, ip, lsr r0
     38c:	166b041c 			; <UNDEFINED> instruction: 0x166b041c
     390:	09000003 	stmdbeq	r0, {r0, r1}
     394:	00000550 	andeq	r0, r0, r0, asr r5
     398:	005e6d04 	subseq	r6, lr, r4, lsl #26
     39c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     3a0:	00000216 	andeq	r0, r0, r6, lsl r2
     3a4:	005e6e04 	subseq	r6, lr, r4, lsl #28
     3a8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     3ac:	00000418 	andeq	r0, r0, r8, lsl r4
     3b0:	027a6f04 	rsbseq	r6, sl, #4, 30
     3b4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     3b8:	00000148 	andeq	r0, r0, r8, asr #2
     3bc:	027a7004 	rsbseq	r7, sl, #4
     3c0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     3c4:	0000081a 	andeq	r0, r0, sl, lsl r8
     3c8:	027a7104 	rsbseq	r7, sl, #4, 2
     3cc:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
     3d0:	000005cf 	andeq	r0, r0, pc, asr #11
     3d4:	005e7304 	subseq	r7, lr, r4, lsl #6
     3d8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     3dc:	000003a0 	andeq	r0, r0, r0, lsr #7
     3e0:	005e7404 	subseq	r7, lr, r4, lsl #8
     3e4:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
     3e8:	000004a1 	andeq	r0, r0, r1, lsr #9
     3ec:	005e7504 	subseq	r7, lr, r4, lsl #10
     3f0:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
     3f4:	0000086f 	andeq	r0, r0, pc, ror #16
     3f8:	005e7604 	subseq	r7, lr, r4, lsl #12
     3fc:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
     400:	00000629 	andeq	r0, r0, r9, lsr #12
     404:	005e7704 	subseq	r7, lr, r4, lsl #14
     408:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     40c:	00000720 	andeq	r0, r0, r0, lsr #14
     410:	01ff7a04 	mvnseq	r7, r4, lsl #20
     414:	00100000 	andseq	r0, r0, r0
     418:	00003d04 	andeq	r3, r0, r4, lsl #26
     41c:	857b0400 	ldrbhi	r0, [fp, #-1024]!	; 0x400
     420:	0d000002 	stceq	0, cr0, [r0, #-8]
     424:	0000074f 	andeq	r0, r0, pc, asr #14
     428:	ca7d0434 	bgt	1f41500 <__Stack_Size+0x1f41100>
     42c:	09000003 	stmdbeq	r0, {r0, r1}
     430:	0000053d 	andeq	r0, r0, sp, lsr r5
     434:	010a7f04 	tsteq	sl, r4, lsl #30
     438:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     43c:	000003c7 	andeq	r0, r0, r7, asr #7
     440:	010a8004 	tsteq	sl, r4
     444:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     448:	000007a7 	andeq	r0, r0, r7, lsr #15
     44c:	010a8304 	tsteq	sl, r4, lsl #6
     450:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     454:	000007b9 			; <UNDEFINED> instruction: 0x000007b9
     458:	010a8404 	tsteq	sl, r4, lsl #8
     45c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     460:	0000051e 	andeq	r0, r0, lr, lsl r5
     464:	03d99604 	bicseq	r9, r9, #4, 12	; 0x400000
     468:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
     46c:	00000704 	andeq	r0, r0, r4, lsl #14
     470:	03d9a104 	bicseq	sl, r9, #4, 2
     474:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
     478:	000004e8 	andeq	r0, r0, r8, ror #9
     47c:	03f3ab04 	mvnseq	sl, #4, 22	; 0x1000
     480:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
     484:	00000134 	andeq	r0, r0, r4, lsr r1
     488:	01f9ad04 	mvnseq	sl, r4, lsl #26
     48c:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
     490:	00000202 	andeq	r0, r0, r2, lsl #4
     494:	01f9ae04 	mvnseq	sl, r4, lsl #28
     498:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
     49c:	00000829 	andeq	r0, r0, r9, lsr #16
     4a0:	01f9af04 	mvnseq	sl, r4, lsl #30
     4a4:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
     4a8:	00000611 	andeq	r0, r0, r1, lsl r6
     4ac:	01f9b004 	mvnseq	fp, r4
     4b0:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
     4b4:	0000057b 	andeq	r0, r0, fp, ror r5
     4b8:	015bb204 	cmpeq	fp, r4, lsl #4
     4bc:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
     4c0:	000014f6 	strdeq	r1, [r0], -r6
     4c4:	005eb304 	subseq	fp, lr, r4, lsl #6
     4c8:	00300000 	eorseq	r0, r0, r0
     4cc:	0001a20e 	andeq	sl, r1, lr, lsl #4
     4d0:	0003d900 	andeq	sp, r3, r0, lsl #18
     4d4:	005e0f00 	subseq	r0, lr, r0, lsl #30
     4d8:	0a000000 	beq	4e0 <__Stack_Size+0xe0>
     4dc:	0003ca04 	andeq	ip, r3, r4, lsl #20
     4e0:	01a20e00 			; <UNDEFINED> instruction: 0x01a20e00
     4e4:	03f30000 	mvnseq	r0, #0
     4e8:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     4ec:	0f000000 	svceq	0x00000000
     4f0:	0000005e 	andeq	r0, r0, lr, asr r0
     4f4:	df040a00 	svcle	0x00040a00
     4f8:	04000003 	streq	r0, [r0], #-3
     4fc:	00000750 	andeq	r0, r0, r0, asr r7
     500:	0321b504 	teqeq	r1, #4, 10	; 0x1000000
     504:	5d0d0000 	stcpl	0, cr0, [sp, #-0]
     508:	24000006 	strcs	r0, [r0], #-6
     50c:	047db704 	ldrbteq	fp, [sp], #-1796	; 0x704
     510:	ca090000 	bgt	240518 <__Stack_Size+0x240118>
     514:	04000006 	streq	r0, [r0], #-6
     518:	00010ab9 			; <UNDEFINED> instruction: 0x00010ab9
     51c:	b9090000 	stmdblt	r9, {}	; <UNPREDICTABLE>
     520:	04000005 	streq	r0, [r0], #-5
     524:	00010aba 			; <UNDEFINED> instruction: 0x00010aba
     528:	e2090400 	and	r0, r9, #0, 8
     52c:	04000005 	streq	r0, [r0], #-5
     530:	00010abb 			; <UNDEFINED> instruction: 0x00010abb
     534:	ec090800 	stc	8, cr0, [r9], {-0}
     538:	04000000 	streq	r0, [r0], #-0
     53c:	00010abc 			; <UNDEFINED> instruction: 0x00010abc
     540:	96090c00 	strls	r0, [r9], -r0, lsl #24
     544:	04000006 	streq	r0, [r0], #-6
     548:	00010abd 			; <UNDEFINED> instruction: 0x00010abd
     54c:	06091000 	streq	r1, [r9], -r0
     550:	04000004 	streq	r0, [r0], #-4
     554:	00010abe 			; <UNDEFINED> instruction: 0x00010abe
     558:	6c091400 	cfstrsvs	mvf1, [r9], {-0}
     55c:	04000000 	streq	r0, [r0], #-0
     560:	00010abf 			; <UNDEFINED> instruction: 0x00010abf
     564:	a3091800 	movwge	r1, #38912	; 0x9800
     568:	04000005 	streq	r0, [r0], #-5
     56c:	00010ac0 	andeq	r0, r1, r0, asr #21
     570:	1c091c00 	stcne	12, cr1, [r9], {-0}
     574:	04000000 	streq	r0, [r0], #-0
     578:	00010ac1 	andeq	r0, r1, r1, asr #21
     57c:	04002000 	streq	r2, [r0], #-0
     580:	0000065e 	andeq	r0, r0, lr, asr r6
     584:	0404c304 	streq	ip, [r4], #-772	; 0x304
     588:	c50c0000 	strgt	r0, [ip, #-0]
     58c:	01000008 	tsteq	r0, r8
     590:	04c53d06 	strbeq	r3, [r5], #3334	; 0xd06
     594:	36070000 	strcc	r0, [r7], -r0
     598:	00000002 	andeq	r0, r0, r2
     59c:	0008b507 	andeq	fp, r8, r7, lsl #10
     5a0:	e0070100 	and	r0, r7, r0, lsl #2
     5a4:	02000006 	andeq	r0, r0, #6
     5a8:	00006007 	andeq	r6, r0, r7
     5ac:	c2070300 	andgt	r0, r7, #0, 6
     5b0:	04000000 	streq	r0, [r0], #-0
     5b4:	00060407 	andeq	r0, r6, r7, lsl #8
     5b8:	f4070500 	vst3.8	{d0,d2,d4}, [r7], r0
     5bc:	06000003 	streq	r0, [r0], -r3
     5c0:	00058707 	andeq	r8, r5, r7, lsl #14
     5c4:	04000700 	streq	r0, [r0], #-1792	; 0x700
     5c8:	000008c6 	andeq	r0, r0, r6, asr #17
     5cc:	04884606 	streq	r4, [r8], #1542	; 0x606
     5d0:	420c0000 	andmi	r0, ip, #0
     5d4:	01000005 	tsteq	r0, r5
     5d8:	05014806 	streq	r4, [r1, #-2054]	; 0x806
     5dc:	df070000 	svcle	0x00070000
     5e0:	00000008 	andeq	r0, r0, r8
     5e4:	00033807 	andeq	r3, r3, r7, lsl #16
     5e8:	0f070100 	svceq	0x00070100
     5ec:	02000001 	andeq	r0, r0, #1
     5f0:	0000b807 	andeq	fp, r0, r7, lsl #16
     5f4:	ab070300 	blge	1c11fc <__Stack_Size+0x1c0dfc>
     5f8:	04000008 	streq	r0, [r0], #-8
     5fc:	00085807 	andeq	r5, r8, r7, lsl #16
     600:	08000500 	stmdaeq	r0, {r8, sl}
     604:	229d0102 	addscs	r0, sp, #-2147483648	; 0x80000000
     608:	09000005 	stmdbeq	r0, {r0, r2}
     60c:	0000004f 	andeq	r0, r0, pc, asr #32
     610:	05229e01 	streq	r9, [r2, #-3585]!	; 0xe01
     614:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     618:	000000a5 	andeq	r0, r0, r5, lsr #1
     61c:	05279f01 	streq	r9, [r7, #-3841]!	; 0xf01
     620:	00010000 	andeq	r0, r1, r0
     624:	0004c505 	andeq	ip, r4, r5, lsl #10
     628:	005e0500 	subseq	r0, lr, r0, lsl #10
     62c:	41140000 	tstmi	r4, r0
     630:	01000003 	tsteq	r0, r3
     634:	01a20165 			; <UNDEFINED> instruction: 0x01a20165
     638:	4a010000 	bmi	40640 <__Stack_Size+0x40240>
     63c:	15000005 	strne	r0, [r0, #-5]
     640:	000007f7 	strdeq	r0, [r0], -r7
     644:	5e016501 	cfsh32pl	mvfx6, mvfx1, #1
     648:	00000000 	andeq	r0, r0, r0
     64c:	0004b716 	andeq	fp, r4, r6, lsl r7
     650:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     654:	00097e17 	andeq	r7, r9, r7, lsl lr
     658:	b8a30100 	stmialt	r3!, {r8}
     65c:	02080001 	andeq	r0, r8, #1
     660:	01000000 	mrseq	r0, (UNDEF: 0)
     664:	0394189c 	orrseq	r1, r4, #156, 16	; 0x9c0000
     668:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     66c:	0001ba01 	andeq	fp, r1, r1, lsl #20
     670:	00000208 	andeq	r0, r0, r8, lsl #4
     674:	189c0100 	ldmne	ip, {r8}
     678:	0000030c 	andeq	r0, r0, ip, lsl #6
     67c:	bc013b01 	stclt	11, cr3, [r1], {1}
     680:	02080001 	andeq	r0, r8, #1
     684:	01000000 	mrseq	r0, (UNDEF: 0)
     688:	06ed199c 	usateq	r1, #13, ip, lsl #19
     68c:	6f010000 	svcvs	0x00010000
     690:	0001a201 	andeq	sl, r1, r1, lsl #4
     694:	0001be00 	andeq	fp, r1, r0, lsl #28
     698:	00000a08 	andeq	r0, r0, r8, lsl #20
     69c:	c09c0100 	addsgt	r0, ip, r0, lsl #2
     6a0:	1a000005 	bne	6bc <__Stack_Size+0x2bc>
     6a4:	00000464 	andeq	r0, r0, r4, ror #8
     6a8:	5e016f01 	cdppl	15, 0, cr6, cr1, cr1, {0}
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	1b000000 	blne	6b8 <__Stack_Size+0x2b8>
     6b4:	0000078f 	andeq	r0, r0, pc, lsl #15
     6b8:	5e016f01 	cdppl	15, 0, cr6, cr1, cr1, {0}
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
     6c0:	5c180051 	ldcpl	0, cr0, [r8], {81}	; 0x51
     6c4:	01000002 	tsteq	r0, r2
     6c8:	01c80196 			; <UNDEFINED> instruction: 0x01c80196
     6cc:	00020800 	andeq	r0, r2, r0, lsl #16
     6d0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6d4:	00075c18 	andeq	r5, r7, r8, lsl ip
     6d8:	019a0100 	orrseq	r0, sl, r0, lsl #2
     6dc:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
     6e0:	00000018 	andeq	r0, r0, r8, lsl r0
     6e4:	81189c01 	tsthi	r8, r1, lsl #24
     6e8:	01000008 	tsteq	r0, r8
     6ec:	01e401a0 	mvneq	r0, r0, lsr #3
     6f0:	00020800 	andeq	r0, r2, r0, lsl #16
     6f4:	9c010000 	stcls	0, cr0, [r1], {-0}
     6f8:	00073218 	andeq	r3, r7, r8, lsl r2
     6fc:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     700:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
     704:	00000002 	andeq	r0, r0, r2
     708:	eb189c01 	bl	627714 <__Stack_Size+0x627314>
     70c:	01000008 	tsteq	r0, r8
     710:	01e801a8 	mvneq	r0, r8, lsr #3
     714:	00020800 	andeq	r0, r2, r0, lsl #16
     718:	9c010000 	stcls	0, cr0, [r1], {-0}
     71c:	00090718 	andeq	r0, r9, r8, lsl r7
     720:	01ac0100 			; <UNDEFINED> instruction: 0x01ac0100
     724:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
     728:	00000002 	andeq	r0, r0, r2
     72c:	d2189c01 	andsle	r9, r8, #256	; 0x100
     730:	01000004 	tsteq	r0, r4
     734:	01ec01b0 	strheq	r0, [ip, #16]!
     738:	00020800 	andeq	r0, r2, r0, lsl #16
     73c:	9c010000 	stcls	0, cr0, [r1], {-0}
     740:	0000cf18 	andeq	ip, r0, r8, lsl pc
     744:	01b40100 			; <UNDEFINED> instruction: 0x01b40100
     748:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
     74c:	00000002 	andeq	r0, r0, r2
     750:	e5189c01 	ldr	r9, [r8, #-3073]	; 0xc01
     754:	01000002 	tsteq	r0, r2
     758:	01f001b8 	ldrheq	r0, [r0, #24]!
     75c:	000c0800 	andeq	r0, ip, r0, lsl #16
     760:	9c010000 	stcls	0, cr0, [r1], {-0}
     764:	0003c41c 	andeq	ip, r3, ip, lsl r4
     768:	011f0100 	tsteq	pc, r0, lsl #2
     76c:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
     770:	000000a8 	andeq	r0, r0, r8, lsr #1
     774:	06eb9c01 	strbteq	r9, [fp], r1, lsl #24
     778:	2c1d0000 	ldccs	0, cr0, [sp], {-0}
     77c:	12080002 	andne	r0, r8, #2
     780:	96000000 	strls	r0, [r0], -r0
     784:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     788:	0000045b 	andeq	r0, r0, fp, asr r4
     78c:	4c012901 	stcmi	9, cr2, [r1], {1}
     790:	21000000 	mrscs	r0, (UNDEF: 0)
     794:	00000000 	andeq	r0, r0, r0
     798:	0002021f 	andeq	r0, r2, pc, lsl r2
     79c:	000c3008 	andeq	r3, ip, r8
     7a0:	02622000 	rsbeq	r2, r2, #0
     7a4:	0c370800 	ldceq	8, cr0, [r7], #-0
     7a8:	06b30000 	ldrteq	r0, [r3], r0
     7ac:	01210000 	teqeq	r1, r0
     7b0:	00740250 	rsbseq	r0, r4, r0, asr r2
     7b4:	02702000 	rsbseq	r2, r0, #0
     7b8:	0c490800 	mcrreq	8, 0, r0, r9, cr0
     7bc:	06c70000 	strbeq	r0, [r7], r0
     7c0:	01210000 	teqeq	r1, r0
     7c4:	00740250 	rsbseq	r0, r4, r0, asr r2
     7c8:	02762000 	rsbseq	r2, r6, #0
     7cc:	0c600800 	stcleq	8, cr0, [r0], #-0
     7d0:	06db0000 	ldrbeq	r0, [fp], r0
     7d4:	01210000 	teqeq	r1, r0
     7d8:	00740250 	rsbseq	r0, r4, r0, asr r2
     7dc:	02862200 	addeq	r2, r6, #0, 4
     7e0:	0c720800 	ldcleq	8, cr0, [r2], #-0
     7e4:	01210000 	teqeq	r1, r0
     7e8:	00300150 	eorseq	r0, r0, r0, asr r1
     7ec:	06421900 	strbeq	r1, [r2], -r0, lsl #18
     7f0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     7f4:	0001a201 	andeq	sl, r1, r1, lsl #4
     7f8:	0002a400 	andeq	sl, r2, r0, lsl #8
     7fc:	00006008 	andeq	r6, r0, r8
     800:	3b9c0100 	blcc	fe700c08 <BootRAM+0xd6713a9>
     804:	1a000007 	bne	828 <__Stack_Size+0x428>
     808:	000007f7 	strdeq	r0, [r0], -r7
     80c:	5e013e01 	cdppl	14, 0, cr3, cr1, cr1, {0}
     810:	70000000 	andvc	r0, r0, r0
     814:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     818:	00000965 	andeq	r0, r0, r5, ror #18
     81c:	f9013f01 			; <UNDEFINED> instruction: 0xf9013f01
     820:	91000001 	tstls	r0, r1
     824:	1f000000 	svcne	0x00000000
     828:	080002bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9}
     82c:	00000c83 	andeq	r0, r0, r3, lsl #25
     830:	0002e823 	andeq	lr, r2, r3, lsr #16
     834:	50012108 	andpl	r2, r1, r8, lsl #2
     838:	00007402 	andeq	r7, r0, r2, lsl #8
     83c:	01311900 	teqeq	r1, r0, lsl #18
     840:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
     844:	00015b01 	andeq	r5, r1, r1, lsl #22
     848:	00030400 	andeq	r0, r3, r0, lsl #8
     84c:	00000c08 	andeq	r0, r0, r8, lsl #24
     850:	6f9c0100 	svcvs	0x009c0100
     854:	24000007 	strcs	r0, [r0], #-7
     858:	006e656c 	rsbeq	r6, lr, ip, ror #10
     85c:	4c017801 	stcmi	8, cr7, [r1], {1}
     860:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     864:	25000000 	strcs	r0, [r0, #-0]
     868:	0800030a 	stmdaeq	r0, {r1, r3, r8, r9}
     86c:	00000c8e 	andeq	r0, r0, lr, lsl #25
     870:	01ff1900 	mvnseq	r1, r0, lsl #18
     874:	7c010000 	stcvc	0, cr0, [r1], {-0}
     878:	00015b01 	andeq	r5, r1, r1, lsl #22
     87c:	00031000 	andeq	r1, r3, r0
     880:	00000c08 	andeq	r0, r0, r8, lsl #24
     884:	a39c0100 	orrsge	r0, ip, #0, 2
     888:	24000007 	strcs	r0, [r0], #-7
     88c:	006e656c 	rsbeq	r6, lr, ip, ror #10
     890:	4c017c01 	stcmi	12, cr7, [r1], {1}
     894:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
     898:	25000000 	strcs	r0, [r0, #-0]
     89c:	08000316 	stmdaeq	r0, {r1, r2, r4, r8, r9}
     8a0:	00000c8e 	andeq	r0, r0, lr, lsl #25
     8a4:	08261900 	stmdaeq	r6!, {r8, fp, ip}
     8a8:	80010000 	andhi	r0, r1, r0
     8ac:	00015b01 	andeq	r5, r1, r1, lsl #22
     8b0:	00031c00 	andeq	r1, r3, r0, lsl #24
     8b4:	00002008 	andeq	r2, r0, r8
     8b8:	e39c0100 	orrs	r0, ip, #0, 2
     8bc:	24000007 	strcs	r0, [r0], #-7
     8c0:	006e656c 	rsbeq	r6, lr, ip, ror #10
     8c4:	4c018001 	stcmi	0, cr8, [r1], {1}
     8c8:	0a000000 	beq	8d0 <__Stack_Size+0x4d0>
     8cc:	26000001 	strcs	r0, [r0], -r1
     8d0:	00000013 	andeq	r0, r0, r3, lsl r0
     8d4:	5e018101 	mvfpls	f0, f1
     8d8:	25000000 	strcs	r0, [r0, #-0]
     8dc:	08000330 	stmdaeq	r0, {r4, r5, r8, r9}
     8e0:	00000c8e 	andeq	r0, r0, lr, lsl #25
     8e4:	060e1900 	streq	r1, [lr], -r0, lsl #18
     8e8:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     8ec:	00015b01 	andeq	r5, r1, r1, lsl #22
     8f0:	00033c00 	andeq	r3, r3, r0, lsl #24
     8f4:	00000c08 	andeq	r0, r0, r8, lsl #24
     8f8:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
     8fc:	24000008 	strcs	r0, [r0], #-8
     900:	006e656c 	rsbeq	r6, lr, ip, ror #10
     904:	4c018901 	stcmi	9, cr8, [r1], {1}
     908:	44000000 	strmi	r0, [r0], #-0
     90c:	25000001 	strcs	r0, [r0, #-1]
     910:	08000342 	stmdaeq	r0, {r1, r6, r8, r9}
     914:	00000c8e 	andeq	r0, r0, lr, lsl #25
     918:	052c2700 	streq	r2, [ip, #-1792]!	; 0x700
     91c:	03480000 	movteq	r0, #32768	; 0x8000
     920:	00280800 	eoreq	r0, r8, r0, lsl #16
     924:	9c010000 	stcls	0, cr0, [r1], {-0}
     928:	00000850 	andeq	r0, r0, r0, asr r8
     92c:	00053d28 	andeq	r3, r5, r8, lsr #26
     930:	00016500 	andeq	r6, r1, r0, lsl #10
     934:	03582900 	cmpeq	r8, #0, 18
     938:	000e0800 	andeq	r0, lr, r0, lsl #16
     93c:	3d280000 	stccc	0, cr0, [r8, #-0]
     940:	9f000005 	svcls	0x00000005
     944:	1f000001 	svcne	0x00000001
     948:	0800035c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9}
     94c:	00000c83 	andeq	r0, r0, r3, lsl #25
     950:	532a0000 	teqpl	sl, #0
     954:	01000002 	tsteq	r0, r2
     958:	00037028 	andeq	r7, r3, r8, lsr #32
     95c:	00007808 	andeq	r7, r0, r8, lsl #16
     960:	e19c0100 	orrs	r0, ip, r0, lsl #2
     964:	2b000008 	blcs	98c <__Stack_Size+0x58c>
     968:	00000690 	muleq	r0, r0, r6
     96c:	08e13e01 	stmiaeq	r1!, {r0, r9, sl, fp, ip, sp}^
     970:	91020000 	mrsls	r0, (UNDEF: 2)
     974:	054a2c6c 	strbeq	r2, [sl, #-3180]	; 0xc6c
     978:	03cc0000 	biceq	r0, ip, #0
     97c:	00040800 	andeq	r0, r4, r0, lsl #16
     980:	50010000 	andpl	r0, r1, r0
     984:	00000890 	muleq	r0, r0, r8
     988:	0003d01f 	andeq	sp, r3, pc, lsl r0
     98c:	000ca808 	andeq	sl, ip, r8, lsl #16
     990:	7c200000 	stcvc	0, cr0, [r0], #-0
     994:	af080003 	svcge	0x00080003
     998:	a300000c 	movwge	r0, #12
     99c:	21000008 	tstcs	r0, r8
     9a0:	3c015001 	stccc	0, cr5, [r1], {1}
     9a4:	038e2000 	orreq	r2, lr, #0
     9a8:	0cc40800 	stcleq	8, cr0, [r4], {0}
     9ac:	08c40000 	stmiaeq	r4, {}^	; <UNPREDICTABLE>
     9b0:	01210000 	teqeq	r1, r0
     9b4:	21300152 	teqcs	r0, r2, asr r1
     9b8:	3c015101 	stfccs	f5, [r1], {1}
     9bc:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
     9c0:	0108000c 	tsteq	r8, ip
     9c4:	a6200040 	strtge	r0, [r0], -r0, asr #32
     9c8:	af080003 	svcge	0x00080003
     9cc:	d700000c 	strle	r0, [r0, -ip]
     9d0:	21000008 	tstcs	r0, r8
     9d4:	3c015001 	stccc	0, cr5, [r1], {1}
     9d8:	03b21f00 			; <UNDEFINED> instruction: 0x03b21f00
     9dc:	0cdf0800 	ldcleq	8, cr0, [pc], {0}
     9e0:	05000000 	streq	r0, [r0, #-0]
     9e4:	000008e6 	andeq	r0, r0, r6, ror #17
     9e8:	80070402 	andhi	r0, r7, r2, lsl #8
     9ec:	27000003 	strcs	r0, [r0, -r3]
     9f0:	0000054a 	andeq	r0, r0, sl, asr #10
     9f4:	00000000 	andeq	r0, r0, r0
     9f8:	00000004 	andeq	r0, r0, r4
     9fc:	090a9c01 	stmdbeq	sl, {r0, sl, fp, ip, pc}
     a00:	00250000 	eoreq	r0, r5, r0
     a04:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     a08:	0000000c 	andeq	r0, r0, ip
     a0c:	00009a2a 	andeq	r9, r0, sl, lsr #20
     a10:	e8ad0100 	stmia	sp!, {r8}
     a14:	1c080003 	stcne	0, cr0, [r8], {3}
     a18:	01000000 	mrseq	r0, (UNDEF: 0)
     a1c:	00092f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
     a20:	02be2d00 	adcseq	r2, lr, #0, 26
     a24:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     a28:	0000004c 	andeq	r0, r0, ip, asr #32
     a2c:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     a30:	07cc2a00 	strbeq	r2, [ip, r0, lsl #20]
     a34:	b7010000 	strlt	r0, [r1, -r0]
     a38:	08000404 	stmdaeq	r0, {r2, sl}
     a3c:	00000018 	andeq	r0, r0, r8, lsl r0
     a40:	09579c01 	ldmdbeq	r7, {r0, sl, fp, ip, pc}^
     a44:	be2b0000 	cdplt	0, 2, cr0, cr11, cr0, {0}
     a48:	01000002 	tsteq	r0, r2
     a4c:	00004cb8 			; <UNDEFINED> instruction: 0x00004cb8
     a50:	00710600 	rsbseq	r0, r1, r0, lsl #12
     a54:	9f1afb09 	svcls	0x001afb09
     a58:	00ae2a00 	adceq	r2, lr, r0, lsl #20
     a5c:	c5010000 	strgt	r0, [r1, #-0]
     a60:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
     a64:	00000084 	andeq	r0, r0, r4, lsl #1
     a68:	099d9c01 	ldmibeq	sp, {r0, sl, fp, ip, pc}
     a6c:	9c2e0000 	stcls	0, cr0, [lr], #-0
     a70:	01000002 	tsteq	r0, r2
     a74:	0004c5c5 	andeq	ip, r4, r5, asr #11
     a78:	0001cc00 	andeq	ip, r1, r0, lsl #24
     a7c:	02be2d00 	adcseq	r2, lr, #0, 26
     a80:	c6010000 	strgt	r0, [r1], -r0
     a84:	0000004c 	andeq	r0, r0, ip, asr #32
     a88:	0000021f 	andeq	r0, r0, pc, lsl r2
     a8c:	00043a1f 	andeq	r3, r4, pc, lsl sl
     a90:	00092f08 	andeq	r2, r9, r8, lsl #30
     a94:	04401f00 	strbeq	r1, [r0], #-3840	; 0xf00
     a98:	092f0800 	stmdbeq	pc!, {fp}	; <UNPREDICTABLE>
     a9c:	2f000000 	svccs	0x00000000
     aa0:	00000561 	andeq	r0, r0, r1, ror #10
     aa4:	01a2f501 			; <UNDEFINED> instruction: 0x01a2f501
     aa8:	04a00000 	strteq	r0, [r0], #0
     aac:	00280800 	eoreq	r0, r8, r0, lsl #16
     ab0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ab4:	000009c3 	andeq	r0, r0, r3, asr #19
     ab8:	00045c30 	andeq	r5, r4, r0, lsr ip
     abc:	4cf60100 	ldfmie	f0, [r6]
     ac0:	01000000 	mrseq	r0, (UNDEF: 0)
     ac4:	08633100 	stmdaeq	r3!, {r8, ip, sp}^
     ac8:	04010000 	streq	r0, [r1], #-0
     acc:	0001a201 	andeq	sl, r1, r1, lsl #4
     ad0:	0004c800 	andeq	ip, r4, r0, lsl #16
     ad4:	00001c08 	andeq	r1, r0, r8, lsl #24
     ad8:	2a9c0100 	bcs	fe700ee0 <BootRAM+0xd671681>
     adc:	000007e2 	andeq	r0, r0, r2, ror #15
     ae0:	04e45701 	strbteq	r5, [r4], #1793	; 0x701
     ae4:	00040800 	andeq	r0, r4, r0, lsl #16
     ae8:	9c010000 	stcls	0, cr0, [r1], {-0}
     aec:	000009f8 	strdeq	r0, [r0], -r8
     af0:	0004e825 	andeq	lr, r4, r5, lsr #16
     af4:	0009c308 	andeq	ip, r9, r8, lsl #6
     af8:	561c0000 	ldrpl	r0, [ip], -r0
     afc:	01000000 	mrseq	r0, (UNDEF: 0)
     b00:	04e801be 	strbteq	r0, [r8], #446	; 0x1be
     b04:	00240800 	eoreq	r0, r4, r0, lsl #16
     b08:	9c010000 	stcls	0, cr0, [r1], {-0}
     b0c:	00000a2e 	andeq	r0, r0, lr, lsr #20
     b10:	0002f932 	andeq	pc, r2, r2, lsr r9	; <UNPREDICTABLE>
     b14:	01bf0100 			; <UNDEFINED> instruction: 0x01bf0100
     b18:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b1c:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
     b20:	08000506 	stmdaeq	r0, {r1, r2, r8, sl}
     b24:	00000cea 	andeq	r0, r0, sl, ror #25
     b28:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     b2c:	0000047d 	andeq	r0, r0, sp, ror r4
     b30:	0008121c 	andeq	r1, r8, ip, lsl r2
     b34:	01110100 	tsteq	r1, r0, lsl #2
     b38:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
     b3c:	00000040 	andeq	r0, r0, r0, asr #32
     b40:	0a609c01 	beq	1827b4c <__Stack_Size+0x182774c>
     b44:	121f0000 	andsne	r0, pc, #0
     b48:	01080005 	tsteq	r8, r5
     b4c:	1f00000d 	svcne	0x0000000d
     b50:	0800051e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl}
     b54:	0000099d 	muleq	r0, sp, r9
     b58:	0005321f 	andeq	r3, r5, pc, lsl r2
     b5c:	0009f808 	andeq	pc, r9, r8, lsl #16
     b60:	cd1c0000 	ldcgt	0, cr0, [ip, #-0]
     b64:	01000003 	tsteq	r0, r3
     b68:	054c01c9 	strbeq	r0, [ip, #-457]	; 0x1c9
     b6c:	00220800 	eoreq	r0, r2, r0, lsl #16
     b70:	9c010000 	stcls	0, cr0, [r1], {-0}
     b74:	00000a96 	muleq	r0, r6, sl
     b78:	0002f932 	andeq	pc, r2, r2, lsr r9	; <UNPREDICTABLE>
     b7c:	01ca0100 	biceq	r0, sl, r0, lsl #2
     b80:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b84:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
     b88:	08000568 	stmdaeq	r0, {r3, r5, r6, r8, sl}
     b8c:	00000cea 	andeq	r0, r0, sl, ror #25
     b90:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     b94:	0000047d 	andeq	r0, r0, sp, ror r4
     b98:	00067534 	andeq	r7, r6, r4, lsr r5
     b9c:	01d20100 	bicseq	r0, r2, r0, lsl #2
     ba0:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
     ba4:	000000b4 	strheq	r0, [r0], -r4
     ba8:	0ae59c01 	beq	ff967bb4 <BootRAM+0xe8d8355>
     bac:	b8200000 	stmdalt	r0!, {}	; <UNPREDICTABLE>
     bb0:	57080005 	strpl	r0, [r8, -r5]
     bb4:	bf000009 	svclt	0x00000009
     bb8:	2100000a 	tstcs	r0, sl
     bbc:	30015001 	andcc	r5, r1, r1
     bc0:	05c61f00 	strbeq	r1, [r6, #3840]	; 0xf00
     bc4:	090a0800 	stmdbeq	sl, {fp}
     bc8:	fa200000 	blx	800bd0 <__Stack_Size+0x8007d0>
     bcc:	57080005 	strpl	r0, [r8, -r5]
     bd0:	db000009 	blle	bfc <__Stack_Size+0x7fc>
     bd4:	2100000a 	tstcs	r0, sl
     bd8:	37015001 	strcc	r5, [r1, -r1]
     bdc:	060c2500 	streq	r2, [ip], -r0, lsl #10
     be0:	0d080800 	stceq	8, cr0, [r8, #-0]
     be4:	35000000 	strcc	r0, [r0, #-0]
     be8:	00000230 	andeq	r0, r0, r0, lsr r2
     bec:	007f6501 	rsbseq	r6, pc, r1, lsl #10
     bf0:	03050000 	movweq	r0, #20480	; 0x5000
     bf4:	200002cc 	andcs	r0, r0, ip, asr #5
     bf8:	0005f435 	andeq	pc, r5, r5, lsr r4	; <UNPREDICTABLE>
     bfc:	f96d0100 			; <UNDEFINED> instruction: 0xf96d0100
     c00:	05000003 	streq	r0, [r0, #-3]
     c04:	00000003 	andeq	r0, r0, r3
     c08:	13413520 	movtne	r3, #5408	; 0x1520
     c0c:	7d010000 	stcvc	0, cr0, [r1, #-0]
     c10:	0000047d 	andeq	r0, r0, sp, ror r4
     c14:	006c0305 	rsbeq	r0, ip, r5, lsl #6
     c18:	46352000 	ldrtmi	r2, [r5], -r0
     c1c:	01000002 	tsteq	r0, r2
     c20:	00022f68 	andeq	r2, r2, r8, ror #30
     c24:	90030500 	andls	r0, r3, r0, lsl #10
     c28:	36200000 	strtcc	r0, [r0], -r0
     c2c:	0000027c 	andeq	r0, r0, ip, ror r2
     c30:	0b342207 	bleq	d09454 <__Stack_Size+0xd09054>
     c34:	040a0000 	streq	r0, [sl], #-0
     c38:	00000316 	andeq	r0, r0, r6, lsl r3
     c3c:	00052f36 	andeq	r2, r5, r6, lsr pc
     c40:	45250700 	strmi	r0, [r5, #-1792]!	; 0x700
     c44:	0a00000b 	beq	c78 <__Stack_Size+0x878>
     c48:	0003f904 	andeq	pc, r3, r4, lsl #18
     c4c:	04c23600 	strbeq	r3, [r2], #1536	; 0x600
     c50:	2d070000 	stccs	0, cr0, [r7, #-0]
     c54:	0000004c 	andeq	r0, r0, ip, asr #32
     c58:	0009b636 	andeq	fp, r9, r6, lsr r6
     c5c:	61230800 	teqvs	r3, r0, lsl #16
     c60:	36000001 	strcc	r0, [r0], -r1
     c64:	00000894 	muleq	r0, r4, r8
     c68:	01612408 	cmneq	r1, r8, lsl #8
     c6c:	61370000 	teqvs	r7, r0
     c70:	7c000001 	stcvc	0, cr0, [r0], {1}
     c74:	3800000b 	stmdacc	r0, {r0, r1, r3}
     c78:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     c7c:	1d360006 	ldcne	0, cr0, [r6, #-24]!	; 0xffffffe8
     c80:	08000001 	stmdaeq	r0, {r0}
     c84:	000b6c25 	andeq	r6, fp, r5, lsr #24
     c88:	06b23600 	ldrteq	r3, [r2], r0, lsl #12
     c8c:	26080000 	strcs	r0, [r8], -r0
     c90:	00000161 	andeq	r0, r0, r1, ror #2
     c94:	00043835 	andeq	r3, r4, r5, lsr r8
     c98:	a32c0600 	teqge	ip, #0, 12
     c9c:	0500000b 	streq	r0, [r0, #-11]
     ca0:	0002c803 	andeq	ip, r2, r3, lsl #16
     ca4:	05043920 	streq	r3, [r4, #-2336]	; 0x920
     ca8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     cac:	00005e37 	andeq	r5, r0, r7, lsr lr
     cb0:	000bb500 	andeq	fp, fp, r0, lsl #10
     cb4:	36003a00 	strcc	r3, [r0], -r0, lsl #20
     cb8:	00000891 	muleq	r0, r1, r8
     cbc:	0baa2501 	bleq	fea8a0c8 <BootRAM+0xd9fa869>
     cc0:	af360000 	svcge	0x00360000
     cc4:	01000006 	tsteq	r0, r6
     cc8:	000baa26 	andeq	sl, fp, r6, lsr #20
     ccc:	00493500 	subeq	r3, r9, r0, lsl #10
     cd0:	62010000 	andvs	r0, r1, #0
     cd4:	0000006f 	andeq	r0, r0, pc, rrx
     cd8:	03100305 	tsteq	r0, #335544320	; 0x14000000
     cdc:	70352000 	eorsvc	r2, r5, r0
     ce0:	01000002 	tsteq	r0, r2
     ce4:	00008f66 	andeq	r8, r0, r6, ror #30
     ce8:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
     cec:	37200003 	strcc	r0, [r0, -r3]!
     cf0:	0000010a 	andeq	r0, r0, sl, lsl #2
     cf4:	00000bfd 	strdeq	r0, [r0], -sp
     cf8:	0000bf38 	andeq	fp, r0, r8, lsr pc
     cfc:	35000600 	strcc	r0, [r0, #-1536]	; 0x600
     d00:	00000032 	andeq	r0, r0, r2, lsr r0
     d04:	0bed8901 	bleq	ffb63110 <BootRAM+0xead38b1>
     d08:	03050000 	movweq	r0, #20480	; 0x5000
     d0c:	20000034 	andcs	r0, r0, r4, lsr r0
     d10:	0007ec35 	andeq	lr, r7, r5, lsr ip
     d14:	ed930100 	ldfs	f0, [r3]
     d18:	0500000b 	streq	r0, [r0, #-11]
     d1c:	00005003 	andeq	r5, r0, r3
     d20:	072a3520 	streq	r3, [sl, -r0, lsr #10]!
     d24:	a0010000 	andge	r0, r1, r0
     d28:	00000501 	andeq	r0, r0, r1, lsl #10
     d2c:	02ce0305 	sbceq	r0, lr, #335544320	; 0x14000000
     d30:	043b2000 	ldrteq	r2, [fp], #-0
     d34:	09000005 	stmdbeq	r0, {r0, r2}
     d38:	07703c6e 	ldrbeq	r3, [r0, -lr, ror #24]!
     d3c:	460a0000 	strmi	r0, [sl], -r0
     d40:	000c4902 	andeq	r4, ip, r2, lsl #18
     d44:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d48:	3c000000 	stccc	0, cr0, [r0], {-0}
     d4c:	0000079a 	muleq	r0, sl, r7
     d50:	6002570a 	andvs	r5, r2, sl, lsl #14
     d54:	0f00000c 	svceq	0x0000000c
     d58:	0000005e 	andeq	r0, r0, lr, asr r0
     d5c:	00004c0f 	andeq	r4, r0, pc, lsl #24
     d60:	713c0000 	teqvc	ip, r0
     d64:	0a000009 	beq	d90 <__Stack_Size+0x990>
     d68:	0c720240 	lfmeq	f0, 2, [r2], #-256	; 0xffffff00
     d6c:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     d70:	00000000 	andeq	r0, r0, r0
     d74:	0000213d 	andeq	r2, r0, sp, lsr r1
     d78:	83e90400 	mvnhi	r0, #0, 8
     d7c:	0f00000c 	svceq	0x0000000c
     d80:	0000005e 	andeq	r0, r0, lr, asr r0
     d84:	03253e00 	teqeq	r5, #0, 28
     d88:	6d090000 	stcvs	0, cr0, [r9, #-0]
     d8c:	000000b4 	strheq	r0, [r0], -r4
     d90:	00083d3f 	andeq	r3, r8, pc, lsr sp
     d94:	5be50400 	blpl	ff941d9c <BootRAM+0xe8b253d>
     d98:	a8000001 	stmdage	r0, {r0}
     d9c:	0f00000c 	svceq	0x0000000c
     da0:	0000004c 	andeq	r0, r0, ip, asr #32
     da4:	00016c0f 	andeq	r6, r1, pc, lsl #24
     da8:	393b0000 	ldmdbcc	fp!, {}	; <UNPREDICTABLE>
     dac:	07000005 	streq	r0, [r0, -r5]
     db0:	02893f19 	addeq	r3, r9, #25, 30	; 0x64
     db4:	c5030000 	strgt	r0, [r3, #-0]
     db8:	000008e6 	andeq	r0, r0, r6, ror #17
     dbc:	00000cc4 	andeq	r0, r0, r4, asr #25
     dc0:	000ba30f 	andeq	sl, fp, pc, lsl #6
     dc4:	6c3d0000 	ldcvs	0, cr0, [sp], #-0
     dc8:	03000005 	movweq	r0, #5
     dcc:	000cdfc4 	andeq	sp, ip, r4, asr #31
     dd0:	003a0f00 	eorseq	r0, sl, r0, lsl #30
     dd4:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     dd8:	0f000000 	svceq	0x00000000
     ddc:	0000005e 	andeq	r0, r0, lr, asr r0
     de0:	02c43e00 	sbceq	r3, r4, #0, 28
     de4:	db030000 	blle	c0dec <__Stack_Size+0xc09ec>
     de8:	00000ba3 	andeq	r0, r0, r3, lsr #23
     dec:	0007173d 	andeq	r1, r7, sp, lsr r7
     df0:	fbd70300 	blx	ff5c19fa <BootRAM+0xe53219b>
     df4:	0f00000c 	svceq	0x0000000c
     df8:	00000cfb 	strdeq	r0, [r0], -fp
     dfc:	ff040a00 			; <UNDEFINED> instruction: 0xff040a00
     e00:	3b000000 	blcc	e08 <__Stack_Size+0xa08>
     e04:	00000084 	andeq	r0, r0, r4, lsl #1
     e08:	8d3b6a09 	vldmdbhi	fp!, {s12-s20}
     e0c:	0b000003 	bleq	e20 <__Stack_Size+0xa20>
     e10:	023d001a 	eorseq	r0, sp, #26
     e14:	00040000 	andeq	r0, r4, r0
     e18:	000003de 	ldrdeq	r0, [r0], -lr
     e1c:	01580104 	cmpeq	r8, r4, lsl #2
     e20:	3a010000 	bcc	40e28 <__Stack_Size+0x40a28>
     e24:	2600000a 	strcs	r0, [r0], -sl
     e28:	a4000009 	strge	r0, [r0], #-9
     e2c:	02000004 	andeq	r0, r0, #4
     e30:	01f60504 	mvnseq	r0, r4, lsl #10
     e34:	02020000 	andeq	r0, r2, #0
     e38:	0006a505 	andeq	sl, r6, r5, lsl #10
     e3c:	06010200 	streq	r0, [r1], -r0, lsl #4
     e40:	00000651 	andeq	r0, r0, r1, asr r6
     e44:	7b070402 	blvc	1c1e54 <__Stack_Size+0x1c1a54>
     e48:	03000003 	movweq	r0, #3
     e4c:	00363175 	eorseq	r3, r6, r5, ror r1
     e50:	00442801 	subeq	r2, r4, r1, lsl #16
     e54:	02020000 	andeq	r0, r2, #0
     e58:	0003d707 	andeq	sp, r3, r7, lsl #14
     e5c:	38750300 	ldmdacc	r5!, {r8, r9}^
     e60:	55290100 	strpl	r0, [r9, #-256]!	; 0x100
     e64:	02000000 	andeq	r0, r0, #0
     e68:	064f0801 	strbeq	r0, [pc], -r1, lsl #16
     e6c:	04020000 	streq	r0, [r2], #-0
     e70:	00051507 	andeq	r1, r5, r7, lsl #10
     e74:	008c0400 	addeq	r0, ip, r0, lsl #8
     e78:	02080000 	andeq	r0, r8, #0
     e7c:	00008824 	andeq	r8, r0, r4, lsr #16
     e80:	013d0500 	teqeq	sp, r0, lsl #10
     e84:	26020000 	strcs	r0, [r2], -r0
     e88:	00000088 	andeq	r0, r0, r8, lsl #1
     e8c:	05930500 	ldreq	r0, [r3, #1280]	; 0x500
     e90:	27020000 	strcs	r0, [r2, -r0]
     e94:	00000039 	andeq	r0, r0, r9, lsr r0
     e98:	04060004 	streq	r0, [r6], #-4
     e9c:	0000004b 	andeq	r0, r0, fp, asr #32
     ea0:	0002d607 	andeq	sp, r2, r7, lsl #12
     ea4:	63290200 	teqvs	r9, #0, 4
     ea8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     eac:	00000438 	andeq	r0, r0, r8, lsr r4
     eb0:	00aa2c03 	adceq	r2, sl, r3, lsl #24
     eb4:	03050000 	movweq	r0, #20480	; 0x5000
     eb8:	200002c8 	andcs	r0, r0, r8, asr #5
     ebc:	69050409 	stmdbvs	r5, {r0, r3, sl}
     ec0:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     ec4:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
     ec8:	008e3c04 	addeq	r3, lr, r4, lsl #24
     ecc:	03050000 	movweq	r0, #20480	; 0x5000
     ed0:	20000144 	andcs	r0, r0, r4, asr #2
     ed4:	00089408 	andeq	r9, r8, r8, lsl #8
     ed8:	8e960400 	cdphi	4, 9, cr0, cr6, cr0, {0}
     edc:	05000000 	streq	r0, [r0, #-0]
     ee0:	0002b803 	andeq	fp, r2, r3, lsl #16
     ee4:	008e0a20 	addeq	r0, lr, r0, lsr #20
     ee8:	00e30000 	rsceq	r0, r3, r0
     eec:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     ef0:	06000000 	streq	r0, [r0], -r0
     ef4:	011d0800 	tsteq	sp, r0, lsl #16
     ef8:	cb040000 	blgt	100f00 <__Stack_Size+0x100b00>
     efc:	000000d3 	ldrdeq	r0, [r0], -r3
     f00:	00940305 	addseq	r0, r4, r5, lsl #6
     f04:	b2082000 	andlt	r2, r8, #0
     f08:	04000006 	streq	r0, [r0], #-6
     f0c:	00008e4e 	andeq	r8, r0, lr, asr #28
     f10:	e0030500 	and	r0, r3, r0, lsl #10
     f14:	0a200000 	beq	800f1c <__Stack_Size+0x800b1c>
     f18:	0000004b 	andeq	r0, r0, fp, asr #32
     f1c:	00000115 	andeq	r0, r0, r5, lsl r1
     f20:	00005c0b 	andeq	r5, r0, fp, lsl #24
     f24:	08001100 	stmdaeq	r0, {r8, ip}
     f28:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
     f2c:	01052504 	tsteq	r5, r4, lsl #10
     f30:	03050000 	movweq	r0, #20480	; 0x5000
     f34:	200000cc 	andcs	r0, r0, ip, asr #1
     f38:	00004b0a 	andeq	r4, r0, sl, lsl #22
     f3c:	00013600 	andeq	r3, r1, r0, lsl #12
     f40:	005c0b00 	subseq	r0, ip, r0, lsl #22
     f44:	00080000 	andeq	r0, r8, r0
     f48:	0006af08 	andeq	sl, r6, r8, lsl #30
     f4c:	26410400 	strbcs	r0, [r1], -r0, lsl #8
     f50:	05000001 	streq	r0, [r0, #-1]
     f54:	00012903 	andeq	r2, r1, r3, lsl #18
     f58:	004b0a20 	subeq	r0, fp, r0, lsr #20
     f5c:	01570000 	cmpeq	r7, r0
     f60:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     f64:	2c000000 	stccs	0, cr0, [r0], {-0}
     f68:	08910800 	ldmeq	r1, {fp}
     f6c:	54040000 	strpl	r0, [r4], #-0
     f70:	00000147 	andeq	r0, r0, r7, asr #2
     f74:	00ec0305 	rsceq	r0, ip, r5, lsl #6
     f78:	4b0a2000 	blmi	288f80 <__Stack_Size+0x288b80>
     f7c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     f80:	0b000001 	bleq	f8c <__Stack_Size+0xb8c>
     f84:	0000005c 	andeq	r0, r0, ip, asr r0
     f88:	27080003 	strcs	r0, [r8, -r3]
     f8c:	0400000a 	streq	r0, [r0], #-10
     f90:	0001689c 	muleq	r1, ip, r8
     f94:	e8030500 	stmda	r3, {r8, sl}
     f98:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
     f9c:	0000098a 	andeq	r0, r0, sl, lsl #19
     fa0:	0105a304 	tsteq	r5, r4, lsl #6
     fa4:	03050000 	movweq	r0, #20480	; 0x5000
     fa8:	20000132 	andcs	r0, r0, r2, lsr r1
     fac:	00004b0a 	andeq	r4, r0, sl, lsl #22
     fb0:	0001aa00 	andeq	sl, r1, r0, lsl #20
     fb4:	005c0b00 	subseq	r0, ip, r0, lsl #22
     fb8:	00130000 	andseq	r0, r3, r0
     fbc:	000a1308 	andeq	r1, sl, r8, lsl #6
     fc0:	9aa90400 	bls	fea41fc8 <BootRAM+0xd9b2769>
     fc4:	05000001 	streq	r0, [r0, #-1]
     fc8:	00014c03 	andeq	r4, r1, r3, lsl #24
     fcc:	004b0a20 	subeq	r0, fp, r0, lsr #20
     fd0:	01cb0000 	biceq	r0, fp, r0
     fd4:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     fd8:	0f000000 	svceq	0x00000000
     fdc:	09cd0800 	stmibeq	sp, {fp}^
     fe0:	af040000 	svcge	0x00040000
     fe4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     fe8:	01190305 	tsteq	r9, r5, lsl #6
     fec:	4b0a2000 	blmi	288ff4 <__Stack_Size+0x288bf4>
     ff0:	ec000000 	stc	0, cr0, [r0], {-0}
     ff4:	0b000001 	bleq	1000 <__Stack_Size+0xc00>
     ff8:	0000005c 	andeq	r0, r0, ip, asr r0
     ffc:	e008007f 	and	r0, r8, pc, ror r0
    1000:	04000009 	streq	r0, [r0], #-9
    1004:	0001dcb5 			; <UNDEFINED> instruction: 0x0001dcb5
    1008:	60030500 	andvs	r0, r3, r0, lsl #10
    100c:	0a200001 	beq	801018 <__Stack_Size+0x800c18>
    1010:	0000004b 	andeq	r0, r0, fp, asr #32
    1014:	0000020d 	andeq	r0, r0, sp, lsl #4
    1018:	00005c0b 	andeq	r5, r0, fp, lsl #24
    101c:	08006b00 	stmdaeq	r0, {r8, r9, fp, sp, lr}
    1020:	000009f1 	strdeq	r0, [r0], -r1
    1024:	01fdbc04 	mvnseq	fp, r4, lsl #24
    1028:	03050000 	movweq	r0, #20480	; 0x5000
    102c:	200001e0 	andcs	r0, r0, r0, ror #3
    1030:	000a0208 	andeq	r0, sl, r8, lsl #4
    1034:	fdc30400 	stc2l	4, cr0, [r3]
    1038:	05000001 	streq	r0, [r0, #-1]
    103c:	00024c03 	andeq	r4, r2, r3, lsl #24
    1040:	099d0820 	ldmibeq	sp, {r5, fp}
    1044:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    1048:	0000004b 	andeq	r0, r0, fp, asr #32
    104c:	00000305 	andeq	r0, r0, r5, lsl #6
    1050:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    1054:	04000002 	streq	r0, [r0], #-2
    1058:	00046800 	andeq	r6, r4, r0, lsl #16
    105c:	58010400 	stmdapl	r1, {sl}
    1060:	01000001 	tsteq	r0, r1
    1064:	00000ac8 	andeq	r0, r0, r8, asr #21
    1068:	00000926 	andeq	r0, r0, r6, lsr #18
    106c:	00000128 	andeq	r0, r0, r8, lsr #2
    1070:	00000000 	andeq	r0, r0, r0
    1074:	00000516 	andeq	r0, r0, r6, lsl r5
    1078:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    107c:	02000001 	andeq	r0, r0, #1
    1080:	06a50502 	strteq	r0, [r5], r2, lsl #10
    1084:	01020000 	mrseq	r0, (UNDEF: 2)
    1088:	00065106 	andeq	r5, r6, r6, lsl #2
    108c:	33750300 	cmncc	r5, #0, 6
    1090:	27020032 	smladxcs	r2, r2, r0, r0
    1094:	00000045 	andeq	r0, r0, r5, asr #32
    1098:	7b070402 	blvc	1c20a8 <__Stack_Size+0x1c1ca8>
    109c:	02000003 	andeq	r0, r0, #3
    10a0:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    10a4:	75030000 	strvc	r0, [r3, #-0]
    10a8:	29020038 	stmdbcs	r2, {r3, r4, r5}
    10ac:	0000005d 	andeq	r0, r0, sp, asr r0
    10b0:	4f080102 	svcmi	0x00080102
    10b4:	04000006 	streq	r0, [r0], #-6
    10b8:	79370201 	ldmdbvc	r7!, {r0, r9}
    10bc:	05000000 	streq	r0, [r0, #-0]
    10c0:	000005dc 	ldrdeq	r0, [r0], -ip
    10c4:	074a0500 	strbeq	r0, [sl, -r0, lsl #10]
    10c8:	00010000 	andeq	r0, r1, r0
    10cc:	00043306 	andeq	r3, r4, r6, lsl #6
    10d0:	64370200 	ldrtvs	r0, [r7], #-512	; 0x200
    10d4:	02000000 	andeq	r0, r0, #0
    10d8:	05150704 	ldreq	r0, [r5, #-1796]	; 0x704
    10dc:	a4070000 	strge	r0, [r7], #-0
    10e0:	0100000a 	tsteq	r0, sl
    10e4:	00021526 	andeq	r1, r2, r6, lsr #10
    10e8:	00062400 	andeq	r2, r6, r0, lsl #8
    10ec:	0000b808 	andeq	fp, r0, r8, lsl #16
    10f0:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    10f4:	08000002 	stmdaeq	r0, {r1}
    10f8:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
    10fc:	00793401 	rsbseq	r3, r9, r1, lsl #8
    1100:	02460000 	subeq	r0, r6, #0
    1104:	80090000 	andhi	r0, r9, r0
    1108:	0100000a 	tsteq	r0, sl
    110c:	00021534 	andeq	r1, r2, r4, lsr r5
    1110:	0000c400 	andeq	ip, r0, r0, lsl #8
    1114:	08000a00 	stmdaeq	r0, {r9, fp}
    1118:	00000adf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    111c:	02153601 	andseq	r3, r5, #1048576	; 0x100000
    1120:	02640000 	rsbeq	r0, r4, #0
    1124:	2a0b0000 	bcs	2c112c <__Stack_Size+0x2c0d2c>
    1128:	2d080006 	stccs	0, cr0, [r8, #-24]	; 0xffffffe8
    112c:	0b000002 	bleq	113c <__Stack_Size+0xd3c>
    1130:	0800062e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl}
    1134:	00000234 	andeq	r0, r0, r4, lsr r2
    1138:	0006320b 	andeq	r3, r6, fp, lsl #4
    113c:	00023b08 	andeq	r3, r2, r8, lsl #22
    1140:	06360b00 	ldrteq	r0, [r6], -r0, lsl #22
    1144:	02420800 	subeq	r0, r2, #0, 16
    1148:	3a0b0000 	bcc	2c1150 <__Stack_Size+0x2c0d50>
    114c:	49080006 	stmdbmi	r8, {r1, r2}
    1150:	0c000002 	stceq	0, cr0, [r0], {2}
    1154:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
    1158:	00000250 	andeq	r0, r0, r0, asr r2
    115c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1160:	0353010d 	cmpeq	r3, #1073741827	; 0x40000003
    1164:	0d243e44 	stceq	14, cr3, [r4, #-272]!	; 0xfffffef0
    1168:	35015201 	strcc	r5, [r1, #-513]	; 0x201
    116c:	0151010d 	cmpeq	r1, sp, lsl #2
    1170:	50010d3d 	andpl	r0, r1, sp, lsr sp
    1174:	10000c05 	andne	r0, r0, r5, lsl #24
    1178:	020d4001 	andeq	r4, sp, #1
    117c:	3001007d 	andcc	r0, r1, sp, ror r0
    1180:	06520c00 	ldrbeq	r0, [r2], -r0, lsl #24
    1184:	02750800 	rsbseq	r0, r5, #0, 16
    1188:	01450000 	mrseq	r0, (UNDEF: 69)
    118c:	010d0000 	mrseq	r0, (UNDEF: 13)
    1190:	000c0550 	andeq	r0, ip, r0, asr r5
    1194:	00080050 	andeq	r0, r8, r0, asr r0
    1198:	0006580b 	andeq	r5, r6, fp, lsl #16
    119c:	00028a08 	andeq	r8, r2, r8, lsl #20
    11a0:	06660c00 	strbteq	r0, [r6], -r0, lsl #24
    11a4:	02750800 	rsbseq	r0, r5, #0, 16
    11a8:	01650000 	cmneq	r5, r0
    11ac:	010d0000 	mrseq	r0, (UNDEF: 13)
    11b0:	000c0550 	andeq	r0, ip, r0, asr r5
    11b4:	00080020 	andeq	r0, r8, r0, lsr #32
    11b8:	0006860c 	andeq	r8, r6, ip, lsl #12
    11bc:	00025008 	andeq	r5, r2, r8
    11c0:	00019300 	andeq	r9, r1, r0, lsl #6
    11c4:	53010d00 	movwpl	r0, #7424	; 0x1d00
    11c8:	24404003 	strbcs	r4, [r0], #-3
    11cc:	0152010d 	cmpeq	r2, sp, lsl #2
    11d0:	51010d31 	tstpl	r1, r1, lsr sp
    11d4:	010d3d01 	tsteq	sp, r1, lsl #26
    11d8:	000c0550 	andeq	r0, ip, r0, asr r5
    11dc:	0d400110 	stfeqe	f0, [r0, #-64]	; 0xffffffc0
    11e0:	01007d02 	tsteq	r0, r2, lsl #26
    11e4:	8a0b0030 	bhi	2c12ac <__Stack_Size+0x2c0eac>
    11e8:	9b080006 	blls	201208 <__Stack_Size+0x200e08>
    11ec:	0b000002 	bleq	11fc <__Stack_Size+0xdfc>
    11f0:	08000690 	stmdaeq	r0, {r4, r7, r9, sl}
    11f4:	000002ac 	andeq	r0, r0, ip, lsr #5
    11f8:	00069e0c 	andeq	r9, r6, ip, lsl #28
    11fc:	00027508 	andeq	r7, r2, r8, lsl #10
    1200:	0001bc00 	andeq	fp, r1, r0, lsl #24
    1204:	50010d00 	andpl	r0, r1, r0, lsl #26
    1208:	20000c05 	andcs	r0, r0, r5, lsl #24
    120c:	0c000800 	stceq	8, cr0, [r0], {-0}
    1210:	080006aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl}
    1214:	00000275 	andeq	r0, r0, r5, ror r2
    1218:	000001d3 	ldrdeq	r0, [r0], -r3
    121c:	0550010d 	ldrbeq	r0, [r0, #-269]	; 0x10d
    1220:	0050000c 	subseq	r0, r0, ip
    1224:	b20b0008 	andlt	r0, fp, #8
    1228:	b9080006 	stmdblt	r8, {r1, r2}
    122c:	0c000002 	stceq	0, cr0, [r0], {2}
    1230:	080006c4 	stmdaeq	r0, {r2, r6, r7, r9, sl}
    1234:	00000250 	andeq	r0, r0, r0, asr r2
    1238:	0000020b 	andeq	r0, r0, fp, lsl #4
    123c:	0353010d 	cmpeq	r3, #1073741827	; 0x40000003
    1240:	0d243e44 	stceq	14, cr3, [r4, #-272]!	; 0xfffffef0
    1244:	35015201 	strcc	r5, [r1, #-513]	; 0x201
    1248:	0151010d 	cmpeq	r1, sp, lsl #2
    124c:	50010d3d 	andpl	r0, r1, sp, lsr sp
    1250:	10000c05 	andne	r0, r0, r5, lsl #24
    1254:	020d4001 	andeq	r4, sp, #1
    1258:	7502007d 	strvc	r0, [r2, #-125]	; 0x7d
    125c:	c80b0000 	stmdagt	fp, {}	; <UNPREDICTABLE>
    1260:	ca080006 	bgt	201280 <__Stack_Size+0x200e80>
    1264:	00000002 	andeq	r0, r0, r2
    1268:	6905040e 	stmdbvs	r5, {r1, r2, r3, sl}
    126c:	0f00746e 	svceq	0x0000746e
    1270:	00000438 	andeq	r0, r0, r8, lsr r4
    1274:	02152c04 	andseq	r2, r5, #4, 24	; 0x400
    1278:	03050000 	movweq	r0, #20480	; 0x5000
    127c:	200002c8 	andcs	r0, r0, r8, asr #5
    1280:	000a7410 	andeq	r7, sl, r0, lsl r4
    1284:	10cb0300 	sbcne	r0, fp, r0, lsl #6
    1288:	00000a9b 	muleq	r0, fp, sl
    128c:	a910cc03 	ldmdbge	r0, {r0, r1, sl, fp, lr, pc}
    1290:	0300000a 	movweq	r0, #10
    1294:	025310cd 	subseq	r1, r3, #205	; 0xcd
    1298:	51040000 	mrspl	r0, (UNDEF: 4)
    129c:	000a9010 	andeq	r9, sl, r0, lsl r0
    12a0:	11ce0300 	bicne	r0, lr, r0, lsl #6
    12a4:	00000aeb 	andeq	r0, r0, fp, ror #21
    12a8:	0275c803 	rsbseq	ip, r5, #196608	; 0x30000
    12ac:	3a120000 	bcc	4812b4 <__Stack_Size+0x480eb4>
    12b0:	12000000 	andne	r0, r0, #0
    12b4:	00000053 	andeq	r0, r0, r3, asr r0
    12b8:	00005312 	andeq	r5, r0, r2, lsl r3
    12bc:	003a1200 	eorseq	r1, sl, r0, lsl #4
    12c0:	53120000 	tstpl	r2, #0
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	000a6613 	andeq	r6, sl, r3, lsl r6
    12cc:	79cf0300 	stmibvc	pc, {r8, r9}^	; <UNPREDICTABLE>
    12d0:	8a000000 	bhi	12d8 <__Stack_Size+0xed8>
    12d4:	12000002 	andne	r0, r0, #2
    12d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    12dc:	0a800900 	beq	fe0036e4 <BootRAM+0xcf73e85>
    12e0:	34010000 	strcc	r0, [r1], #-0
    12e4:	00000215 	andeq	r0, r0, r5, lsl r2
    12e8:	0000029b 	muleq	r0, fp, r2
    12ec:	f509000a 			; <UNDEFINED> instruction: 0xf509000a
    12f0:	0500000a 	streq	r0, [r0, #-10]
    12f4:	0000797c 	andeq	r7, r0, ip, ror r9
    12f8:	0002ac00 	andeq	sl, r2, r0, lsl #24
    12fc:	14000a00 	strne	r0, [r0], #-2560	; 0xa00
    1300:	00000a4b 	andeq	r0, r0, fp, asr #20
    1304:	02b97d05 	adcseq	r7, r9, #320	; 0x140
    1308:	000a0000 	andeq	r0, sl, r0
    130c:	000a5b11 	andeq	r5, sl, r1, lsl fp
    1310:	cad00300 	bgt	ff401f18 <BootRAM+0xe3726b9>
    1314:	12000002 	andne	r0, r0, #2
    1318:	0000003a 	andeq	r0, r0, sl, lsr r0
    131c:	0acf1000 	beq	ff3c5324 <BootRAM+0xe335ac5>
    1320:	ca030000 	bgt	c1328 <__Stack_Size+0xc0f28>
    1324:	0008f100 	andeq	pc, r8, r0, lsl #2
    1328:	89000400 	stmdbhi	r0, {sl}
    132c:	04000005 	streq	r0, [r0], #-5
    1330:	00015801 	andeq	r5, r1, r1, lsl #16
    1334:	0c7b0100 	ldfeqe	f0, [fp], #-0
    1338:	09260000 	stmdbeq	r6!, {}	; <UNPREDICTABLE>
    133c:	01500000 	cmpeq	r0, r0
    1340:	00000000 	andeq	r0, r0, r0
    1344:	05bf0000 	ldreq	r0, [pc, #0]!	; 134c <__Stack_Size+0xf4c>
    1348:	04020000 	streq	r0, [r2], #-0
    134c:	0001f605 	andeq	pc, r1, r5, lsl #12
    1350:	05020200 	streq	r0, [r2, #-512]	; 0x200
    1354:	000006a5 	andeq	r0, r0, r5, lsr #13
    1358:	51060102 	tstpl	r6, r2, lsl #2
    135c:	03000006 	movweq	r0, #6
    1360:	00323375 	eorseq	r3, r2, r5, ror r3
    1364:	00452702 	subeq	r2, r5, r2, lsl #14
    1368:	04020000 	streq	r0, [r2], #-0
    136c:	00037b07 	andeq	r7, r3, r7, lsl #22
    1370:	31750300 	cmncc	r5, r0, lsl #6
    1374:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    1378:	00000057 	andeq	r0, r0, r7, asr r0
    137c:	d7070202 	strle	r0, [r7, -r2, lsl #4]
    1380:	03000003 	movweq	r0, #3
    1384:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    1388:	00006829 	andeq	r6, r0, r9, lsr #16
    138c:	08010200 	stmdaeq	r1, {r9}
    1390:	0000064f 	andeq	r0, r0, pc, asr #12
    1394:	00044604 	andeq	r4, r4, r4, lsl #12
    1398:	7a2f0200 	bvc	bc1ba0 <__Stack_Size+0xbc17a0>
    139c:	05000000 	streq	r0, [r0, #-0]
    13a0:	00000045 	andeq	r0, r0, r5, asr #32
    13a4:	00015304 	andeq	r5, r1, r4, lsl #6
    13a8:	8a300200 	bhi	c01bb0 <__Stack_Size+0xc017b0>
    13ac:	05000000 	streq	r0, [r0, #-0]
    13b0:	00000057 	andeq	r0, r0, r7, asr r0
    13b4:	000d0d04 	andeq	r0, sp, r4, lsl #26
    13b8:	9a330200 	bls	cc1bc0 <__Stack_Size+0xcc17c0>
    13bc:	06000000 	streq	r0, [r0], -r0
    13c0:	0000007a 	andeq	r0, r0, sl, ror r0
    13c4:	37020107 	strcc	r0, [r2, -r7, lsl #2]
    13c8:	000000b4 	strheq	r0, [r0], -r4
    13cc:	0005dc08 	andeq	sp, r5, r8, lsl #24
    13d0:	4a080000 	bmi	2013d8 <__Stack_Size+0x200fd8>
    13d4:	01000007 	tsteq	r0, r7
    13d8:	04330400 	ldrteq	r0, [r3], #-1024	; 0x400
    13dc:	37020000 	strcc	r0, [r2, -r0]
    13e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    13e4:	bf040a09 	svclt	0x00040a09
    13e8:	0b000000 	bleq	13f0 <__Stack_Size+0xff0>
    13ec:	468d0328 	strmi	r0, [sp], r8, lsr #6
    13f0:	0c000001 	stceq	0, cr0, [r0], {1}
    13f4:	03005243 	movweq	r5, #579	; 0x243
    13f8:	00006f8e 	andeq	r6, r0, lr, lsl #31
    13fc:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    1400:	0300000d 	movweq	r0, #13
    1404:	00006f8f 	andeq	r6, r0, pc, lsl #31
    1408:	430c0400 	movwmi	r0, #50176	; 0xc400
    140c:	03005249 	movweq	r5, #585	; 0x249
    1410:	00006f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    1414:	4d0d0800 	stcmi	8, cr0, [sp, #-0]
    1418:	0300000b 	movweq	r0, #11
    141c:	00006f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    1420:	0b0d0c00 	bleq	344428 <__Stack_Size+0x344028>
    1424:	0300000c 	movweq	r0, #12
    1428:	00006f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    142c:	d30d1000 	movwle	r1, #53248	; 0xd000
    1430:	0300000b 	movweq	r0, #11
    1434:	00006f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    1438:	5d0d1400 	cfstrspl	mvf1, [sp, #-0]
    143c:	0300000c 	movweq	r0, #12
    1440:	00006f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    1444:	930d1800 	movwls	r1, #55296	; 0xd800
    1448:	0300000c 	movweq	r0, #12
    144c:	00006f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    1450:	e70d1c00 	str	r1, [sp, -r0, lsl #24]
    1454:	0300000c 	movweq	r0, #12
    1458:	00006f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    145c:	430c2000 	movwmi	r2, #49152	; 0xc000
    1460:	03005253 	movweq	r5, #595	; 0x253
    1464:	00006f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    1468:	04002400 	streq	r2, [r0], #-1024	; 0x400
    146c:	00000ba8 	andeq	r0, r0, r8, lsr #23
    1470:	00c69803 	sbceq	r9, r6, r3, lsl #16
    1474:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    1478:	e69b0303 	ldr	r0, [fp], r3, lsl #6
    147c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1480:	00000c58 	andeq	r0, r0, r8, asr ip
    1484:	01fd9c03 	mvnseq	r9, r3, lsl #24
    1488:	0d000000 	stceq	0, cr0, [r0, #-0]
    148c:	00000c1a 	andeq	r0, r0, sl, lsl ip
    1490:	02029d03 	andeq	r9, r2, #3, 26	; 0xc0
    1494:	0d080000 	stceq	0, cr0, [r8, #-0]
    1498:	00000c06 	andeq	r0, r0, r6, lsl #24
    149c:	02129e03 	andseq	r9, r2, #3, 28	; 0x30
    14a0:	0d800000 	stceq	0, cr0, [r0]
    14a4:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    14a8:	02029f03 	andeq	r9, r2, #3, 30
    14ac:	0f880000 	svceq	0x00880000
    14b0:	00000b19 	andeq	r0, r0, r9, lsl fp
    14b4:	0217a003 	andseq	sl, r7, #3
    14b8:	01000000 	mrseq	r0, (UNDEF: 0)
    14bc:	000c290f 	andeq	r2, ip, pc, lsl #18
    14c0:	02a10300 	adceq	r0, r1, #0, 6
    14c4:	08000002 	stmdaeq	r0, {r1}
    14c8:	0b060f01 	bleq	1850d4 <__Stack_Size+0x184cd4>
    14cc:	a2030000 	andge	r0, r3, #0
    14d0:	0000021c 	andeq	r0, r0, ip, lsl r2
    14d4:	330f0180 	movwcc	r0, #61824	; 0xf180
    14d8:	0300000c 	movweq	r0, #12
    14dc:	000202a3 	andeq	r0, r2, r3, lsr #5
    14e0:	0f018800 	svceq	0x00018800
    14e4:	00000bfc 	strdeq	r0, [r0], -ip
    14e8:	0221a403 	eoreq	sl, r1, #50331648	; 0x3000000
    14ec:	02000000 	andeq	r0, r0, #0
    14f0:	000c3d0f 	andeq	r3, ip, pc, lsl #26
    14f4:	26a50300 	strtcs	r0, [r5], r0, lsl #6
    14f8:	08000002 	stmdaeq	r0, {r1}
    14fc:	50491002 	subpl	r1, r9, r2
    1500:	a6030052 			; <UNDEFINED> instruction: 0xa6030052
    1504:	00000246 	andeq	r0, r0, r6, asr #4
    1508:	11000300 	mrsne	r0, LR_irq
    150c:	0000006f 	andeq	r0, r0, pc, rrx
    1510:	000001f6 	strdeq	r0, [r0], -r6
    1514:	0001f612 	andeq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
    1518:	02000100 	andeq	r0, r0, #0, 2
    151c:	05150704 	ldreq	r0, [r5, #-1796]	; 0x704
    1520:	e6050000 	str	r0, [r5], -r0
    1524:	11000001 	tstne	r0, r1
    1528:	0000003a 	andeq	r0, r0, sl, lsr r0
    152c:	00000212 	andeq	r0, r0, r2, lsl r2
    1530:	0001f612 	andeq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
    1534:	05001d00 	streq	r1, [r0, #-3328]	; 0xd00
    1538:	000001e6 	andeq	r0, r0, r6, ror #3
    153c:	0001e605 	andeq	lr, r1, r5, lsl #12
    1540:	01e60500 	mvneq	r0, r0, lsl #10
    1544:	e6050000 	str	r0, [r5], -r0
    1548:	11000001 	tstne	r0, r1
    154c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1550:	00000236 	andeq	r0, r0, r6, lsr r2
    1554:	0001f612 	andeq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
    1558:	11003d00 	tstne	r0, r0, lsl #26
    155c:	0000006f 	andeq	r0, r0, pc, rrx
    1560:	00000246 	andeq	r0, r0, r6, asr #4
    1564:	0001f612 	andeq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
    1568:	05000e00 	streq	r0, [r0, #-3584]	; 0xe00
    156c:	00000236 	andeq	r0, r0, r6, lsr r2
    1570:	000c8604 	andeq	r8, ip, r4, lsl #12
    1574:	51a70300 			; <UNDEFINED> instruction: 0x51a70300
    1578:	0b000001 	bleq	1584 <__Stack_Size+0x1184>
    157c:	8fa90304 	svchi	0x00a90304
    1580:	0d000002 	stceq	0, cr0, [r0, #-8]
    1584:	0000044b 	andeq	r0, r0, fp, asr #8
    1588:	005eaa03 	subseq	sl, lr, r3, lsl #20
    158c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1590:	0000046e 	andeq	r0, r0, lr, ror #8
    1594:	005eab03 	subseq	sl, lr, r3, lsl #22
    1598:	0d010000 	stceq	0, cr0, [r1, #-0]
    159c:	00000350 	andeq	r0, r0, r0, asr r3
    15a0:	005eac03 	subseq	sl, lr, r3, lsl #24
    15a4:	0d020000 	stceq	0, cr0, [r2, #-0]
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	00b4ad03 	adcseq	sl, r4, r3, lsl #26
    15b0:	00030000 	andeq	r0, r3, r0
    15b4:	00049004 	andeq	r9, r4, r4
    15b8:	56ae0300 	strtpl	r0, [lr], r0, lsl #6
    15bc:	0b000002 	bleq	15cc <__Stack_Size+0x11cc>
    15c0:	4bb00340 	blmi	fec022c8 <BootRAM+0xdb72a69>
    15c4:	0d000003 	stceq	0, cr0, [r0, #-12]
    15c8:	00000c14 	andeq	r0, r0, r4, lsl ip
    15cc:	008fb103 	addeq	fp, pc, r3, lsl #2
    15d0:	0d000000 	stceq	0, cr0, [r0, #-0]
    15d4:	00000bc6 	andeq	r0, r0, r6, asr #23
    15d8:	006fb203 	rsbeq	fp, pc, r3, lsl #4
    15dc:	0d040000 	stceq	0, cr0, [r4, #-0]
    15e0:	00000b9a 	muleq	r0, sl, fp
    15e4:	006fb303 	rsbeq	fp, pc, r3, lsl #6
    15e8:	0d080000 	stceq	0, cr0, [r8, #-0]
    15ec:	00000bda 	ldrdeq	r0, [r0], -sl
    15f0:	006fb403 	rsbeq	fp, pc, r3, lsl #8
    15f4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    15f8:	00524353 	subseq	r4, r2, r3, asr r3
    15fc:	006fb503 	rsbeq	fp, pc, r3, lsl #10
    1600:	0c100000 	ldceq	0, cr0, [r0], {-0}
    1604:	00524343 	subseq	r4, r2, r3, asr #6
    1608:	006fb603 	rsbeq	fp, pc, r3, lsl #12
    160c:	0d140000 	ldceq	0, cr0, [r4, #-0]
    1610:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
    1614:	035bb703 	cmpeq	fp, #786432	; 0xc0000
    1618:	0d180000 	ldceq	0, cr0, [r8, #-0]
    161c:	00000c52 	andeq	r0, r0, r2, asr ip
    1620:	006fb803 	rsbeq	fp, pc, r3, lsl #16
    1624:	0d240000 	stceq	0, cr0, [r4, #-0]
    1628:	00000bf7 	strdeq	r0, [r0], -r7
    162c:	006fb903 	rsbeq	fp, pc, r3, lsl #18
    1630:	0d280000 	stceq	0, cr0, [r8, #-0]
    1634:	00000d1f 	andeq	r0, r0, pc, lsl sp
    1638:	006fba03 	rsbeq	fp, pc, r3, lsl #20
    163c:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    1640:	00000c24 	andeq	r0, r0, r4, lsr #24
    1644:	006fbb03 	rsbeq	fp, pc, r3, lsl #22
    1648:	0d300000 	ldceq	0, cr0, [r0, #-0]
    164c:	00000be0 	andeq	r0, r0, r0, ror #23
    1650:	006fbc03 	rsbeq	fp, pc, r3, lsl #24
    1654:	0d340000 	ldceq	0, cr0, [r4, #-0]
    1658:	00000b75 	andeq	r0, r0, r5, ror fp
    165c:	006fbd03 	rsbeq	fp, pc, r3, lsl #26
    1660:	0d380000 	ldceq	0, cr0, [r8, #-0]
    1664:	00000c76 	andeq	r0, r0, r6, ror ip
    1668:	006fbe03 	rsbeq	fp, pc, r3, lsl #28
    166c:	003c0000 	eorseq	r0, ip, r0
    1670:	00006f11 	andeq	r6, r0, r1, lsl pc
    1674:	00035b00 	andeq	r5, r3, r0, lsl #22
    1678:	01f61200 	mvnseq	r1, r0, lsl #4
    167c:	00020000 	andeq	r0, r2, r0
    1680:	00034b05 	andeq	r4, r3, r5, lsl #22
    1684:	0d130400 	cfldrseq	mvf0, [r3, #-0]
    1688:	bf030000 	svclt	0x00030000
    168c:	0000029a 	muleq	r0, sl, r2
    1690:	000bed13 	andeq	lr, fp, r3, lsl sp
    1694:	013a0100 	teqeq	sl, r0, lsl #2
    1698:	056c1401 	strbeq	r1, [ip, #-1025]!	; 0x401
    169c:	2d010000 	stccs	0, cr0, [r1, #-0]
    16a0:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
    16a4:	00000016 	andeq	r0, r0, r6, lsl r0
    16a8:	03b59c01 			; <UNDEFINED> instruction: 0x03b59c01
    16ac:	b9150000 	ldmdblt	r5, {}	; <UNPREDICTABLE>
    16b0:	0100000c 	tsteq	r0, ip
    16b4:	00003a2d 	andeq	r3, r0, sp, lsr #20
    16b8:	16500100 	ldrbne	r0, [r0], -r0, lsl #2
    16bc:	006e6970 	rsbeq	r6, lr, r0, ror r9
    16c0:	005e2d01 	subseq	r2, lr, r1, lsl #26
    16c4:	029d0000 	addseq	r0, sp, #0
    16c8:	76160000 	ldrvc	r0, [r6], -r0
    16cc:	01006c61 	tsteq	r0, r1, ror #24
    16d0:	00005e2d 	andeq	r5, r0, sp, lsr #28
    16d4:	0002be00 	andeq	fp, r2, r0, lsl #28
    16d8:	1e170000 	cdpne	0, 1, cr0, cr7, cr0, {0}
    16dc:	0100000b 	tsteq	r0, fp
    16e0:	0000b432 	andeq	fp, r0, r2, lsr r4
    16e4:	00000000 	andeq	r0, r0, r0
    16e8:	00001200 	andeq	r1, r0, r0, lsl #4
    16ec:	ed9c0100 	ldfs	f0, [ip]
    16f0:	18000003 	stmdane	r0, {r0, r1}
    16f4:	00000cb9 			; <UNDEFINED> instruction: 0x00000cb9
    16f8:	003a3201 	eorseq	r3, sl, r1, lsl #4
    16fc:	02f40000 	rscseq	r0, r4, #0
    1700:	70160000 	andsvc	r0, r6, r0
    1704:	01006e69 	tsteq	r0, r9, ror #28
    1708:	00005e32 	andeq	r5, r0, r2, lsr lr
    170c:	00031500 	andeq	r1, r3, r0, lsl #10
    1710:	80190000 	andshi	r0, r9, r0
    1714:	0100000a 	tsteq	r0, sl
    1718:	0000b43b 	andeq	fp, r0, fp, lsr r4
    171c:	0006f200 	andeq	pc, r6, r0, lsl #4
    1720:	00000408 	andeq	r0, r0, r8, lsl #8
    1724:	139c0100 	orrsne	r0, ip, #0, 2
    1728:	1a000004 	bne	1740 <__Stack_Size+0x1340>
    172c:	00000b47 	andeq	r0, r0, r7, asr #22
    1730:	00b43d01 	adcseq	r3, r4, r1, lsl #26
    1734:	00000000 	andeq	r0, r0, r0
    1738:	000aeb14 	andeq	lr, sl, r4, lsl fp
    173c:	f64c0100 			; <UNDEFINED> instruction: 0xf64c0100
    1740:	50080006 	andpl	r0, r8, r6
    1744:	01000000 	mrseq	r0, (UNDEF: 0)
    1748:	0004dc9c 	muleq	r4, ip, ip
    174c:	0cb91800 	ldceq	8, cr1, [r9]
    1750:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1754:	0000003a 	andeq	r0, r0, sl, lsr r0
    1758:	00000336 	andeq	r0, r0, r6, lsr r3
    175c:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    1760:	5e4c0100 	dvfple	f0, f4, f0
    1764:	54000000 	strpl	r0, [r0], #-0
    1768:	18000003 	stmdane	r0, {r0, r1}
    176c:	00000ae5 	andeq	r0, r0, r5, ror #21
    1770:	005e4c01 	subseq	r4, lr, r1, lsl #24
    1774:	03750000 	cmneq	r5, #0
    1778:	36180000 	ldrcc	r0, [r8], -r0
    177c:	0100000b 	tsteq	r0, fp
    1780:	00003a4c 	andeq	r3, r0, ip, asr #20
    1784:	0003bd00 	andeq	fp, r3, r0, lsl #26
    1788:	0a881500 	beq	fe206b90 <BootRAM+0xd177331>
    178c:	4c010000 	stcmi	0, cr0, [r1], {-0}
    1790:	0000005e 	andeq	r0, r0, lr, asr r0
    1794:	1b009102 	blne	25ba4 <__Stack_Size+0x257a4>
    1798:	50010063 	andpl	r0, r1, r3, rrx
    179c:	0000003a 	andeq	r0, r0, sl, lsr r0
    17a0:	000003db 	ldrdeq	r0, [r0], -fp
    17a4:	0007121c 	andeq	r1, r7, ip, lsl r2
    17a8:	00037408 	andeq	r7, r3, r8, lsl #8
    17ac:	00049f00 	andeq	r9, r4, r0, lsl #30
    17b0:	52011d00 	andpl	r1, r1, #0, 26
    17b4:	1d007702 	stcne	7, cr7, [r0, #-8]
    17b8:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    17bc:	50011d00 	andpl	r1, r1, r0, lsl #26
    17c0:	00007802 	andeq	r7, r0, r2, lsl #16
    17c4:	0007281c 	andeq	r2, r7, ip, lsl r8
    17c8:	00037408 	andeq	r7, r3, r8, lsl #8
    17cc:	0004bf00 	andeq	fp, r4, r0, lsl #30
    17d0:	52011d00 	andpl	r1, r1, #0, 26
    17d4:	1d007a02 	vstrne	s14, [r0, #-8]
    17d8:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    17dc:	50011d00 	andpl	r1, r1, r0, lsl #26
    17e0:	00007802 	andeq	r7, r0, r2, lsl #16
    17e4:	00073e1e 	andeq	r3, r7, lr, lsl lr
    17e8:	00037408 	andeq	r7, r3, r8, lsl #8
    17ec:	52011d00 	andpl	r1, r1, #0, 26
    17f0:	1d007702 	stcne	7, cr7, [r0, #-8]
    17f4:	79025101 	stmdbvc	r2, {r0, r8, ip, lr}
    17f8:	50011d00 	andpl	r1, r1, r0, lsl #26
    17fc:	00007802 	andeq	r7, r0, r2, lsl #16
    1800:	0a741f00 	beq	1d09408 <__Stack_Size+0x1d09008>
    1804:	62010000 	andvs	r0, r1, #0
    1808:	08000748 	stmdaeq	r0, {r3, r6, r8, r9, sl}
    180c:	00000048 	andeq	r0, r0, r8, asr #32
    1810:	9b1f9c01 	blls	7e881c <__Stack_Size+0x7e841c>
    1814:	0100000a 	tsteq	r0, sl
    1818:	0007906c 	andeq	r9, r7, ip, rrx
    181c:	00006008 	andeq	r6, r0, r8
    1820:	209c0100 	addscs	r0, ip, r0, lsl #2
    1824:	00000289 	andeq	r0, r0, r9, lsl #5
    1828:	28014901 	stmdacs	r1, {r0, r8, fp, lr}
    182c:	01000005 	tsteq	r0, r5
    1830:	00000528 	andeq	r0, r0, r8, lsr #10
    1834:	6e697021 	cdpvs	0, 6, cr7, cr9, cr1, {1}
    1838:	01490100 	mrseq	r0, (UNDEF: 89)
    183c:	0000052f 	andeq	r0, r0, pc, lsr #10
    1840:	000bce22 	andeq	ip, fp, r2, lsr #28
    1844:	014b0100 	mrseq	r0, (UNDEF: 91)
    1848:	00000528 	andeq	r0, r0, r8, lsr #10
    184c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    1850:	00000380 	andeq	r0, r0, r0, lsl #7
    1854:	69050423 	stmdbvs	r5, {r0, r1, r5, sl}
    1858:	1f00746e 	svcne	0x0000746e
    185c:	00000aa9 	andeq	r0, r0, r9, lsr #21
    1860:	07f09001 	ldrbeq	r9, [r0, r1]!
    1864:	00140800 	andseq	r0, r4, r0, lsl #16
    1868:	9c010000 	stcls	0, cr0, [r1], {-0}
    186c:	000a9014 	andeq	r9, sl, r4, lsl r0
    1870:	049b0100 	ldreq	r0, [fp], #256	; 0x100
    1874:	1c080008 	stcne	0, cr0, [r8], {8}
    1878:	01000000 	mrseq	r0, (UNDEF: 0)
    187c:	0005769c 	muleq	r5, ip, r6
    1880:	080c2400 	stmdaeq	ip, {sl, sp}
    1884:	00080800 	andeq	r0, r8, r0, lsl #16
    1888:	12250000 	eorne	r0, r5, #0
    188c:	0100000b 	tsteq	r0, fp
    1890:	00003a9e 	muleq	r0, lr, sl
    1894:	00040400 	andeq	r0, r4, r0, lsl #8
    1898:	17000000 	strne	r0, [r0, -r0]
    189c:	00000a66 	andeq	r0, r0, r6, ror #20
    18a0:	00b4a701 	adcseq	sl, r4, r1, lsl #14
    18a4:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
    18a8:	00140800 	andseq	r0, r4, r0, lsl #16
    18ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    18b0:	000005ad 	andeq	r0, r0, sp, lsr #11
    18b4:	000cd018 	andeq	sp, ip, r8, lsl r0
    18b8:	3aa70100 	bcc	fe9c1cc0 <BootRAM+0xd932461>
    18bc:	17000000 	strne	r0, [r0, -r0]
    18c0:	1b000004 	blne	18d8 <__Stack_Size+0x14d8>
    18c4:	01007073 	tsteq	r0, r3, ror r0
    18c8:	00003aa8 	andeq	r3, r0, r8, lsr #21
    18cc:	00043800 	andeq	r3, r4, r0, lsl #16
    18d0:	17140000 	ldrne	r0, [r4, -r0]
    18d4:	01000007 	tsteq	r0, r7
    18d8:	000834cb 	andeq	r3, r8, fp, asr #9
    18dc:	00006c08 	andeq	r6, r0, r8, lsl #24
    18e0:	3b9c0100 	blcc	fe701ce8 <BootRAM+0xd672489>
    18e4:	15000006 	strne	r0, [r0, #-6]
    18e8:	00000bb6 			; <UNDEFINED> instruction: 0x00000bb6
    18ec:	063bcb01 	ldrteq	ip, [fp], -r1, lsl #22
    18f0:	50010000 	andpl	r0, r1, r0
    18f4:	000cec25 	andeq	lr, ip, r5, lsr #24
    18f8:	3acc0100 	bcc	ff301d00 <BootRAM+0xe2724a1>
    18fc:	4b000000 	blmi	1904 <__Stack_Size+0x1504>
    1900:	25000004 	strcs	r0, [r0, #-4]
    1904:	00000b40 	andeq	r0, r0, r0, asr #22
    1908:	003acd01 	eorseq	ip, sl, r1, lsl #26
    190c:	04b70000 	ldrteq	r0, [r7], #0
    1910:	cb250000 	blgt	941918 <__Stack_Size+0x941518>
    1914:	0100000b 	tsteq	r0, fp
    1918:	00003ace 	andeq	r3, r0, lr, asr #21
    191c:	0004ec00 	andeq	lr, r4, r0, lsl #24
    1920:	0b562500 	bleq	158ad28 <__Stack_Size+0x158a928>
    1924:	cf010000 	svcgt	0x00010000
    1928:	0000003a 	andeq	r0, r0, sl, lsr r0
    192c:	00000524 	andeq	r0, r0, r4, lsr #10
    1930:	000b0b25 	andeq	r0, fp, r5, lsr #22
    1934:	3ad00100 	bcc	ff401d3c <BootRAM+0xe3724dd>
    1938:	61000000 	mrsvs	r0, (UNDEF: 0)
    193c:	26000005 	strcs	r0, [r0], -r5
    1940:	00000b3b 	andeq	r0, r0, fp, lsr fp
    1944:	0641d201 	strbeq	sp, [r1], -r1, lsl #4
    1948:	da800000 	ble	fe001950 <BootRAM+0xcf720f1>
    194c:	267e8083 	ldrbtcs	r8, [lr], -r3, lsl #1
    1950:	00000c4c 	andeq	r0, r0, ip, asr #24
    1954:	0647d301 	strbeq	sp, [r7], -r1, lsl #6
    1958:	c2800000 	addgt	r0, r0, #0
    195c:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    1960:	028f040a 	addeq	r0, pc, #167772160	; 0xa000000
    1964:	040a0000 	streq	r0, [sl], #-0
    1968:	00000360 	andeq	r0, r0, r0, ror #6
    196c:	024b040a 	subeq	r0, fp, #167772160	; 0xa000000
    1970:	7a140000 	bvc	501978 <__Stack_Size+0x501578>
    1974:	0100000b 	tsteq	r0, fp
    1978:	0008a0ee 	andeq	sl, r8, lr, ror #1
    197c:	00002408 	andeq	r2, r0, r8, lsl #8
    1980:	739c0100 	orrsvc	r0, ip, #0, 2
    1984:	26000006 	strcs	r0, [r0], -r6
    1988:	00000c4c 	andeq	r0, r0, ip, asr #24
    198c:	0647ef01 	strbeq	lr, [r7], -r1, lsl #30
    1990:	c2800000 	addgt	r0, r0, #0
    1994:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    1998:	000a5b14 	andeq	r5, sl, r4, lsl fp
    199c:	c4b10100 	ldrtgt	r0, [r1], #256	; 0x100
    19a0:	2c080008 	stccs	0, cr0, [r8], {8}
    19a4:	01000000 	mrseq	r0, (UNDEF: 0)
    19a8:	0007059c 	muleq	r7, ip, r5
    19ac:	0cd01800 	ldcleq	8, cr1, [r0], {0}
    19b0:	b1010000 	mrslt	r0, (UNDEF: 1)
    19b4:	0000003a 	andeq	r0, r0, sl, lsr r0
    19b8:	0000058f 	andeq	r0, r0, pc, lsl #11
    19bc:	000cc804 	andeq	ip, ip, r4, lsl #16
    19c0:	c0b20100 	adcsgt	r0, r2, r0, lsl #2
    19c4:	25000000 	strcs	r0, [r0, #-0]
    19c8:	00000b9f 	muleq	r0, pc, fp	; <UNPREDICTABLE>
    19cc:	003ab401 	eorseq	fp, sl, r1, lsl #8
    19d0:	05bb0000 	ldreq	r0, [fp, #0]!
    19d4:	6e250000 	cdpvs	0, 2, cr0, cr5, cr0, {0}
    19d8:	0100000c 	tsteq	r0, ip
    19dc:	000697b5 			; <UNDEFINED> instruction: 0x000697b5
    19e0:	0005bb00 	andeq	fp, r5, r0, lsl #22
    19e4:	036b2700 	cmneq	fp, #0, 14
    19e8:	08c60000 	stmiaeq	r6, {}^	; <UNPREDICTABLE>
    19ec:	01380800 	teqeq	r8, r0, lsl #16
    19f0:	ba010000 	blt	419f8 <__Stack_Size+0x415f8>
    19f4:	0008d428 	andeq	sp, r8, r8, lsr #8
    19f8:	0008d908 	andeq	sp, r8, r8, lsl #18
    19fc:	08d82800 	ldmeq	r8, {fp, sp}^
    1a00:	064d0800 	strbeq	r0, [sp], -r0, lsl #16
    1a04:	dc280000 	stcle	0, cr0, [r8], #-0
    1a08:	e0080008 	and	r0, r8, r8
    1a0c:	28000008 	stmdacs	r0, {r3}
    1a10:	080008e0 	stmdaeq	r0, {r5, r6, r7, fp}
    1a14:	000004dc 	ldrdeq	r0, [r0], -ip
    1a18:	0008e628 	andeq	lr, r8, r8, lsr #12
    1a1c:	0008e708 	andeq	lr, r8, r8, lsl #14
    1a20:	08e82900 	stmiaeq	r8!, {r8, fp, sp}^
    1a24:	75020800 	strvc	r0, [r2, #-2048]	; 0x800
    1a28:	cf140000 	svcgt	0x00140000
    1a2c:	0100000a 	tsteq	r0, sl
    1a30:	0008f0f8 	strdeq	pc, [r8], -r8
    1a34:	00001408 	andeq	r1, r0, r8, lsl #8
    1a38:	2b9c0100 	blcs	fe701e40 <BootRAM+0xd6725e1>
    1a3c:	26000007 	strcs	r0, [r0], -r7
    1a40:	00000b3b 	andeq	r0, r0, fp, lsr fp
    1a44:	0641f901 	strbeq	pc, [r1], -r1, lsl #18	; <UNPREDICTABLE>
    1a48:	da800000 	ble	fe001a50 <BootRAM+0xcf721f1>
    1a4c:	007e8083 	rsbseq	r8, lr, r3, lsl #1
    1a50:	000cd82a 	andeq	sp, ip, sl, lsr #16
    1a54:	01040100 	mrseq	r0, (UNDEF: 20)
    1a58:	000000b4 	strheq	r0, [r0], -r4
    1a5c:	08000904 	stmdaeq	r0, {r2, r8, fp}
    1a60:	00000034 	andeq	r0, r0, r4, lsr r0
    1a64:	07669c01 	strbeq	r9, [r6, -r1, lsl #24]!
    1a68:	652b0000 	strvs	r0, [fp, #-0]!
    1a6c:	0100000c 	tsteq	r0, ip
    1a70:	003a0104 	eorseq	r0, sl, r4, lsl #2
    1a74:	05ce0000 	strbeq	r0, [lr]
    1a78:	122c0000 	eorne	r0, ip, #0
    1a7c:	0100000b 	tsteq	r0, fp
    1a80:	003a0105 	eorseq	r0, sl, r5, lsl #2
    1a84:	05ef0000 	strbeq	r0, [pc, #0]!	; 1a8c <__Stack_Size+0x168c>
    1a88:	2a000000 	bcs	1a90 <__Stack_Size+0x1690>
    1a8c:	00000b26 	andeq	r0, r0, r6, lsr #22
    1a90:	b4011501 	strlt	r1, [r1], #-1281	; 0x501
    1a94:	00000000 	andeq	r0, r0, r0
    1a98:	30000000 	andcc	r0, r0, r0
    1a9c:	01000000 	mrseq	r0, (UNDEF: 0)
    1aa0:	0007a89c 	muleq	r7, ip, r8
    1aa4:	0c652b00 	stcleq	11, cr2, [r5], #-0
    1aa8:	15010000 	strne	r0, [r1, #-0]
    1aac:	00003a01 	andeq	r3, r0, r1, lsl #20
    1ab0:	00060f00 	andeq	r0, r6, r0, lsl #30
    1ab4:	006e2d00 	rsbeq	r2, lr, r0, lsl #26
    1ab8:	4c011501 	cfstr32mi	mvfx1, [r1], {1}
    1abc:	3b000000 	blcc	1ac4 <__Stack_Size+0x16c4>
    1ac0:	28000006 	stmdacs	r0, {r1, r2}
    1ac4:	00000000 	andeq	r0, r0, r0
    1ac8:	0000072b 	andeq	r0, r0, fp, lsr #14
    1acc:	0c9b2a00 	vldmiaeq	fp, {s4-s3}
    1ad0:	1f010000 	svcne	0x00010000
    1ad4:	0000b401 	andeq	fp, r0, r1, lsl #8
    1ad8:	00093800 	andeq	r3, r9, r0, lsl #16
    1adc:	00004c08 	andeq	r4, r0, r8, lsl #24
    1ae0:	1f9c0100 	svcne	0x009c0100
    1ae4:	2b000008 	blcs	1b0c <__Stack_Size+0x170c>
    1ae8:	00000c47 	andeq	r0, r0, r7, asr #24
    1aec:	3a011f01 	bcc	496f8 <__Stack_Size+0x492f8>
    1af0:	7f000000 	svcvc	0x00000000
    1af4:	2e000006 	cdpcs	0, 0, cr0, cr0, cr6, {0}
    1af8:	00000c01 	andeq	r0, r0, r1, lsl #24
    1afc:	3a011f01 	bcc	49708 <__Stack_Size+0x49308>
    1b00:	01000000 	mrseq	r0, (UNDEF: 0)
    1b04:	0cbe2c51 	ldceq	12, cr2, [lr], #324	; 0x144
    1b08:	20010000 	andcs	r0, r1, r0
    1b0c:	00081f01 	andeq	r1, r8, r1, lsl #30
    1b10:	00067f00 	andeq	r7, r6, r0, lsl #30
    1b14:	0be62f00 	bleq	ff98d71c <BootRAM+0xe8fdebd>
    1b18:	21010000 	mrscs	r0, (UNDEF: 1)
    1b1c:	00006f01 	andeq	r6, r0, r1, lsl #30
    1b20:	68910200 	ldmvs	r1, {r9}
    1b24:	000cf82f 	andeq	pc, ip, pc, lsr #16
    1b28:	01220100 	teqeq	r2, r0, lsl #2
    1b2c:	0000006f 	andeq	r0, r0, pc, rrx
    1b30:	2c6c9102 	stfcsp	f1, [ip], #-8
    1b34:	00000b12 	andeq	r0, r0, r2, lsl fp
    1b38:	3a012401 	bcc	4ab44 <__Stack_Size+0x4a744>
    1b3c:	a0000000 	andge	r0, r0, r0
    1b40:	00000006 	andeq	r0, r0, r6
    1b44:	007f040a 	rsbseq	r0, pc, sl, lsl #8
    1b48:	6b300000 	blvs	c01b50 <__Stack_Size+0xc01750>
    1b4c:	84000003 	strhi	r0, [r0], #-3
    1b50:	0c080009 	stceq	0, cr0, [r8], {9}
    1b54:	01000000 	mrseq	r0, (UNDEF: 0)
    1b58:	0b5d319c 	bleq	174e1d0 <__Stack_Size+0x174ddd0>
    1b5c:	41010000 	mrsmi	r0, (UNDEF: 1)
    1b60:	00099001 	andeq	r9, r9, r1
    1b64:	00001808 	andeq	r1, r0, r8, lsl #16
    1b68:	329c0100 	addscc	r0, ip, #0, 2
    1b6c:	000004fe 	strdeq	r0, [r0], -lr
    1b70:	080009a8 	stmdaeq	r0, {r3, r5, r7, r8, fp}
    1b74:	00000012 	andeq	r0, r0, r2, lsl r0
    1b78:	086c9c01 	stmdaeq	ip!, {r0, sl, fp, ip, pc}^
    1b7c:	0f330000 	svceq	0x00330000
    1b80:	be000005 	cdplt	0, 0, cr0, cr0, cr5, {0}
    1b84:	34000006 	strcc	r0, [r0], #-6
    1b88:	0000051b 	andeq	r0, r0, fp, lsl r5
    1b8c:	000006dc 	ldrdeq	r0, [r0], -ip
    1b90:	0b692a00 	bleq	1a4c398 <__Stack_Size+0x1a4bf98>
    1b94:	55010000 	strpl	r0, [r1, #-0]
    1b98:	00052f01 	andeq	r2, r5, r1, lsl #30
    1b9c:	0009bc00 	andeq	fp, r9, r0, lsl #24
    1ba0:	00001008 	andeq	r1, r0, r8
    1ba4:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    1ba8:	35000008 	strcc	r0, [r0, #-8]
    1bac:	00000caa 	andeq	r0, r0, sl, lsr #25
    1bb0:	97015701 	strls	r5, [r1, -r1, lsl #14]
    1bb4:	e0000008 	and	r0, r0, r8
    1bb8:	001ffff7 			; <UNDEFINED> instruction: 0x001ffff7
    1bbc:	0057040a 	subseq	r0, r7, sl, lsl #8
    1bc0:	c42a0000 	strtgt	r0, [sl], #-0
    1bc4:	01000002 	tsteq	r0, r2
    1bc8:	052f015b 	streq	r0, [pc, #-347]!	; 1a75 <__Stack_Size+0x1675>
    1bcc:	09cc0000 	stmibeq	ip, {}^	; <UNPREDICTABLE>
    1bd0:	00180800 	andseq	r0, r8, r0, lsl #16
    1bd4:	9c010000 	stcls	0, cr0, [r1], {-0}
    1bd8:	000008c8 	andeq	r0, r0, r8, asr #17
    1bdc:	000caa35 	andeq	sl, ip, r5, lsr sl
    1be0:	015e0100 	cmpeq	lr, r0, lsl #2
    1be4:	00000897 	muleq	r0, r7, r8
    1be8:	1ffff7e0 	svcne	0x00fff7e0
    1bec:	04383600 	ldrteq	r3, [r8], #-1536	; 0x600
    1bf0:	2c040000 	stccs	0, cr0, [r4], {-0}
    1bf4:	0000052f 	andeq	r0, r0, pc, lsr #10
    1bf8:	02c80305 	sbceq	r0, r8, #335544320	; 0x14000000
    1bfc:	cd372000 	ldcgt	0, cr2, [r7, #-0]
    1c00:	04000003 	streq	r0, [r0], #-3
    1c04:	07e23780 	strbeq	r3, [r2, r0, lsl #15]!
    1c08:	52040000 	andpl	r0, r4, #0
    1c0c:	000b9038 	andeq	r9, fp, r8, lsr r0
    1c10:	39270500 	stmdbcc	r7!, {r8, sl}
    1c14:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c18:	06550000 	ldrbeq	r0, [r5], -r0
    1c1c:	00040000 	andeq	r0, r4, r0
    1c20:	000008c9 	andeq	r0, r0, r9, asr #17
    1c24:	01580104 	cmpeq	r8, r4, lsl #2
    1c28:	37010000 	strcc	r0, [r1, -r0]
    1c2c:	2600000d 	strcs	r0, [r0], -sp
    1c30:	00000009 	andeq	r0, r0, r9
    1c34:	00000002 	andeq	r0, r0, r2
    1c38:	6a000000 	bvs	1c40 <__Stack_Size+0x1840>
    1c3c:	02000008 	andeq	r0, r0, #8
    1c40:	01f60504 	mvnseq	r0, r4, lsl #10
    1c44:	02020000 	andeq	r0, r2, #0
    1c48:	0006a505 	andeq	sl, r6, r5, lsl #10
    1c4c:	06010200 	streq	r0, [r1], -r0, lsl #4
    1c50:	00000651 	andeq	r0, r0, r1, asr r6
    1c54:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    1c58:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
    1c5c:	02000000 	andeq	r0, r0, #0
    1c60:	037b0704 	cmneq	fp, #4, 14	; 0x100000
    1c64:	75030000 	strvc	r0, [r3, #-0]
    1c68:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    1c6c:	00005728 	andeq	r5, r0, r8, lsr #14
    1c70:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1c74:	000003d7 	ldrdeq	r0, [r0], -r7
    1c78:	00387503 	eorseq	r7, r8, r3, lsl #10
    1c7c:	00682902 	rsbeq	r2, r8, r2, lsl #18
    1c80:	01020000 	mrseq	r0, (UNDEF: 2)
    1c84:	00064f08 	andeq	r4, r6, r8, lsl #30
    1c88:	02010400 	andeq	r0, r1, #0, 8
    1c8c:	00008437 	andeq	r8, r0, r7, lsr r4
    1c90:	05dc0500 	ldrbeq	r0, [ip, #1280]	; 0x500
    1c94:	05000000 	streq	r0, [r0, #-0]
    1c98:	0000074a 	andeq	r0, r0, sl, asr #14
    1c9c:	33060001 	movwcc	r0, #24577	; 0x6001
    1ca0:	02000004 	andeq	r0, r0, #4
    1ca4:	00006f37 	andeq	r6, r0, r7, lsr pc
    1ca8:	5e040700 	cdppl	7, 0, cr0, cr4, cr0, {0}
    1cac:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1cb0:	000008f8 	strdeq	r0, [r0], -r8
    1cb4:	d238030c 	eorsle	r0, r8, #12, 6	; 0x30000000
    1cb8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1cbc:	00000290 	muleq	r0, r0, r2
    1cc0:	004c5003 	subeq	r5, ip, r3
    1cc4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1cc8:	00000319 	andeq	r0, r0, r9, lsl r3
    1ccc:	004c5103 	subeq	r5, ip, r3, lsl #2
    1cd0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1cd4:	000014f9 	strdeq	r1, [r0], -r9
    1cd8:	004c5203 	subeq	r5, ip, r3, lsl #4
    1cdc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1ce0:	000000e3 	andeq	r0, r0, r3, ror #1
    1ce4:	00e15303 	rsceq	r5, r1, r3, lsl #6
    1ce8:	00080000 	andeq	r0, r8, r0
    1cec:	00008f0a 	andeq	r8, r0, sl, lsl #30
    1cf0:	0000e100 	andeq	lr, r0, r0, lsl #2
    1cf4:	004c0b00 	subeq	r0, ip, r0, lsl #22
    1cf8:	07000000 	streq	r0, [r0, -r0]
    1cfc:	0000d204 	andeq	sp, r0, r4, lsl #4
    1d00:	08f90600 	ldmeq	r9!, {r9, sl}^
    1d04:	54030000 	strpl	r0, [r3], #-0
    1d08:	00000095 	muleq	r0, r5, r0
    1d0c:	0057420c 	subseq	r4, r7, ip, lsl #4
    1d10:	16620302 	strbtne	r0, [r2], -r2, lsl #6
    1d14:	0d000001 	stceq	0, cr0, [r0, #-4]
    1d18:	00306262 	eorseq	r6, r0, r2, ror #4
    1d1c:	005e6503 	subseq	r6, lr, r3, lsl #10
    1d20:	0d000000 	stceq	0, cr0, [r0, #-0]
    1d24:	00316262 	eorseq	r6, r1, r2, ror #4
    1d28:	005e6603 	subseq	r6, lr, r3, lsl #12
    1d2c:	00010000 	andeq	r0, r1, r0
    1d30:	5f03020e 	svcpl	0x0003020e
    1d34:	00000132 	andeq	r0, r0, r2, lsr r1
    1d38:	0300770f 	movweq	r7, #1807	; 0x70f
    1d3c:	00004c61 	andeq	r4, r0, r1, ror #24
    1d40:	77620f00 	strbvc	r0, [r2, -r0, lsl #30]!
    1d44:	f2680300 	vcgt.s32	d16, d8, d0
    1d48:	00000000 	andeq	r0, r0, r0
    1d4c:	0003ff06 	andeq	pc, r3, r6, lsl #30
    1d50:	16690300 	strbtne	r0, [r9], -r0, lsl #6
    1d54:	08000001 	stmdaeq	r0, {r0}
    1d58:	0000003c 	andeq	r0, r0, ip, lsr r0
    1d5c:	ce6b031c 	mcrgt	3, 3, r0, cr11, cr12, {0}
    1d60:	09000001 	stmdbeq	r0, {r0}
    1d64:	00000550 	andeq	r0, r0, r0, asr r5
    1d68:	005e6d03 	subseq	r6, lr, r3, lsl #26
    1d6c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d70:	00000216 	andeq	r0, r0, r6, lsl r2
    1d74:	005e6e03 	subseq	r6, lr, r3, lsl #28
    1d78:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1d7c:	00000418 	andeq	r0, r0, r8, lsl r4
    1d80:	01326f03 	teqeq	r2, r3, lsl #30
    1d84:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1d88:	00000148 	andeq	r0, r0, r8, asr #2
    1d8c:	01327003 	teqeq	r2, r3
    1d90:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1d94:	0000081a 	andeq	r0, r0, sl, lsl r8
    1d98:	01327103 	teqeq	r2, r3, lsl #2
    1d9c:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    1da0:	000005cf 	andeq	r0, r0, pc, asr #11
    1da4:	005e7303 	subseq	r7, lr, r3, lsl #6
    1da8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    1dac:	000003a0 	andeq	r0, r0, r0, lsr #7
    1db0:	005e7403 	subseq	r7, lr, r3, lsl #8
    1db4:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    1db8:	000004a1 	andeq	r0, r0, r1, lsr #9
    1dbc:	005e7503 	subseq	r7, lr, r3, lsl #10
    1dc0:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    1dc4:	0000086f 	andeq	r0, r0, pc, ror #16
    1dc8:	005e7603 	subseq	r7, lr, r3, lsl #12
    1dcc:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    1dd0:	00000629 	andeq	r0, r0, r9, lsr #12
    1dd4:	005e7703 	subseq	r7, lr, r3, lsl #14
    1dd8:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    1ddc:	00000720 	andeq	r0, r0, r0, lsr #14
    1de0:	00e77a03 	rsceq	r7, r7, r3, lsl #20
    1de4:	00100000 	andseq	r0, r0, r0
    1de8:	00003d06 	andeq	r3, r0, r6, lsl #26
    1dec:	3d7b0300 	ldclcc	3, cr0, [fp, #-0]
    1df0:	02000001 	andeq	r0, r0, #1
    1df4:	05150704 	ldreq	r0, [r5, #-1796]	; 0x704
    1df8:	01040000 	mrseq	r0, (UNDEF: 4)
    1dfc:	02012304 	andeq	r2, r1, #4, 6	; 0x10000000
    1e00:	a2050000 	andge	r0, r5, #0
    1e04:	0000000d 	andeq	r0, r0, sp
    1e08:	000ebd05 	andeq	fp, lr, r5, lsl #26
    1e0c:	43050100 	movwmi	r0, #20736	; 0x5100
    1e10:	0200000d 	andeq	r0, r0, #13
    1e14:	000e2e05 	andeq	r2, lr, r5, lsl #28
    1e18:	06000300 	streq	r0, [r0], -r0, lsl #6
    1e1c:	00000e52 	andeq	r0, r0, r2, asr lr
    1e20:	01e02304 	mvneq	r2, r4, lsl #6
    1e24:	5e080000 	cdppl	0, 0, cr0, cr8, cr0, {0}
    1e28:	0600000d 	streq	r0, [r0], -sp
    1e2c:	02612904 	rsbeq	r2, r1, #4, 18	; 0x10000
    1e30:	eb090000 	bl	241e38 <__Stack_Size+0x241a38>
    1e34:	0400000e 	streq	r0, [r0], #-14
    1e38:	00005e2a 	andeq	r5, r0, sl, lsr #28
    1e3c:	75090000 	strvc	r0, [r9, #-0]
    1e40:	0400000d 	streq	r0, [r0], #-13
    1e44:	00005e2b 	andeq	r5, r0, fp, lsr #28
    1e48:	84090100 	strhi	r0, [r9], #-256	; 0x100
    1e4c:	0400000d 	streq	r0, [r0], #-13
    1e50:	00005e2c 	andeq	r5, r0, ip, lsr #28
    1e54:	93090200 	movwls	r0, #37376	; 0x9200
    1e58:	0400000d 	streq	r0, [r0], #-13
    1e5c:	00005e2d 	andeq	r5, r0, sp, lsr #28
    1e60:	a4090300 	strge	r0, [r9], #-768	; 0x300
    1e64:	0400000e 	streq	r0, [r0], #-14
    1e68:	00005e2e 	andeq	r5, r0, lr, lsr #28
    1e6c:	24090400 	strcs	r0, [r9], #-1024	; 0x400
    1e70:	0400000d 	streq	r0, [r0], #-13
    1e74:	00005e2f 	andeq	r5, r0, pc, lsr #28
    1e78:	06000500 	streq	r0, [r0], -r0, lsl #10
    1e7c:	00000d5f 	andeq	r0, r0, pc, asr sp
    1e80:	020c3004 	andeq	r3, ip, #4
    1e84:	3d100000 	ldccc	0, cr0, [r0, #-0]
    1e88:	0100000d 	tsteq	r0, sp
    1e8c:	02913204 	addseq	r3, r1, #4, 4	; 0x40000000
    1e90:	cc050000 	stcgt	0, cr0, [r5], {-0}
    1e94:	0000000e 	andeq	r0, r0, lr
    1e98:	000eff05 	andeq	pc, lr, r5, lsl #30
    1e9c:	45110100 	ldrmi	r0, [r1, #-256]	; 0x100
    1ea0:	0200444e 	andeq	r4, r0, #1308622848	; 0x4e000000
    1ea4:	00006705 	andeq	r6, r0, r5, lsl #14
    1ea8:	06000300 	streq	r0, [r0], -r0, lsl #6
    1eac:	00000d3e 	andeq	r0, r0, lr, lsr sp
    1eb0:	026c3704 	rsbeq	r3, ip, #4, 14	; 0x100000
    1eb4:	84120000 	ldrhi	r0, [r2], #-0
    1eb8:	01000000 	mrseq	r0, (UNDEF: 0)
    1ebc:	0009e438 	andeq	lr, r9, r8, lsr r4
    1ec0:	00005c08 	andeq	r5, r0, r8, lsl #24
    1ec4:	139c0100 	orrsne	r0, ip, #0, 2
    1ec8:	00000504 	andeq	r0, r0, r4, lsl #10
    1ecc:	40015601 	andmi	r5, r1, r1, lsl #12
    1ed0:	4408000a 	strmi	r0, [r8], #-10
    1ed4:	01000000 	mrseq	r0, (UNDEF: 0)
    1ed8:	0002ef9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    1edc:	0eb21400 	cdpeq	4, 11, cr1, cr2, cr0, {0}
    1ee0:	57010000 	strpl	r0, [r1, -r0]
    1ee4:	00005e01 	andeq	r5, r0, r1, lsl #28
    1ee8:	00070e00 	andeq	r0, r7, r0, lsl #28
    1eec:	0a5c1500 	beq	17072f4 <__Stack_Size+0x1706ef4>
    1ef0:	05f40800 	ldrbeq	r0, [r4, #2048]!	; 0x800
    1ef4:	64160000 	ldrvs	r0, [r6], #-0
    1ef8:	fb08000a 	blx	201f2a <__Stack_Size+0x201b2a>
    1efc:	16000005 	strne	r0, [r0], -r5
    1f00:	08000a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp}
    1f04:	00000602 	andeq	r0, r0, r2, lsl #12
    1f08:	0e1b1700 	cdpeq	7, 1, cr1, cr11, cr0, {0}
    1f0c:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1f10:	00000001 	andeq	r0, r0, r1
    1f14:	00000200 	andeq	r0, r0, r0, lsl #4
    1f18:	189c0100 	ldmne	ip, {r8}
    1f1c:	00000e00 	andeq	r0, r0, r0, lsl #28
    1f20:	8f017101 	svchi	0x00017101
    1f24:	84000000 	strhi	r0, [r0], #-0
    1f28:	1808000a 	stmdane	r8, {r1, r3}
    1f2c:	01000000 	mrseq	r0, (UNDEF: 0)
    1f30:	00032c9c 	muleq	r3, ip, ip
    1f34:	0eab1900 	cdpeq	9, 10, cr1, cr11, cr0, {0}
    1f38:	71010000 	mrsvc	r0, (UNDEF: 1)
    1f3c:	00004c01 	andeq	r4, r0, r1, lsl #24
    1f40:	00073700 	andeq	r3, r7, r0, lsl #14
    1f44:	e3180000 	tst	r8, #0
    1f48:	0100000d 	tsteq	r0, sp
    1f4c:	008f017a 	addeq	r0, pc, sl, ror r1	; <UNPREDICTABLE>
    1f50:	0a9c0000 	beq	fe701f58 <BootRAM+0xd6726f9>
    1f54:	00180800 	andseq	r0, r8, r0, lsl #16
    1f58:	9c010000 	stcls	0, cr0, [r1], {-0}
    1f5c:	00000357 	andeq	r0, r0, r7, asr r3
    1f60:	000eab19 	andeq	sl, lr, r9, lsl fp
    1f64:	017a0100 	cmneq	sl, r0, lsl #2
    1f68:	0000004c 	andeq	r0, r0, ip, asr #32
    1f6c:	00000758 	andeq	r0, r0, r8, asr r7
    1f70:	0e0d1800 	cdpeq	8, 0, cr1, cr13, cr0, {0}
    1f74:	84010000 	strhi	r0, [r1], #-0
    1f78:	00008f01 	andeq	r8, r0, r1, lsl #30
    1f7c:	000ab400 	andeq	fp, sl, r0, lsl #8
    1f80:	00002808 	andeq	r2, r0, r8, lsl #16
    1f84:	829c0100 	addshi	r0, ip, #0, 2
    1f88:	19000003 	stmdbne	r0, {r0, r1}
    1f8c:	00000eab 	andeq	r0, r0, fp, lsr #29
    1f90:	4c018401 	cfstrsmi	mvf8, [r1], {1}
    1f94:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    1f98:	00000007 	andeq	r0, r0, r7
    1f9c:	000db218 	andeq	fp, sp, r8, lsl r2
    1fa0:	018e0100 	orreq	r0, lr, r0, lsl #2
    1fa4:	0000008f 	andeq	r0, r0, pc, lsl #1
    1fa8:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
    1fac:	00000034 	andeq	r0, r0, r4, lsr r0
    1fb0:	03ad9c01 			; <UNDEFINED> instruction: 0x03ad9c01
    1fb4:	ab190000 	blge	641fbc <__Stack_Size+0x641bbc>
    1fb8:	0100000e 	tsteq	r0, lr
    1fbc:	004c018e 	subeq	r0, ip, lr, lsl #3
    1fc0:	079a0000 	ldreq	r0, [sl, r0]
    1fc4:	13000000 	movwne	r0, #0
    1fc8:	00000dcf 	andeq	r0, r0, pc, asr #27
    1fcc:	10019701 	andne	r9, r1, r1, lsl #14
    1fd0:	5c08000b 	stcpl	0, cr0, [r8], {11}
    1fd4:	01000000 	mrseq	r0, (UNDEF: 0)
    1fd8:	0004059c 	muleq	r4, ip, r5
    1fdc:	00691a00 	rsbeq	r1, r9, r0, lsl #20
    1fe0:	05019801 	streq	r9, [r1, #-2049]	; 0x801
    1fe4:	bb000004 	bllt	1ffc <__Stack_Size+0x1bfc>
    1fe8:	1b000007 	blne	200c <__Stack_Size+0x1c0c>
    1fec:	00000ed6 	ldrdeq	r0, [r0], -r6
    1ff0:	0c019901 	stceq	9, cr9, [r1], {1}
    1ff4:	1c000004 	stcne	0, cr0, [r0], {4}
    1ff8:	08000b30 	stmdaeq	r0, {r4, r5, r8, r9, fp}
    1ffc:	00000609 	andeq	r0, r0, r9, lsl #12
    2000:	000003f1 	strdeq	r0, [r0], -r1
    2004:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    2008:	1e000074 	mcrne	0, 0, r0, cr0, cr4, {3}
    200c:	08000b46 	stmdaeq	r0, {r1, r2, r6, r8, r9, fp}
    2010:	0000061e 	andeq	r0, r0, lr, lsl r6
    2014:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    2018:	00750074 	rsbseq	r0, r5, r4, ror r0
    201c:	1f000022 	svcne	0x00000022
    2020:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2024:	04070074 	streq	r0, [r7], #-116	; 0x74
    2028:	0000003a 	andeq	r0, r0, sl, lsr r0
    202c:	00032520 	andeq	r2, r3, r0, lsr #10
    2030:	844b0100 	strbhi	r0, [fp], #-256	; 0x100
    2034:	6c000000 	stcvs	0, cr0, [r0], {-0}
    2038:	3408000b 	strcc	r0, [r8], #-11
    203c:	01000002 	tsteq	r0, r2
    2040:	0004919c 	muleq	r4, ip, r1
    2044:	0eb22100 	frdeqs	f2, f2, f0
    2048:	52010000 	andpl	r0, r1, #0
    204c:	0000005e 	andeq	r0, r0, lr, asr r0
    2050:	000007da 	ldrdeq	r0, [r0], -sl
    2054:	000bba15 	andeq	fp, fp, r5, lsl sl
    2058:	00063808 	andeq	r3, r6, r8, lsl #16
    205c:	0bbe1500 	bleq	fef87464 <BootRAM+0xdef7c05>
    2060:	063f0800 	ldrteq	r0, [pc], -r0, lsl #16
    2064:	ce150000 	cdpgt	0, 1, cr0, cr5, cr0, {0}
    2068:	3808000b 	stmdacc	r8, {r0, r1, r3}
    206c:	15000006 	strne	r0, [r0, #-6]
    2070:	08000bd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, r9, fp}
    2074:	0000063f 	andeq	r0, r0, pc, lsr r6
    2078:	000bd81c 	andeq	sp, fp, ip, lsl r8
    207c:	00060908 	andeq	r0, r6, r8, lsl #18
    2080:	00047500 	andeq	r7, r4, r0, lsl #10
    2084:	50011d00 	andpl	r1, r1, r0, lsl #26
    2088:	20000c05 	andcs	r0, r0, r5, lsl #24
    208c:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    2090:	08000c18 	stmdaeq	r0, {r3, r4, sl, fp}
    2094:	00000646 	andeq	r0, r0, r6, asr #12
    2098:	000c4815 	andeq	r4, ip, r5, lsl r8
    209c:	0003ad08 	andeq	sl, r3, r8, lsl #26
    20a0:	0c841500 	cfstr32eq	mvfx1, [r4], {0}
    20a4:	06510800 	ldrbeq	r0, [r1], -r0, lsl #16
    20a8:	22000000 	andcs	r0, r0, #0
    20ac:	00000f06 	andeq	r0, r0, r6, lsl #30
    20b0:	5e01bf01 	cdppl	15, 0, cr11, cr1, cr1, {0}
    20b4:	00000000 	andeq	r0, r0, r0
    20b8:	0c000000 	stceq	0, cr0, [r0], {-0}
    20bc:	01000000 	mrseq	r0, (UNDEF: 0)
    20c0:	0ef3139c 	mrceq	3, 7, r1, cr3, cr12, {4}
    20c4:	c3010000 	movwgt	r0, #4096	; 0x1000
    20c8:	00000001 	andeq	r0, r0, r1
    20cc:	00000c00 	andeq	r0, r0, r0, lsl #24
    20d0:	cc9c0100 	ldfgts	f0, [ip], {0}
    20d4:	23000004 	movwcs	r0, #4
    20d8:	00000e49 	andeq	r0, r0, r9, asr #28
    20dc:	5e01c301 	cdppl	3, 0, cr12, cr1, cr1, {0}
    20e0:	01000000 	mrseq	r0, (UNDEF: 0)
    20e4:	f5240050 			; <UNDEFINED> instruction: 0xf5240050
    20e8:	0100000a 	tsteq	r0, sl
    20ec:	008401c7 	addeq	r0, r4, r7, asr #3
    20f0:	0da00000 	stceq	0, cr0, [r0]
    20f4:	000c0800 	andeq	r0, ip, r0, lsl #16
    20f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    20fc:	000a4b25 	andeq	r4, sl, r5, lsr #22
    2100:	01cb0100 	biceq	r0, fp, r0, lsl #2
    2104:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
    2108:	00000004 	andeq	r0, r0, r4
    210c:	69269c01 	stmdbvs	r6!, {r0, sl, fp, ip, pc}
    2110:	0100000d 	tsteq	r0, sp
    2114:	00050526 	andeq	r0, r5, r6, lsr #10
    2118:	c4030500 	strgt	r0, [r3], #-1280	; 0x500
    211c:	27200002 	strcs	r0, [r0, -r2]!
    2120:	0000003a 	andeq	r0, r0, sl, lsr r0
    2124:	000ee026 	andeq	lr, lr, r6, lsr #32
    2128:	05270100 	streq	r0, [r7, #-256]!	; 0x100
    212c:	05000005 	streq	r0, [r0, #-5]
    2130:	0002c003 	andeq	ip, r2, r3
    2134:	0e632620 	cdpeq	6, 6, cr2, cr3, cr0, {1}
    2138:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    213c:	0000052c 	andeq	r0, r0, ip, lsr #10
    2140:	0b1d0305 	bleq	742d5c <__Stack_Size+0x74295c>
    2144:	61272000 	teqvs	r7, r0
    2148:	28000002 	stmdacs	r0, {r1}
    214c:	0000005e 	andeq	r0, r0, lr, asr r0
    2150:	00000542 	andeq	r0, r0, r2, asr #10
    2154:	0001d929 	andeq	sp, r1, r9, lsr #18
    2158:	0007ff00 	andeq	pc, r7, r0, lsl #30
    215c:	000d2c26 	andeq	r2, sp, r6, lsr #24
    2160:	532e0100 	teqpl	lr, #0, 2
    2164:	05000005 	streq	r0, [r0, #-5]
    2168:	00031403 	andeq	r1, r3, r3, lsl #8
    216c:	05312720 	ldreq	r2, [r1, #-1824]!	; 0x720
    2170:	8c260000 	stchi	0, cr0, [r6], #-0
    2174:	0100000e 	tsteq	r0, lr
    2178:	00050530 	andeq	r0, r5, r0, lsr r5
    217c:	18030500 	stmdane	r3, {r8, sl}
    2180:	2620000b 	strtcs	r0, [r0], -fp
    2184:	00000e7f 	andeq	r0, r0, pc, ror lr
    2188:	057a3101 	ldrbeq	r3, [sl, #-257]!	; 0x101
    218c:	03050000 	movweq	r0, #20480	; 0x5000
    2190:	20000b16 	andcs	r0, r0, r6, lsl fp
    2194:	00004c27 	andeq	r4, r0, r7, lsr #24
    2198:	0e702600 	cdpeq	6, 7, cr2, cr0, cr0, {0}
    219c:	32010000 	andcc	r0, r1, #0
    21a0:	0000057a 	andeq	r0, r0, sl, ror r5
    21a4:	0b140305 	bleq	502dc0 <__Stack_Size+0x5029c0>
    21a8:	7c2a2000 	stcvc	0, cr2, [sl], #-0
    21ac:	05000002 	streq	r0, [r0, #-2]
    21b0:	00059b22 	andeq	r9, r5, r2, lsr #22
    21b4:	ce040700 	cdpgt	7, 0, cr0, cr4, cr0, {0}
    21b8:	2b000001 	blcs	21c4 <__Stack_Size+0x1dc4>
    21bc:	00000438 	andeq	r0, r0, r8, lsr r4
    21c0:	04052c06 	streq	r2, [r5], #-3078	; 0xc06
    21c4:	03050000 	movweq	r0, #20480	; 0x5000
    21c8:	200002c8 	andcs	r0, r0, r8, asr #5
    21cc:	000e9c2b 	andeq	r9, lr, fp, lsr #24
    21d0:	c32a0100 	teqgt	sl, #0, 2
    21d4:	05000005 	streq	r0, [r0, #-5]
    21d8:	000b2303 	andeq	r2, fp, r3, lsl #6
    21dc:	00842720 	addeq	r2, r4, r0, lsr #14
    21e0:	c02b0000 	eorgt	r0, fp, r0
    21e4:	0100000d 	tsteq	r0, sp
    21e8:	0005d929 	andeq	sp, r5, r9, lsr #18
    21ec:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    21f0:	2720000b 	strcs	r0, [r0, -fp]!
    21f4:	00000201 	andeq	r0, r0, r1, lsl #4
    21f8:	000df12b 	andeq	pc, sp, fp, lsr #2
    21fc:	ef350100 	svc	0x00350100
    2200:	05000005 	streq	r0, [r0, #-5]
    2204:	0002d003 	andeq	sp, r2, r3
    2208:	02912720 	addseq	r2, r1, #32, 14	; 0x800000
    220c:	7a2c0000 	bvc	b02214 <__Stack_Size+0xb01e14>
    2210:	0700000b 	streq	r0, [r0, -fp]
    2214:	00562cd8 	ldrsbeq	r2, [r6], #-200	; 0xffffff38
    2218:	81060000 	mrshi	r0, (UNDEF: 6)
    221c:	000acf2c 	andeq	ip, sl, ip, lsr #30
    2220:	2dca0700 	stclcs	7, cr0, [sl]
    2224:	00000cd8 	ldrdeq	r0, [r0], -r8
    2228:	0084d307 	addeq	sp, r4, r7, lsl #6
    222c:	061e0000 	ldreq	r0, [lr], -r0
    2230:	3a0b0000 	bcc	2c2238 <__Stack_Size+0x2c1e38>
    2234:	00000000 	andeq	r0, r0, r0
    2238:	000c9b2d 	andeq	r9, ip, sp, lsr #22
    223c:	84d20700 	ldrbhi	r0, [r2], #1792	; 0x700
    2240:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2244:	0b000006 	bleq	2264 <__Stack_Size+0x1e64>
    2248:	0000003a 	andeq	r0, r0, sl, lsr r0
    224c:	00003a0b 	andeq	r3, r0, fp, lsl #20
    2250:	902c0000 	eorls	r0, ip, r0
    2254:	0700000a 	streq	r0, [r0, -sl]
    2258:	0b5d2cce 	bleq	174d598 <__Stack_Size+0x174d198>
    225c:	d6070000 	strle	r0, [r7], -r0
    2260:	000b692e 	andeq	r6, fp, lr, lsr #18
    2264:	05da0700 	ldrbeq	r0, [sl, #1792]	; 0x700
    2268:	2c000004 	stccs	0, cr0, [r0], {4}
    226c:	00000bed 	andeq	r0, r0, sp, ror #23
    2270:	8800d507 	stmdahi	r0, {r0, r1, r2, r8, sl, ip, lr, pc}
    2274:	0400000c 	streq	r0, [r0], #-12
    2278:	000b8e00 	andeq	r8, fp, r0, lsl #28
    227c:	58010400 	stmdapl	r1, {sl}
    2280:	01000001 	tsteq	r0, r1
    2284:	0000107e 	andeq	r1, r0, lr, ror r0
    2288:	00000926 	andeq	r0, r0, r6, lsr #18
    228c:	00000320 	andeq	r0, r0, r0, lsr #6
    2290:	00000000 	andeq	r0, r0, r0
    2294:	00000a9c 	muleq	r0, ip, sl
    2298:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    229c:	02000001 	andeq	r0, r0, #1
    22a0:	06a50502 	strteq	r0, [r5], r2, lsl #10
    22a4:	01020000 	mrseq	r0, (UNDEF: 2)
    22a8:	00065106 	andeq	r5, r6, r6, lsl #2
    22ac:	33750300 	cmncc	r5, #0, 6
    22b0:	24020032 	strcs	r0, [r2], #-50	; 0x32
    22b4:	00000045 	andeq	r0, r0, r5, asr #32
    22b8:	7b070402 	blvc	1c32c8 <__Stack_Size+0x1c2ec8>
    22bc:	03000003 	movweq	r0, #3
    22c0:	00363175 	eorseq	r3, r6, r5, ror r1
    22c4:	00572502 	subseq	r2, r7, r2, lsl #10
    22c8:	02020000 	andeq	r0, r2, #0
    22cc:	0003d707 	andeq	sp, r3, r7, lsl #14
    22d0:	38750300 	ldmdacc	r5!, {r8, r9}^
    22d4:	68260200 	stmdavs	r6!, {r9}
    22d8:	02000000 	andeq	r0, r0, #0
    22dc:	064f0801 	strbeq	r0, [pc], -r1, lsl #16
    22e0:	9a040000 	bls	1022e8 <__Stack_Size+0x101ee8>
    22e4:	0100000f 	tsteq	r0, pc
    22e8:	008e1603 	addeq	r1, lr, r3, lsl #12
    22ec:	91050000 	mrsls	r0, (UNDEF: 5)
    22f0:	00000010 	andeq	r0, r0, r0, lsl r0
    22f4:	000f6505 	andeq	r6, pc, r5, lsl #10
    22f8:	38050100 	stmdacc	r5, {r8}
    22fc:	02000010 	andeq	r0, r0, #16
    2300:	0f9b0600 	svceq	0x009b0600
    2304:	1c030000 	stcne	0, cr0, [r3], {-0}
    2308:	0000006f 	andeq	r0, r0, pc, rrx
    230c:	00117f07 	andseq	r7, r1, r7, lsl #30
    2310:	4c9b0100 	ldfmis	f0, [fp], {0}
    2314:	01000000 	mrseq	r0, (UNDEF: 0)
    2318:	000000b5 	strheq	r0, [r0], -r5
    231c:	00129e08 	andseq	r9, r2, r8, lsl #28
    2320:	5e9b0100 	fmlple	f0, f3, f0
    2324:	00000000 	andeq	r0, r0, r0
    2328:	0011df09 	andseq	sp, r1, r9, lsl #30
    232c:	00220100 	eoreq	r0, r2, r0, lsl #2
    2330:	0c000000 	stceq	0, cr0, [r0], {-0}
    2334:	01000000 	mrseq	r0, (UNDEF: 0)
    2338:	0000d89c 	muleq	r0, ip, r8
    233c:	11750a00 	cmnne	r5, r0, lsl #20
    2340:	22010000 	andcs	r0, r1, #0
    2344:	0000004c 	andeq	r0, r0, ip, asr #32
    2348:	0b005001 	bleq	16354 <__Stack_Size+0x15f54>
    234c:	00000fcb 	andeq	r0, r0, fp, asr #31
    2350:	004c2e01 	subeq	r2, ip, r1, lsl #28
    2354:	00000000 	andeq	r0, r0, r0
    2358:	000c0000 	andeq	r0, ip, r0
    235c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2360:	000fad09 	andeq	sl, pc, r9, lsl #26
    2364:	003a0100 	eorseq	r0, sl, r0, lsl #2
    2368:	0c000000 	stceq	0, cr0, [r0], {-0}
    236c:	01000000 	mrseq	r0, (UNDEF: 0)
    2370:	0001109c 	muleq	r1, ip, r0
    2374:	11750a00 	cmnne	r5, r0, lsl #20
    2378:	3a010000 	bcc	42380 <__Stack_Size+0x41f80>
    237c:	0000004c 	andeq	r0, r0, ip, asr #32
    2380:	0b005001 	bleq	1638c <__Stack_Size+0x15f8c>
    2384:	0000116d 	andeq	r1, r0, sp, ror #2
    2388:	004c4601 	subeq	r4, ip, r1, lsl #12
    238c:	00000000 	andeq	r0, r0, r0
    2390:	000c0000 	andeq	r0, ip, r0
    2394:	9c010000 	stcls	0, cr0, [r1], {-0}
    2398:	00124a0b 	andseq	r4, r2, fp, lsl #20
    239c:	4c520100 	ldfmie	f0, [r2], {-0}
    23a0:	00000000 	andeq	r0, r0, r0
    23a4:	0c000000 	stceq	0, cr0, [r0], {-0}
    23a8:	01000000 	mrseq	r0, (UNDEF: 0)
    23ac:	11a3099c 			; <UNDEFINED> instruction: 0x11a3099c
    23b0:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    23b4:	00000000 	andeq	r0, r0, r0
    23b8:	0000000c 	andeq	r0, r0, ip
    23bc:	015d9c01 	cmpeq	sp, r1, lsl #24
    23c0:	750a0000 	strvc	r0, [sl, #-0]
    23c4:	01000011 	tsteq	r0, r1, lsl r0
    23c8:	00004c5e 	andeq	r4, r0, lr, asr ip
    23cc:	00500100 	subseq	r0, r0, r0, lsl #2
    23d0:	000fe40b 	andeq	lr, pc, fp, lsl #8
    23d4:	4c6a0100 	stfmie	f0, [sl], #-0
    23d8:	00000000 	andeq	r0, r0, r0
    23dc:	0c000000 	stceq	0, cr0, [r0], {-0}
    23e0:	01000000 	mrseq	r0, (UNDEF: 0)
    23e4:	11e7099c 			; <UNDEFINED> instruction: 0x11e7099c
    23e8:	76010000 	strvc	r0, [r1], -r0
    23ec:	00000000 	andeq	r0, r0, r0
    23f0:	00000010 	andeq	r0, r0, r0, lsl r0
    23f4:	01959c01 	orrseq	r9, r5, r1, lsl #24
    23f8:	750a0000 	strvc	r0, [sl, #-0]
    23fc:	01000011 	tsteq	r0, r1, lsl r0
    2400:	00004c76 	andeq	r4, r0, r6, ror ip
    2404:	00500100 	subseq	r0, r0, r0, lsl #2
    2408:	0011630b 	andseq	r6, r1, fp, lsl #6
    240c:	4c820100 	stfmis	f0, [r2], {0}
    2410:	00000000 	andeq	r0, r0, r0
    2414:	0c000000 	stceq	0, cr0, [r0], {-0}
    2418:	01000000 	mrseq	r0, (UNDEF: 0)
    241c:	12a5099c 	adcne	r0, r5, #156, 18	; 0x270000
    2420:	8f010000 	svchi	0x00010000
    2424:	00000000 	andeq	r0, r0, r0
    2428:	0000000e 	andeq	r0, r0, lr
    242c:	01dc9c01 	bicseq	r9, ip, r1, lsl #24
    2430:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    2434:	01000012 	tsteq	r0, r2, lsl r0
    2438:	00005e8f 	andeq	r5, r0, pc, lsl #29
    243c:	00085000 	andeq	r5, r8, r0
    2440:	11750a00 	cmnne	r5, r0, lsl #20
    2444:	8f010000 	svchi	0x00010000
    2448:	0000004c 	andeq	r0, r0, ip, asr #32
    244c:	0d005101 	stfeqs	f5, [r0, #-4]
    2450:	00000099 	muleq	r0, r9, r0
    2454:	00000000 	andeq	r0, r0, r0
    2458:	00000010 	andeq	r0, r0, r0, lsl r0
    245c:	01f99c01 	mvnseq	r9, r1, lsl #24
    2460:	a90e0000 	stmdbge	lr, {}	; <UNPREDICTABLE>
    2464:	71000000 	mrsvc	r0, (UNDEF: 0)
    2468:	00000008 	andeq	r0, r0, r8
    246c:	00102e09 	andseq	r2, r0, r9, lsl #28
    2470:	00a80100 	adceq	r0, r8, r0, lsl #2
    2474:	1c000000 	stcne	0, cr0, [r0], {-0}
    2478:	01000000 	mrseq	r0, (UNDEF: 0)
    247c:	00022d9c 	muleq	r2, ip, sp
    2480:	129e0c00 	addsne	r0, lr, #0, 24
    2484:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    2488:	0000005e 	andeq	r0, r0, lr, asr r0
    248c:	00000892 	muleq	r0, r2, r8
    2490:	0010780c 	andseq	r7, r0, ip, lsl #16
    2494:	4ca80100 	stfmis	f0, [r8]
    2498:	b3000000 	movwlt	r0, #0
    249c:	00000008 	andeq	r0, r0, r8
    24a0:	0011130f 	andseq	r1, r1, pc, lsl #6
    24a4:	4cb40100 	ldfmis	f0, [r4]
    24a8:	00000000 	andeq	r0, r0, r0
    24ac:	12000000 	andne	r0, r0, #0
    24b0:	01000000 	mrseq	r0, (UNDEF: 0)
    24b4:	0002569c 	muleq	r2, ip, r6
    24b8:	129e0c00 	addsne	r0, lr, #0, 24
    24bc:	b4010000 	strlt	r0, [r1], #-0
    24c0:	0000005e 	andeq	r0, r0, lr, asr r0
    24c4:	000008d4 	ldrdeq	r0, [r0], -r4
    24c8:	12900900 	addsne	r0, r0, #0, 18
    24cc:	c1010000 	mrsgt	r0, (UNDEF: 1)
    24d0:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
    24d4:	0000002a 	andeq	r0, r0, sl, lsr #32
    24d8:	029f9c01 	addseq	r9, pc, #256	; 0x100
    24dc:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    24e0:	01000012 	tsteq	r0, r2, lsl r0
    24e4:	00005ec1 	andeq	r5, r0, r1, asr #29
    24e8:	0008f500 	andeq	pc, r8, r0, lsl #10
    24ec:	0e4b0a00 	vmlaeq.f32	s1, s22, s0
    24f0:	c1010000 	mrsgt	r0, (UNDEF: 1)
    24f4:	0000004c 	andeq	r0, r0, ip, asr #32
    24f8:	b0105101 	andslt	r5, r0, r1, lsl #2
    24fc:	2a08000d 	bcs	202538 <__Stack_Size+0x202138>
    2500:	11000000 	mrsne	r0, (UNDEF: 0)
    2504:	0000045b 	andeq	r0, r0, fp, asr r4
    2508:	004cc301 	subeq	ip, ip, r1, lsl #6
    250c:	53010000 	movwpl	r0, #4096	; 0x1000
    2510:	01090000 	mrseq	r0, (UNDEF: 9)
    2514:	01000010 	tsteq	r0, r0, lsl r0
    2518:	000000ce 	andeq	r0, r0, lr, asr #1
    251c:	00002a00 	andeq	r2, r0, r0, lsl #20
    2520:	e89c0100 	ldm	ip, {r8}
    2524:	0c000002 	stceq	0, cr0, [r0], {2}
    2528:	0000129e 	muleq	r0, lr, r2
    252c:	005ece01 	subseq	ip, lr, r1, lsl #28
    2530:	09160000 	ldmdbeq	r6, {}	; <UNPREDICTABLE>
    2534:	4b0a0000 	blmi	28253c <__Stack_Size+0x28213c>
    2538:	0100000e 	tsteq	r0, lr
    253c:	00004cce 	andeq	r4, r0, lr, asr #25
    2540:	10510100 	subsne	r0, r1, r0, lsl #2
    2544:	00000000 	andeq	r0, r0, r0
    2548:	0000002a 	andeq	r0, r0, sl, lsr #32
    254c:	00045b11 	andeq	r5, r4, r1, lsl fp
    2550:	4cd00100 	ldfmie	f0, [r0], {0}
    2554:	01000000 	mrseq	r0, (UNDEF: 0)
    2558:	09000053 	stmdbeq	r0, {r0, r1, r4, r6}
    255c:	00000f50 	andeq	r0, r0, r0, asr pc
    2560:	0000db01 	andeq	sp, r0, r1, lsl #22
    2564:	00240000 	eoreq	r0, r4, r0
    2568:	9c010000 	stcls	0, cr0, [r1], {-0}
    256c:	0000033e 	andeq	r0, r0, lr, lsr r3
    2570:	00129e0c 	andseq	r9, r2, ip, lsl #28
    2574:	5edb0100 	cdppl	1, 13, cr0, cr11, cr0, {0}
    2578:	37000000 	strcc	r0, [r0, -r0]
    257c:	0a000009 	beq	25a8 <__Stack_Size+0x21a8>
    2580:	00001073 	andeq	r1, r0, r3, ror r0
    2584:	005edb01 	subseq	sp, lr, r1, lsl #22
    2588:	51010000 	mrspl	r0, (UNDEF: 1)
    258c:	00126212 	andseq	r6, r2, r2, lsl r2
    2590:	4cdd0100 	ldfmie	f0, [sp], {0}
    2594:	13000000 	movwne	r0, #0
    2598:	00000099 	muleq	r0, r9, r0
    259c:	00000000 	andeq	r0, r0, r0
    25a0:	00000270 	andeq	r0, r0, r0, ror r2
    25a4:	a90ede01 	stmdbge	lr, {r0, r9, sl, fp, ip, lr, pc}
    25a8:	37000000 	strcc	r0, [r0, -r0]
    25ac:	00000009 	andeq	r0, r0, r9
    25b0:	10650f00 	rsbne	r0, r5, r0, lsl #30
    25b4:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    25b8:	0000004c 	andeq	r0, r0, ip, asr #32
    25bc:	00000000 	andeq	r0, r0, r0
    25c0:	00000012 	andeq	r0, r0, r2, lsl r0
    25c4:	03679c01 	cmneq	r7, #256	; 0x100
    25c8:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    25cc:	01000012 	tsteq	r0, r2, lsl r0
    25d0:	00005ef0 	strdeq	r5, [r0], -r0
    25d4:	00095800 	andeq	r5, r9, r0, lsl #16
    25d8:	710f0000 	mrsvc	r0, CPSR
    25dc:	0100000f 	tsteq	r0, pc
    25e0:	00004cfc 	strdeq	r4, [r0], -ip
    25e4:	00000000 	andeq	r0, r0, r0
    25e8:	00001200 	andeq	r1, r0, r0, lsl #4
    25ec:	909c0100 	addsls	r0, ip, r0, lsl #2
    25f0:	0c000003 	stceq	0, cr0, [r0], {3}
    25f4:	0000129e 	muleq	r0, lr, r2
    25f8:	005efc01 	subseq	pc, lr, r1, lsl #24
    25fc:	09790000 	ldmdbeq	r9!, {}^	; <UNPREDICTABLE>
    2600:	14000000 	strne	r0, [r0], #-0
    2604:	00000f43 	andeq	r0, r0, r3, asr #30
    2608:	00010801 	andeq	r0, r1, r1, lsl #16
    260c:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2610:	01000000 	mrseq	r0, (UNDEF: 0)
    2614:	0003d19c 	muleq	r3, ip, r1
    2618:	129e1500 	addsne	r1, lr, #0, 10
    261c:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2620:	00005e01 	andeq	r5, r0, r1, lsl #28
    2624:	00099a00 	andeq	r9, r9, r0, lsl #20
    2628:	00001000 	andeq	r1, r0, r0
    262c:	001e0000 	andseq	r0, lr, r0
    2630:	5b160000 	blpl	582638 <__Stack_Size+0x582238>
    2634:	01000004 	tsteq	r0, r4
    2638:	004c010a 	subeq	r0, ip, sl, lsl #2
    263c:	09bb0000 	ldmibeq	fp!, {}	; <UNPREDICTABLE>
    2640:	00000000 	andeq	r0, r0, r0
    2644:	00097114 	andeq	r7, r9, r4, lsl r1
    2648:	01140100 	tsteq	r4, r0, lsl #2
    264c:	08000dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp}
    2650:	0000001e 	andeq	r0, r0, lr, lsl r0
    2654:	04129c01 	ldreq	r9, [r2], #-3073	; 0xc01
    2658:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    265c:	01000012 	tsteq	r0, r2, lsl r0
    2660:	005e0114 	subseq	r0, lr, r4, lsl r1
    2664:	09e60000 	stmibeq	r6!, {}^	; <UNPREDICTABLE>
    2668:	da100000 	ble	402670 <__Stack_Size+0x402270>
    266c:	1e08000d 	cdpne	0, 0, cr0, cr8, cr13, {0}
    2670:	16000000 	strne	r0, [r0], -r0
    2674:	0000045b 	andeq	r0, r0, fp, asr r4
    2678:	4c011601 	stcmi	6, cr1, [r1], {1}
    267c:	07000000 	streq	r0, [r0, -r0]
    2680:	0000000a 	andeq	r0, r0, sl
    2684:	113e1400 	teqne	lr, r0, lsl #8
    2688:	20010000 	andcs	r0, r1, r0
    268c:	00000001 	andeq	r0, r0, r1
    2690:	00001e00 	andeq	r1, r0, r0, lsl #28
    2694:	399c0100 	ldmibcc	ip, {r8}
    2698:	15000004 	strne	r0, [r0, #-4]
    269c:	0000129e 	muleq	r0, lr, r2
    26a0:	5e012001 	cdppl	0, 0, cr2, cr1, cr1, {0}
    26a4:	35000000 	strcc	r0, [r0, #-0]
    26a8:	0000000a 	andeq	r0, r0, sl
    26ac:	00115614 	andseq	r5, r1, r4, lsl r6
    26b0:	012c0100 	teqeq	ip, r0, lsl #2
    26b4:	00000000 	andeq	r0, r0, r0
    26b8:	0000001c 	andeq	r0, r0, ip, lsl r0
    26bc:	04609c01 	strbteq	r9, [r0], #-3073	; 0xc01
    26c0:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    26c4:	01000012 	tsteq	r0, r2, lsl r0
    26c8:	005e012c 	subseq	r0, lr, ip, lsr #2
    26cc:	0a560000 	beq	15826d4 <__Stack_Size+0x15822d4>
    26d0:	14000000 	strne	r0, [r0], #-0
    26d4:	00000770 	andeq	r0, r0, r0, ror r7
    26d8:	f8013701 			; <UNDEFINED> instruction: 0xf8013701
    26dc:	1c08000d 	stcne	0, cr0, [r8], {13}
    26e0:	01000000 	mrseq	r0, (UNDEF: 0)
    26e4:	0004879c 	muleq	r4, ip, r7
    26e8:	129e1500 	addsne	r1, lr, #0, 10
    26ec:	37010000 	strcc	r0, [r1, -r0]
    26f0:	00005e01 	andeq	r5, r0, r1, lsl #28
    26f4:	000a7700 	andeq	r7, sl, r0, lsl #14
    26f8:	3b140000 	blcc	502700 <__Stack_Size+0x502300>
    26fc:	01000012 	tsteq	r0, r2, lsl r0
    2700:	00000142 	andeq	r0, r0, r2, asr #2
    2704:	001e0000 	andseq	r0, lr, r0
    2708:	9c010000 	stcls	0, cr0, [r1], {-0}
    270c:	000004ae 	andeq	r0, r0, lr, lsr #9
    2710:	00129e15 	andseq	r9, r2, r5, lsl lr
    2714:	01420100 	mrseq	r0, (UNDEF: 82)
    2718:	0000005e 	andeq	r0, r0, lr, asr r0
    271c:	00000a98 	muleq	r0, r8, sl
    2720:	10bb1400 	adcsne	r1, fp, r0, lsl #8
    2724:	4d010000 	stcmi	0, cr0, [r1, #-0]
    2728:	00000001 	andeq	r0, r0, r1
    272c:	00001e00 	andeq	r1, r0, r0, lsl #28
    2730:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    2734:	15000004 	strne	r0, [r0, #-4]
    2738:	0000129e 	muleq	r0, lr, r2
    273c:	5e014d01 	cdppl	13, 0, cr4, cr1, cr1, {0}
    2740:	b9000000 	stmdblt	r0, {}	; <UNPREDICTABLE>
    2744:	0000000a 	andeq	r0, r0, sl
    2748:	0010e914 	andseq	lr, r0, r4, lsl r9
    274c:	01580100 	cmpeq	r8, r0, lsl #2
    2750:	00000000 	andeq	r0, r0, r0
    2754:	0000001c 	andeq	r0, r0, ip, lsl r0
    2758:	04fc9c01 	ldrbteq	r9, [ip], #3073	; 0xc01
    275c:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2760:	01000012 	tsteq	r0, r2, lsl r0
    2764:	005e0158 	subseq	r0, lr, r8, asr r1
    2768:	0ada0000 	beq	ff682770 <BootRAM+0xe5f2f11>
    276c:	17000000 	strne	r0, [r0, -r0]
    2770:	00000f21 	andeq	r0, r0, r1, lsr #30
    2774:	4c016301 	stcmi	3, cr6, [r1], {1}
    2778:	00000000 	andeq	r0, r0, r0
    277c:	1a000000 	bne	2784 <__Stack_Size+0x2384>
    2780:	01000000 	mrseq	r0, (UNDEF: 0)
    2784:	0005279c 	muleq	r5, ip, r7
    2788:	129e1500 	addsne	r1, lr, #0, 10
    278c:	63010000 	movwvs	r0, #4096	; 0x1000
    2790:	00005e01 	andeq	r5, r0, r1, lsl #28
    2794:	000afb00 	andeq	pc, sl, r0, lsl #22
    2798:	d3170000 	tstle	r7, #0
    279c:	0100000f 	tsteq	r0, pc
    27a0:	004c016e 	subeq	r0, ip, lr, ror #2
    27a4:	00000000 	andeq	r0, r0, r0
    27a8:	001a0000 	andseq	r0, sl, r0
    27ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    27b0:	00000552 	andeq	r0, r0, r2, asr r5
    27b4:	00129e15 	andseq	r9, r2, r5, lsl lr
    27b8:	016e0100 	cmneq	lr, r0, lsl #2
    27bc:	0000005e 	andeq	r0, r0, lr, asr r0
    27c0:	00000b1c 	andeq	r0, r0, ip, lsl fp
    27c4:	111d1400 	tstne	sp, r0, lsl #8
    27c8:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    27cc:	00000001 	andeq	r0, r0, r1
    27d0:	00001800 	andeq	r1, r0, r0, lsl #16
    27d4:	799c0100 	ldmibvc	ip, {r8}
    27d8:	15000005 	strne	r0, [r0, #-5]
    27dc:	0000129e 	muleq	r0, lr, r2
    27e0:	5e017901 	cdppl	9, 0, cr7, cr1, cr1, {0}
    27e4:	3d000000 	stccc	0, cr0, [r0, #-0]
    27e8:	0000000b 	andeq	r0, r0, fp
    27ec:	0011fe14 	andseq	pc, r1, r4, lsl lr	; <UNPREDICTABLE>
    27f0:	01840100 	orreq	r0, r4, r0, lsl #2
    27f4:	00000000 	andeq	r0, r0, r0
    27f8:	0000001c 	andeq	r0, r0, ip, lsl r0
    27fc:	05a09c01 	streq	r9, [r0, #3073]!	; 0xc01
    2800:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2804:	01000012 	tsteq	r0, r2, lsl r0
    2808:	005e0184 	subseq	r0, lr, r4, lsl #3
    280c:	0b5e0000 	bleq	1782814 <__Stack_Size+0x1782414>
    2810:	14000000 	strne	r0, [r0], #-0
    2814:	0000100f 	andeq	r1, r0, pc
    2818:	00018f01 	andeq	r8, r1, r1, lsl #30
    281c:	20000000 	andcs	r0, r0, r0
    2820:	01000000 	mrseq	r0, (UNDEF: 0)
    2824:	0005c79c 	muleq	r5, ip, r7
    2828:	129e1500 	addsne	r1, lr, #0, 10
    282c:	8f010000 	svchi	0x00010000
    2830:	00005e01 	andeq	r5, r0, r1, lsl #28
    2834:	000b7f00 	andeq	r7, fp, r0, lsl #30
    2838:	7f140000 	svcvc	0x00140000
    283c:	0100000f 	tsteq	r0, pc
    2840:	0000019a 	muleq	r0, sl, r1
    2844:	00200000 	eoreq	r0, r0, r0
    2848:	9c010000 	stcls	0, cr0, [r1], {-0}
    284c:	000005ee 	andeq	r0, r0, lr, ror #11
    2850:	00129e15 	andseq	r9, r2, r5, lsl lr
    2854:	019a0100 	orrseq	r0, sl, r0, lsl #2
    2858:	0000005e 	andeq	r0, r0, lr, asr r0
    285c:	00000ba0 	andeq	r0, r0, r0, lsr #23
    2860:	0fbe1400 	svceq	0x00be1400
    2864:	a5010000 	strge	r0, [r1, #-0]
    2868:	000e1401 	andeq	r1, lr, r1, lsl #8
    286c:	00002008 	andeq	r2, r0, r8
    2870:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    2874:	15000006 	strne	r0, [r0, #-6]
    2878:	0000129e 	muleq	r0, lr, r2
    287c:	5e01a501 	cfsh32pl	mvfx10, mvfx1, #1
    2880:	c1000000 	mrsgt	r0, (UNDEF: 0)
    2884:	0000000b 	andeq	r0, r0, fp
    2888:	00128314 	andseq	r8, r2, r4, lsl r3
    288c:	01b00100 	lslseq	r0, r0, #2
    2890:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
    2894:	00000020 	andeq	r0, r0, r0, lsr #32
    2898:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    289c:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    28a0:	01000012 	tsteq	r0, r2, lsl r0
    28a4:	005e01b0 	ldrheq	r0, [lr], #-16
    28a8:	0be20000 	bleq	ff8828b0 <BootRAM+0xe7f3051>
    28ac:	14000000 	strne	r0, [r0], #-0
    28b0:	00000ff4 	strdeq	r0, [r0], -r4
    28b4:	0001bc01 	andeq	fp, r1, r1, lsl #24
    28b8:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    28bc:	01000000 	mrseq	r0, (UNDEF: 0)
    28c0:	0006739c 	muleq	r6, ip, r3
    28c4:	129e1500 	addsne	r1, lr, #0, 10
    28c8:	bc010000 	stclt	0, cr0, [r1], {-0}
    28cc:	00005e01 	andeq	r5, r0, r1, lsl #28
    28d0:	000c0300 	andeq	r0, ip, r0, lsl #6
    28d4:	0fa71500 	svceq	0x00a71500
    28d8:	bc010000 	stclt	0, cr0, [r1], {-0}
    28dc:	00005e01 	andeq	r5, r0, r1, lsl #28
    28e0:	000c2400 	andeq	r2, ip, r0, lsl #8
    28e4:	8d170000 	ldchi	0, cr0, [r7, #-0]
    28e8:	0100000f 	tsteq	r0, pc
    28ec:	005e01c7 	subseq	r0, lr, r7, asr #3
    28f0:	00000000 	andeq	r0, r0, r0
    28f4:	00120000 	andseq	r0, r2, r0
    28f8:	9c010000 	stcls	0, cr0, [r1], {-0}
    28fc:	0000069e 	muleq	r0, lr, r6
    2900:	00129e15 	andseq	r9, r2, r5, lsl lr
    2904:	01c70100 	biceq	r0, r7, r0, lsl #2
    2908:	0000005e 	andeq	r0, r0, lr, asr r0
    290c:	00000c45 	andeq	r0, r0, r5, asr #24
    2910:	10dd1400 	sbcsne	r1, sp, r0, lsl #8
    2914:	d3010000 	movwle	r0, #4096	; 0x1000
    2918:	00000001 	andeq	r0, r0, r1
    291c:	00002000 	andeq	r2, r0, r0
    2920:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    2924:	15000006 	strne	r0, [r0, #-6]
    2928:	0000129e 	muleq	r0, lr, r2
    292c:	5e01d301 	cdppl	3, 0, cr13, cr1, cr1, {0}
    2930:	66000000 	strvs	r0, [r0], -r0
    2934:	1500000c 	strne	r0, [r0, #-12]
    2938:	0000118b 	andeq	r1, r0, fp, lsl #3
    293c:	4c01d301 	stcmi	3, cr13, [r1], {1}
    2940:	87000000 	strhi	r0, [r0, -r0]
    2944:	0000000c 	andeq	r0, r0, ip
    2948:	0012b114 	andseq	fp, r2, r4, lsl r1
    294c:	01df0100 	bicseq	r0, pc, r0, lsl #2
    2950:	00000000 	andeq	r0, r0, r0
    2954:	00000020 	andeq	r0, r0, r0, lsr #32
    2958:	070c9c01 	streq	r9, [ip, -r1, lsl #24]
    295c:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2960:	01000012 	tsteq	r0, r2, lsl r0
    2964:	005e01df 	ldrsbeq	r0, [lr], #-31	; 0xffffffe1
    2968:	0ca80000 	stceq	0, cr0, [r8]
    296c:	8b150000 	blhi	542974 <__Stack_Size+0x542574>
    2970:	01000011 	tsteq	r0, r1, lsl r0
    2974:	004c01df 	ldrdeq	r0, [ip], #-31	; 0xffffffe1
    2978:	0cc90000 	stcleq	0, cr0, [r9], {0}
    297c:	17000000 	strne	r0, [r0, -r0]
    2980:	00001277 	andeq	r1, r0, r7, ror r2
    2984:	4c01ea01 	stcmi	10, cr14, [r1], {1}
    2988:	54000000 	strpl	r0, [r0], #-0
    298c:	1c08000e 	stcne	0, cr0, [r8], {14}
    2990:	01000000 	mrseq	r0, (UNDEF: 0)
    2994:	0007379c 	muleq	r7, ip, r7
    2998:	129e1500 	addsne	r1, lr, #0, 10
    299c:	ea010000 	b	429a4 <__Stack_Size+0x425a4>
    29a0:	00005e01 	andeq	r5, r0, r1, lsl #28
    29a4:	000cea00 	andeq	lr, ip, r0, lsl #20
    29a8:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
    29ac:	01000010 	tsteq	r0, r0, lsl r0
    29b0:	004c01f5 	strdeq	r0, [ip], #-21	; 0xffffffeb
    29b4:	0e700000 	cdpeq	0, 7, cr0, cr0, cr0, {0}
    29b8:	001c0800 	andseq	r0, ip, r0, lsl #16
    29bc:	9c010000 	stcls	0, cr0, [r1], {-0}
    29c0:	00000762 	andeq	r0, r0, r2, ror #14
    29c4:	00129e15 	andseq	r9, r2, r5, lsl lr
    29c8:	01f50100 	mvnseq	r0, r0, lsl #2
    29cc:	0000005e 	andeq	r0, r0, lr, asr r0
    29d0:	00000d0b 	andeq	r0, r0, fp, lsl #26
    29d4:	11491400 	cmpne	r9, r0, lsl #8
    29d8:	01010000 	mrseq	r0, (UNDEF: 1)
    29dc:	000e8c02 	andeq	r8, lr, r2, lsl #24
    29e0:	00001c08 	andeq	r1, r0, r8, lsl #24
    29e4:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    29e8:	15000007 	strne	r0, [r0, #-7]
    29ec:	0000129e 	muleq	r0, lr, r2
    29f0:	5e020101 	adfpls	f0, f2, f1
    29f4:	2c000000 	stccs	0, cr0, [r0], {-0}
    29f8:	1800000d 	stmdane	r0, {r0, r2, r3}
    29fc:	00000fed 	andeq	r0, r0, sp, ror #31
    2a00:	4c020101 	stfmis	f0, [r2], {1}
    2a04:	01000000 	mrseq	r0, (UNDEF: 0)
    2a08:	bc140051 	ldclt	0, cr0, [r4], {81}	; 0x51
    2a0c:	01000011 	tsteq	r0, r1, lsl r0
    2a10:	0000020d 	andeq	r0, r0, sp, lsl #4
    2a14:	00260000 	eoreq	r0, r6, r0
    2a18:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a1c:	000007e6 	andeq	r0, r0, r6, ror #15
    2a20:	0011ac18 	andseq	sl, r1, r8, lsl ip
    2a24:	020d0100 	andeq	r0, sp, #0, 2
    2a28:	000007e6 	andeq	r0, r0, r6, ror #15
    2a2c:	ed155001 	ldc	0, cr5, [r5, #-4]
    2a30:	0100000f 	tsteq	r0, pc
    2a34:	004c020d 	subeq	r0, ip, sp, lsl #4
    2a38:	0d4d0000 	stcleq	0, cr0, [sp, #-0]
    2a3c:	00100000 	andseq	r0, r0, r0
    2a40:	26000000 	strcs	r0, [r0], -r0
    2a44:	16000000 	strne	r0, [r0], -r0
    2a48:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
    2a4c:	4c020f01 	stcmi	15, cr0, [r2], {1}
    2a50:	87000000 	strhi	r0, [r0, -r0]
    2a54:	0000000d 	andeq	r0, r0, sp
    2a58:	3a041900 	bcc	108e60 <__Stack_Size+0x108a60>
    2a5c:	14000000 	strne	r0, [r0], #-0
    2a60:	0000079a 	muleq	r0, sl, r7
    2a64:	a8021901 	stmdage	r2, {r0, r8, fp, ip}
    2a68:	4008000e 	andmi	r0, r8, lr
    2a6c:	01000000 	mrseq	r0, (UNDEF: 0)
    2a70:	0008519c 	muleq	r8, ip, r1
    2a74:	129e1500 	addsne	r1, lr, #0, 10
    2a78:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2a7c:	00005e02 	andeq	r5, r0, r2, lsl #28
    2a80:	000db000 	andeq	fp, sp, r0
    2a84:	0fed1500 	svceq	0x00ed1500
    2a88:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2a8c:	00004c02 	andeq	r4, r0, r2, lsl #24
    2a90:	000dd100 	andeq	sp, sp, r0, lsl #2
    2a94:	0ea81000 	cdpeq	0, 10, cr1, cr8, cr0, {0}
    2a98:	00400800 	subeq	r0, r0, r0, lsl #16
    2a9c:	ac1a0000 	ldcge	0, cr0, [sl], {-0}
    2aa0:	01000011 	tsteq	r0, r1, lsl r0
    2aa4:	07e6021b 			; <UNDEFINED> instruction: 0x07e6021b
    2aa8:	52010000 	andpl	r0, r1, #0
    2aac:	0002881b 	andeq	r8, r2, fp, lsl r8
    2ab0:	0fb51600 	svceq	0x00b51600
    2ab4:	1b010000 	blne	42abc <__Stack_Size+0x426bc>
    2ab8:	00004c02 	andeq	r4, r0, r2, lsl #24
    2abc:	000df200 	andeq	pc, sp, r0, lsl #4
    2ac0:	00000000 	andeq	r0, r0, r0
    2ac4:	0011f117 	andseq	pc, r1, r7, lsl r1	; <UNPREDICTABLE>
    2ac8:	02240100 	eoreq	r0, r4, #0, 2
    2acc:	0000004c 	andeq	r0, r0, ip, asr #32
    2ad0:	00000000 	andeq	r0, r0, r0
    2ad4:	00000020 	andeq	r0, r0, r0, lsr #32
    2ad8:	087c9c01 	ldmdaeq	ip!, {r0, sl, fp, ip, pc}^
    2adc:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2ae0:	01000012 	tsteq	r0, r2, lsl r0
    2ae4:	005e0224 	subseq	r0, lr, r4, lsr #4
    2ae8:	0e2a0000 	cdpeq	0, 2, cr0, cr10, cr0, {0}
    2aec:	17000000 	strne	r0, [r0, -r0]
    2af0:	000011cc 	andeq	r1, r0, ip, asr #3
    2af4:	4c022f01 	stcmi	15, cr2, [r2], {1}
    2af8:	00000000 	andeq	r0, r0, r0
    2afc:	20000000 	andcs	r0, r0, r0
    2b00:	01000000 	mrseq	r0, (UNDEF: 0)
    2b04:	0008a79c 	muleq	r8, ip, r7
    2b08:	129e1500 	addsne	r1, lr, #0, 10
    2b0c:	2f010000 	svccs	0x00010000
    2b10:	00005e02 	andeq	r5, r0, r2, lsl #28
    2b14:	000e4b00 	andeq	r4, lr, r0, lsl #22
    2b18:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2b1c:	01000010 	tsteq	r0, r0, lsl r0
    2b20:	0000023c 	andeq	r0, r0, ip, lsr r2
    2b24:	00380000 	eorseq	r0, r8, r0
    2b28:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b2c:	000008ee 	andeq	r0, r0, lr, ror #17
    2b30:	00129e15 	andseq	r9, r2, r5, lsl lr
    2b34:	023c0100 	eorseq	r0, ip, #0, 2
    2b38:	0000005e 	andeq	r0, r0, lr, asr r0
    2b3c:	00000e6c 	andeq	r0, r0, ip, ror #28
    2b40:	00123115 	andseq	r3, r2, r5, lsl r1
    2b44:	023c0100 	eorseq	r0, ip, #0, 2
    2b48:	0000004c 	andeq	r0, r0, ip, asr #32
    2b4c:	00000e8d 	andeq	r0, r0, sp, lsl #29
    2b50:	0010ac15 	andseq	sl, r0, r5, lsl ip
    2b54:	023c0100 	eorseq	r0, ip, #0, 2
    2b58:	0000004c 	andeq	r0, r0, ip, asr #32
    2b5c:	00000eae 	andeq	r0, r0, lr, lsr #29
    2b60:	10541400 	subsne	r1, r4, r0, lsl #8
    2b64:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    2b68:	00000002 	andeq	r0, r0, r2
    2b6c:	00002000 	andeq	r2, r0, r0
    2b70:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    2b74:	15000009 	strne	r0, [r0, #-9]
    2b78:	0000129e 	muleq	r0, lr, r2
    2b7c:	5e024801 	cdppl	8, 0, cr4, cr2, cr1, {0}
    2b80:	cf000000 	svcgt	0x00000000
    2b84:	1500000e 	strne	r0, [r0, #-14]
    2b88:	00001231 	andeq	r1, r0, r1, lsr r2
    2b8c:	4c024801 	stcmi	8, cr4, [r2], {1}
    2b90:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
    2b94:	0000000e 	andeq	r0, r0, lr
    2b98:	000f3214 	andeq	r3, pc, r4, lsl r2	; <UNPREDICTABLE>
    2b9c:	02540100 	subseq	r0, r4, #0, 2
    2ba0:	00000000 	andeq	r0, r0, r0
    2ba4:	00000020 	andeq	r0, r0, r0, lsr #32
    2ba8:	095c9c01 	ldmdbeq	ip, {r0, sl, fp, ip, pc}^
    2bac:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2bb0:	01000012 	tsteq	r0, r2, lsl r0
    2bb4:	005e0254 	subseq	r0, lr, r4, asr r2
    2bb8:	0f110000 	svceq	0x00110000
    2bbc:	ac150000 	ldcge	0, cr0, [r5], {-0}
    2bc0:	01000010 	tsteq	r0, r0, lsl r0
    2bc4:	004c0254 	subeq	r0, ip, r4, asr r2
    2bc8:	0f320000 	svceq	0x00320000
    2bcc:	17000000 	strne	r0, [r0, -r0]
    2bd0:	00001251 	andeq	r1, r0, r1, asr r2
    2bd4:	4c025f01 	stcmi	15, cr5, [r2], {1}
    2bd8:	00000000 	andeq	r0, r0, r0
    2bdc:	1c000000 	stcne	0, cr0, [r0], {-0}
    2be0:	01000000 	mrseq	r0, (UNDEF: 0)
    2be4:	0009879c 	muleq	r9, ip, r7
    2be8:	129e1500 	addsne	r1, lr, #0, 10
    2bec:	5f010000 	svcpl	0x00010000
    2bf0:	00005e02 	andeq	r5, r0, r2, lsl #28
    2bf4:	000f5300 	andeq	r5, pc, r0, lsl #6
    2bf8:	02170000 	andseq	r0, r7, #0
    2bfc:	01000011 	tsteq	r0, r1, lsl r0
    2c00:	004c026a 	subeq	r0, ip, sl, ror #4
    2c04:	00000000 	andeq	r0, r0, r0
    2c08:	001c0000 	andseq	r0, ip, r0
    2c0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c10:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    2c14:	00129e15 	andseq	r9, r2, r5, lsl lr
    2c18:	026a0100 	rsbeq	r0, sl, #0, 2
    2c1c:	0000005e 	andeq	r0, r0, lr, asr r0
    2c20:	00000f74 	andeq	r0, r0, r4, ror pc
    2c24:	112c1400 	teqne	ip, r0, lsl #8
    2c28:	76010000 	strvc	r0, [r1], -r0
    2c2c:	00000002 	andeq	r0, r0, r2
    2c30:	0000a800 	andeq	sl, r0, r0, lsl #16
    2c34:	599c0100 	ldmibpl	ip, {r8}
    2c38:	1500000a 	strne	r0, [r0, #-10]
    2c3c:	0000129e 	muleq	r0, lr, r2
    2c40:	5e027601 	cfmadd32pl	mvax0, mvfx7, mvfx2, mvfx1
    2c44:	95000000 	strls	r0, [r0, #-0]
    2c48:	1500000f 	strne	r0, [r0, #-15]
    2c4c:	00001073 	andeq	r1, r0, r3, ror r0
    2c50:	5e027601 	cfmadd32pl	mvax0, mvfx7, mvfx2, mvfx1
    2c54:	da000000 	ble	2c5c <__Stack_Size+0x285c>
    2c58:	1500000f 	strne	r0, [r0, #-15]
    2c5c:	00000fed 	andeq	r0, r0, sp, ror #31
    2c60:	4c027601 	stcmi	6, cr7, [r2], {1}
    2c64:	1f000000 	svcne	0x00000000
    2c68:	1c000010 	stcne	0, cr0, [r0], {16}
    2c6c:	00000000 	andeq	r0, r0, r0
    2c70:	0000003a 	andeq	r0, r0, sl, lsr r0
    2c74:	00000a2c 	andeq	r0, r0, ip, lsr #20
    2c78:	0011ac16 	andseq	sl, r1, r6, lsl ip
    2c7c:	02780100 	rsbseq	r0, r8, #0, 2
    2c80:	000007e6 	andeq	r0, r0, r6, ror #15
    2c84:	0000104b 	andeq	r1, r0, fp, asr #32
    2c88:	0002a01b 	andeq	sl, r2, fp, lsl r0
    2c8c:	0fb51600 	svceq	0x00b51600
    2c90:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2c94:	00004c02 	andeq	r4, r0, r2, lsl #24
    2c98:	00106900 	andseq	r6, r0, r0, lsl #18
    2c9c:	1b000000 	blne	2ca4 <__Stack_Size+0x28a4>
    2ca0:	000002b8 			; <UNDEFINED> instruction: 0x000002b8
    2ca4:	0011ac16 	andseq	sl, r1, r6, lsl ip
    2ca8:	02780100 	rsbseq	r0, r8, #0, 2
    2cac:	000007e6 	andeq	r0, r0, r6, ror #15
    2cb0:	000010a1 	andeq	r1, r0, r1, lsr #1
    2cb4:	0002d01b 	andeq	sp, r2, fp, lsl r0
    2cb8:	0fb51600 	svceq	0x00b51600
    2cbc:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2cc0:	00004c02 	andeq	r4, r0, r2, lsl #24
    2cc4:	0010bf00 	andseq	fp, r0, r0, lsl #30
    2cc8:	00000000 	andeq	r0, r0, r0
    2ccc:	00121f14 	andseq	r1, r2, r4, lsl pc
    2cd0:	02820100 	addeq	r0, r2, #0, 2
    2cd4:	00000000 	andeq	r0, r0, r0
    2cd8:	0000005c 	andeq	r0, r0, ip, asr r0
    2cdc:	0ad09c01 	beq	ff429ce8 <BootRAM+0xe39a489>
    2ce0:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2ce4:	01000012 	tsteq	r0, r2, lsl r0
    2ce8:	005e0282 	subseq	r0, lr, r2, lsl #5
    2cec:	10f70000 	rscsne	r0, r7, r0
    2cf0:	73150000 	tstvc	r5, #0
    2cf4:	01000010 	tsteq	r0, r0, lsl r0
    2cf8:	005e0282 	subseq	r0, lr, r2, lsl #5
    2cfc:	11310000 	teqne	r1, r0
    2d00:	ed150000 	ldc	0, cr0, [r5, #-0]
    2d04:	0100000f 	tsteq	r0, pc
    2d08:	004c0282 	subeq	r0, ip, r2, lsl #5
    2d0c:	115d0000 	cmpne	sp, r0
    2d10:	00100000 	andseq	r0, r0, r0
    2d14:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2d18:	16000000 	strne	r0, [r0], -r0
    2d1c:	000011ac 	andeq	r1, r0, ip, lsr #3
    2d20:	e6028401 	str	r8, [r2], -r1, lsl #8
    2d24:	89000007 	stmdbhi	r0, {r0, r1, r2}
    2d28:	1b000011 	blne	2d74 <__Stack_Size+0x2974>
    2d2c:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2d30:	000fb516 	andeq	fp, pc, r6, lsl r5	; <UNPREDICTABLE>
    2d34:	02840100 	addeq	r0, r4, #0, 2
    2d38:	0000004c 	andeq	r0, r0, ip, asr #32
    2d3c:	0000119c 	muleq	r0, ip, r1
    2d40:	14000000 	strne	r0, [r0], #-0
    2d44:	000010cb 	andeq	r1, r0, fp, asr #1
    2d48:	00028e01 	andeq	r8, r2, r1, lsl #28
    2d4c:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2d50:	01000000 	mrseq	r0, (UNDEF: 0)
    2d54:	000b479c 	muleq	fp, ip, r7
    2d58:	129e1500 	addsne	r1, lr, #0, 10
    2d5c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2d60:	00005e02 	andeq	r5, r0, r2, lsl #28
    2d64:	0011d400 	andseq	sp, r1, r0, lsl #8
    2d68:	10731500 	rsbsne	r1, r3, r0, lsl #10
    2d6c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2d70:	00005e02 	andeq	r5, r0, r2, lsl #28
    2d74:	00120e00 	andseq	r0, r2, r0, lsl #28
    2d78:	0fed1500 	svceq	0x00ed1500
    2d7c:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2d80:	00004c02 	andeq	r4, r0, r2, lsl #24
    2d84:	00123a00 	andseq	r3, r2, r0, lsl #20
    2d88:	00001000 	andeq	r1, r0, r0
    2d8c:	00380000 	eorseq	r0, r8, r0
    2d90:	ac160000 	ldcge	0, cr0, [r6], {-0}
    2d94:	01000011 	tsteq	r0, r1, lsl r0
    2d98:	07e60290 			; <UNDEFINED> instruction: 0x07e60290
    2d9c:	12660000 	rsbne	r0, r6, #0
    2da0:	081b0000 	ldmdaeq	fp, {}	; <UNPREDICTABLE>
    2da4:	16000003 	strne	r0, [r0], -r3
    2da8:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
    2dac:	4c029001 	stcmi	0, cr9, [r2], {1}
    2db0:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    2db4:	00000012 	andeq	r0, r0, r2, lsl r0
    2db8:	91170000 	tstls	r7, r0
    2dbc:	01000011 	tsteq	r0, r1, lsl r0
    2dc0:	004c029a 	umaaleq	r0, ip, sl, r2
    2dc4:	00000000 	andeq	r0, r0, r0
    2dc8:	00200000 	eoreq	r0, r0, r0
    2dcc:	9c010000 	stcls	0, cr0, [r1], {-0}
    2dd0:	00000b72 	andeq	r0, r0, r2, ror fp
    2dd4:	00129e15 	andseq	r9, r2, r5, lsl lr
    2dd8:	029a0100 	addseq	r0, sl, #0, 2
    2ddc:	0000005e 	andeq	r0, r0, lr, asr r0
    2de0:	000012b1 			; <UNDEFINED> instruction: 0x000012b1
    2de4:	120d1700 	andne	r1, sp, #0, 14
    2de8:	a6010000 	strge	r0, [r1], -r0
    2dec:	00004c02 	andeq	r4, r0, r2, lsl #24
    2df0:	00000000 	andeq	r0, r0, r0
    2df4:	00002000 	andeq	r2, r0, r0
    2df8:	9d9c0100 	ldflss	f0, [ip]
    2dfc:	1500000b 	strne	r0, [r0, #-11]
    2e00:	0000129e 	muleq	r0, lr, r2
    2e04:	5e02a601 	cfmadd32pl	mvax0, mvfx10, mvfx2, mvfx1
    2e08:	d2000000 	andle	r0, r0, #0
    2e0c:	00000012 	andeq	r0, r0, r2, lsl r0
    2e10:	00109d17 	andseq	r9, r0, r7, lsl sp
    2e14:	02b20100 	adcseq	r0, r2, #0, 2
    2e18:	0000008e 	andeq	r0, r0, lr, lsl #1
    2e1c:	00000000 	andeq	r0, r0, r0
    2e20:	00000044 	andeq	r0, r0, r4, asr #32
    2e24:	0bc89c01 	bleq	ff229e30 <BootRAM+0xe19a5d1>
    2e28:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2e2c:	01000012 	tsteq	r0, r2, lsl r0
    2e30:	005e02b2 	ldrheq	r0, [lr], #-34	; 0xffffffde
    2e34:	12f30000 	rscsne	r0, r3, #0
    2e38:	14000000 	strne	r0, [r0], #-0
    2e3c:	00000f12 	andeq	r0, r0, r2, lsl pc
    2e40:	0002c301 	andeq	ip, r2, r1, lsl #6
    2e44:	3a000000 	bcc	2e4c <__Stack_Size+0x2a4c>
    2e48:	01000000 	mrseq	r0, (UNDEF: 0)
    2e4c:	000bfd9c 	muleq	fp, ip, sp
    2e50:	129e1500 	addsne	r1, lr, #0, 10
    2e54:	c3010000 	movwgt	r0, #4096	; 0x1000
    2e58:	00005e02 	andeq	r5, r0, r2, lsl #28
    2e5c:	00131400 	andseq	r1, r3, r0, lsl #8
    2e60:	10731800 	rsbsne	r1, r3, r0, lsl #16
    2e64:	c3010000 	movwgt	r0, #4096	; 0x1000
    2e68:	00005e02 	andeq	r5, r0, r2, lsl #28
    2e6c:	00510100 	subseq	r0, r1, r0, lsl #2
    2e70:	0010fb17 	andseq	pc, r0, r7, lsl fp	; <UNPREDICTABLE>
    2e74:	02d60100 	sbcseq	r0, r6, #0, 2
    2e78:	0000004c 	andeq	r0, r0, ip, asr #32
    2e7c:	00000000 	andeq	r0, r0, r0
    2e80:	00000006 	andeq	r0, r0, r6
    2e84:	0c449c01 	mcrreq	12, 0, r9, r4, cr1
    2e88:	621d0000 	andsvs	r0, sp, #0
    2e8c:	d6010068 	strle	r0, [r1], -r8, rrx
    2e90:	00005e02 	andeq	r5, r0, r2, lsl #28
    2e94:	00134e00 	andseq	r4, r3, r0, lsl #28
    2e98:	6c621e00 	stclvs	14, cr1, [r2], #-0
    2e9c:	02d60100 	sbcseq	r0, r6, #0, 2
    2ea0:	0000005e 	andeq	r0, r0, lr, asr r0
    2ea4:	43165101 	tstmi	r6, #1073741824	; 0x40000000
    2ea8:	01000010 	tsteq	r0, r0, lsl r0
    2eac:	004c02d8 	ldrdeq	r0, [ip], #-40	; 0xffffffd8
    2eb0:	136f0000 	cmnne	pc, #0
    2eb4:	1f000000 	svcne	0x00000000
    2eb8:	000011b3 			; <UNDEFINED> instruction: 0x000011b3
    2ebc:	4c02e301 	stcmi	3, cr14, [r2], {1}
    2ec0:	00000000 	andeq	r0, r0, r0
    2ec4:	0a000000 	beq	2ecc <__Stack_Size+0x2acc>
    2ec8:	01000000 	mrseq	r0, (UNDEF: 0)
    2ecc:	10b6159c 	umlalsne	r1, r6, ip, r5
    2ed0:	e3010000 	movw	r0, #4096	; 0x1000
    2ed4:	00004c02 	andeq	r4, r0, r2, lsl #24
    2ed8:	0013a800 	andseq	sl, r3, r0, lsl #16
    2edc:	11d91600 	bicsne	r1, r9, r0, lsl #12
    2ee0:	e5010000 	str	r0, [r1, #-0]
    2ee4:	00005e02 	andeq	r5, r0, r2, lsl #28
    2ee8:	0013c900 	andseq	ip, r3, r0, lsl #18
    2eec:	10431600 	subne	r1, r3, r0, lsl #12
    2ef0:	e6010000 	str	r0, [r1], -r0
    2ef4:	00004c02 	andeq	r4, r0, r2, lsl #24
    2ef8:	0013dc00 	andseq	sp, r3, r0, lsl #24
    2efc:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    2f00:	04000001 	streq	r0, [r0], #-1
    2f04:	000d8300 	andeq	r8, sp, r0, lsl #6
    2f08:	58010400 	stmdapl	r1, {sl}
    2f0c:	01000001 	tsteq	r0, r1
    2f10:	000012f0 	strdeq	r1, [r0], -r0
    2f14:	00000926 	andeq	r0, r0, r6, lsr #18
    2f18:	00000500 	andeq	r0, r0, r0, lsl #10
    2f1c:	00000000 	andeq	r0, r0, r0
    2f20:	00000f67 	andeq	r0, r0, r7, ror #30
    2f24:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    2f28:	02000001 	andeq	r0, r0, #1
    2f2c:	06a50502 	strteq	r0, [r5], r2, lsl #10
    2f30:	01020000 	mrseq	r0, (UNDEF: 2)
    2f34:	00065106 	andeq	r5, r6, r6, lsl #2
    2f38:	33750300 	cmncc	r5, #0, 6
    2f3c:	24020032 	strcs	r0, [r2], #-50	; 0x32
    2f40:	00000045 	andeq	r0, r0, r5, asr #32
    2f44:	7b070402 	blvc	1c3f54 <__Stack_Size+0x1c3b54>
    2f48:	03000003 	movweq	r0, #3
    2f4c:	00363175 	eorseq	r3, r6, r5, ror r1
    2f50:	00572502 	subseq	r2, r7, r2, lsl #10
    2f54:	02020000 	andeq	r0, r2, #0
    2f58:	0003d707 	andeq	sp, r3, r7, lsl #14
    2f5c:	38750300 	ldmdacc	r5!, {r8, r9}^
    2f60:	68260200 	stmdavs	r6!, {r9}
    2f64:	02000000 	andeq	r0, r0, #0
    2f68:	064f0801 	strbeq	r0, [pc], -r1, lsl #16
    2f6c:	05040000 	streq	r0, [r4, #-0]
    2f70:	00006f04 	andeq	r6, r0, r4, lsl #30
    2f74:	038d0600 	orreq	r0, sp, #0, 12
    2f78:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    2f7c:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
    2f80:	00000154 	andeq	r0, r0, r4, asr r1
    2f84:	012a9c01 	teqeq	sl, r1, lsl #24
    2f88:	e9070000 	stmdb	r7, {}	; <UNPREDICTABLE>
    2f8c:	01000012 	tsteq	r0, r2, lsl r0
    2f90:	00003a2b 	andeq	r3, r0, fp, lsr #20
    2f94:	0013fb00 	andseq	pc, r3, r0, lsl #22
    2f98:	0f240800 	svceq	0x00240800
    2f9c:	00120800 	andseq	r0, r2, r0, lsl #16
    2fa0:	00b70000 	adcseq	r0, r7, r0
    2fa4:	5b070000 	blpl	1c2fac <__Stack_Size+0x1c2bac>
    2fa8:	01000004 	tsteq	r0, r4
    2fac:	00004c3c 	andeq	r4, r0, ip, lsr ip
    2fb0:	00146b00 	andseq	r6, r4, r0, lsl #22
    2fb4:	36080000 	strcc	r0, [r8], -r0
    2fb8:	1208000f 	andne	r0, r8, #15
    2fbc:	d4000000 	strle	r0, [r0], #-0
    2fc0:	07000000 	streq	r0, [r0, -r0]
    2fc4:	0000045b 	andeq	r0, r0, fp, asr r4
    2fc8:	004c3d01 	subeq	r3, ip, r1, lsl #26
    2fcc:	14af0000 	strtne	r0, [pc], #0	; 2fd4 <__Stack_Size+0x2bd4>
    2fd0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    2fd4:	08000f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp}
    2fd8:	00000022 	andeq	r0, r0, r2, lsr #32
    2fdc:	000000f1 	strdeq	r0, [r0], -r1
    2fe0:	00045b07 	andeq	r5, r4, r7, lsl #22
    2fe4:	4c720100 	ldfmie	f0, [r2], #-0
    2fe8:	29000000 	stmdbcs	r0, {}	; <UNPREDICTABLE>
    2fec:	00000015 	andeq	r0, r0, r5, lsl r0
    2ff0:	000fac08 	andeq	sl, pc, r8, lsl #24
    2ff4:	00002008 	andeq	r2, r0, r8
    2ff8:	00010e00 	andeq	r0, r1, r0, lsl #28
    2ffc:	045b0700 	ldrbeq	r0, [fp], #-1792	; 0x700
    3000:	73010000 	movwvc	r0, #4096	; 0x1000
    3004:	0000004c 	andeq	r0, r0, ip, asr #32
    3008:	0000154a 	andeq	r1, r0, sl, asr #10
    300c:	0f620900 	svceq	0x00620900
    3010:	01ba0800 			; <UNDEFINED> instruction: 0x01ba0800
    3014:	76090000 	strvc	r0, [r9], -r0
    3018:	c508000f 	strgt	r0, [r8, #-15]
    301c:	09000001 	stmdbeq	r0, {r0}
    3020:	08000f8a 	stmdaeq	r0, {r1, r3, r7, r8, r9, sl, fp}
    3024:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3028:	12bd0600 	adcsne	r0, sp, #0, 12
    302c:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    3030:	00000000 	andeq	r0, r0, r0
    3034:	00000070 	andeq	r0, r0, r0, ror r0
    3038:	014f9c01 	cmpeq	pc, r1, lsl #24
    303c:	e9070000 	stmdb	r7, {}	; <UNPREDICTABLE>
    3040:	01000012 	tsteq	r0, r2, lsl r0
    3044:	00003aa0 	andeq	r3, r0, r0, lsr #21
    3048:	00155d00 	andseq	r5, r5, r0, lsl #26
    304c:	300a0000 	andcc	r0, sl, r0
    3050:	03000002 	movweq	r0, #2
    3054:	015b022a 	cmpeq	fp, sl, lsr #4
    3058:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    305c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3060:	000012d3 	ldrdeq	r1, [r0], -r3
    3064:	004c1701 	subeq	r1, ip, r1, lsl #14
    3068:	03050000 	movweq	r0, #20480	; 0x5000
    306c:	200002d2 	ldrdcs	r0, [r0], -r2
    3070:	0012de0c 	andseq	sp, r2, ip, lsl #28
    3074:	4c180100 	ldfmis	f0, [r8], {-0}
    3078:	05000000 	streq	r0, [r0, #-0]
    307c:	0002d403 	andeq	sp, r2, r3, lsl #8
    3080:	131b0d20 	tstne	fp, #32, 26	; 0x800
    3084:	1d040000 	stcne	0, cr0, [r4, #-0]
    3088:	0000005e 	andeq	r0, r0, lr, asr r0
    308c:	0000700e 	andeq	r7, r0, lr
    3090:	00019d00 	andeq	r9, r1, r0, lsl #26
    3094:	019d0f00 	orrseq	r0, sp, r0, lsl #30
    3098:	00060000 	andeq	r0, r6, r0
    309c:	15070402 	strne	r0, [r7, #-1026]	; 0x402
    30a0:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    30a4:	00000032 	andeq	r0, r0, r2, lsr r0
    30a8:	018d1b01 	orreq	r1, sp, r1, lsl #22
    30ac:	ec0d0000 	stc	0, cr0, [sp], {-0}
    30b0:	01000007 	tsteq	r0, r7
    30b4:	00018d1c 	andeq	r8, r1, ip, lsl sp
    30b8:	13021000 	movwne	r1, #8192	; 0x2000
    30bc:	dc050000 	stcle	0, cr0, [r5], {-0}
    30c0:	0000005e 	andeq	r0, r0, lr, asr r0
    30c4:	0012c410 	andseq	ip, r2, r0, lsl r4
    30c8:	5ed90500 	cdppl	5, 13, cr0, cr9, cr0, {0}
    30cc:	10000000 	andne	r0, r0, r0
    30d0:	0000130e 	andeq	r1, r0, lr, lsl #6
    30d4:	005edb05 	subseq	sp, lr, r5, lsl #22
    30d8:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    30dc:	04000003 	streq	r0, [r0], #-3
    30e0:	000e5d00 	andeq	r5, lr, r0, lsl #26
    30e4:	58010400 	stmdapl	r1, {sl}
    30e8:	01000001 	tsteq	r0, r1
    30ec:	0000132d 	andeq	r1, r0, sp, lsr #6
    30f0:	00000926 	andeq	r0, r0, r6, lsr #18
    30f4:	00000518 	andeq	r0, r0, r8, lsl r5
    30f8:	00000000 	andeq	r0, r0, r0
    30fc:	0000101f 	andeq	r1, r0, pc, lsl r0
    3100:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    3104:	02000001 	andeq	r0, r0, #1
    3108:	06a50502 	strteq	r0, [r5], r2, lsl #10
    310c:	01020000 	mrseq	r0, (UNDEF: 2)
    3110:	00065106 	andeq	r5, r6, r6, lsl #2
    3114:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3118:	0000037b 	andeq	r0, r0, fp, ror r3
    311c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    3120:	4c250200 	sfmmi	f0, 4, [r5], #-0
    3124:	02000000 	andeq	r0, r0, #0
    3128:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    312c:	75030000 	strvc	r0, [r3, #-0]
    3130:	26020038 			; <UNDEFINED> instruction: 0x26020038
    3134:	0000005d 	andeq	r0, r0, sp, asr r0
    3138:	4f080102 	svcmi	0x00080102
    313c:	04000006 	streq	r0, [r0], #-6
    3140:	00005304 	andeq	r5, r0, r4, lsl #6
    3144:	07420500 	strbeq	r0, [r2, -r0, lsl #10]
    3148:	03010000 	movweq	r0, #4096	; 0x1000
    314c:	00008f2d 	andeq	r8, r0, sp, lsr #30
    3150:	08d30600 	ldmeq	r3, {r9, sl}^
    3154:	06000000 	streq	r0, [r0], -r0
    3158:	000003ea 	andeq	r0, r0, sl, ror #7
    315c:	07810601 	streq	r0, [r1, r1, lsl #12]
    3160:	06020000 	streq	r0, [r2], -r0
    3164:	00000222 	andeq	r0, r0, r2, lsr #4
    3168:	43070003 	movwmi	r0, #28675	; 0x7003
    316c:	03000007 	movweq	r0, #7
    3170:	00006a34 	andeq	r6, r0, r4, lsr sl
    3174:	08f80800 	ldmeq	r8!, {fp}^
    3178:	030c0000 	movweq	r0, #49152	; 0xc000
    317c:	0000d738 	andeq	sp, r0, r8, lsr r7
    3180:	02900900 	addseq	r0, r0, #0, 18
    3184:	50030000 	andpl	r0, r3, r0
    3188:	00000041 	andeq	r0, r0, r1, asr #32
    318c:	03190900 	tsteq	r9, #0, 18
    3190:	51030000 	mrspl	r0, (UNDEF: 3)
    3194:	00000041 	andeq	r0, r0, r1, asr #32
    3198:	14f90902 	ldrbtne	r0, [r9], #2306	; 0x902
    319c:	52030000 	andpl	r0, r3, #0
    31a0:	00000041 	andeq	r0, r0, r1, asr #32
    31a4:	00e30904 	rsceq	r0, r3, r4, lsl #18
    31a8:	53030000 	movwpl	r0, #12288	; 0x3000
    31ac:	000000e6 	andeq	r0, r0, r6, ror #1
    31b0:	640a0008 	strvs	r0, [sl], #-8
    31b4:	e6000000 	str	r0, [r0], -r0
    31b8:	0b000000 	bleq	31c0 <__Stack_Size+0x2dc0>
    31bc:	00000041 	andeq	r0, r0, r1, asr #32
    31c0:	d7040400 	strle	r0, [r4, -r0, lsl #8]
    31c4:	07000000 	streq	r0, [r0, -r0]
    31c8:	000008f9 	strdeq	r0, [r0], -r9
    31cc:	009a5403 	addseq	r5, sl, r3, lsl #8
    31d0:	420c0000 	andmi	r0, ip, #0
    31d4:	03020057 	movweq	r0, #8279	; 0x2057
    31d8:	00011b62 	andeq	r1, r1, r2, ror #22
    31dc:	62620d00 	rsbvs	r0, r2, #0, 26
    31e0:	65030030 	strvs	r0, [r3, #-48]	; 0x30
    31e4:	00000053 	andeq	r0, r0, r3, asr r0
    31e8:	62620d00 	rsbvs	r0, r2, #0, 26
    31ec:	66030031 			; <UNDEFINED> instruction: 0x66030031
    31f0:	00000053 	andeq	r0, r0, r3, asr r0
    31f4:	020e0001 	andeq	r0, lr, #1
    31f8:	01375f03 	teqeq	r7, r3, lsl #30
    31fc:	770f0000 	strvc	r0, [pc, -r0]
    3200:	41610300 	cmnmi	r1, r0, lsl #6
    3204:	0f000000 	svceq	0x00000000
    3208:	03007762 	movweq	r7, #1890	; 0x762
    320c:	0000f768 	andeq	pc, r0, r8, ror #14
    3210:	ff070000 			; <UNDEFINED> instruction: 0xff070000
    3214:	03000003 	movweq	r0, #3
    3218:	00011b69 	andeq	r1, r1, r9, ror #22
    321c:	003c0800 	eorseq	r0, ip, r0, lsl #16
    3220:	031c0000 	tsteq	ip, #0
    3224:	0001d36b 	andeq	sp, r1, fp, ror #6
    3228:	05500900 	ldrbeq	r0, [r0, #-2304]	; 0x900
    322c:	6d030000 	stcvs	0, cr0, [r3, #-0]
    3230:	00000053 	andeq	r0, r0, r3, asr r0
    3234:	02160900 	andseq	r0, r6, #0, 18
    3238:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    323c:	00000053 	andeq	r0, r0, r3, asr r0
    3240:	04180901 	ldreq	r0, [r8], #-2305	; 0x901
    3244:	6f030000 	svcvs	0x00030000
    3248:	00000137 	andeq	r0, r0, r7, lsr r1
    324c:	01480902 	cmpeq	r8, r2, lsl #18
    3250:	70030000 	andvc	r0, r3, r0
    3254:	00000137 	andeq	r0, r0, r7, lsr r1
    3258:	081a0904 	ldmdaeq	sl, {r2, r8, fp}
    325c:	71030000 	mrsvc	r0, (UNDEF: 3)
    3260:	00000137 	andeq	r0, r0, r7, lsr r1
    3264:	05cf0906 	strbeq	r0, [pc, #2310]	; 3b72 <__Stack_Size+0x3772>
    3268:	73030000 	movwvc	r0, #12288	; 0x3000
    326c:	00000053 	andeq	r0, r0, r3, asr r0
    3270:	03a00908 	moveq	r0, #8, 18	; 0x20000
    3274:	74030000 	strvc	r0, [r3], #-0
    3278:	00000053 	andeq	r0, r0, r3, asr r0
    327c:	04a10909 	strteq	r0, [r1], #2313	; 0x909
    3280:	75030000 	strvc	r0, [r3, #-0]
    3284:	00000053 	andeq	r0, r0, r3, asr r0
    3288:	086f090a 	stmdaeq	pc!, {r1, r3, r8, fp}^	; <UNPREDICTABLE>
    328c:	76030000 	strvc	r0, [r3], -r0
    3290:	00000053 	andeq	r0, r0, r3, asr r0
    3294:	0629090b 	strteq	r0, [r9], -fp, lsl #18
    3298:	77030000 	strvc	r0, [r3, -r0]
    329c:	00000053 	andeq	r0, r0, r3, asr r0
    32a0:	0720090c 	streq	r0, [r0, -ip, lsl #18]!
    32a4:	7a030000 	bvc	c32ac <__Stack_Size+0xc2eac>
    32a8:	000000ec 	andeq	r0, r0, ip, ror #1
    32ac:	3d070010 	stccc	0, cr0, [r7, #-64]	; 0xffffffc0
    32b0:	03000000 	movweq	r0, #0
    32b4:	0001427b 	andeq	r4, r1, fp, ror r2
    32b8:	074f0800 	strbeq	r0, [pc, -r0, lsl #16]
    32bc:	03340000 	teqeq	r4, #0
    32c0:	0002877d 	andeq	r8, r2, sp, ror r7
    32c4:	053d0900 	ldreq	r0, [sp, #-2304]!	; 0x900
    32c8:	7f030000 	svcvc	0x00030000
    32cc:	00000288 	andeq	r0, r0, r8, lsl #5
    32d0:	03c70900 	biceq	r0, r7, #0, 18
    32d4:	80030000 	andhi	r0, r3, r0
    32d8:	00000288 	andeq	r0, r0, r8, lsl #5
    32dc:	07a70904 	streq	r0, [r7, r4, lsl #18]!
    32e0:	83030000 	movwhi	r0, #12288	; 0x3000
    32e4:	00000288 	andeq	r0, r0, r8, lsl #5
    32e8:	07b90908 	ldreq	r0, [r9, r8, lsl #18]!
    32ec:	84030000 	strhi	r0, [r3], #-0
    32f0:	00000288 	andeq	r0, r0, r8, lsl #5
    32f4:	051e090c 	ldreq	r0, [lr, #-2316]	; 0x90c
    32f8:	96030000 	strls	r0, [r3], -r0
    32fc:	0000029d 	muleq	r0, sp, r2
    3300:	07040910 	smladeq	r4, r0, r9, r0
    3304:	a1030000 	mrsge	r0, (UNDEF: 3)
    3308:	0000029d 	muleq	r0, sp, r2
    330c:	04e80914 	strbteq	r0, [r8], #2324	; 0x914
    3310:	ab030000 	blge	c3318 <__Stack_Size+0xc2f18>
    3314:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    3318:	01340918 	teqeq	r4, r8, lsl r9
    331c:	ad030000 	stcge	0, cr0, [r3, #-0]
    3320:	000000e6 	andeq	r0, r0, r6, ror #1
    3324:	0202091c 	andeq	r0, r2, #28, 18	; 0x70000
    3328:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    332c:	000000e6 	andeq	r0, r0, r6, ror #1
    3330:	08290920 	stmdaeq	r9!, {r5, r8, fp}
    3334:	af030000 	svcge	0x00030000
    3338:	000000e6 	andeq	r0, r0, r6, ror #1
    333c:	06110924 	ldreq	r0, [r1], -r4, lsr #18
    3340:	b0030000 	andlt	r0, r3, r0
    3344:	000000e6 	andeq	r0, r0, r6, ror #1
    3348:	057b0928 	ldrbeq	r0, [fp, #-2344]!	; 0x928
    334c:	b2030000 	andlt	r0, r3, #0
    3350:	00000064 	andeq	r0, r0, r4, rrx
    3354:	14f6092c 	ldrbtne	r0, [r6], #2348	; 0x92c
    3358:	b3030000 	movwlt	r0, #12288	; 0x3000
    335c:	00000053 	andeq	r0, r0, r3, asr r0
    3360:	04100030 	ldreq	r0, [r0], #-48	; 0x30
    3364:	00028704 	andeq	r8, r2, r4, lsl #14
    3368:	008f0a00 	addeq	r0, pc, r0, lsl #20
    336c:	029d0000 	addseq	r0, sp, #0
    3370:	530b0000 	movwpl	r0, #45056	; 0xb000
    3374:	00000000 	andeq	r0, r0, r0
    3378:	028e0404 	addeq	r0, lr, #4, 8	; 0x4000000
    337c:	8f0a0000 	svchi	0x000a0000
    3380:	b7000000 	strlt	r0, [r0, -r0]
    3384:	0b000002 	bleq	3394 <__Stack_Size+0x2f94>
    3388:	00000053 	andeq	r0, r0, r3, asr r0
    338c:	0000530b 	andeq	r5, r0, fp, lsl #6
    3390:	04040000 	streq	r0, [r4], #-0
    3394:	000002a3 	andeq	r0, r0, r3, lsr #5
    3398:	00075007 	andeq	r5, r7, r7
    339c:	deb50300 	cdple	3, 11, cr0, cr5, cr0, {0}
    33a0:	08000001 	stmdaeq	r0, {r0}
    33a4:	0000065d 	andeq	r0, r0, sp, asr r6
    33a8:	41b70324 			; <UNDEFINED> instruction: 0x41b70324
    33ac:	09000003 	stmdbeq	r0, {r0, r1}
    33b0:	000006ca 	andeq	r0, r0, sl, asr #13
    33b4:	0288b903 	addeq	fp, r8, #49152	; 0xc000
    33b8:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    33bc:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    33c0:	0288ba03 	addeq	fp, r8, #12288	; 0x3000
    33c4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    33c8:	000005e2 	andeq	r0, r0, r2, ror #11
    33cc:	0288bb03 	addeq	fp, r8, #3072	; 0xc00
    33d0:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    33d4:	000000ec 	andeq	r0, r0, ip, ror #1
    33d8:	0288bc03 	addeq	fp, r8, #768	; 0x300
    33dc:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    33e0:	00000696 	muleq	r0, r6, r6
    33e4:	0288bd03 	addeq	fp, r8, #3, 26	; 0xc0
    33e8:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    33ec:	00000406 	andeq	r0, r0, r6, lsl #8
    33f0:	0288be03 	addeq	fp, r8, #3, 28	; 0x30
    33f4:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    33f8:	0000006c 	andeq	r0, r0, ip, rrx
    33fc:	0288bf03 	addeq	fp, r8, #3, 30
    3400:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    3404:	000005a3 	andeq	r0, r0, r3, lsr #11
    3408:	0288c003 	addeq	ip, r8, #3
    340c:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    3410:	0000001c 	andeq	r0, r0, ip, lsl r0
    3414:	0288c103 	addeq	ip, r8, #-1073741824	; 0xc0000000
    3418:	00200000 	eoreq	r0, r0, r0
    341c:	00065e07 	andeq	r5, r6, r7, lsl #28
    3420:	c8c30300 	stmiagt	r3, {r8, r9}^
    3424:	11000002 	tstne	r0, r2
    3428:	00000539 	andeq	r0, r0, r9, lsr r5
    342c:	103c3501 	eorsne	r3, ip, r1, lsl #10
    3430:	00380800 	eorseq	r0, r8, r0, lsl #16
    3434:	9c010000 	stcls	0, cr0, [r1], {-0}
    3438:	0005f412 	andeq	pc, r5, r2, lsl r4	; <UNPREDICTABLE>
    343c:	bdec0300 	stcllt	3, cr0, [ip]
    3440:	12000002 	andne	r0, r0, #2
    3444:	00001341 	andeq	r1, r0, r1, asr #6
    3448:	0341ed03 	movteq	lr, #7427	; 0x1d03
    344c:	58130000 	ldmdapl	r3, {}	; <UNPREDICTABLE>
    3450:	01000013 	tsteq	r0, r3, lsl r0
    3454:	0001d327 	andeq	sp, r1, r7, lsr #6
    3458:	e4030500 	str	r0, [r3], #-1280	; 0x500
    345c:	13200002 	teqne	r0, #2
    3460:	0000131b 	andeq	r1, r0, fp, lsl r3
    3464:	00531801 	subseq	r1, r3, r1, lsl #16
    3468:	03050000 	movweq	r0, #20480	; 0x5000
    346c:	200002e0 	andcs	r0, r0, r0, ror #5
    3470:	00027c13 	andeq	r7, r2, r3, lsl ip
    3474:	a61d0100 	ldrge	r0, [sp], -r0, lsl #2
    3478:	05000003 	streq	r0, [r0, #-3]
    347c:	00030403 	andeq	r0, r3, r3, lsl #8
    3480:	d3040420 	movwle	r0, #17440	; 0x4420
    3484:	13000001 	movwne	r0, #1
    3488:	0000052f 	andeq	r0, r0, pc, lsr #10
    348c:	03bd2001 			; <UNDEFINED> instruction: 0x03bd2001
    3490:	03050000 	movweq	r0, #20480	; 0x5000
    3494:	200002dc 	ldrdcs	r0, [r0], -ip
    3498:	02bd0404 	adcseq	r0, sp, #4, 8	; 0x4000000
    349c:	40130000 	andsmi	r0, r3, r0
    34a0:	01000013 	tsteq	r0, r3, lsl r0
    34a4:	0003d428 	andeq	sp, r3, r8, lsr #8
    34a8:	00030500 	andeq	r0, r3, r0, lsl #10
    34ac:	04200003 	strteq	r0, [r0], #-3
    34b0:	00034104 	andeq	r4, r3, r4, lsl #2
    34b4:	13231300 	teqne	r3, #0, 6
    34b8:	25010000 	strcs	r0, [r1, #-0]
    34bc:	00000041 	andeq	r0, r0, r1, asr #32
    34c0:	02d80305 	sbcseq	r0, r8, #335544320	; 0x14000000
    34c4:	c2132000 	andsgt	r2, r3, #0
    34c8:	01000004 	tsteq	r0, r4
    34cc:	00004126 	andeq	r4, r0, r6, lsr #2
    34d0:	08030500 	stmdaeq	r3, {r8, sl}
    34d4:	00200003 	eoreq	r0, r0, r3
    34d8:	00000de0 	andeq	r0, r0, r0, ror #27
    34dc:	0f600004 	svceq	0x00600004
    34e0:	01040000 	mrseq	r0, (UNDEF: 4)
    34e4:	00000158 	andeq	r0, r0, r8, asr r1
    34e8:	00136401 	andseq	r6, r3, r1, lsl #8
    34ec:	00092600 	andeq	r2, r9, r0, lsl #12
    34f0:	00056000 	andeq	r6, r5, r0
    34f4:	00000000 	andeq	r0, r0, r0
    34f8:	00108600 	andseq	r8, r0, r0, lsl #12
    34fc:	05040200 	streq	r0, [r4, #-512]	; 0x200
    3500:	000001f6 	strdeq	r0, [r0], -r6
    3504:	a5050202 	strge	r0, [r5, #-514]	; 0x202
    3508:	02000006 	andeq	r0, r0, #6
    350c:	06510601 	ldrbeq	r0, [r1], -r1, lsl #12
    3510:	75030000 	strvc	r0, [r3, #-0]
    3514:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    3518:	00004524 	andeq	r4, r0, r4, lsr #10
    351c:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3520:	0000037b 	andeq	r0, r0, fp, ror r3
    3524:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    3528:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    352c:	02000000 	andeq	r0, r0, #0
    3530:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    3534:	75030000 	strvc	r0, [r3, #-0]
    3538:	26020038 			; <UNDEFINED> instruction: 0x26020038
    353c:	00000068 	andeq	r0, r0, r8, rrx
    3540:	4f080102 	svcmi	0x00080102
    3544:	04000006 	streq	r0, [r0], #-6
    3548:	00000446 	andeq	r0, r0, r6, asr #8
    354c:	007a2c02 	rsbseq	r2, sl, r2, lsl #24
    3550:	45050000 	strmi	r0, [r5, #-0]
    3554:	06000000 	streq	r0, [r0], -r0
    3558:	94360201 	ldrtls	r0, [r6], #-513	; 0x201
    355c:	07000000 	streq	r0, [r0, -r0]
    3560:	000005dc 	ldrdeq	r0, [r0], -ip
    3564:	074a0700 	strbeq	r0, [sl, -r0, lsl #14]
    3568:	00010000 	andeq	r0, r1, r0
    356c:	00043304 	andeq	r3, r4, r4, lsl #6
    3570:	7f390200 	svcvc	0x00390200
    3574:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3578:	0000036b 	andeq	r0, r0, fp, ror #6
    357c:	c4160301 	ldrgt	r0, [r6], #-769	; 0x301
    3580:	07000000 	streq	r0, [r0, -r0]
    3584:	000000fe 	strdeq	r0, [r0], -lr
    3588:	02aa0700 	adceq	r0, sl, #0, 14
    358c:	07010000 	streq	r0, [r1, -r0]
    3590:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    3594:	04230702 	strteq	r0, [r3], #-1794	; 0x702
    3598:	00030000 	andeq	r0, r3, r0
    359c:	00066208 	andeq	r6, r6, r8, lsl #4
    35a0:	1f030100 	svcne	0x00030100
    35a4:	00000125 	andeq	r0, r0, r5, lsr #2
    35a8:	0014d607 	andseq	sp, r4, r7, lsl #12
    35ac:	0f070000 	svceq	0x00070000
    35b0:	01000017 	tsteq	r0, r7, lsl r0
    35b4:	0015fb07 	andseq	pc, r5, r7, lsl #22
    35b8:	e1070200 	mrs	r0, (UNDEF: 39)
    35bc:	03000014 	movweq	r0, #20
    35c0:	000c2907 	andeq	r2, ip, r7, lsl #18
    35c4:	9e070400 	cfcpysls	mvf0, mvf7
    35c8:	05000016 	streq	r0, [r0, #-22]
    35cc:	0016ce07 	andseq	ip, r6, r7, lsl #28
    35d0:	4b070600 	blmi	1c4dd8 <__Stack_Size+0x1c49d8>
    35d4:	07000015 	smladeq	r0, r5, r0, r0
    35d8:	0015aa07 	andseq	sl, r5, r7, lsl #20
    35dc:	05070800 	streq	r0, [r7, #-2048]	; 0x800
    35e0:	09000016 	stmdbeq	r0, {r1, r2, r4}
    35e4:	0014ac07 	andseq	sl, r4, r7, lsl #24
    35e8:	5a070a00 	bpl	1c5df0 <__Stack_Size+0x1c59f0>
    35ec:	0b000015 	bleq	3648 <__Stack_Size+0x3248>
    35f0:	00162707 	andseq	r2, r6, r7, lsl #14
    35f4:	29070c00 	stmdbcs	r7, {sl, fp}
    35f8:	0c000015 	stceq	0, cr0, [r0], {21}
    35fc:	15cb0800 	strbne	r0, [fp, #2048]	; 0x800
    3600:	03010000 	movweq	r0, #4096	; 0x1000
    3604:	00015032 	andeq	r5, r1, r2, lsr r0
    3608:	14160700 	ldrne	r0, [r6], #-1792	; 0x700
    360c:	07010000 	streq	r0, [r1, -r0]
    3610:	0000167f 	andeq	r1, r0, pc, ror r6
    3614:	14280702 	strtne	r0, [r8], #-1794	; 0x702
    3618:	07030000 	streq	r0, [r3, -r0]
    361c:	00001636 	andeq	r1, r0, r6, lsr r6
    3620:	166b0704 	strbtne	r0, [fp], -r4, lsl #14
    3624:	00050000 	andeq	r0, r5, r0
    3628:	00156808 	andseq	r6, r5, r8, lsl #16
    362c:	3c030100 	stfccs	f0, [r3], {-0}
    3630:	00000169 	andeq	r0, r0, r9, ror #2
    3634:	00137707 	andseq	r7, r3, r7, lsl #14
    3638:	d5070000 	strle	r0, [r7, #-0]
    363c:	01000013 	tsteq	r0, r3, lsl r0
    3640:	15bc0800 	ldrne	r0, [ip, #2048]!	; 0x800
    3644:	04010000 	streq	r0, [r1], #-0
    3648:	0001b216 	andeq	fp, r1, r6, lsl r2
    364c:	16ea0700 	strbtne	r0, [sl], r0, lsl #14
    3650:	07000000 	streq	r0, [r0, -r0]
    3654:	000015dc 	ldrdeq	r1, [r0], -ip
    3658:	14600701 	strbtne	r0, [r0], #-1793	; 0x701
    365c:	07020000 	streq	r0, [r2, -r0]
    3660:	00001722 	andeq	r1, r0, r2, lsr #14
    3664:	145b0703 	ldrbne	r0, [fp], #-1795	; 0x703
    3668:	07040000 	streq	r0, [r4, -r0]
    366c:	0000171d 	andeq	r1, r0, sp, lsl r7
    3670:	17000705 	strne	r0, [r0, -r5, lsl #14]
    3674:	07060000 	streq	r0, [r6, -r0]
    3678:	00001617 	andeq	r1, r0, r7, lsl r6
    367c:	13ea0707 	mvnne	r0, #1835008	; 0x1c0000
    3680:	07080000 	streq	r0, [r8, -r0]
    3684:	0000149c 	muleq	r0, ip, r4
    3688:	8c090009 	stchi	0, cr0, [r9], {9}
    368c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3690:	01d72404 	bicseq	r2, r7, r4, lsl #8
    3694:	3d0a0000 	stccc	0, cr0, [sl, #-0]
    3698:	04000001 	streq	r0, [r0], #-1
    369c:	0001d726 	andeq	sp, r1, r6, lsr #14
    36a0:	930a0000 	movwls	r0, #40960	; 0xa000
    36a4:	04000005 	streq	r0, [r0], #-5
    36a8:	00004c27 	andeq	r4, r0, r7, lsr #24
    36ac:	0b000400 	bleq	46b4 <__Stack_Size+0x42b4>
    36b0:	00005e04 	andeq	r5, r0, r4, lsl #28
    36b4:	02d60400 	sbcseq	r0, r6, #0, 8
    36b8:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    36bc:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    36c0:	00074208 	andeq	r4, r7, r8, lsl #4
    36c4:	2d040100 	stfcss	f0, [r4, #-0]
    36c8:	0000020d 	andeq	r0, r0, sp, lsl #4
    36cc:	0008d307 	andeq	sp, r8, r7, lsl #6
    36d0:	ea070000 	b	1c36d8 <__Stack_Size+0x1c32d8>
    36d4:	01000003 	tsteq	r0, r3
    36d8:	00078107 	andeq	r8, r7, r7, lsl #2
    36dc:	22070200 	andcs	r0, r7, #0, 4
    36e0:	03000002 	movweq	r0, #2
    36e4:	07430400 	strbeq	r0, [r3, -r0, lsl #8]
    36e8:	34040000 	strcc	r0, [r4], #-0
    36ec:	000001e8 	andeq	r0, r0, r8, ror #3
    36f0:	0008f809 	andeq	pc, r8, r9, lsl #16
    36f4:	38040c00 	stmdacc	r4, {sl, fp}
    36f8:	00000255 	andeq	r0, r0, r5, asr r2
    36fc:	0002900a 	andeq	r9, r2, sl
    3700:	4c500400 	cfldrdmi	mvd0, [r0], {-0}
    3704:	00000000 	andeq	r0, r0, r0
    3708:	0003190a 	andeq	r1, r3, sl, lsl #18
    370c:	4c510400 	cfldrdmi	mvd0, [r1], {-0}
    3710:	02000000 	andeq	r0, r0, #0
    3714:	0014f90a 	andseq	pc, r4, sl, lsl #18
    3718:	4c520400 	cfldrdmi	mvd0, [r2], {-0}
    371c:	04000000 	streq	r0, [r0], #-0
    3720:	0000e30a 	andeq	lr, r0, sl, lsl #6
    3724:	64530400 	ldrbvs	r0, [r3], #-1024	; 0x400
    3728:	08000002 	stmdaeq	r0, {r1}
    372c:	01d70c00 	bicseq	r0, r7, r0, lsl #24
    3730:	02640000 	rsbeq	r0, r4, #0
    3734:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    3738:	00000000 	andeq	r0, r0, r0
    373c:	0255040b 	subseq	r0, r5, #184549376	; 0xb000000
    3740:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    3744:	04000008 	streq	r0, [r0], #-8
    3748:	00021854 	andeq	r1, r2, r4, asr r8
    374c:	07da0900 	ldrbeq	r0, [sl, r0, lsl #18]
    3750:	04020000 	streq	r0, [r2], #-0
    3754:	00029a58 	andeq	r9, r2, r8, asr sl
    3758:	09170a00 	ldmdbeq	r7, {r9, fp}
    375c:	5a040000 	bpl	103764 <__Stack_Size+0x103364>
    3760:	0000005e 	andeq	r0, r0, lr, asr r0
    3764:	03b00a00 	movseq	r0, #0, 20
    3768:	5b040000 	blpl	103770 <__Stack_Size+0x103370>
    376c:	0000005e 	andeq	r0, r0, lr, asr r0
    3770:	db040001 	blle	10377c <__Stack_Size+0x10337c>
    3774:	04000007 	streq	r0, [r0], #-7
    3778:	0002755d 	andeq	r7, r2, sp, asr r5
    377c:	57420e00 	strbpl	r0, [r2, -r0, lsl #28]
    3780:	62040200 	andvs	r0, r4, #0, 4
    3784:	000002c9 	andeq	r0, r0, r9, asr #5
    3788:	3062620f 	rsbcc	r6, r2, pc, lsl #4
    378c:	5e650400 	cdppl	4, 6, cr0, cr5, cr0, {0}
    3790:	00000000 	andeq	r0, r0, r0
    3794:	3162620f 	cmncc	r2, pc, lsl #4
    3798:	5e660400 	cdppl	4, 6, cr0, cr6, cr0, {0}
    379c:	01000000 	mrseq	r0, (UNDEF: 0)
    37a0:	04021000 	streq	r1, [r2], #-0
    37a4:	0002e55f 	andeq	lr, r2, pc, asr r5
    37a8:	00771100 	rsbseq	r1, r7, r0, lsl #2
    37ac:	004c6104 	subeq	r6, ip, r4, lsl #2
    37b0:	62110000 	andsvs	r0, r1, #0
    37b4:	68040077 	stmdavs	r4, {r0, r1, r2, r4, r5, r6}
    37b8:	000002a5 	andeq	r0, r0, r5, lsr #5
    37bc:	03ff0400 	mvnseq	r0, #0, 8
    37c0:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    37c4:	000002c9 	andeq	r0, r0, r9, asr #5
    37c8:	00003c09 	andeq	r3, r0, r9, lsl #24
    37cc:	6b041c00 	blvs	10a7d4 <__Stack_Size+0x10a3d4>
    37d0:	00000381 	andeq	r0, r0, r1, lsl #7
    37d4:	0005500a 	andeq	r5, r5, sl
    37d8:	5e6d0400 	cdppl	4, 6, cr0, cr13, cr0, {0}
    37dc:	00000000 	andeq	r0, r0, r0
    37e0:	0002160a 	andeq	r1, r2, sl, lsl #12
    37e4:	5e6e0400 	cdppl	4, 6, cr0, cr14, cr0, {0}
    37e8:	01000000 	mrseq	r0, (UNDEF: 0)
    37ec:	0004180a 	andeq	r1, r4, sl, lsl #16
    37f0:	e56f0400 	strb	r0, [pc, #-1024]!	; 33f8 <__Stack_Size+0x2ff8>
    37f4:	02000002 	andeq	r0, r0, #2
    37f8:	0001480a 	andeq	r4, r1, sl, lsl #16
    37fc:	e5700400 	ldrb	r0, [r0, #-1024]!	; 0x400
    3800:	04000002 	streq	r0, [r0], #-2
    3804:	00081a0a 	andeq	r1, r8, sl, lsl #20
    3808:	e5710400 	ldrb	r0, [r1, #-1024]!	; 0x400
    380c:	06000002 	streq	r0, [r0], -r2
    3810:	0005cf0a 	andeq	ip, r5, sl, lsl #30
    3814:	5e730400 	cdppl	4, 7, cr0, cr3, cr0, {0}
    3818:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    381c:	0003a00a 	andeq	sl, r3, sl
    3820:	5e740400 	cdppl	4, 7, cr0, cr4, cr0, {0}
    3824:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3828:	0004a10a 	andeq	sl, r4, sl, lsl #2
    382c:	5e750400 	cdppl	4, 7, cr0, cr5, cr0, {0}
    3830:	0a000000 	beq	3838 <__Stack_Size+0x3438>
    3834:	00086f0a 	andeq	r6, r8, sl, lsl #30
    3838:	5e760400 	cdppl	4, 7, cr0, cr6, cr0, {0}
    383c:	0b000000 	bleq	3844 <__Stack_Size+0x3444>
    3840:	0006290a 	andeq	r2, r6, sl, lsl #18
    3844:	5e770400 	cdppl	4, 7, cr0, cr7, cr0, {0}
    3848:	0c000000 	stceq	0, cr0, [r0], {-0}
    384c:	0007200a 	andeq	r2, r7, sl
    3850:	6a7a0400 	bvs	1e84858 <__Stack_Size+0x1e84458>
    3854:	10000002 	andne	r0, r0, r2
    3858:	003d0400 	eorseq	r0, sp, r0, lsl #8
    385c:	7b040000 	blvc	103864 <__Stack_Size+0x103464>
    3860:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    3864:	00074f09 	andeq	r4, r7, r9, lsl #30
    3868:	7d043400 	cfstrsvc	mvf3, [r4, #-0]
    386c:	00000435 	andeq	r0, r0, r5, lsr r4
    3870:	00053d0a 	andeq	r3, r5, sl, lsl #26
    3874:	367f0400 	ldrbtcc	r0, [pc], -r0, lsl #8
    3878:	00000004 	andeq	r0, r0, r4
    387c:	0003c70a 	andeq	ip, r3, sl, lsl #14
    3880:	36800400 	strcc	r0, [r0], r0, lsl #8
    3884:	04000004 	streq	r0, [r0], #-4
    3888:	0007a70a 	andeq	sl, r7, sl, lsl #14
    388c:	36830400 	strcc	r0, [r3], r0, lsl #8
    3890:	08000004 	stmdaeq	r0, {r2}
    3894:	0007b90a 	andeq	fp, r7, sl, lsl #18
    3898:	36840400 	strcc	r0, [r4], r0, lsl #8
    389c:	0c000004 	stceq	0, cr0, [r0], {4}
    38a0:	00051e0a 	andeq	r1, r5, sl, lsl #28
    38a4:	4b960400 	blmi	fe5848ac <BootRAM+0xd4f504d>
    38a8:	10000004 	andne	r0, r0, r4
    38ac:	0007040a 	andeq	r0, r7, sl, lsl #8
    38b0:	4ba10400 	blmi	fe8448b8 <BootRAM+0xd7b5059>
    38b4:	14000004 	strne	r0, [r0], #-4
    38b8:	0004e80a 	andeq	lr, r4, sl, lsl #16
    38bc:	65ab0400 	strvs	r0, [fp, #1024]!	; 0x400
    38c0:	18000004 	stmdane	r0, {r2}
    38c4:	0001340a 	andeq	r3, r1, sl, lsl #8
    38c8:	64ad0400 	strtvs	r0, [sp], #1024	; 0x400
    38cc:	1c000002 	stcne	0, cr0, [r0], {2}
    38d0:	0002020a 	andeq	r0, r2, sl, lsl #4
    38d4:	64ae0400 	strtvs	r0, [lr], #1024	; 0x400
    38d8:	20000002 	andcs	r0, r0, r2
    38dc:	0008290a 	andeq	r2, r8, sl, lsl #18
    38e0:	64af0400 	strtvs	r0, [pc], #1024	; 38e8 <__Stack_Size+0x34e8>
    38e4:	24000002 	strcs	r0, [r0], #-2
    38e8:	0006110a 	andeq	r1, r6, sl, lsl #2
    38ec:	64b00400 	ldrtvs	r0, [r0], #1024	; 0x400
    38f0:	28000002 	stmdacs	r0, {r1}
    38f4:	00057b0a 	andeq	r7, r5, sl, lsl #22
    38f8:	d7b20400 	ldrle	r0, [r2, r0, lsl #8]!
    38fc:	2c000001 	stccs	0, cr0, [r0], {1}
    3900:	0014f60a 	andseq	pc, r4, sl, lsl #12
    3904:	5eb30400 	cdppl	4, 11, cr0, cr3, cr0, {0}
    3908:	30000000 	andcc	r0, r0, r0
    390c:	040b1200 	streq	r1, [fp], #-512	; 0x200
    3910:	00000435 	andeq	r0, r0, r5, lsr r4
    3914:	00020d0c 	andeq	r0, r2, ip, lsl #26
    3918:	00044b00 	andeq	r4, r4, r0, lsl #22
    391c:	005e0d00 	subseq	r0, lr, r0, lsl #26
    3920:	0b000000 	bleq	3928 <__Stack_Size+0x3528>
    3924:	00043c04 	andeq	r3, r4, r4, lsl #24
    3928:	020d0c00 	andeq	r0, sp, #0, 24
    392c:	04650000 	strbteq	r0, [r5], #-0
    3930:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    3934:	0d000000 	stceq	0, cr0, [r0, #-0]
    3938:	0000005e 	andeq	r0, r0, lr, asr r0
    393c:	51040b00 	tstpl	r4, r0, lsl #22
    3940:	04000004 	streq	r0, [r0], #-4
    3944:	00000750 	andeq	r0, r0, r0, asr r7
    3948:	038cb504 	orreq	fp, ip, #4, 10	; 0x1000000
    394c:	5d090000 	stcpl	0, cr0, [r9, #-0]
    3950:	24000006 	strcs	r0, [r0], #-6
    3954:	04efb704 	strbteq	fp, [pc], #1796	; 395c <__Stack_Size+0x355c>
    3958:	ca0a0000 	bgt	283960 <__Stack_Size+0x283560>
    395c:	04000006 	streq	r0, [r0], #-6
    3960:	000436b9 			; <UNDEFINED> instruction: 0x000436b9
    3964:	b90a0000 	stmdblt	sl, {}	; <UNPREDICTABLE>
    3968:	04000005 	streq	r0, [r0], #-5
    396c:	000436ba 			; <UNDEFINED> instruction: 0x000436ba
    3970:	e20a0400 	and	r0, sl, #0, 8
    3974:	04000005 	streq	r0, [r0], #-5
    3978:	000436bb 			; <UNDEFINED> instruction: 0x000436bb
    397c:	ec0a0800 	stc	8, cr0, [sl], {-0}
    3980:	04000000 	streq	r0, [r0], #-0
    3984:	000436bc 			; <UNDEFINED> instruction: 0x000436bc
    3988:	960a0c00 	strls	r0, [sl], -r0, lsl #24
    398c:	04000006 	streq	r0, [r0], #-6
    3990:	000436bd 			; <UNDEFINED> instruction: 0x000436bd
    3994:	060a1000 	streq	r1, [sl], -r0
    3998:	04000004 	streq	r0, [r0], #-4
    399c:	000436be 			; <UNDEFINED> instruction: 0x000436be
    39a0:	6c0a1400 	cfstrsvs	mvf1, [sl], {-0}
    39a4:	04000000 	streq	r0, [r0], #-0
    39a8:	000436bf 			; <UNDEFINED> instruction: 0x000436bf
    39ac:	a30a1800 	movwge	r1, #43008	; 0xa800
    39b0:	04000005 	streq	r0, [r0], #-5
    39b4:	000436c0 	andeq	r3, r4, r0, asr #13
    39b8:	1c0a1c00 	stcne	12, cr1, [sl], {-0}
    39bc:	04000000 	streq	r0, [r0], #-0
    39c0:	000436c1 	andeq	r3, r4, r1, asr #13
    39c4:	04002000 	streq	r2, [r0], #-0
    39c8:	0000065e 	andeq	r0, r0, lr, asr r6
    39cc:	0476c304 	ldrbteq	ip, [r6], #-772	; 0x304
    39d0:	7a130000 	bvc	4c39d8 <__Stack_Size+0x4c35d8>
    39d4:	01000015 	tsteq	r0, r5, lsl r0
    39d8:	0001d735 	andeq	sp, r1, r5, lsr r7
    39dc:	00107400 	andseq	r7, r0, r0, lsl #8
    39e0:	00002408 	andeq	r2, r0, r8, lsl #8
    39e4:	239c0100 	orrscs	r0, ip, #0, 2
    39e8:	14000005 	strne	r0, [r0], #-5
    39ec:	00001454 	andeq	r1, r0, r4, asr r4
    39f0:	004c3501 	subeq	r3, ip, r1, lsl #10
    39f4:	159f0000 	ldrne	r0, [pc]	; 39fc <__Stack_Size+0x35fc>
    39f8:	13000000 	movwne	r0, #0
    39fc:	00001535 	andeq	r1, r0, r5, lsr r5
    3a00:	01d76301 	bicseq	r6, r7, r1, lsl #6
    3a04:	10980000 	addsne	r0, r8, r0
    3a08:	00240800 	eoreq	r0, r4, r0, lsl #16
    3a0c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a10:	0000054c 	andeq	r0, r0, ip, asr #10
    3a14:	00145414 	andseq	r5, r4, r4, lsl r4
    3a18:	4c630100 	stfmie	f0, [r3], #-0
    3a1c:	c0000000 	andgt	r0, r0, r0
    3a20:	00000015 	andeq	r0, r0, r5, lsl r0
    3a24:	00165813 	andseq	r5, r6, r3, lsl r8
    3a28:	d79b0100 	ldrle	r0, [fp, r0, lsl #2]
    3a2c:	bc000001 	stclt	0, cr0, [r0], {1}
    3a30:	90080010 	andls	r0, r8, r0, lsl r0
    3a34:	01000000 	mrseq	r0, (UNDEF: 0)
    3a38:	0005b69c 	muleq	r5, ip, r6
    3a3c:	14541400 	ldrbne	r1, [r4], #-1024	; 0x400
    3a40:	9b010000 	blls	43a48 <__Stack_Size+0x43648>
    3a44:	0000004c 	andeq	r0, r0, ip, asr #32
    3a48:	000015e1 	andeq	r1, r0, r1, ror #11
    3a4c:	0010dc15 	andseq	sp, r0, r5, lsl ip
    3a50:	00001c08 	andeq	r1, r0, r8, lsl #24
    3a54:	00059100 	andeq	r9, r5, r0, lsl #2
    3a58:	03a81600 			; <UNDEFINED> instruction: 0x03a81600
    3a5c:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3a60:	0000005e 	andeq	r0, r0, lr, asr r0
    3a64:	00001602 	andeq	r1, r0, r2, lsl #12
    3a68:	11001700 	tstne	r0, r0, lsl #14
    3a6c:	00300800 	eorseq	r0, r0, r0, lsl #16
    3a70:	aa160000 	bge	583a78 <__Stack_Size+0x583678>
    3a74:	01000016 	tsteq	r0, r6, lsl r0
    3a78:	00005ec3 	andeq	r5, r0, r3, asr #29
    3a7c:	00161600 	andseq	r1, r6, r0, lsl #12
    3a80:	16c61800 	strbne	r1, [r6], r0, lsl #16
    3a84:	c4010000 	strgt	r0, [r1], #-0
    3a88:	0000005e 	andeq	r0, r0, lr, asr r0
    3a8c:	c9190000 	ldmdbgt	r9, {}	; <UNPREDICTABLE>
    3a90:	01000013 	tsteq	r0, r3, lsl r0
    3a94:	114c01e0 	smlalttne	r0, ip, r0, r1
    3a98:	00a80800 	adceq	r0, r8, r0, lsl #16
    3a9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3aa0:	0000067b 	andeq	r0, r0, fp, ror r6
    3aa4:	0016961a 	andseq	r9, r6, sl, lsl r6
    3aa8:	01e20100 	mvneq	r0, r0, lsl #2
    3aac:	0000067b 	andeq	r0, r0, fp, ror r6
    3ab0:	00001647 	andeq	r1, r0, r7, asr #12
    3ab4:	00164b1a 	andseq	r4, r6, sl, lsl fp
    3ab8:	01e30100 	mvneq	r0, r0, lsl #2
    3abc:	0000003a 	andeq	r0, r0, sl, lsr r0
    3ac0:	0000165c 	andeq	r1, r0, ip, asr r6
    3ac4:	0005cf1a 	andeq	ip, r5, sl, lsl pc
    3ac8:	01e40100 	mvneq	r0, r0, lsl #2
    3acc:	0000003a 	andeq	r0, r0, sl, lsr r0
    3ad0:	000016a0 	andeq	r1, r0, r0, lsr #13
    3ad4:	00139b1a 	andseq	r9, r3, sl, lsl fp
    3ad8:	01e60100 	mvneq	r0, r0, lsl #2
    3adc:	000001d7 	ldrdeq	r0, [r0], -r7
    3ae0:	000016eb 	andeq	r1, r0, fp, ror #13
    3ae4:	0014541a 	andseq	r5, r4, sl, lsl r4
    3ae8:	01e70100 	mvneq	r0, r0, lsl #2
    3aec:	0000003a 	andeq	r0, r0, sl, lsr r0
    3af0:	00001709 	andeq	r1, r0, r9, lsl #14
    3af4:	00148a1b 	andseq	r8, r4, fp, lsl sl
    3af8:	02100100 	andseq	r0, r0, #0, 2
    3afc:	080011d0 	stmdaeq	r0, {r4, r6, r7, r8, ip}
    3b00:	00119e1c 	andseq	r9, r1, ip, lsl lr
    3b04:	00063808 	andeq	r3, r6, r8, lsl #16
    3b08:	50011d00 	andpl	r1, r1, r0, lsl #26
    3b0c:	00007502 	andeq	r7, r0, r2, lsl #10
    3b10:	0011a61e 	andseq	sl, r1, lr, lsl r6
    3b14:	000d1c08 	andeq	r1, sp, r8, lsl #24
    3b18:	00064b00 	andeq	r4, r6, r0, lsl #22
    3b1c:	50011d00 	andpl	r1, r1, r0, lsl #26
    3b20:	1e003001 	cdpne	0, 0, cr3, cr0, cr1, {0}
    3b24:	080011b0 	stmdaeq	r0, {r4, r5, r7, r8, ip}
    3b28:	00000d32 	andeq	r0, r0, r2, lsr sp
    3b2c:	00000665 	andeq	r0, r0, r5, ror #12
    3b30:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    3b34:	011d0075 	tsteq	sp, r5, ror r0
    3b38:	00790250 	rsbseq	r0, r9, r0, asr r2
    3b3c:	11b81f00 			; <UNDEFINED> instruction: 0x11b81f00
    3b40:	0d4d0800 	stcleq	8, cr0, [sp, #-0]
    3b44:	011d0000 	tsteq	sp, r0
    3b48:	00750251 	rsbseq	r0, r5, r1, asr r2
    3b4c:	0150011d 	cmpeq	r0, sp, lsl r1
    3b50:	0b000030 	bleq	3c18 <__Stack_Size+0x3818>
    3b54:	00026a04 	andeq	r6, r2, r4, lsl #20
    3b58:	13af2000 			; <UNDEFINED> instruction: 0x13af2000
    3b5c:	4a010000 	bmi	43b64 <__Stack_Size+0x43764>
    3b60:	0000020d 	andeq	r0, r0, sp, lsl #4
    3b64:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
    3b68:	00000038 	andeq	r0, r0, r8, lsr r0
    3b6c:	74139c01 	ldrvc	r9, [r3], #-3073	; 0xc01
    3b70:	01000014 	tsteq	r0, r4, lsl r0
    3b74:	00020d78 	andeq	r0, r2, r8, ror sp
    3b78:	00122c00 	andseq	r2, r2, r0, lsl #24
    3b7c:	00004808 	andeq	r4, r0, r8, lsl #16
    3b80:	be9c0100 	fmllte	f0, f4, f0
    3b84:	21000006 	tstcs	r0, r6
    3b88:	01006552 	tsteq	r0, r2, asr r5
    3b8c:	00020d7a 	andeq	r0, r2, sl, ror sp
    3b90:	00174700 	andseq	r4, r7, r0, lsl #14
    3b94:	94130000 	ldrls	r0, [r3], #-0
    3b98:	01000015 	tsteq	r0, r5, lsl r0
    3b9c:	00020de9 	andeq	r0, r2, r9, ror #27
    3ba0:	00127400 	andseq	r7, r2, r0, lsl #8
    3ba4:	0000d008 	andeq	sp, r0, r8
    3ba8:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    3bac:	16000007 	strne	r0, [r0], -r7
    3bb0:	000013f2 	strdeq	r1, [r0], -r2
    3bb4:	003aeb01 	eorseq	lr, sl, r1, lsl #22
    3bb8:	17650000 	strbne	r0, [r5, -r0]!
    3bbc:	62160000 	andsvs	r0, r6, #0
    3bc0:	0100000d 	tsteq	r0, sp
    3bc4:	00003aec 	andeq	r3, r0, ip, ror #21
    3bc8:	00179d00 	andseq	r9, r7, r0, lsl #26
    3bcc:	12901700 	addsne	r1, r0, #0, 14
    3bd0:	009e0800 	addseq	r0, lr, r0, lsl #16
    3bd4:	04180000 	ldreq	r0, [r8], #-0
    3bd8:	01000015 	tsteq	r0, r5, lsl r0
    3bdc:	000796f6 	strdeq	r9, [r7], -r6
    3be0:	16aa1600 	strtne	r1, [sl], r0, lsl #12
    3be4:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    3be8:	0000003a 	andeq	r0, r0, sl, lsr r0
    3bec:	000017c6 	andeq	r1, r0, r6, asr #15
    3bf0:	0016c616 	andseq	ip, r6, r6, lsl r6
    3bf4:	3af80100 	bcc	ffe03ffc <BootRAM+0xed7479d>
    3bf8:	ef000000 	svc	0x00000000
    3bfc:	21000017 	tstcs	r0, r7, lsl r0
    3c00:	00504572 	subseq	r4, r0, r2, ror r5
    3c04:	003af901 	eorseq	pc, sl, r1, lsl #18
    3c08:	17c60000 	strbne	r0, [r6, r0]
    3c0c:	10150000 	andsne	r0, r5, r0
    3c10:	12080013 	andne	r0, r8, #19
    3c14:	54000000 	strpl	r0, [r0], #-0
    3c18:	1a000007 	bne	3c3c <__Stack_Size+0x383c>
    3c1c:	0000045b 	andeq	r0, r0, fp, asr r4
    3c20:	4c012f01 	stcmi	15, cr2, [r1], {1}
    3c24:	07000000 	streq	r0, [r0, -r0]
    3c28:	00000018 	andeq	r0, r0, r8, lsl r0
    3c2c:	0012ea1e 	andseq	lr, r2, lr, lsl sl
    3c30:	000d6408 	andeq	r6, sp, r8, lsl #8
    3c34:	00076800 	andeq	r6, r7, r0, lsl #16
    3c38:	50011d00 	andpl	r1, r1, r0, lsl #26
    3c3c:	00007402 	andeq	r7, r0, r2, lsl #8
    3c40:	0012f21e 	andseq	pc, r2, lr, lsl r2	; <UNPREDICTABLE>
    3c44:	000d7608 	andeq	r7, sp, r8, lsl #12
    3c48:	00078200 	andeq	r8, r7, r0, lsl #4
    3c4c:	51011d00 	tstpl	r1, r0, lsl #26
    3c50:	1d300802 	ldcne	8, cr0, [r0, #-8]!
    3c54:	74025001 	strvc	r5, [r2], #-1
    3c58:	0a220000 	beq	883c60 <__Stack_Size+0x883860>
    3c5c:	8d080013 	stchi	0, cr0, [r8, #-76]	; 0xffffffb4
    3c60:	2200000d 	andcs	r0, r0, #13
    3c64:	08001310 	stmdaeq	r0, {r4, r8, r9, ip}
    3c68:	00000da4 	andeq	r0, r0, r4, lsr #27
    3c6c:	040b0000 	streq	r0, [fp], #-0
    3c70:	0000029a 	muleq	r0, sl, r2
    3c74:	0014ba23 	andseq	fp, r4, r3, lsr #20
    3c78:	01420100 	mrseq	r0, (UNDEF: 82)
    3c7c:	0000020d 	andeq	r0, r0, sp, lsl #4
    3c80:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
    3c84:	00000084 	andeq	r0, r0, r4, lsl #1
    3c88:	082b9c01 	stmdaeq	fp!, {r0, sl, fp, ip, pc}
    3c8c:	c61a0000 	ldrgt	r0, [sl], -r0
    3c90:	01000016 	tsteq	r0, r6, lsl r0
    3c94:	003a0144 	eorseq	r0, sl, r4, asr #2
    3c98:	18350000 	ldmdane	r5!, {}	; <UNPREDICTABLE>
    3c9c:	aa1a0000 	bge	683ca4 <__Stack_Size+0x6838a4>
    3ca0:	01000016 	tsteq	r0, r6, lsl r0
    3ca4:	003a0145 	eorseq	r0, sl, r5, asr #2
    3ca8:	185d0000 	ldmdane	sp, {}^	; <UNPREDICTABLE>
    3cac:	72240000 	eorvc	r0, r4, #0
    3cb0:	01005045 	tsteq	r0, r5, asr #32
    3cb4:	003a0146 	eorseq	r0, sl, r6, asr #2
    3cb8:	185d0000 	ldmdane	sp, {}^	; <UNPREDICTABLE>
    3cbc:	621a0000 	andsvs	r0, sl, #0
    3cc0:	0100000d 	tsteq	r0, sp
    3cc4:	003a0147 	eorseq	r0, sl, r7, asr #2
    3cc8:	18920000 	ldmne	r2, {}	; <UNPREDICTABLE>
    3ccc:	28250000 	stmdacs	r5!, {}	; <UNPREDICTABLE>
    3cd0:	10000005 	andne	r0, r0, r5
    3cd4:	1a000008 	bne	3cfc <__Stack_Size+0x38fc>
    3cd8:	0000045b 	andeq	r0, r0, fp, asr r4
    3cdc:	4c016301 	stcmi	3, cr6, [r1], {1}
    3ce0:	b0000000 	andlt	r0, r0, r0
    3ce4:	00000018 	andeq	r0, r0, r8, lsl r0
    3ce8:	00139c17 	andseq	r9, r3, r7, lsl ip
    3cec:	00001008 	andeq	r1, r0, r8
    3cf0:	045b1a00 	ldrbeq	r1, [fp], #-2560	; 0xa00
    3cf4:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3cf8:	00004c01 	andeq	r4, r0, r1, lsl #24
    3cfc:	0018d800 	andseq	sp, r8, r0, lsl #16
    3d00:	26000000 	strcs	r0, [r0], -r0
    3d04:	00001509 	andeq	r1, r0, r9, lsl #10
    3d08:	0d017801 	stceq	8, cr7, [r1, #-4]
    3d0c:	c8000002 	stmdagt	r0, {r1}
    3d10:	24080013 	strcs	r0, [r8], #-19
    3d14:	01000000 	mrseq	r0, (UNDEF: 0)
    3d18:	083d279c 	ldmdaeq	sp!, {r2, r3, r4, r7, r8, r9, sl, sp}
    3d1c:	92010000 	andls	r0, r1, #0
    3d20:	0001d701 	andeq	sp, r1, r1, lsl #14
    3d24:	0013ec00 	andseq	lr, r3, r0, lsl #24
    3d28:	00001c08 	andeq	r1, r0, r8, lsl #24
    3d2c:	8c9c0100 	ldfhis	f0, [ip], {0}
    3d30:	28000008 	stmdacs	r0, {r3}
    3d34:	00001454 	andeq	r1, r0, r4, asr r4
    3d38:	4c019201 	sfmmi	f1, 1, [r1], {1}
    3d3c:	f1000000 	cps	#0
    3d40:	28000018 	stmdacs	r0, {r3, r4}
    3d44:	00001523 	andeq	r1, r0, r3, lsr #10
    3d48:	8c019201 	sfmhi	f1, 1, [r1], {1}
    3d4c:	12000008 	andne	r0, r0, #8
    3d50:	1a000019 	bne	3dbc <__Stack_Size+0x39bc>
    3d54:	0000031d 	andeq	r0, r0, sp, lsl r3
    3d58:	3a019401 	bcc	68d64 <__Stack_Size+0x68964>
    3d5c:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    3d60:	00000019 	andeq	r0, r0, r9, lsl r0
    3d64:	01dd040b 	bicseq	r0, sp, fp, lsl #8
    3d68:	8d270000 	stchi	0, cr0, [r7, #-0]
    3d6c:	01000013 	tsteq	r0, r3, lsl r0
    3d70:	005e03c9 	subseq	r0, lr, r9, asr #7
    3d74:	14080000 	strne	r0, [r8], #-0
    3d78:	00400800 	subeq	r0, r0, r0, lsl #16
    3d7c:	9c010000 	stcls	0, cr0, [r1], {-0}
    3d80:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    3d84:	0014161f 	andseq	r1, r4, pc, lsl r6
    3d88:	000d8d08 	andeq	r8, sp, r8, lsl #26
    3d8c:	50011d00 	andpl	r1, r1, r0, lsl #26
    3d90:	00003001 	andeq	r3, r0, r1
    3d94:	00140029 	andseq	r0, r4, r9, lsr #32
    3d98:	021b0100 	andseq	r0, fp, #0, 2
    3d9c:	0008f601 	andeq	pc, r8, r1, lsl #12
    3da0:	13862a00 	orrne	r2, r6, #0, 20
    3da4:	1d010000 	stcne	0, cr0, [r1, #-0]
    3da8:	00020d02 	andeq	r0, r2, r2, lsl #26
    3dac:	14a22a00 	strtne	r2, [r2], #2560	; 0xa00
    3db0:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    3db4:	00003a02 	andeq	r3, r0, r2, lsl #20
    3db8:	05cf2a00 	strbeq	r2, [pc, #2560]	; 47c0 <__Stack_Size+0x43c0>
    3dbc:	1f010000 	svcne	0x00010000
    3dc0:	00003a02 	andeq	r3, r0, r2, lsl #20
    3dc4:	13fb2b00 	mvnsne	r2, #0, 22
    3dc8:	8b010000 	blhi	43dd0 <__Stack_Size+0x439d0>
    3dcc:	02290002 	eoreq	r0, r9, #2
    3dd0:	01000014 	tsteq	r0, r4, lsl r0
    3dd4:	78010297 	stmdavc	r1, {r0, r1, r2, r4, r7, r9}
    3dd8:	2a000009 	bcs	3e04 <__Stack_Size+0x3a04>
    3ddc:	00000965 	andeq	r0, r0, r5, ror #18
    3de0:	64029901 	strvs	r9, [r2], #-2305	; 0x901
    3de4:	2a000002 	bcs	3df4 <__Stack_Size+0x39f4>
    3de8:	00001386 	andeq	r1, r0, r6, lsl #7
    3dec:	0d029a01 	vstreq	s18, [r2, #-4]
    3df0:	2a000002 	bcs	3e00 <__Stack_Size+0x3a00>
    3df4:	000016f5 	strdeq	r1, [r0], -r5
    3df8:	3a029b01 	bcc	aaa04 <__Stack_Size+0xaa604>
    3dfc:	2a000000 	bcs	3e04 <__Stack_Size+0x3a04>
    3e00:	000016aa 	andeq	r1, r0, sl, lsr #13
    3e04:	3a029d01 	bcc	ab210 <__Stack_Size+0xaae10>
    3e08:	2a000000 	bcs	3e10 <__Stack_Size+0x3a10>
    3e0c:	000013a6 	andeq	r1, r0, r6, lsr #7
    3e10:	3a029d01 	bcc	ab21c <__Stack_Size+0xaae1c>
    3e14:	2a000000 	bcs	3e1c <__Stack_Size+0x3a1c>
    3e18:	0000031d 	andeq	r0, r0, sp, lsl r3
    3e1c:	3a029e01 	bcc	ab628 <__Stack_Size+0xab228>
    3e20:	2a000000 	bcs	3e28 <__Stack_Size+0x3a28>
    3e24:	00000d62 	andeq	r0, r0, r2, ror #26
    3e28:	3a029e01 	bcc	ab634 <__Stack_Size+0xab234>
    3e2c:	2c000000 	stccs	0, cr0, [r0], {-0}
    3e30:	00000969 	andeq	r0, r0, r9, ror #18
    3e34:	00140e2a 	andseq	r0, r4, sl, lsr #28
    3e38:	02a90100 	adceq	r0, r9, #0, 2
    3e3c:	0000005e 	andeq	r0, r0, lr, asr r0
    3e40:	942a2d00 	strtls	r2, [sl], #-3328	; 0xd00
    3e44:	01000002 	tsteq	r0, r2
    3e48:	006f0325 	rsbeq	r0, pc, r5, lsr #6
    3e4c:	00000000 	andeq	r0, r0, r0
    3e50:	0012c423 	andseq	ip, r2, r3, lsr #8
    3e54:	034c0100 	movteq	r0, #49408	; 0xc100
    3e58:	0000005e 	andeq	r0, r0, lr, asr r0
    3e5c:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
    3e60:	000002dc 	ldrdeq	r0, [r0], -ip
    3e64:	0ae69c01 	beq	ff9aae70 <BootRAM+0xe91b611>
    3e68:	042e0000 	strteq	r0, [lr], #-0
    3e6c:	b0034f01 	andlt	r4, r3, r1, lsl #30
    3e70:	2f000009 	svccs	0x00000009
    3e74:	51010062 	tstpl	r1, r2, rrx
    3e78:	0001d703 	andeq	sp, r1, r3, lsl #14
    3e7c:	00772f00 	rsbseq	r2, r7, r0, lsl #30
    3e80:	e6035201 	str	r5, [r3], -r1, lsl #4
    3e84:	0000000a 	andeq	r0, r0, sl
    3e88:	0016911a 	andseq	r9, r6, sl, lsl r1
    3e8c:	03530100 	cmpeq	r3, #0, 2
    3e90:	00000992 	muleq	r0, r2, r9
    3e94:	0000196f 	andeq	r1, r0, pc, ror #18
    3e98:	0008bc30 	andeq	fp, r8, r0, lsr ip
    3e9c:	00148e00 	andseq	r8, r4, r0, lsl #28
    3ea0:	0000c408 	andeq	ip, r0, r8, lsl #8
    3ea4:	03670100 	cmneq	r7, #0, 2
    3ea8:	00000a40 	andeq	r0, r0, r0, asr #20
    3eac:	00148e17 	andseq	r8, r4, r7, lsl lr
    3eb0:	0000c408 	andeq	ip, r0, r8, lsl #8
    3eb4:	08c93100 	stmiaeq	r9, {r8, ip, sp}^
    3eb8:	19920000 	ldmibne	r2, {}	; <UNPREDICTABLE>
    3ebc:	d5310000 	ldrle	r0, [r1, #-0]!
    3ec0:	3b000008 	blcc	3ee8 <__Stack_Size+0x3ae8>
    3ec4:	3100001a 	tstcc	r0, sl, lsl r0
    3ec8:	000008e1 	andeq	r0, r0, r1, ror #17
    3ecc:	00001a4e 	andeq	r1, r0, lr, asr #20
    3ed0:	0008ed32 	andeq	lr, r8, r2, lsr sp
    3ed4:	00154c00 	andseq	r4, r5, r0, lsl #24
    3ed8:	149e2208 	ldrne	r2, [lr], #520	; 0x208
    3edc:	06810800 	streq	r0, [r1], r0, lsl #16
    3ee0:	d81c0000 	ldmdale	ip, {}	; <UNPREDICTABLE>
    3ee4:	1a080014 	bne	203f3c <__Stack_Size+0x203b3c>
    3ee8:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    3eec:	74025001 	strvc	r5, [r2], #-1
    3ef0:	ee220000 	cdp	0, 2, cr0, cr2, cr0, {0}
    3ef4:	2b080014 	blcs	203f4c <__Stack_Size+0x203b4c>
    3ef8:	22000008 	andcs	r0, r0, #8
    3efc:	0800150a 	stmdaeq	r0, {r1, r3, r8, sl, ip}
    3f00:	000006be 			; <UNDEFINED> instruction: 0x000006be
    3f04:	00151822 	andseq	r1, r5, r2, lsr #16
    3f08:	00069608 	andeq	r9, r6, r8, lsl #12
    3f0c:	152a2200 	strne	r2, [sl, #-512]!	; 0x200
    3f10:	079c0800 	ldreq	r0, [ip, r0, lsl #16]
    3f14:	00000000 	andeq	r0, r0, r0
    3f18:	0008f633 	andeq	pc, r8, r3, lsr r6	; <UNPREDICTABLE>
    3f1c:	00155200 	andseq	r5, r5, r0, lsl #4
    3f20:	00054808 	andeq	r4, r5, r8, lsl #16
    3f24:	036c0100 	cmneq	ip, #0, 2
    3f28:	00000adc 	ldrdeq	r0, [r0], -ip
    3f2c:	00054834 	andeq	r4, r5, r4, lsr r8
    3f30:	09033100 	stmdbeq	r3, {r8, ip, sp}
    3f34:	1a6d0000 	bne	1b43f3c <__Stack_Size+0x1b43b3c>
    3f38:	0f310000 	svceq	0x00310000
    3f3c:	04000009 	streq	r0, [r0], #-9
    3f40:	3100001b 	tstcc	r0, fp, lsl r0
    3f44:	0000091b 	andeq	r0, r0, fp, lsl r9
    3f48:	00001b44 	andeq	r1, r0, r4, asr #22
    3f4c:	00092731 	andeq	r2, r9, r1, lsr r7
    3f50:	001b6d00 	andseq	r6, fp, r0, lsl #26
    3f54:	09333100 	ldmdbeq	r3!, {r8, ip, sp}
    3f58:	1b800000 	blne	fe003f60 <BootRAM+0xcf74701>
    3f5c:	3f310000 	svccc	0x00310000
    3f60:	9b000009 	blls	3f8c <__Stack_Size+0x3b8c>
    3f64:	3100001b 	tstcc	r0, fp, lsl r0
    3f68:	0000094b 	andeq	r0, r0, fp, asr #18
    3f6c:	00001bbb 			; <UNDEFINED> instruction: 0x00001bbb
    3f70:	00155c15 	andseq	r5, r5, r5, lsl ip
    3f74:	00002c08 	andeq	r2, r0, r8, lsl #24
    3f78:	000aaf00 	andeq	sl, sl, r0, lsl #30
    3f7c:	095c3100 	ldmdbeq	ip, {r8, ip, sp}^
    3f80:	1bce0000 	blne	ff383f88 <BootRAM+0xe2f4729>
    3f84:	15000000 	strne	r0, [r0, #-0]
    3f88:	08001690 	stmdaeq	r0, {r4, r7, r9, sl, ip}
    3f8c:	00000060 	andeq	r0, r0, r0, rrx
    3f90:	00000ace 	andeq	r0, r0, lr, asr #21
    3f94:	00096a35 	andeq	r6, r9, r5, lsr sl
    3f98:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3f9c:	0016ee22 	andseq	lr, r6, r2, lsr #28
    3fa0:	0005b608 	andeq	fp, r5, r8, lsl #12
    3fa4:	52360000 	eorspl	r0, r6, #0
    3fa8:	1d080016 	stcne	0, cr0, [r8, #-88]	; 0xffffffa8
    3fac:	74025001 	strvc	r5, [r2], #-1
    3fb0:	00000000 	andeq	r0, r0, r0
    3fb4:	00170022 	andseq	r0, r7, r2, lsr #32
    3fb8:	00089208 	andeq	r9, r8, r8, lsl #4
    3fbc:	040b0000 	streq	r0, [fp], #-0
    3fc0:	0000004c 	andeq	r0, r0, ip, asr #32
    3fc4:	0016dd29 	andseq	sp, r6, r9, lsr #26
    3fc8:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    3fcc:	000b2c01 	andeq	r2, fp, r1, lsl #24
    3fd0:	16962a00 	ldrne	r2, [r6], r0, lsl #20
    3fd4:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3fd8:	00067b01 	andeq	r7, r6, r1, lsl #22
    3fdc:	144e2a00 	strbne	r2, [lr], #-2560	; 0xa00
    3fe0:	aa010000 	bge	43fe8 <__Stack_Size+0x43be8>
    3fe4:	00003a01 	andeq	r3, r0, r1, lsl #20
    3fe8:	9f2a2d00 	svcls	0x002a2d00
    3fec:	01000013 	tsteq	r0, r3, lsl r0
    3ff0:	01d701b0 	ldrheq	r0, [r7, #16]
    3ff4:	542a0000 	strtpl	r0, [sl], #-0
    3ff8:	01000014 	tsteq	r0, r4, lsl r0
    3ffc:	003a01b1 	ldrhteq	r0, [sl], -r1
    4000:	00000000 	andeq	r0, r0, r0
    4004:	00130e23 	andseq	r0, r3, r3, lsr #28
    4008:	03a00100 	moveq	r0, #0, 2
    400c:	0000005e 	andeq	r0, r0, lr, asr r0
    4010:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
    4014:	000000c8 	andeq	r0, r0, r8, asr #1
    4018:	0bfe9c01 	bleq	fffab024 <BootRAM+0xef1b7c5>
    401c:	cf1a0000 	svcgt	0x001a0000
    4020:	01000005 	tsteq	r0, r5
    4024:	003a03a2 	eorseq	r0, sl, r2, lsr #7
    4028:	1bf80000 	blne	ffe04030 <BootRAM+0xed747d1>
    402c:	ec300000 	ldc	0, cr0, [r0], #-0
    4030:	3400000a 	strcc	r0, [r0], #-10
    4034:	7e080017 	mcrvc	0, 0, r0, cr8, cr7, {0}
    4038:	01000000 	mrseq	r0, (UNDEF: 0)
    403c:	0bf403a6 	bleq	ffd04edc <BootRAM+0xec7567d>
    4040:	34170000 	ldrcc	r0, [r7], #-0
    4044:	7e080017 	mcrvc	0, 0, r0, cr8, cr7, {0}
    4048:	31000000 	mrscc	r0, (UNDEF: 0)
    404c:	00000af9 	strdeq	r0, [r0], -r9
    4050:	00001c45 	andeq	r1, r0, r5, asr #24
    4054:	000b0531 	andeq	r0, fp, r1, lsr r5
    4058:	001c5a00 	andseq	r5, ip, r0, lsl #20
    405c:	173c1500 	ldrne	r1, [ip, -r0, lsl #10]!
    4060:	002a0800 	eoreq	r0, sl, r0, lsl #16
    4064:	0bde0000 	bleq	ff78406c <BootRAM+0xe6f480d>
    4068:	12310000 	eorsne	r0, r1, #0
    406c:	6d00000b 	stcvs	0, cr0, [r0, #-44]	; 0xffffffd4
    4070:	3100001c 	tstcc	r0, ip, lsl r0
    4074:	00000b1e 	andeq	r0, r0, lr, lsl fp
    4078:	00001c8b 	andeq	r1, r0, fp, lsl #25
    407c:	0017481c 	andseq	r4, r7, ip, lsl r8
    4080:	000bb408 	andeq	fp, fp, r8, lsl #8
    4084:	50011d00 	andpl	r1, r1, r0, lsl #26
    4088:	00007602 	andeq	r7, r0, r2, lsl #12
    408c:	00175c1e 	andseq	r5, r7, lr, lsl ip
    4090:	000db608 	andeq	fp, sp, r8, lsl #12
    4094:	000bc700 	andeq	ip, fp, r0, lsl #14
    4098:	50011d00 	andpl	r1, r1, r0, lsl #26
    409c:	1f003001 	svcne	0x00003001
    40a0:	08001766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, ip}
    40a4:	00000dcc 	andeq	r0, r0, ip, asr #27
    40a8:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    40ac:	011d0076 	tsteq	sp, r6, ror r0
    40b0:	00770250 	rsbseq	r0, r7, r0, asr r2
    40b4:	7a1f0000 	bvc	7c40bc <__Stack_Size+0x7c3cbc>
    40b8:	4d080017 	stcmi	0, cr0, [r8, #-92]	; 0xffffffa4
    40bc:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    40c0:	30015101 	andcc	r5, r1, r1, lsl #2
    40c4:	0150011d 	cmpeq	r0, sp, lsl r1
    40c8:	00000030 	andeq	r0, r0, r0, lsr r0
    40cc:	0017d237 	andseq	sp, r7, r7, lsr r2
    40d0:	00089208 	andeq	r9, r8, r8, lsl #4
    40d4:	21380000 	teqcs	r8, r0
    40d8:	01000000 	mrseq	r0, (UNDEF: 0)
    40dc:	17ec03dd 	ubfxne	r0, sp, #7, #13
    40e0:	00380800 	eorseq	r0, r8, r0, lsl #16
    40e4:	9c010000 	stcls	0, cr0, [r1], {-0}
    40e8:	00000c43 	andeq	r0, r0, r3, asr #24
    40ec:	6c615639 	stclvs	6, cr5, [r1], #-228	; 0xffffff1c
    40f0:	03dd0100 	bicseq	r0, sp, #0, 2
    40f4:	0000005e 	andeq	r0, r0, lr, asr r0
    40f8:	00001cbe 			; <UNDEFINED> instruction: 0x00001cbe
    40fc:	01006924 	tsteq	r0, r4, lsr #18
    4100:	003a03df 	ldrsbteq	r0, [sl], -pc
    4104:	1cdf0000 	ldclne	0, cr0, [pc], {0}
    4108:	6e240000 	cdpvs	0, 2, cr0, cr4, cr0, {0}
    410c:	01005045 	tsteq	r0, r5, asr #32
    4110:	003a03e0 	eorseq	r0, sl, r0, ror #7
    4114:	1cfe0000 	ldclne	0, cr0, [lr]
    4118:	23000000 	movwcs	r0, #0
    411c:	00001302 	andeq	r1, r0, r2, lsl #6
    4120:	5e037801 	cdppl	8, 0, cr7, cr3, cr1, {0}
    4124:	24000000 	strcs	r0, [r0], #-0
    4128:	5c080018 	stcpl	0, cr0, [r8], {24}
    412c:	01000000 	mrseq	r0, (UNDEF: 0)
    4130:	000c899c 	muleq	ip, ip, r9
    4134:	05cf1a00 	strbeq	r1, [pc, #2560]	; 4b3c <__Stack_Size+0x473c>
    4138:	7a010000 	bvc	44140 <__Stack_Size+0x43d40>
    413c:	00003a03 	andeq	r3, r0, r3, lsl #20
    4140:	001d1100 	andseq	r1, sp, r0, lsl #2
    4144:	18382200 	ldmdane	r8!, {r9, sp}
    4148:	05b60800 	ldreq	r0, [r6, #2048]!	; 0x800
    414c:	54220000 	strtpl	r0, [r2], #-0
    4150:	fe080018 	mcr2	0, 0, r0, cr8, cr8, {0}
    4154:	3700000b 	strcc	r0, [r0, -fp]
    4158:	08001872 	stmdaeq	r0, {r1, r4, r5, r6, fp, ip}
    415c:	00000892 	muleq	r0, r2, r8
    4160:	14683a00 	strbtne	r3, [r8], #-2560	; 0xa00
    4164:	f1010000 	setend	le
    4168:	00000003 	andeq	r0, r0, r3
    416c:	00000200 	andeq	r0, r0, r0, lsl #4
    4170:	3b9c0100 	blcc	fe704578 <BootRAM+0xd674d19>
    4174:	000005f4 	strdeq	r0, [r0], -r4
    4178:	046bec04 	strbteq	lr, [fp], #-3076	; 0xc04
    417c:	463b0000 	ldrtmi	r0, [fp], -r0
    4180:	04000002 	streq	r0, [r0], #-2
    4184:	00029aee 	andeq	r9, r2, lr, ror #21
    4188:	12d33b00 	sbcsne	r3, r3, #0, 22
    418c:	f2040000 	vhadd.s8	d0, d4, d0
    4190:	0000004c 	andeq	r0, r0, ip, asr #32
    4194:	0012de3b 	andseq	sp, r2, fp, lsr lr
    4198:	4cf30400 	cfldrdmi	mvd0, [r3]
    419c:	3b000000 	blcc	41a4 <__Stack_Size+0x3da4>
    41a0:	0000027c 	andeq	r0, r0, ip, ror r2
    41a4:	0cd22205 	lfmeq	f2, 2, [r2], {5}
    41a8:	040b0000 	streq	r0, [fp], #-0
    41ac:	00000381 	andeq	r0, r0, r1, lsl #7
    41b0:	00052f3b 	andeq	r2, r5, fp, lsr pc
    41b4:	e3250500 	teq	r5, #0, 10
    41b8:	0b00000c 	bleq	41f0 <__Stack_Size+0x3df0>
    41bc:	00046b04 	andeq	r6, r4, r4, lsl #22
    41c0:	13403b00 	movtne	r3, #2816	; 0xb00
    41c4:	2a050000 	bcs	1441cc <__Stack_Size+0x143dcc>
    41c8:	00000cf4 	strdeq	r0, [r0], -r4
    41cc:	04ef040b 	strbteq	r0, [pc], #1035	; 41d4 <__Stack_Size+0x3dd4>
    41d0:	bb3c0000 	bllt	f041d8 <__Stack_Size+0xf03dd8>
    41d4:	01000016 	tsteq	r0, r6, lsl r0
    41d8:	0002e524 	andeq	lr, r2, r4, lsr #10
    41dc:	0a030500 	beq	c55e4 <__Stack_Size+0xc51e4>
    41e0:	3c200003 	stccc	0, cr0, [r0], #-12
    41e4:	000014ed 	andeq	r1, r0, sp, ror #9
    41e8:	00942501 	addseq	r2, r4, r1, lsl #10
    41ec:	03050000 	movweq	r0, #20480	; 0x5000
    41f0:	20000b24 	andcs	r0, r0, r4, lsr #22
    41f4:	0012773d 	andseq	r7, r2, sp, lsr r7
    41f8:	02530700 	subseq	r0, r3, #0, 14
    41fc:	0000004c 	andeq	r0, r0, ip, asr #32
    4200:	00000d32 	andeq	r0, r0, r2, lsr sp
    4204:	00005e0d 	andeq	r5, r0, sp, lsl #28
    4208:	3a3e0000 	bcc	f84210 <__Stack_Size+0xf83e10>
    420c:	06000014 			; <UNDEFINED> instruction: 0x06000014
    4210:	000d4d19 	andeq	r4, sp, r9, lsl sp
    4214:	01d70d00 	bicseq	r0, r7, r0, lsl #26
    4218:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    421c:	0d000000 	stceq	0, cr0, [r0, #-0]
    4220:	0000004c 	andeq	r0, r0, ip, asr #32
    4224:	11493f00 	cmpne	r9, r0, lsl #30
    4228:	56070000 	strpl	r0, [r7], -r0
    422c:	000d6402 	andeq	r6, sp, r2, lsl #8
    4230:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4234:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    4238:	00000000 	andeq	r0, r0, r0
    423c:	0012833f 	andseq	r8, r2, pc, lsr r3
    4240:	024e0700 	subeq	r0, lr, #0, 14
    4244:	00000d76 	andeq	r0, r0, r6, ror sp
    4248:	00005e0d 	andeq	r5, r0, sp, lsl #28
    424c:	903f0000 	eorsls	r0, pc, r0
    4250:	07000012 	smladeq	r0, r2, r0, r0
    4254:	0d8d023a 	sfmeq	f0, 4, [sp, #232]	; 0xe8
    4258:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    425c:	0d000000 	stceq	0, cr0, [r0, #-0]
    4260:	0000004c 	andeq	r0, r0, ip, asr #32
    4264:	079a3f00 	ldreq	r3, [sl, r0, lsl #30]
    4268:	57070000 	strpl	r0, [r7, -r0]
    426c:	000da402 	andeq	sl, sp, r2, lsl #8
    4270:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4274:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    4278:	00000000 	andeq	r0, r0, r0
    427c:	000fbe3f 	andeq	fp, pc, pc, lsr lr	; <UNPREDICTABLE>
    4280:	024d0700 	subeq	r0, sp, #0, 14
    4284:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
    4288:	00005e0d 	andeq	r5, r0, sp, lsl #28
    428c:	483d0000 	ldmdami	sp!, {}	; <UNPREDICTABLE>
    4290:	07000010 	smladeq	r0, r0, r0, r0
    4294:	004c0254 	subeq	r0, ip, r4, asr r2
    4298:	0dcc0000 	stcleq	0, cr0, [ip]
    429c:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    42a0:	00000000 	andeq	r0, r0, r0
    42a4:	0015e740 	andseq	lr, r5, r0, asr #14
    42a8:	0d1a0600 	ldceq	6, cr0, [sl, #-0]
    42ac:	000001d7 	ldrdeq	r0, [r0], -r7
    42b0:	00004c0d 	andeq	r4, r0, sp, lsl #24
    42b4:	004c0d00 	subeq	r0, ip, r0, lsl #26
    42b8:	00000000 	andeq	r0, r0, r0
    42bc:	00000170 	andeq	r0, r0, r0, ror r1
    42c0:	13010004 	movwne	r0, #4100	; 0x1004
    42c4:	01040000 	mrseq	r0, (UNDEF: 4)
    42c8:	00000158 	andeq	r0, r0, r8, asr r1
    42cc:	00172b01 	andseq	r2, r7, r1, lsl #22
    42d0:	00092600 	andeq	r2, r9, r0, lsl #12
    42d4:	0005e800 	andeq	lr, r5, r0, lsl #16
    42d8:	00000000 	andeq	r0, r0, r0
    42dc:	0013da00 	andseq	sp, r3, r0, lsl #20
    42e0:	05040200 	streq	r0, [r4, #-512]	; 0x200
    42e4:	000001f6 	strdeq	r0, [r0], -r6
    42e8:	a5050202 	strge	r0, [r5, #-514]	; 0x202
    42ec:	02000006 	andeq	r0, r0, #6
    42f0:	06510601 	ldrbeq	r0, [r1], -r1, lsl #12
    42f4:	75030000 	strvc	r0, [r3, #-0]
    42f8:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    42fc:	00004524 	andeq	r4, r0, r4, lsr #10
    4300:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4304:	0000037b 	andeq	r0, r0, fp, ror r3
    4308:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    430c:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    4310:	02000000 	andeq	r0, r0, #0
    4314:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    4318:	75030000 	strvc	r0, [r3, #-0]
    431c:	26020038 			; <UNDEFINED> instruction: 0x26020038
    4320:	00000068 	andeq	r0, r0, r8, rrx
    4324:	4f080102 	svcmi	0x00080102
    4328:	04000006 	streq	r0, [r0], #-6
    432c:	00005e04 	andeq	r5, r0, r4, lsl #28
    4330:	143a0500 	ldrtne	r0, [sl], #-1280	; 0x500
    4334:	23010000 	movwcs	r0, #4096	; 0x1000
    4338:	08001880 	stmdaeq	r0, {r7, fp, ip}
    433c:	00000030 	andeq	r0, r0, r0, lsr r0
    4340:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
    4344:	45060000 	strmi	r0, [r6, #-0]
    4348:	01000017 	tsteq	r0, r7, lsl r0
    434c:	00006f23 	andeq	r6, r0, r3, lsr #30
    4350:	001d5700 	andseq	r5, sp, r0, lsl #14
    4354:	175a0600 	ldrbne	r0, [sl, -r0, lsl #12]
    4358:	23010000 	movwcs	r0, #4096	; 0x1000
    435c:	0000004c 	andeq	r0, r0, ip, asr #32
    4360:	00001d9c 	muleq	r0, ip, sp
    4364:	00173d06 	andseq	r3, r7, r6, lsl #26
    4368:	4c230100 	stfmis	f0, [r3], #-0
    436c:	bd000000 	stclt	0, cr0, [r0, #-0]
    4370:	0700001d 	smladeq	r0, sp, r0, r0
    4374:	2501006e 	strcs	r0, [r1, #-110]	; 0x6e
    4378:	0000003a 	andeq	r0, r0, sl, lsr r0
    437c:	69085201 	stmdbvs	r8, {r0, r9, ip, lr}
    4380:	3a260100 	bcc	984788 <__Stack_Size+0x984388>
    4384:	de000000 	cdple	0, 0, cr0, cr0, cr0, {0}
    4388:	0900001d 	stmdbeq	r0, {r0, r2, r3, r4}
    438c:	0000174e 	andeq	r1, r0, lr, asr #14
    4390:	003a2601 	eorseq	r2, sl, r1, lsl #12
    4394:	1e3d0000 	cdpne	0, 3, cr0, cr13, cr0, {0}
    4398:	54090000 	strpl	r0, [r9], #-0
    439c:	01000017 	tsteq	r0, r7, lsl r0
    43a0:	00003a26 	andeq	r3, r0, r6, lsr #20
    43a4:	001e7400 	andseq	r7, lr, r0, lsl #8
    43a8:	17660900 	strbne	r0, [r6, -r0, lsl #18]!
    43ac:	27010000 	strcs	r0, [r1, -r0]
    43b0:	000000fd 	strdeq	r0, [r0], -sp
    43b4:	00001e98 	muleq	r0, r8, lr
    43b8:	4c040400 	cfstrsmi	mvf0, [r4], {-0}
    43bc:	05000000 	streq	r0, [r0, #-0]
    43c0:	000015e7 	andeq	r1, r0, r7, ror #11
    43c4:	18b03c01 	ldmne	r0!, {r0, sl, fp, ip, sp}
    43c8:	00240800 	eoreq	r0, r4, r0, lsl #16
    43cc:	9c010000 	stcls	0, cr0, [r1], {-0}
    43d0:	0000016d 	andeq	r0, r0, sp, ror #2
    43d4:	00174506 	andseq	r4, r7, r6, lsl #10
    43d8:	6f3c0100 	svcvs	0x003c0100
    43dc:	d3000000 	movwle	r0, #0
    43e0:	0600001e 			; <UNDEFINED> instruction: 0x0600001e
    43e4:	0000175a 	andeq	r1, r0, sl, asr r7
    43e8:	004c3c01 	subeq	r3, ip, r1, lsl #24
    43ec:	1f0e0000 	svcne	0x000e0000
    43f0:	3d060000 	stccc	0, cr0, [r6, #-0]
    43f4:	01000017 	tsteq	r0, r7, lsl r0
    43f8:	00004c3c 	andeq	r4, r0, ip, lsr ip
    43fc:	001f2f00 	andseq	r2, pc, r0, lsl #30
    4400:	006e0700 	rsbeq	r0, lr, r0, lsl #14
    4404:	003a3e01 	eorseq	r3, sl, r1, lsl #28
    4408:	52010000 	andpl	r0, r1, #0
    440c:	01006908 	tsteq	r0, r8, lsl #18
    4410:	00003a3f 	andeq	r3, r0, pc, lsr sl
    4414:	001f5000 	andseq	r5, pc, r0
    4418:	17660900 	strbne	r0, [r6, -r0, lsl #18]!
    441c:	40010000 	andmi	r0, r1, r0
    4420:	0000016d 	andeq	r0, r0, sp, ror #2
    4424:	00001faf 	andeq	r1, r0, pc, lsr #31
    4428:	3a040400 	bcc	105430 <__Stack_Size+0x105030>
    442c:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	00160400 	andseq	r0, r6, r0, lsl #8
      54:	0b3a0e03 	bleq	e83868 <__Stack_Size+0xe83468>
      58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      5c:	35050000 	strcc	r0, [r5, #-0]
      60:	00134900 	andseq	r4, r3, r0, lsl #18
      64:	01040600 	tsteq	r4, r0, lsl #12
      68:	0b3a0b0b 	bleq	e82c9c <__Stack_Size+0xe8289c>
      6c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      70:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
      74:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      78:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      7c:	0b0b0113 	bleq	2c04d0 <__Stack_Size+0x2c00d0>
      80:	0b3b0b3a 	bleq	ec2d70 <__Stack_Size+0xec2970>
      84:	00001301 	andeq	r1, r0, r1, lsl #6
      88:	03000d09 	movweq	r0, #3337	; 0xd09
      8c:	3b0b3a0e 	blcc	2ce8cc <__Stack_Size+0x2ce4cc>
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0a00000b 	beq	c8 <_Minimum_Stack_Size-0x38>
      98:	0b0b000f 	bleq	2c00dc <__Stack_Size+0x2bfcdc>
      9c:	00001349 	andeq	r1, r0, r9, asr #6
      a0:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
      a4:	0c000019 	stceq	0, cr0, [r0], {25}
      a8:	0e030104 	adfeqs	f0, f3, f4
      ac:	0b3a0b0b 	bleq	e82ce0 <__Stack_Size+0xe828e0>
      b0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      b4:	130d0000 	movwne	r0, #53248	; 0xd000
      b8:	0b0e0301 	bleq	380cc4 <__Stack_Size+0x3808c4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	01150e00 	tsteq	r5, r0, lsl #28
      c8:	13491927 	movtne	r1, #39207	; 0x9927
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
      d4:	10000013 	andne	r0, r0, r3, lsl r0
      d8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
      dc:	0b3a0b0b 	bleq	e82d10 <__Stack_Size+0xe82910>
      e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      e4:	0d110000 	ldceq	0, cr0, [r1, #-0]
      e8:	3a080300 	bcc	200cf0 <__Stack_Size+0x2008f0>
      ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      f0:	000b3813 	andeq	r3, fp, r3, lsl r8
      f4:	01171200 	tsteq	r7, r0, lsl #4
      f8:	0b3a0b0b 	bleq	e82d2c <__Stack_Size+0xe8292c>
      fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     100:	0d130000 	ldceq	0, cr0, [r3, #-0]
     104:	3a080300 	bcc	200d0c <__Stack_Size+0x20090c>
     108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     10c:	14000013 	strne	r0, [r0], #-19
     110:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     114:	0b3a0e03 	bleq	e83928 <__Stack_Size+0xe83528>
     118:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     11c:	0b201349 	bleq	804e48 <__Stack_Size+0x804a48>
     120:	00001301 	andeq	r1, r0, r1, lsl #6
     124:	03000515 	movweq	r0, #1301	; 0x515
     128:	3b0b3a0e 	blcc	2ce968 <__Stack_Size+0x2ce568>
     12c:	00134905 	andseq	r4, r3, r5, lsl #18
     130:	002e1600 	eoreq	r1, lr, r0, lsl #12
     134:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     138:	0b3b0b3a 	bleq	ec2e28 <__Stack_Size+0xec2a28>
     13c:	0b201927 	bleq	8065e0 <__Stack_Size+0x8061e0>
     140:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     144:	03193f00 	tsteq	r9, #0, 30
     148:	3b0b3a0e 	blcc	2ce988 <__Stack_Size+0x2ce588>
     14c:	1119270b 	tstne	r9, fp, lsl #14
     150:	40061201 	andmi	r1, r6, r1, lsl #4
     154:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     158:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     15c:	03193f00 	tsteq	r9, #0, 30
     160:	3b0b3a0e 	blcc	2ce9a0 <__Stack_Size+0x2ce5a0>
     164:	11192705 	tstne	r9, r5, lsl #14
     168:	40061201 	andmi	r1, r6, r1, lsl #4
     16c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     170:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     174:	03193f01 	tsteq	r9, #1, 30
     178:	3b0b3a0e 	blcc	2ce9b8 <__Stack_Size+0x2ce5b8>
     17c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     180:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     184:	97184006 	ldrls	r4, [r8, -r6]
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	051a0000 	ldreq	r0, [sl, #-0]
     190:	3a0e0300 	bcc	380d98 <__Stack_Size+0x380998>
     194:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	00170213 	andseq	r0, r7, r3, lsl r2
     19c:	00051b00 	andeq	r1, r5, r0, lsl #22
     1a0:	0b3a0e03 	bleq	e839b4 <__Stack_Size+0xe835b4>
     1a4:	1349053b 	movtne	r0, #38203	; 0x953b
     1a8:	00001802 	andeq	r1, r0, r2, lsl #16
     1ac:	3f012e1c 	svccc	0x00012e1c
     1b0:	3a0e0319 	bcc	380e1c <__Stack_Size+0x380a1c>
     1b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1bc:	97184006 	ldrls	r4, [r8, -r6]
     1c0:	13011942 	movwne	r1, #6466	; 0x1942
     1c4:	0b1d0000 	bleq	7401cc <__Stack_Size+0x73fdcc>
     1c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1cc:	00130106 	andseq	r0, r3, r6, lsl #2
     1d0:	00341e00 	eorseq	r1, r4, r0, lsl #28
     1d4:	0b3a0e03 	bleq	e839e8 <__Stack_Size+0xe835e8>
     1d8:	1349053b 	movtne	r0, #38203	; 0x953b
     1dc:	00001702 	andeq	r1, r0, r2, lsl #14
     1e0:	0182891f 	orreq	r8, r2, pc, lsl r9
     1e4:	31011100 	mrscc	r1, (UNDEF: 17)
     1e8:	20000013 	andcs	r0, r0, r3, lsl r0
     1ec:	01018289 	smlabbeq	r1, r9, r2, r8
     1f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1f4:	00001301 	andeq	r1, r0, r1, lsl #6
     1f8:	01828a21 	orreq	r8, r2, r1, lsr #20
     1fc:	91180200 	tstls	r8, r0, lsl #4
     200:	00001842 	andeq	r1, r0, r2, asr #16
     204:	01828922 	orreq	r8, r2, r2, lsr #18
     208:	95011101 	strls	r1, [r1, #-257]	; 0x101
     20c:	13311942 	teqne	r1, #1081344	; 0x108000
     210:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     214:	11010182 	smlabbne	r1, r2, r1, r0
     218:	24000001 	strcs	r0, [r0], #-1
     21c:	08030005 	stmdaeq	r3, {r0, r2}
     220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     224:	17021349 	strne	r1, [r2, -r9, asr #6]
     228:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
     22c:	11000182 	smlabbne	r0, r2, r1, r0
     230:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     234:	00001331 	andeq	r1, r0, r1, lsr r3
     238:	03003426 	movweq	r3, #1062	; 0x426
     23c:	3b0b3a0e 	blcc	2cea7c <__Stack_Size+0x2ce67c>
     240:	00134905 	andseq	r4, r3, r5, lsl #18
     244:	012e2700 	teqeq	lr, r0, lsl #14
     248:	01111331 	tsteq	r1, r1, lsr r3
     24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     250:	01194297 			; <UNDEFINED> instruction: 0x01194297
     254:	28000013 	stmdacs	r0, {r0, r1, r4}
     258:	13310005 	teqne	r1, #5
     25c:	00001702 	andeq	r1, r0, r2, lsl #14
     260:	11010b29 	tstne	r1, r9, lsr #22
     264:	00061201 	andeq	r1, r6, r1, lsl #4
     268:	012e2a00 	teqeq	lr, r0, lsl #20
     26c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     270:	0b3b0b3a 	bleq	ec2f60 <__Stack_Size+0xec2b60>
     274:	01111927 	tsteq	r1, r7, lsr #18
     278:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     27c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     280:	2b000013 	blcs	2d4 <_Minimum_Stack_Size+0x1d4>
     284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     288:	0b3b0b3a 	bleq	ec2f78 <__Stack_Size+0xec2b78>
     28c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     290:	1d2c0000 	stcne	0, cr0, [ip, #-0]
     294:	11133101 	tstne	r3, r1, lsl #2
     298:	58061201 	stmdapl	r6, {r0, r9, ip}
     29c:	010b590b 	tsteq	fp, fp, lsl #18
     2a0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     2a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2a8:	0b3b0b3a 	bleq	ec2f98 <__Stack_Size+0xec2b98>
     2ac:	17021349 	strne	r1, [r2, -r9, asr #6]
     2b0:	052e0000 	streq	r0, [lr, #-0]!
     2b4:	3a0e0300 	bcc	380ebc <__Stack_Size+0x380abc>
     2b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	00170213 	andseq	r0, r7, r3, lsl r2
     2c0:	012e2f00 	teqeq	lr, r0, lsl #30
     2c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__Stack_Size+0xec2bb8>
     2cc:	13491927 	movtne	r1, #39207	; 0x9927
     2d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2d8:	00130119 	andseq	r0, r3, r9, lsl r1
     2dc:	00343000 	eorseq	r3, r4, r0
     2e0:	0b3a0e03 	bleq	e83af4 <__Stack_Size+0xe836f4>
     2e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     2ec:	3f002e31 	svccc	0x00002e31
     2f0:	3a0e0319 	bcc	380f5c <__Stack_Size+0x380b5c>
     2f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     2f8:	11134919 	tstne	r3, r9, lsl r9
     2fc:	40061201 	andmi	r1, r6, r1, lsl #4
     300:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     304:	34320000 	ldrtcc	r0, [r2], #-0
     308:	3a0e0300 	bcc	380f10 <__Stack_Size+0x380b10>
     30c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     310:	00180213 	andseq	r0, r8, r3, lsl r2
     314:	82893300 	addhi	r3, r9, #0, 6
     318:	01110101 	tsteq	r1, r1, lsl #2
     31c:	00001331 	andeq	r1, r0, r1, lsr r3
     320:	3f012e34 	svccc	0x00012e34
     324:	3a0e0319 	bcc	380f90 <__Stack_Size+0x380b90>
     328:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     32c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     330:	96184006 	ldrls	r4, [r8], -r6
     334:	13011942 	movwne	r1, #6466	; 0x1942
     338:	34350000 	ldrtcc	r0, [r5], #-0
     33c:	3a0e0300 	bcc	380f44 <__Stack_Size+0x380b44>
     340:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     348:	36000018 			; <UNDEFINED> instruction: 0x36000018
     34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     350:	0b3b0b3a 	bleq	ec3040 <__Stack_Size+0xec2c40>
     354:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     358:	0000193c 	andeq	r1, r0, ip, lsr r9
     35c:	49010137 	stmdbmi	r1, {r0, r1, r2, r4, r5, r8}
     360:	00130113 	andseq	r0, r3, r3, lsl r1
     364:	00213800 	eoreq	r3, r1, r0, lsl #16
     368:	0b2f1349 	bleq	bc5094 <__Stack_Size+0xbc4c94>
     36c:	24390000 	ldrtcs	r0, [r9], #-0
     370:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     374:	0008030b 	andeq	r0, r8, fp, lsl #6
     378:	00213a00 	eoreq	r3, r1, r0, lsl #20
     37c:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
     380:	03193f00 	tsteq	r9, #0, 30
     384:	3b0b3a0e 	blcc	2cebc4 <__Stack_Size+0x2ce7c4>
     388:	3c19270b 	ldccc	7, cr2, [r9], {11}
     38c:	3c000019 	stccc	0, cr0, [r0], {25}
     390:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     394:	0b3a0e03 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     398:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     39c:	1301193c 	movwne	r1, #6460	; 0x193c
     3a0:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     3a4:	03193f01 	tsteq	r9, #1, 30
     3a8:	3b0b3a0e 	blcc	2cebe8 <__Stack_Size+0x2ce7e8>
     3ac:	3c19270b 	ldccc	7, cr2, [r9], {11}
     3b0:	00130119 	andseq	r0, r3, r9, lsl r1
     3b4:	002e3e00 	eoreq	r3, lr, r0, lsl #28
     3b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3bc:	0b3b0b3a 	bleq	ec30ac <__Stack_Size+0xec2cac>
     3c0:	13491927 	movtne	r1, #39207	; 0x9927
     3c4:	0000193c 	andeq	r1, r0, ip, lsr r9
     3c8:	3f012e3f 	svccc	0x00012e3f
     3cc:	3a0e0319 	bcc	381038 <__Stack_Size+0x380c38>
     3d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d4:	3c134919 	ldccc	9, cr4, [r3], {25}
     3d8:	00130119 	andseq	r0, r3, r9, lsl r1
     3dc:	11010000 	mrsne	r0, (UNDEF: 1)
     3e0:	130e2501 	movwne	r2, #58625	; 0xe501
     3e4:	1b0e030b 	blne	381018 <__Stack_Size+0x380c18>
     3e8:	0017100e 	andseq	r1, r7, lr
     3ec:	00240200 	eoreq	r0, r4, r0, lsl #4
     3f0:	0b3e0b0b 	bleq	f83024 <__Stack_Size+0xf82c24>
     3f4:	00000e03 	andeq	r0, r0, r3, lsl #28
     3f8:	03001603 	movweq	r1, #1539	; 0x603
     3fc:	3b0b3a08 	blcc	2cec24 <__Stack_Size+0x2ce824>
     400:	0013490b 	andseq	r4, r3, fp, lsl #18
     404:	01130400 	tsteq	r3, r0, lsl #8
     408:	0b0b0e03 	bleq	2c3c1c <__Stack_Size+0x2c381c>
     40c:	0b3b0b3a 	bleq	ec30fc <__Stack_Size+0xec2cfc>
     410:	00001301 	andeq	r1, r0, r1, lsl #6
     414:	03000d05 	movweq	r0, #3333	; 0xd05
     418:	3b0b3a0e 	blcc	2cec58 <__Stack_Size+0x2ce858>
     41c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     420:	0600000b 	streq	r0, [r0], -fp
     424:	0b0b000f 	bleq	2c0468 <__Stack_Size+0x2c0068>
     428:	00001349 	andeq	r1, r0, r9, asr #6
     42c:	03001607 	movweq	r1, #1543	; 0x607
     430:	3b0b3a0e 	blcc	2cec70 <__Stack_Size+0x2ce870>
     434:	0013490b 	andseq	r4, r3, fp, lsl #18
     438:	00340800 	eorseq	r0, r4, r0, lsl #16
     43c:	0b3a0e03 	bleq	e83c50 <__Stack_Size+0xe83850>
     440:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     444:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     448:	24090000 	strcs	r0, [r9], #-0
     44c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     450:	0008030b 	andeq	r0, r8, fp, lsl #6
     454:	01010a00 	tsteq	r1, r0, lsl #20
     458:	13011349 	movwne	r1, #4937	; 0x1349
     45c:	210b0000 	mrscs	r0, (UNDEF: 11)
     460:	2f134900 	svccs	0x00134900
     464:	0000000b 	andeq	r0, r0, fp
     468:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     46c:	030b130e 	movweq	r1, #45838	; 0xb30e
     470:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     474:	10011117 	andne	r1, r1, r7, lsl r1
     478:	02000017 	andeq	r0, r0, #23
     47c:	0b0b0024 	bleq	2c0514 <__Stack_Size+0x2c0114>
     480:	0e030b3e 	vmoveq.16	d3[0], r0
     484:	16030000 	strne	r0, [r3], -r0
     488:	3a080300 	bcc	201090 <__Stack_Size+0x200c90>
     48c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     490:	04000013 	streq	r0, [r0], #-19
     494:	0b0b0104 	bleq	2c08ac <__Stack_Size+0x2c04ac>
     498:	0b3b0b3a 	bleq	ec3188 <__Stack_Size+0xec2d88>
     49c:	00001301 	andeq	r1, r0, r1, lsl #6
     4a0:	03002805 	movweq	r2, #2053	; 0x805
     4a4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     4a8:	00160600 	andseq	r0, r6, r0, lsl #12
     4ac:	0b3a0e03 	bleq	e83cc0 <__Stack_Size+0xe838c0>
     4b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4b4:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     4b8:	03193f01 	tsteq	r9, #1, 30
     4bc:	3b0b3a0e 	blcc	2cecfc <__Stack_Size+0x2ce8fc>
     4c0:	1113490b 	tstne	r3, fp, lsl #18
     4c4:	40061201 	andmi	r1, r6, r1, lsl #4
     4c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     4cc:	00001301 	andeq	r1, r0, r1, lsl #6
     4d0:	03003408 	movweq	r3, #1032	; 0x408
     4d4:	3b0b3a0e 	blcc	2ced14 <__Stack_Size+0x2ce914>
     4d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4dc:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
     4e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     4e4:	0b3a0e03 	bleq	e83cf8 <__Stack_Size+0xe838f8>
     4e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4ec:	1301193c 	movwne	r1, #6460	; 0x193c
     4f0:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
     4f4:	0b000000 	bleq	4fc <__Stack_Size+0xfc>
     4f8:	00018289 	andeq	r8, r1, r9, lsl #5
     4fc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     500:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
     504:	11010182 	smlabbne	r1, r2, r1, r0
     508:	01133101 	tsteq	r3, r1, lsl #2
     50c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     510:	0001828a 	andeq	r8, r1, sl, lsl #5
     514:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     518:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     51c:	0b0b0024 	bleq	2c05b4 <__Stack_Size+0x2c01b4>
     520:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     524:	340f0000 	strcc	r0, [pc], #-0	; 52c <__Stack_Size+0x12c>
     528:	3a0e0300 	bcc	381130 <__Stack_Size+0x380d30>
     52c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     530:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     534:	10000018 	andne	r0, r0, r8, lsl r0
     538:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     53c:	0b3a0e03 	bleq	e83d50 <__Stack_Size+0xe83950>
     540:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     544:	0000193c 	andeq	r1, r0, ip, lsr r9
     548:	3f012e11 	svccc	0x00012e11
     54c:	3a0e0319 	bcc	3811b8 <__Stack_Size+0x380db8>
     550:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     554:	01193c19 	tsteq	r9, r9, lsl ip
     558:	12000013 	andne	r0, r0, #19
     55c:	13490005 	movtne	r0, #36869	; 0x9005
     560:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     564:	03193f01 	tsteq	r9, #1, 30
     568:	3b0b3a0e 	blcc	2ceda8 <__Stack_Size+0x2ce9a8>
     56c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     570:	01193c13 	tsteq	r9, r3, lsl ip
     574:	14000013 	strne	r0, [r0], #-19
     578:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     57c:	0b3a0e03 	bleq	e83d90 <__Stack_Size+0xe83990>
     580:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
     584:	00001301 	andeq	r1, r0, r1, lsl #6
     588:	01110100 	tsteq	r1, r0, lsl #2
     58c:	0b130e25 	bleq	4c3e28 <__Stack_Size+0x4c3a28>
     590:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     594:	01111755 	tsteq	r1, r5, asr r7
     598:	00001710 	andeq	r1, r0, r0, lsl r7
     59c:	0b002402 	bleq	95ac <__Stack_Size+0x91ac>
     5a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5a4:	0300000e 	movweq	r0, #14
     5a8:	08030016 	stmdaeq	r3, {r1, r2, r4}
     5ac:	0b3b0b3a 	bleq	ec329c <__Stack_Size+0xec2e9c>
     5b0:	00001349 	andeq	r1, r0, r9, asr #6
     5b4:	03001604 	movweq	r1, #1540	; 0x604
     5b8:	3b0b3a0e 	blcc	2cedf8 <__Stack_Size+0x2ce9f8>
     5bc:	0013490b 	andseq	r4, r3, fp, lsl #18
     5c0:	00350500 	eorseq	r0, r5, r0, lsl #10
     5c4:	00001349 	andeq	r1, r0, r9, asr #6
     5c8:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
     5cc:	07000013 	smladeq	r0, r3, r0, r0
     5d0:	0b0b0104 	bleq	2c09e8 <__Stack_Size+0x2c05e8>
     5d4:	0b3b0b3a 	bleq	ec32c4 <__Stack_Size+0xec2ec4>
     5d8:	00001301 	andeq	r1, r0, r1, lsl #6
     5dc:	03002808 	movweq	r2, #2056	; 0x808
     5e0:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     5e4:	00150900 	andseq	r0, r5, r0, lsl #18
     5e8:	00001927 	andeq	r1, r0, r7, lsr #18
     5ec:	0b000f0a 	bleq	421c <__Stack_Size+0x3e1c>
     5f0:	0013490b 	andseq	r4, r3, fp, lsl #18
     5f4:	01130b00 	tsteq	r3, r0, lsl #22
     5f8:	0b3a0b0b 	bleq	e8322c <__Stack_Size+0xe82e2c>
     5fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     600:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     604:	3a080300 	bcc	20120c <__Stack_Size+0x200e0c>
     608:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     60c:	000b3813 	andeq	r3, fp, r3, lsl r8
     610:	000d0d00 	andeq	r0, sp, r0, lsl #26
     614:	0b3a0e03 	bleq	e83e28 <__Stack_Size+0xe83a28>
     618:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     61c:	00000b38 	andeq	r0, r0, r8, lsr fp
     620:	0b01130e 	bleq	45260 <__Stack_Size+0x44e60>
     624:	3b0b3a05 	blcc	2cee40 <__Stack_Size+0x2cea40>
     628:	0013010b 	andseq	r0, r3, fp, lsl #2
     62c:	000d0f00 	andeq	r0, sp, r0, lsl #30
     630:	0b3a0e03 	bleq	e83e44 <__Stack_Size+0xe83a44>
     634:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     638:	00000538 	andeq	r0, r0, r8, lsr r5
     63c:	03000d10 	movweq	r0, #3344	; 0xd10
     640:	3b0b3a08 	blcc	2cee68 <__Stack_Size+0x2cea68>
     644:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     648:	11000005 	tstne	r0, r5
     64c:	13490101 	movtne	r0, #37121	; 0x9101
     650:	00001301 	andeq	r1, r0, r1, lsl #6
     654:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
     658:	000b2f13 	andeq	r2, fp, r3, lsl pc
     65c:	002e1300 	eoreq	r1, lr, r0, lsl #6
     660:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     664:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     668:	0b201927 	bleq	806b0c <__Stack_Size+0x80670c>
     66c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     670:	03193f01 	tsteq	r9, #1, 30
     674:	3b0b3a0e 	blcc	2ceeb4 <__Stack_Size+0x2ceab4>
     678:	1119270b 	tstne	r9, fp, lsl #14
     67c:	40061201 	andmi	r1, r6, r1, lsl #4
     680:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     684:	00001301 	andeq	r1, r0, r1, lsl #6
     688:	03000515 	movweq	r0, #1301	; 0x515
     68c:	3b0b3a0e 	blcc	2ceecc <__Stack_Size+0x2ceacc>
     690:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     694:	16000018 			; <UNDEFINED> instruction: 0x16000018
     698:	08030005 	stmdaeq	r3, {r0, r2}
     69c:	0b3b0b3a 	bleq	ec338c <__Stack_Size+0xec2f8c>
     6a0:	17021349 	strne	r1, [r2, -r9, asr #6]
     6a4:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     6a8:	03193f01 	tsteq	r9, #1, 30
     6ac:	3b0b3a0e 	blcc	2ceeec <__Stack_Size+0x2ceaec>
     6b0:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     6b4:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     6b8:	97184006 	ldrls	r4, [r8, -r6]
     6bc:	13011942 	movwne	r1, #6466	; 0x1942
     6c0:	05180000 	ldreq	r0, [r8, #-0]
     6c4:	3a0e0300 	bcc	3812cc <__Stack_Size+0x380ecc>
     6c8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6cc:	00170213 	andseq	r0, r7, r3, lsl r2
     6d0:	012e1900 	teqeq	lr, r0, lsl #18
     6d4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     6d8:	0b3b0b3a 	bleq	ec33c8 <__Stack_Size+0xec2fc8>
     6dc:	01111349 	tsteq	r1, r9, asr #6
     6e0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     6e4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     6e8:	1a000013 	bne	73c <__Stack_Size+0x33c>
     6ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     6f0:	0b3b0b3a 	bleq	ec33e0 <__Stack_Size+0xec2fe0>
     6f4:	0b1c1349 	bleq	705420 <__Stack_Size+0x705020>
     6f8:	341b0000 	ldrcc	r0, [fp], #-0
     6fc:	3a080300 	bcc	201304 <__Stack_Size+0x200f04>
     700:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     704:	00170213 	andseq	r0, r7, r3, lsl r2
     708:	82891c00 	addhi	r1, r9, #0, 24
     70c:	01110101 	tsteq	r1, r1, lsl #2
     710:	13011331 	movwne	r1, #4913	; 0x1331
     714:	8a1d0000 	bhi	74071c <__Stack_Size+0x74031c>
     718:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     71c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     720:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
     724:	11010182 	smlabbne	r1, r2, r1, r0
     728:	00133101 	andseq	r3, r3, r1, lsl #2
     72c:	002e1f00 	eoreq	r1, lr, r0, lsl #30
     730:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     734:	0b3b0b3a 	bleq	ec3424 <__Stack_Size+0xec3024>
     738:	01111927 	tsteq	r1, r7, lsr #18
     73c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     740:	00194297 	mulseq	r9, r7, r2
     744:	012e2000 	teqeq	lr, r0
     748:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     74c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     750:	13491927 	movtne	r1, #39207	; 0x9927
     754:	13010b20 	movwne	r0, #6944	; 0x1b20
     758:	05210000 	streq	r0, [r1, #-0]!
     75c:	3a080300 	bcc	201364 <__Stack_Size+0x200f64>
     760:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     764:	22000013 	andcs	r0, r0, #19
     768:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     76c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     770:	00001349 	andeq	r1, r0, r9, asr #6
     774:	0b002423 	bleq	9808 <__Stack_Size+0x9408>
     778:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     77c:	24000008 	strcs	r0, [r0], #-8
     780:	0111010b 	tsteq	r1, fp, lsl #2
     784:	00000612 	andeq	r0, r0, r2, lsl r6
     788:	03003425 	movweq	r3, #1061	; 0x425
     78c:	3b0b3a0e 	blcc	2cefcc <__Stack_Size+0x2cebcc>
     790:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     794:	26000017 			; <UNDEFINED> instruction: 0x26000017
     798:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     79c:	0b3b0b3a 	bleq	ec348c <__Stack_Size+0xec308c>
     7a0:	0d1c1349 	ldceq	3, cr1, [ip, #-292]	; 0xfffffedc
     7a4:	1d270000 	stcne	0, cr0, [r7, #-0]
     7a8:	52133100 	andspl	r3, r3, #0, 2
     7ac:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     7b0:	000b590b 	andeq	r5, fp, fp, lsl #18
     7b4:	82892800 	addhi	r2, r9, #0, 16
     7b8:	01110001 	tsteq	r1, r1
     7bc:	00001331 	andeq	r1, r0, r1, lsr r3
     7c0:	01828929 	orreq	r8, r2, r9, lsr #18
     7c4:	93011100 	movwls	r1, #4352	; 0x1100
     7c8:	00001842 	andeq	r1, r0, r2, asr #16
     7cc:	3f012e2a 	svccc	0x00012e2a
     7d0:	3a0e0319 	bcc	38143c <__Stack_Size+0x38103c>
     7d4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     7d8:	11134919 	tstne	r3, r9, lsl r9
     7dc:	40061201 	andmi	r1, r6, r1, lsl #4
     7e0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     7e4:	00001301 	andeq	r1, r0, r1, lsl #6
     7e8:	0300052b 	movweq	r0, #1323	; 0x52b
     7ec:	3b0b3a0e 	blcc	2cf02c <__Stack_Size+0x2cec2c>
     7f0:	02134905 	andseq	r4, r3, #81920	; 0x14000
     7f4:	2c000017 	stccs	0, cr0, [r0], {23}
     7f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     7fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     800:	17021349 	strne	r1, [r2, -r9, asr #6]
     804:	052d0000 	streq	r0, [sp, #-0]!
     808:	3a080300 	bcc	201410 <__Stack_Size+0x201010>
     80c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     810:	00170213 	andseq	r0, r7, r3, lsl r2
     814:	00052e00 	andeq	r2, r5, r0, lsl #28
     818:	0b3a0e03 	bleq	e8402c <__Stack_Size+0xe83c2c>
     81c:	1349053b 	movtne	r0, #38203	; 0x953b
     820:	00001802 	andeq	r1, r0, r2, lsl #16
     824:	0300342f 	movweq	r3, #1071	; 0x42f
     828:	3b0b3a0e 	blcc	2cf068 <__Stack_Size+0x2cec68>
     82c:	02134905 	andseq	r4, r3, #81920	; 0x14000
     830:	30000018 	andcc	r0, r0, r8, lsl r0
     834:	1331002e 	teqne	r1, #46	; 0x2e
     838:	06120111 			; <UNDEFINED> instruction: 0x06120111
     83c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     840:	31000019 	tstcc	r0, r9, lsl r0
     844:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     848:	0b3a0e03 	bleq	e8405c <__Stack_Size+0xe83c5c>
     84c:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     850:	06120111 			; <UNDEFINED> instruction: 0x06120111
     854:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     858:	32000019 	andcc	r0, r0, #25
     85c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     860:	06120111 			; <UNDEFINED> instruction: 0x06120111
     864:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     868:	00130119 	andseq	r0, r3, r9, lsl r1
     86c:	00053300 	andeq	r3, r5, r0, lsl #6
     870:	17021331 	smladxne	r2, r1, r3, r1
     874:	34340000 	ldrtcc	r0, [r4], #-0
     878:	02133100 	andseq	r3, r3, #0, 2
     87c:	35000017 	strcc	r0, [r0, #-23]
     880:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     884:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     888:	061c1349 	ldreq	r1, [ip], -r9, asr #6
     88c:	34360000 	ldrtcc	r0, [r6], #-0
     890:	3a0e0300 	bcc	381498 <__Stack_Size+0x381098>
     894:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     898:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     89c:	37000018 	smladcc	r0, r8, r0, r0
     8a0:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     8a4:	0b3a0e03 	bleq	e840b8 <__Stack_Size+0xe83cb8>
     8a8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     8ac:	0000193c 	andeq	r1, r0, ip, lsr r9
     8b0:	3f012e38 	svccc	0x00012e38
     8b4:	3a0e0319 	bcc	381520 <__Stack_Size+0x381120>
     8b8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     8bc:	00193c19 	andseq	r3, r9, r9, lsl ip
     8c0:	00053900 	andeq	r3, r5, r0, lsl #18
     8c4:	00001349 	andeq	r1, r0, r9, asr #6
     8c8:	01110100 	tsteq	r1, r0, lsl #2
     8cc:	0b130e25 	bleq	4c4168 <__Stack_Size+0x4c3d68>
     8d0:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     8d4:	01111755 	tsteq	r1, r5, asr r7
     8d8:	00001710 	andeq	r1, r0, r0, lsl r7
     8dc:	0b002402 	bleq	98ec <__Stack_Size+0x94ec>
     8e0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     8e4:	0300000e 	movweq	r0, #14
     8e8:	08030016 	stmdaeq	r3, {r1, r2, r4}
     8ec:	0b3b0b3a 	bleq	ec35dc <__Stack_Size+0xec31dc>
     8f0:	00001349 	andeq	r1, r0, r9, asr #6
     8f4:	0b010404 	bleq	4190c <__Stack_Size+0x4150c>
     8f8:	3b0b3a0b 	blcc	2cf12c <__Stack_Size+0x2ced2c>
     8fc:	0013010b 	andseq	r0, r3, fp, lsl #2
     900:	00280500 	eoreq	r0, r8, r0, lsl #10
     904:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     908:	16060000 	strne	r0, [r6], -r0
     90c:	3a0e0300 	bcc	381514 <__Stack_Size+0x381114>
     910:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     914:	07000013 	smladeq	r0, r3, r0, r0
     918:	0b0b000f 	bleq	2c095c <__Stack_Size+0x2c055c>
     91c:	00001349 	andeq	r1, r0, r9, asr #6
     920:	03011308 	movweq	r1, #4872	; 0x1308
     924:	3a0b0b0e 	bcc	2c3564 <__Stack_Size+0x2c3164>
     928:	010b3b0b 	tsteq	fp, fp, lsl #22
     92c:	09000013 	stmdbeq	r0, {r0, r1, r4}
     930:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     934:	0b3b0b3a 	bleq	ec3624 <__Stack_Size+0xec3224>
     938:	0b381349 	bleq	e05664 <__Stack_Size+0xe05264>
     93c:	150a0000 	strne	r0, [sl, #-0]
     940:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     944:	00130113 	andseq	r0, r3, r3, lsl r1
     948:	00050b00 	andeq	r0, r5, r0, lsl #22
     94c:	00001349 	andeq	r1, r0, r9, asr #6
     950:	0301130c 	movweq	r1, #4876	; 0x130c
     954:	3a0b0b08 	bcc	2c357c <__Stack_Size+0x2c317c>
     958:	010b3b0b 	tsteq	fp, fp, lsl #22
     95c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     960:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     964:	0b3b0b3a 	bleq	ec3654 <__Stack_Size+0xec3254>
     968:	0b381349 	bleq	e05694 <__Stack_Size+0xe05294>
     96c:	170e0000 	strne	r0, [lr, -r0]
     970:	3a0b0b01 	bcc	2c357c <__Stack_Size+0x2c317c>
     974:	010b3b0b 	tsteq	fp, fp, lsl #22
     978:	0f000013 	svceq	0x00000013
     97c:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     980:	0b3b0b3a 	bleq	ec3670 <__Stack_Size+0xec3270>
     984:	00001349 	andeq	r1, r0, r9, asr #6
     988:	03010410 	movweq	r0, #5136	; 0x1410
     98c:	3a0b0b0e 	bcc	2c35cc <__Stack_Size+0x2c31cc>
     990:	010b3b0b 	tsteq	fp, fp, lsl #22
     994:	11000013 	tstne	r0, r3, lsl r0
     998:	08030028 	stmdaeq	r3, {r3, r5}
     99c:	00000d1c 	andeq	r0, r0, ip, lsl sp
     9a0:	3f002e12 	svccc	0x00002e12
     9a4:	3a0e0319 	bcc	381610 <__Stack_Size+0x381210>
     9a8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     9ac:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     9b0:	97184006 	ldrls	r4, [r8, -r6]
     9b4:	00001942 	andeq	r1, r0, r2, asr #18
     9b8:	3f012e13 	svccc	0x00012e13
     9bc:	3a0e0319 	bcc	381628 <__Stack_Size+0x381228>
     9c0:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     9c4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     9c8:	97184006 	ldrls	r4, [r8, -r6]
     9cc:	13011942 	movwne	r1, #6466	; 0x1942
     9d0:	34140000 	ldrcc	r0, [r4], #-0
     9d4:	3a0e0300 	bcc	3815dc <__Stack_Size+0x3811dc>
     9d8:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     9dc:	00170213 	andseq	r0, r7, r3, lsl r2
     9e0:	82891500 	addhi	r1, r9, #0, 10
     9e4:	01110001 	tsteq	r1, r1
     9e8:	00001331 	andeq	r1, r0, r1, lsr r3
     9ec:	01828916 	orreq	r8, r2, r6, lsl r9
     9f0:	95011100 	strls	r1, [r1, #-256]	; 0x100
     9f4:	13311942 	teqne	r1, #1081344	; 0x108000
     9f8:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     9fc:	03193f00 	tsteq	r9, #0, 30
     a00:	3b0b3a0e 	blcc	2cf240 <__Stack_Size+0x2cee40>
     a04:	11192705 	tstne	r9, r5, lsl #14
     a08:	40061201 	andmi	r1, r6, r1, lsl #4
     a0c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a10:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     a14:	03193f01 	tsteq	r9, #1, 30
     a18:	3b0b3a0e 	blcc	2cf258 <__Stack_Size+0x2cee58>
     a1c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     a20:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a24:	97184006 	ldrls	r4, [r8, -r6]
     a28:	13011942 	movwne	r1, #6466	; 0x1942
     a2c:	05190000 	ldreq	r0, [r9, #-0]
     a30:	3a0e0300 	bcc	381638 <__Stack_Size+0x381238>
     a34:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a38:	00170213 	andseq	r0, r7, r3, lsl r2
     a3c:	00341a00 	eorseq	r1, r4, r0, lsl #20
     a40:	0b3a0803 	bleq	e82a54 <__Stack_Size+0xe82654>
     a44:	1349053b 	movtne	r0, #38203	; 0x953b
     a48:	00001702 	andeq	r1, r0, r2, lsl #14
     a4c:	0300341b 	movweq	r3, #1051	; 0x41b
     a50:	3b0b3a0e 	blcc	2cf290 <__Stack_Size+0x2cee90>
     a54:	00134905 	andseq	r4, r3, r5, lsl #18
     a58:	82891c00 	addhi	r1, r9, #0, 24
     a5c:	01110101 	tsteq	r1, r1, lsl #2
     a60:	13011331 	movwne	r1, #4913	; 0x1331
     a64:	8a1d0000 	bhi	740a6c <__Stack_Size+0x74066c>
     a68:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     a6c:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     a70:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
     a74:	11010182 	smlabbne	r1, r2, r1, r0
     a78:	00133101 	andseq	r3, r3, r1, lsl #2
     a7c:	00241f00 	eoreq	r1, r4, r0, lsl #30
     a80:	0b3e0b0b 	bleq	f836b4 <__Stack_Size+0xf832b4>
     a84:	00000803 	andeq	r0, r0, r3, lsl #16
     a88:	3f012e20 	svccc	0x00012e20
     a8c:	3a0e0319 	bcc	3816f8 <__Stack_Size+0x3812f8>
     a90:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     a94:	11134919 	tstne	r3, r9, lsl r9
     a98:	40061201 	andmi	r1, r6, r1, lsl #4
     a9c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     aa0:	00001301 	andeq	r1, r0, r1, lsl #6
     aa4:	03003421 	movweq	r3, #1057	; 0x421
     aa8:	3b0b3a0e 	blcc	2cf2e8 <__Stack_Size+0x2ceee8>
     aac:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     ab0:	22000017 	andcs	r0, r0, #23
     ab4:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     ab8:	0b3a0e03 	bleq	e842cc <__Stack_Size+0xe83ecc>
     abc:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     ac0:	01111349 	tsteq	r1, r9, asr #6
     ac4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     ac8:	00194297 	mulseq	r9, r7, r2
     acc:	00052300 	andeq	r2, r5, r0, lsl #6
     ad0:	0b3a0e03 	bleq	e842e4 <__Stack_Size+0xe83ee4>
     ad4:	1349053b 	movtne	r0, #38203	; 0x953b
     ad8:	00001802 	andeq	r1, r0, r2, lsl #16
     adc:	3f002e24 	svccc	0x00002e24
     ae0:	3a0e0319 	bcc	38174c <__Stack_Size+0x38134c>
     ae4:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     ae8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     aec:	97184006 	ldrls	r4, [r8, -r6]
     af0:	00001942 	andeq	r1, r0, r2, asr #18
     af4:	3f002e25 	svccc	0x00002e25
     af8:	3a0e0319 	bcc	381764 <__Stack_Size+0x381364>
     afc:	11053b0b 	tstne	r5, fp, lsl #22
     b00:	40061201 	andmi	r1, r6, r1, lsl #4
     b04:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b08:	34260000 	strtcc	r0, [r6], #-0
     b0c:	3a0e0300 	bcc	381714 <__Stack_Size+0x381314>
     b10:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b14:	00180213 	andseq	r0, r8, r3, lsl r2
     b18:	00352700 	eorseq	r2, r5, r0, lsl #14
     b1c:	00001349 	andeq	r1, r0, r9, asr #6
     b20:	49010128 	stmdbmi	r1, {r3, r5, r8}
     b24:	00130113 	andseq	r0, r3, r3, lsl r1
     b28:	00212900 	eoreq	r2, r1, r0, lsl #18
     b2c:	052f1349 	streq	r1, [pc, #-841]!	; 7eb <__Stack_Size+0x3eb>
     b30:	342a0000 	strtcc	r0, [sl], #-0
     b34:	3a0e0300 	bcc	38173c <__Stack_Size+0x38133c>
     b38:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b3c:	3c193f13 	ldccc	15, cr3, [r9], {19}
     b40:	2b000019 	blcs	bac <__Stack_Size+0x7ac>
     b44:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b48:	0b3b0b3a 	bleq	ec3838 <__Stack_Size+0xec3438>
     b4c:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     b50:	00001802 	andeq	r1, r0, r2, lsl #16
     b54:	3f002e2c 	svccc	0x00002e2c
     b58:	3a0e0319 	bcc	3817c4 <__Stack_Size+0x3813c4>
     b5c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     b60:	00193c19 	andseq	r3, r9, r9, lsl ip
     b64:	012e2d00 	teqeq	lr, r0, lsl #26
     b68:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     b6c:	0b3b0b3a 	bleq	ec385c <__Stack_Size+0xec345c>
     b70:	13491927 	movtne	r1, #39207	; 0x9927
     b74:	1301193c 	movwne	r1, #6460	; 0x193c
     b78:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     b7c:	03193f00 	tsteq	r9, #0, 30
     b80:	3b0b3a0e 	blcc	2cf3c0 <__Stack_Size+0x2cefc0>
     b84:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     b88:	00193c13 	andseq	r3, r9, r3, lsl ip
     b8c:	11010000 	mrsne	r0, (UNDEF: 1)
     b90:	130e2501 	movwne	r2, #58625	; 0xe501
     b94:	1b0e030b 	blne	3817c8 <__Stack_Size+0x3813c8>
     b98:	1117550e 	tstne	r7, lr, lsl #10
     b9c:	00171001 	andseq	r1, r7, r1
     ba0:	00240200 	eoreq	r0, r4, r0, lsl #4
     ba4:	0b3e0b0b 	bleq	f837d8 <__Stack_Size+0xf833d8>
     ba8:	00000e03 	andeq	r0, r0, r3, lsl #28
     bac:	03001603 	movweq	r1, #1539	; 0x603
     bb0:	3b0b3a08 	blcc	2cf3d8 <__Stack_Size+0x2cefd8>
     bb4:	0013490b 	andseq	r4, r3, fp, lsl #18
     bb8:	01040400 	tsteq	r4, r0, lsl #8
     bbc:	0b0b0e03 	bleq	2c43d0 <__Stack_Size+0x2c3fd0>
     bc0:	0b3b0b3a 	bleq	ec38b0 <__Stack_Size+0xec34b0>
     bc4:	00001301 	andeq	r1, r0, r1, lsl #6
     bc8:	03002805 	movweq	r2, #2053	; 0x805
     bcc:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     bd0:	00160600 	andseq	r0, r6, r0, lsl #12
     bd4:	0b3a0e03 	bleq	e843e8 <__Stack_Size+0xe83fe8>
     bd8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     bdc:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     be0:	03193f01 	tsteq	r9, #1, 30
     be4:	3b0b3a0e 	blcc	2cf424 <__Stack_Size+0x2cf024>
     be8:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     bec:	010b2013 	tsteq	fp, r3, lsl r0
     bf0:	08000013 	stmdaeq	r0, {r0, r1, r4}
     bf4:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     bf8:	0b3b0b3a 	bleq	ec38e8 <__Stack_Size+0xec34e8>
     bfc:	00001349 	andeq	r1, r0, r9, asr #6
     c00:	3f012e09 	svccc	0x00012e09
     c04:	3a0e0319 	bcc	381870 <__Stack_Size+0x381470>
     c08:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c0c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c10:	97184006 	ldrls	r4, [r8, -r6]
     c14:	13011942 	movwne	r1, #6466	; 0x1942
     c18:	050a0000 	streq	r0, [sl, #-0]
     c1c:	3a0e0300 	bcc	381824 <__Stack_Size+0x381424>
     c20:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c24:	00180213 	andseq	r0, r8, r3, lsl r2
     c28:	002e0b00 	eoreq	r0, lr, r0, lsl #22
     c2c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c30:	0b3b0b3a 	bleq	ec3920 <__Stack_Size+0xec3520>
     c34:	13491927 	movtne	r1, #39207	; 0x9927
     c38:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c3c:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c40:	0c000019 	stceq	0, cr0, [r0], {25}
     c44:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c48:	0b3b0b3a 	bleq	ec3938 <__Stack_Size+0xec3538>
     c4c:	17021349 	strne	r1, [r2, -r9, asr #6]
     c50:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     c54:	11133101 	tstne	r3, r1, lsl #2
     c58:	40061201 	andmi	r1, r6, r1, lsl #4
     c5c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     c60:	00001301 	andeq	r1, r0, r1, lsl #6
     c64:	3100050e 	tstcc	r0, lr, lsl #10
     c68:	00170213 	andseq	r0, r7, r3, lsl r2
     c6c:	012e0f00 	teqeq	lr, r0, lsl #30
     c70:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c74:	0b3b0b3a 	bleq	ec3964 <__Stack_Size+0xec3564>
     c78:	13491927 	movtne	r1, #39207	; 0x9927
     c7c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c80:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c84:	00130119 	andseq	r0, r3, r9, lsl r1
     c88:	010b1000 	mrseq	r1, (UNDEF: 11)
     c8c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c90:	34110000 	ldrcc	r0, [r1], #-0
     c94:	3a0e0300 	bcc	38189c <__Stack_Size+0x38149c>
     c98:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c9c:	00180213 	andseq	r0, r8, r3, lsl r2
     ca0:	00341200 	eorseq	r1, r4, r0, lsl #4
     ca4:	0b3a0e03 	bleq	e844b8 <__Stack_Size+0xe840b8>
     ca8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cac:	1d130000 	ldcne	0, cr0, [r3, #-0]
     cb0:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     cb4:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     cb8:	000b590b 	andeq	r5, fp, fp, lsl #18
     cbc:	012e1400 	teqeq	lr, r0, lsl #8
     cc0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cc4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     cc8:	01111927 	tsteq	r1, r7, lsr #18
     ccc:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     cd0:	01194297 			; <UNDEFINED> instruction: 0x01194297
     cd4:	15000013 	strne	r0, [r0, #-19]
     cd8:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     cdc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     ce0:	17021349 	strne	r1, [r2, -r9, asr #6]
     ce4:	34160000 	ldrcc	r0, [r6], #-0
     ce8:	3a0e0300 	bcc	3818f0 <__Stack_Size+0x3814f0>
     cec:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     cf0:	00170213 	andseq	r0, r7, r3, lsl r2
     cf4:	012e1700 	teqeq	lr, r0, lsl #14
     cf8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cfc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d00:	13491927 	movtne	r1, #39207	; 0x9927
     d04:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d08:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d0c:	00130119 	andseq	r0, r3, r9, lsl r1
     d10:	00051800 	andeq	r1, r5, r0, lsl #16
     d14:	0b3a0e03 	bleq	e84528 <__Stack_Size+0xe84128>
     d18:	1349053b 	movtne	r0, #38203	; 0x953b
     d1c:	00001802 	andeq	r1, r0, r2, lsl #16
     d20:	0b000f19 	bleq	498c <__Stack_Size+0x458c>
     d24:	0013490b 	andseq	r4, r3, fp, lsl #18
     d28:	00341a00 	eorseq	r1, r4, r0, lsl #20
     d2c:	0b3a0e03 	bleq	e84540 <__Stack_Size+0xe84140>
     d30:	1349053b 	movtne	r0, #38203	; 0x953b
     d34:	00001802 	andeq	r1, r0, r2, lsl #16
     d38:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xb1b
     d3c:	1c000017 	stcne	0, cr0, [r0], {23}
     d40:	0111010b 	tsteq	r1, fp, lsl #2
     d44:	13010612 	movwne	r0, #5650	; 0x1612
     d48:	051d0000 	ldreq	r0, [sp, #-0]
     d4c:	3a080300 	bcc	201954 <__Stack_Size+0x201554>
     d50:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d54:	00170213 	andseq	r0, r7, r3, lsl r2
     d58:	00051e00 	andeq	r1, r5, r0, lsl #28
     d5c:	0b3a0803 	bleq	e82d70 <__Stack_Size+0xe82970>
     d60:	1349053b 	movtne	r0, #38203	; 0x953b
     d64:	00001802 	andeq	r1, r0, r2, lsl #16
     d68:	3f012e1f 	svccc	0x00012e1f
     d6c:	3a0e0319 	bcc	3819d8 <__Stack_Size+0x3815d8>
     d70:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     d74:	11134919 	tstne	r3, r9, lsl r9
     d78:	40061201 	andmi	r1, r6, r1, lsl #4
     d7c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     d80:	01000000 	mrseq	r0, (UNDEF: 0)
     d84:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     d88:	0e030b13 	vmoveq.32	d3[0], r0
     d8c:	17550e1b 	smmlane	r5, fp, lr, r0
     d90:	17100111 			; <UNDEFINED> instruction: 0x17100111
     d94:	24020000 	strcs	r0, [r2], #-0
     d98:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     d9c:	000e030b 	andeq	r0, lr, fp, lsl #6
     da0:	00160300 	andseq	r0, r6, r0, lsl #6
     da4:	0b3a0803 	bleq	e82db8 <__Stack_Size+0xe829b8>
     da8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     dac:	15040000 	strne	r0, [r4, #-0]
     db0:	00192700 	andseq	r2, r9, r0, lsl #14
     db4:	000f0500 	andeq	r0, pc, r0, lsl #10
     db8:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     dbc:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     dc0:	03193f01 	tsteq	r9, #1, 30
     dc4:	3b0b3a0e 	blcc	2cf604 <__Stack_Size+0x2cf204>
     dc8:	1119270b 	tstne	r9, fp, lsl #14
     dcc:	40061201 	andmi	r1, r6, r1, lsl #4
     dd0:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     dd4:	00001301 	andeq	r1, r0, r1, lsl #6
     dd8:	03003407 	movweq	r3, #1031	; 0x407
     ddc:	3b0b3a0e 	blcc	2cf61c <__Stack_Size+0x2cf21c>
     de0:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     de4:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
     de8:	0111010b 	tsteq	r1, fp, lsl #2
     dec:	13010612 	movwne	r0, #5650	; 0x1612
     df0:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
     df4:	11000182 	smlabbne	r0, r2, r1, r0
     df8:	00133101 	andseq	r3, r3, r1, lsl #2
     dfc:	00340a00 	eorseq	r0, r4, r0, lsl #20
     e00:	0b3a0e03 	bleq	e84614 <__Stack_Size+0xe84214>
     e04:	1349053b 	movtne	r0, #38203	; 0x953b
     e08:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e0c:	350b0000 	strcc	r0, [fp, #-0]
     e10:	00134900 	andseq	r4, r3, r0, lsl #18
     e14:	00340c00 	eorseq	r0, r4, r0, lsl #24
     e18:	0b3a0e03 	bleq	e8462c <__Stack_Size+0xe8422c>
     e1c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e20:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e24:	340d0000 	strcc	r0, [sp], #-0
     e28:	3a0e0300 	bcc	381a30 <__Stack_Size+0x381630>
     e2c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e30:	3c193f13 	ldccc	15, cr3, [r9], {19}
     e34:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     e38:	13490101 	movtne	r0, #37121	; 0x9101
     e3c:	00001301 	andeq	r1, r0, r1, lsl #6
     e40:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
     e44:	000b2f13 	andeq	r2, fp, r3, lsl pc
     e48:	002e1000 	eoreq	r1, lr, r0
     e4c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e50:	0b3b0b3a 	bleq	ec3b40 <__Stack_Size+0xec3740>
     e54:	13491927 	movtne	r1, #39207	; 0x9927
     e58:	0000193c 	andeq	r1, r0, ip, lsr r9
     e5c:	01110100 	tsteq	r1, r0, lsl #2
     e60:	0b130e25 	bleq	4c46fc <__Stack_Size+0x4c42fc>
     e64:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     e68:	01111755 	tsteq	r1, r5, asr r7
     e6c:	00001710 	andeq	r1, r0, r0, lsl r7
     e70:	0b002402 	bleq	9e80 <__Stack_Size+0x9a80>
     e74:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     e78:	0300000e 	movweq	r0, #14
     e7c:	08030016 	stmdaeq	r3, {r1, r2, r4}
     e80:	0b3b0b3a 	bleq	ec3b70 <__Stack_Size+0xec3770>
     e84:	00001349 	andeq	r1, r0, r9, asr #6
     e88:	0b000f04 	bleq	4aa0 <__Stack_Size+0x46a0>
     e8c:	0013490b 	andseq	r4, r3, fp, lsl #18
     e90:	01040500 	tsteq	r4, r0, lsl #10
     e94:	0b0b0e03 	bleq	2c46a8 <__Stack_Size+0x2c42a8>
     e98:	0b3b0b3a 	bleq	ec3b88 <__Stack_Size+0xec3788>
     e9c:	00001301 	andeq	r1, r0, r1, lsl #6
     ea0:	03002806 	movweq	r2, #2054	; 0x806
     ea4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     ea8:	00160700 	andseq	r0, r6, r0, lsl #14
     eac:	0b3a0e03 	bleq	e846c0 <__Stack_Size+0xe842c0>
     eb0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     eb4:	13080000 	movwne	r0, #32768	; 0x8000
     eb8:	0b0e0301 	bleq	381ac4 <__Stack_Size+0x3816c4>
     ebc:	3b0b3a0b 	blcc	2cf6f0 <__Stack_Size+0x2cf2f0>
     ec0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ec4:	000d0900 	andeq	r0, sp, r0, lsl #18
     ec8:	0b3a0e03 	bleq	e846dc <__Stack_Size+0xe842dc>
     ecc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     ed0:	00000b38 	andeq	r0, r0, r8, lsr fp
     ed4:	2701150a 	strcs	r1, [r1, -sl, lsl #10]
     ed8:	01134919 	tsteq	r3, r9, lsl r9
     edc:	0b000013 	bleq	f30 <__Stack_Size+0xb30>
     ee0:	13490005 	movtne	r0, #36869	; 0x9005
     ee4:	130c0000 	movwne	r0, #49152	; 0xc000
     ee8:	0b080301 	bleq	201af4 <__Stack_Size+0x2016f4>
     eec:	3b0b3a0b 	blcc	2cf720 <__Stack_Size+0x2cf320>
     ef0:	0013010b 	andseq	r0, r3, fp, lsl #2
     ef4:	000d0d00 	andeq	r0, sp, r0, lsl #26
     ef8:	0b3a0803 	bleq	e82f0c <__Stack_Size+0xe82b0c>
     efc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f00:	00000b38 	andeq	r0, r0, r8, lsr fp
     f04:	0b01170e 	bleq	46b44 <__Stack_Size+0x46744>
     f08:	3b0b3a0b 	blcc	2cf73c <__Stack_Size+0x2cf33c>
     f0c:	0013010b 	andseq	r0, r3, fp, lsl #2
     f10:	000d0f00 	andeq	r0, sp, r0, lsl #30
     f14:	0b3a0803 	bleq	e82f28 <__Stack_Size+0xe82b28>
     f18:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f1c:	15100000 	ldrne	r0, [r0, #-0]
     f20:	00192700 	andseq	r2, r9, r0, lsl #14
     f24:	002e1100 	eoreq	r1, lr, r0, lsl #2
     f28:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f2c:	0b3b0b3a 	bleq	ec3c1c <__Stack_Size+0xec381c>
     f30:	01111927 	tsteq	r1, r7, lsr #18
     f34:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f38:	00194296 	mulseq	r9, r6, r2
     f3c:	00341200 	eorseq	r1, r4, r0, lsl #4
     f40:	0b3a0e03 	bleq	e84754 <__Stack_Size+0xe84354>
     f44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f48:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     f4c:	34130000 	ldrcc	r0, [r3], #-0
     f50:	3a0e0300 	bcc	381b58 <__Stack_Size+0x381758>
     f54:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f58:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     f5c:	00000018 	andeq	r0, r0, r8, lsl r0
     f60:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     f64:	030b130e 	movweq	r1, #45838	; 0xb30e
     f68:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     f6c:	10011117 	andne	r1, r1, r7, lsl r1
     f70:	02000017 	andeq	r0, r0, #23
     f74:	0b0b0024 	bleq	2c100c <__Stack_Size+0x2c0c0c>
     f78:	0e030b3e 	vmoveq.16	d3[0], r0
     f7c:	16030000 	strne	r0, [r3], -r0
     f80:	3a080300 	bcc	201b88 <__Stack_Size+0x201788>
     f84:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     f88:	04000013 	streq	r0, [r0], #-19
     f8c:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     f90:	0b3b0b3a 	bleq	ec3c80 <__Stack_Size+0xec3880>
     f94:	00001349 	andeq	r1, r0, r9, asr #6
     f98:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     f9c:	06000013 			; <UNDEFINED> instruction: 0x06000013
     fa0:	0b0b0104 	bleq	2c13b8 <__Stack_Size+0x2c0fb8>
     fa4:	0b3b0b3a 	bleq	ec3c94 <__Stack_Size+0xec3894>
     fa8:	00001301 	andeq	r1, r0, r1, lsl #6
     fac:	03002807 	movweq	r2, #2055	; 0x807
     fb0:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     fb4:	01040800 	tsteq	r4, r0, lsl #16
     fb8:	0b0b0e03 	bleq	2c47cc <__Stack_Size+0x2c43cc>
     fbc:	0b3b0b3a 	bleq	ec3cac <__Stack_Size+0xec38ac>
     fc0:	00001301 	andeq	r1, r0, r1, lsl #6
     fc4:	03011309 	movweq	r1, #4873	; 0x1309
     fc8:	3a0b0b0e 	bcc	2c3c08 <__Stack_Size+0x2c3808>
     fcc:	010b3b0b 	tsteq	fp, fp, lsl #22
     fd0:	0a000013 	beq	1024 <__Stack_Size+0xc24>
     fd4:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     fd8:	0b3b0b3a 	bleq	ec3cc8 <__Stack_Size+0xec38c8>
     fdc:	0b381349 	bleq	e05d08 <__Stack_Size+0xe05908>
     fe0:	0f0b0000 	svceq	0x000b0000
     fe4:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
     fe8:	0c000013 	stceq	0, cr0, [r0], {19}
     fec:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
     ff0:	13011349 	movwne	r1, #4937	; 0x1349
     ff4:	050d0000 	streq	r0, [sp, #-0]
     ff8:	00134900 	andseq	r4, r3, r0, lsl #18
     ffc:	01130e00 	tsteq	r3, r0, lsl #28
    1000:	0b0b0803 	bleq	2c3014 <__Stack_Size+0x2c2c14>
    1004:	0b3b0b3a 	bleq	ec3cf4 <__Stack_Size+0xec38f4>
    1008:	00001301 	andeq	r1, r0, r1, lsl #6
    100c:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1010:	3b0b3a08 	blcc	2cf838 <__Stack_Size+0x2cf438>
    1014:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1018:	1000000b 	andne	r0, r0, fp
    101c:	0b0b0117 	bleq	2c1480 <__Stack_Size+0x2c1080>
    1020:	0b3b0b3a 	bleq	ec3d10 <__Stack_Size+0xec3910>
    1024:	00001301 	andeq	r1, r0, r1, lsl #6
    1028:	03000d11 	movweq	r0, #3345	; 0xd11
    102c:	3b0b3a08 	blcc	2cf854 <__Stack_Size+0x2cf454>
    1030:	0013490b 	andseq	r4, r3, fp, lsl #18
    1034:	00151200 	andseq	r1, r5, r0, lsl #4
    1038:	00001927 	andeq	r1, r0, r7, lsr #18
    103c:	3f012e13 	svccc	0x00012e13
    1040:	3a0e0319 	bcc	381cac <__Stack_Size+0x3818ac>
    1044:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1048:	11134919 	tstne	r3, r9, lsl r9
    104c:	40061201 	andmi	r1, r6, r1, lsl #4
    1050:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    1054:	00001301 	andeq	r1, r0, r1, lsl #6
    1058:	03000514 	movweq	r0, #1300	; 0x514
    105c:	3b0b3a0e 	blcc	2cf89c <__Stack_Size+0x2cf49c>
    1060:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1064:	15000017 	strne	r0, [r0, #-23]
    1068:	0111010b 	tsteq	r1, fp, lsl #2
    106c:	13010612 	movwne	r0, #5650	; 0x1612
    1070:	34160000 	ldrcc	r0, [r6], #-0
    1074:	3a0e0300 	bcc	381c7c <__Stack_Size+0x38187c>
    1078:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    107c:	00170213 	andseq	r0, r7, r3, lsl r2
    1080:	010b1700 	tsteq	fp, r0, lsl #14
    1084:	06120111 			; <UNDEFINED> instruction: 0x06120111
    1088:	34180000 	ldrcc	r0, [r8], #-0
    108c:	3a0e0300 	bcc	381c94 <__Stack_Size+0x381894>
    1090:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1094:	19000013 	stmdbne	r0, {r0, r1, r4}
    1098:	0e03012e 	adfeqsp	f0, f3, #0.5
    109c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10a0:	01111927 	tsteq	r1, r7, lsr #18
    10a4:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10a8:	01194297 			; <UNDEFINED> instruction: 0x01194297
    10ac:	1a000013 	bne	1100 <__Stack_Size+0xd00>
    10b0:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10b4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10b8:	17021349 	strne	r1, [r2, -r9, asr #6]
    10bc:	0a1b0000 	beq	6c10c4 <__Stack_Size+0x6c0cc4>
    10c0:	3a0e0300 	bcc	381cc8 <__Stack_Size+0x3818c8>
    10c4:	11053b0b 	tstne	r5, fp, lsl #22
    10c8:	1c000001 	stcne	0, cr0, [r0], {1}
    10cc:	01018289 	smlabbeq	r1, r9, r2, r8
    10d0:	13010111 	movwne	r0, #4369	; 0x1111
    10d4:	8a1d0000 	bhi	7410dc <__Stack_Size+0x740cdc>
    10d8:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    10dc:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    10e0:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    10e4:	11010182 	smlabbne	r1, r2, r1, r0
    10e8:	01133101 	tsteq	r3, r1, lsl #2
    10ec:	1f000013 	svcne	0x00000013
    10f0:	01018289 	smlabbeq	r1, r9, r2, r8
    10f4:	13310111 	teqne	r1, #1073741828	; 0x40000004
    10f8:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    10fc:	03193f00 	tsteq	r9, #0, 30
    1100:	3b0b3a0e 	blcc	2cf940 <__Stack_Size+0x2cf540>
    1104:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1108:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    110c:	96184006 	ldrls	r4, [r8], -r6
    1110:	00001942 	andeq	r1, r0, r2, asr #18
    1114:	03003421 	movweq	r3, #1057	; 0x421
    1118:	3b0b3a08 	blcc	2cf940 <__Stack_Size+0x2cf540>
    111c:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1120:	22000017 	andcs	r0, r0, #23
    1124:	00018289 	andeq	r8, r1, r9, lsl #5
    1128:	13310111 	teqne	r1, #1073741828	; 0x40000004
    112c:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1130:	03193f01 	tsteq	r9, #1, 30
    1134:	3b0b3a0e 	blcc	2cf974 <__Stack_Size+0x2cf574>
    1138:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    113c:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1140:	96184006 	ldrls	r4, [r8], -r6
    1144:	13011942 	movwne	r1, #6466	; 0x1942
    1148:	34240000 	strtcc	r0, [r4], #-0
    114c:	3a080300 	bcc	201d54 <__Stack_Size+0x201954>
    1150:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    1154:	00170213 	andseq	r0, r7, r3, lsl r2
    1158:	010b2500 	tsteq	fp, r0, lsl #10
    115c:	13011755 	movwne	r1, #5973	; 0x1755
    1160:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
    1164:	03193f00 	tsteq	r9, #0, 30
    1168:	3b0b3a0e 	blcc	2cf9a8 <__Stack_Size+0x2cf5a8>
    116c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1170:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1174:	96184006 	ldrls	r4, [r8], -r6
    1178:	00001942 	andeq	r1, r0, r2, asr #18
    117c:	3f012e27 	svccc	0x00012e27
    1180:	3a0e0319 	bcc	381dec <__Stack_Size+0x3819ec>
    1184:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1188:	11134919 	tstne	r3, r9, lsl r9
    118c:	40061201 	andmi	r1, r6, r1, lsl #4
    1190:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1194:	00001301 	andeq	r1, r0, r1, lsl #6
    1198:	03000528 	movweq	r0, #1320	; 0x528
    119c:	3b0b3a0e 	blcc	2cf9dc <__Stack_Size+0x2cf5dc>
    11a0:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11a4:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    11a8:	0e03012e 	adfeqsp	f0, f3, #0.5
    11ac:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11b0:	0b201927 	bleq	807654 <__Stack_Size+0x807254>
    11b4:	00001301 	andeq	r1, r0, r1, lsl #6
    11b8:	0300342a 	movweq	r3, #1066	; 0x42a
    11bc:	3b0b3a0e 	blcc	2cf9fc <__Stack_Size+0x2cf5fc>
    11c0:	00134905 	andseq	r4, r3, r5, lsl #18
    11c4:	000a2b00 	andeq	r2, sl, r0, lsl #22
    11c8:	0b3a0e03 	bleq	e849dc <__Stack_Size+0xe845dc>
    11cc:	0000053b 	andeq	r0, r0, fp, lsr r5
    11d0:	01010b2c 	tsteq	r1, ip, lsr #22
    11d4:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    11d8:	0000010b 	andeq	r0, r0, fp, lsl #2
    11dc:	0b01172e 	bleq	46e9c <__Stack_Size+0x46a9c>
    11e0:	3b0b3a0b 	blcc	2cfa14 <__Stack_Size+0x2cf614>
    11e4:	00130105 	andseq	r0, r3, r5, lsl #2
    11e8:	000d2f00 	andeq	r2, sp, r0, lsl #30
    11ec:	0b3a0803 	bleq	e83200 <__Stack_Size+0xe82e00>
    11f0:	1349053b 	movtne	r0, #38203	; 0x953b
    11f4:	1d300000 	ldcne	0, cr0, [r0, #-0]
    11f8:	11133101 	tstne	r3, r1, lsl #2
    11fc:	58061201 	stmdapl	r6, {r0, r9, ip}
    1200:	0105590b 	tsteq	r5, fp, lsl #18
    1204:	31000013 	tstcc	r0, r3, lsl r0
    1208:	13310034 	teqne	r1, #52	; 0x34
    120c:	00001702 	andeq	r1, r0, r2, lsl #14
    1210:	31000a32 	tstcc	r0, r2, lsr sl
    1214:	00011113 	andeq	r1, r1, r3, lsl r1
    1218:	011d3300 	tsteq	sp, r0, lsl #6
    121c:	01521331 	cmpeq	r2, r1, lsr r3
    1220:	0b581755 	bleq	1606f7c <__Stack_Size+0x1606b7c>
    1224:	13010559 	movwne	r0, #5465	; 0x1559
    1228:	0b340000 	bleq	d01230 <__Stack_Size+0xd00e30>
    122c:	00175501 	andseq	r5, r7, r1, lsl #10
    1230:	00343500 	eorseq	r3, r4, r0, lsl #10
    1234:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1238:	89360000 	ldmdbhi	r6!, {}	; <UNPREDICTABLE>
    123c:	11010182 	smlabbne	r1, r2, r1, r0
    1240:	37000001 	strcc	r0, [r0, -r1]
    1244:	00018289 	andeq	r8, r1, r9, lsl #5
    1248:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    124c:	00133119 	andseq	r3, r3, r9, lsl r1
    1250:	012e3800 	teqeq	lr, r0, lsl #16
    1254:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1258:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    125c:	01111927 	tsteq	r1, r7, lsr #18
    1260:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1264:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1268:	39000013 	stmdbcc	r0, {r0, r1, r4}
    126c:	08030005 	stmdaeq	r3, {r0, r2}
    1270:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1274:	17021349 	strne	r1, [r2, -r9, asr #6]
    1278:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
    127c:	03193f00 	tsteq	r9, #0, 30
    1280:	3b0b3a0e 	blcc	2cfac0 <__Stack_Size+0x2cf6c0>
    1284:	11192705 	tstne	r9, r5, lsl #14
    1288:	40061201 	andmi	r1, r6, r1, lsl #4
    128c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    1290:	343b0000 	ldrtcc	r0, [fp], #-0
    1294:	3a0e0300 	bcc	381e9c <__Stack_Size+0x381a9c>
    1298:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    129c:	3c193f13 	ldccc	15, cr3, [r9], {19}
    12a0:	3c000019 	stccc	0, cr0, [r0], {25}
    12a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12a8:	0b3b0b3a 	bleq	ec3f98 <__Stack_Size+0xec3b98>
    12ac:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    12b0:	00001802 	andeq	r1, r0, r2, lsl #16
    12b4:	3f012e3d 	svccc	0x00012e3d
    12b8:	3a0e0319 	bcc	381f24 <__Stack_Size+0x381b24>
    12bc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    12c0:	3c134919 	ldccc	9, cr4, [r3], {25}
    12c4:	00130119 	andseq	r0, r3, r9, lsl r1
    12c8:	012e3e00 	teqeq	lr, r0, lsl #28
    12cc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12d0:	0b3b0b3a 	bleq	ec3fc0 <__Stack_Size+0xec3bc0>
    12d4:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    12d8:	00001301 	andeq	r1, r0, r1, lsl #6
    12dc:	3f012e3f 	svccc	0x00012e3f
    12e0:	3a0e0319 	bcc	381f4c <__Stack_Size+0x381b4c>
    12e4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    12e8:	01193c19 	tsteq	r9, r9, lsl ip
    12ec:	40000013 	andmi	r0, r0, r3, lsl r0
    12f0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    12f4:	0b3a0e03 	bleq	e84b08 <__Stack_Size+0xe84708>
    12f8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    12fc:	0000193c 	andeq	r1, r0, ip, lsr r9
    1300:	01110100 	tsteq	r1, r0, lsl #2
    1304:	0b130e25 	bleq	4c4ba0 <__Stack_Size+0x4c47a0>
    1308:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    130c:	01111755 	tsteq	r1, r5, asr r7
    1310:	00001710 	andeq	r1, r0, r0, lsl r7
    1314:	0b002402 	bleq	a324 <__Stack_Size+0x9f24>
    1318:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    131c:	0300000e 	movweq	r0, #14
    1320:	08030016 	stmdaeq	r3, {r1, r2, r4}
    1324:	0b3b0b3a 	bleq	ec4014 <__Stack_Size+0xec3c14>
    1328:	00001349 	andeq	r1, r0, r9, asr #6
    132c:	0b000f04 	bleq	4f44 <__Stack_Size+0x4b44>
    1330:	0013490b 	andseq	r4, r3, fp, lsl #18
    1334:	012e0500 	teqeq	lr, r0, lsl #10
    1338:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    133c:	0b3b0b3a 	bleq	ec402c <__Stack_Size+0xec3c2c>
    1340:	01111927 	tsteq	r1, r7, lsr #18
    1344:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1348:	01194297 			; <UNDEFINED> instruction: 0x01194297
    134c:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1350:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    1354:	0b3b0b3a 	bleq	ec4044 <__Stack_Size+0xec3c44>
    1358:	17021349 	strne	r1, [r2, -r9, asr #6]
    135c:	34070000 	strcc	r0, [r7], #-0
    1360:	3a080300 	bcc	201f68 <__Stack_Size+0x201b68>
    1364:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    1368:	00180213 	andseq	r0, r8, r3, lsl r2
    136c:	00340800 	eorseq	r0, r4, r0, lsl #16
    1370:	0b3a0803 	bleq	e83384 <__Stack_Size+0xe82f84>
    1374:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    1378:	00001702 	andeq	r1, r0, r2, lsl #14
    137c:	03003409 	movweq	r3, #1033	; 0x409
    1380:	3b0b3a0e 	blcc	2cfbc0 <__Stack_Size+0x2cf7c0>
    1384:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1388:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	016c0205 	cmneq	ip, r5, lsl #4

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	080001b4 	stmdaeq	r0, {r2, r4, r5, r7, r8}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
      ac:	00010053 	andeq	r0, r1, r3, asr r0
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	0000f002 	andeq	pc, r0, r2
      b8:	01370308 	teqeq	r7, r8, lsl #6
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb9a0>
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb968>
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb96c>
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb970>
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb974>
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc8178>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc817c>
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb980>
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc8184>
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc8188>
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb98c>
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb990>
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb994>
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc8198>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	85010100 	strhi	r0, [r1, #-256]	; 0x100
     11c:	02000003 	andeq	r0, r0, #3
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
     124:	fb010200 	blx	4092e <__Stack_Size+0x4052e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
     12c:	00010101 	andeq	r0, r1, r1, lsl #2
     130:	00010000 	andeq	r0, r1, r0
     134:	2f2e0100 	svccs	0x002e0100
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     140:	2f2e0062 	svccs	0x002e0062
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16
     1bc:	66640000 	strbtvs	r0, [r4], -r0
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	01b80205 			; <UNDEFINED> instruction: 0x01b80205
     1e8:	a2030800 	andge	r0, r3, #0, 16
     1ec:	01020101 	tsteq	r2, r1, lsl #2
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	01ba0205 			; <UNDEFINED> instruction: 0x01ba0205
     1f8:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
     204:	01bc0205 			; <UNDEFINED> instruction: 0x01bc0205
     208:	ba030800 	blt	c2210 <__Stack_Size+0xc1e10>
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
     214:	01be0205 			; <UNDEFINED> instruction: 0x01be0205
     218:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     21c:	24150102 	ldrcs	r0, [r5], #-258	; 0x102
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
     22c:	01039503 	tsteq	r3, r3, lsl #10
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
     23c:	01039903 	tsteq	r3, r3, lsl #18
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	01e40205 	mvneq	r0, r5, lsl #4
     24c:	9f030800 	svcls	0x00030800
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	01e60205 	mvneq	r0, r5, lsl #4
     25c:	a3030800 	movwge	r0, #14336	; 0x3800
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	01e80205 	mvneq	r0, r5, lsl #4
     26c:	a7030800 	strge	r0, [r3, -r0, lsl #16]
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	01ea0205 	mvneq	r0, r5, lsl #4
     27c:	ab030800 	blge	c2284 <__Stack_Size+0xc1e84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	01ec0205 	mvneq	r0, r5, lsl #4
     28c:	af030800 	svcge	0x00030800
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	01ee0205 	mvneq	r0, r5, lsl #4
     29c:	b3030800 	movwlt	r0, #14336	; 0x3800
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	01f00205 	mvnseq	r0, r5, lsl #4
     2ac:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	fc020500 	stc2	5, cr0, [r2], {-0}
     2bc:	03080001 	movweq	r0, #32769	; 0x8001
     2c0:	2101029e 			; <UNDEFINED> instruction: 0x2101029e
     2c4:	2f1f2130 	svccs	0x001f2130
     2c8:	0b03211f 	bleq	c874c <__Stack_Size+0xc834c>
     2cc:	20750320 	rsbscs	r0, r5, r0, lsr #6
     2d0:	231d2322 	tstcs	sp, #-2013265920	; 0x88000000
     2d4:	92759291 	rsbsls	r9, r5, #268435465	; 0x10000009
     2d8:	2f3e7630 	svccs	0x003e7630
     2dc:	08212c21 	stmdaeq	r1!, {r0, r5, sl, fp, sp}
     2e0:	00010100 	andeq	r0, r1, r0, lsl #2
     2e4:	02a40205 	adceq	r0, r4, #1342177280	; 0x50000000
     2e8:	bd030800 	stclt	8, cr0, [r3, #-0]
     2ec:	1b250102 	blne	9406fc <__Stack_Size+0x9402fc>
     2f0:	8a3e7525 	bhi	f9d78c <__Stack_Size+0xf9d38c>
     2f4:	03212221 	teqeq	r1, #268435458	; 0x10000002
     2f8:	03312076 	teqeq	r1, #118	; 0x76
     2fc:	21212010 	teqcs	r1, r0, lsl r0
     300:	2221211e 	eorcs	r2, r1, #-2147483641	; 0x80000007
     304:	0b022131 	bleq	887d0 <__Stack_Size+0x883d0>
     308:	00010100 	andeq	r0, r1, r0, lsl #2
     30c:	03040205 	movweq	r0, #16901	; 0x4205
     310:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
     314:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     318:	01010006 	tsteq	r1, r6
     31c:	10020500 	andne	r0, r2, r0, lsl #10
     320:	03080003 	movweq	r0, #32771	; 0x8003
     324:	130102fb 	movwne	r0, #4859	; 0x12fb
     328:	01000602 	tsteq	r0, r2, lsl #12
     32c:	02050001 	andeq	r0, r5, #1
     330:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
     334:	0102ff03 	tsteq	r2, r3, lsl #30
     338:	5a313d13 	bpl	c4f78c <__Stack_Size+0xc4f38c>
     33c:	01000602 	tsteq	r0, r2, lsl #12
     340:	02050001 	andeq	r0, r5, #1
     344:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
     348:	01038803 	tsteq	r3, r3, lsl #16
     34c:	00060213 	andeq	r0, r6, r3, lsl r2
     350:	05000101 	streq	r0, [r0, #-257]	; 0x101
     354:	00034802 	andeq	r4, r3, r2, lsl #16
     358:	02e40308 	rsceq	r0, r4, #8, 6	; 0x20000000
     35c:	3d762101 	ldfcce	f2, [r6, #-4]!
     360:	0402214d 	streq	r2, [r2], #-333	; 0x14d
     364:	00010100 	andeq	r0, r1, r0, lsl #2
     368:	03700205 	cmneq	r0, #1342177280	; 0x50000000
     36c:	27030800 	strcs	r0, [r3, -r0, lsl #16]
     370:	20110301 	andscs	r0, r1, r1, lsl #6
     374:	02005b93 	andeq	r5, r0, #150528	; 0x24c00
     378:	20060204 	andcs	r0, r6, r4, lsl #4
     37c:	3d887806 	stccc	8, cr7, [r8, #24]
     380:	2d21211f 	stfcss	f2, [r1, #-124]!	; 0xffffff84
     384:	032f302f 	teqeq	pc, #47	; 0x2f
     388:	032000dc 	teqeq	r0, #220	; 0xdc
     38c:	022e7fa8 	eoreq	r7, lr, #168, 30	; 0x2a0
     390:	0101000c 	tsteq	r1, ip
     394:	00020500 	andeq	r0, r2, r0, lsl #10
     398:	03000000 	movweq	r0, #0
     39c:	150101a6 	strne	r0, [r1, #-422]	; 0x1a6
     3a0:	01000202 	tsteq	r0, r2, lsl #4
     3a4:	02050001 	andeq	r0, r5, #1
     3a8:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
     3ac:	0101ac03 	tsteq	r1, r3, lsl #24
     3b0:	023f3e14 	eorseq	r3, pc, #20, 28	; 0x140
     3b4:	01010008 	tsteq	r1, r8
     3b8:	04020500 	streq	r0, [r2], #-1280	; 0x500
     3bc:	03080004 	movweq	r0, #32772	; 0x8004
     3c0:	170101b6 			; <UNDEFINED> instruction: 0x170101b6
     3c4:	32222c22 	eorcc	r2, r2, #8704	; 0x2200
     3c8:	01000602 	tsteq	r0, r2, lsl #12
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
     3d4:	0101c403 	tsteq	r1, r3, lsl #8
     3d8:	84302131 	ldrthi	r2, [r0], #-305	; 0x131
     3dc:	2f312f40 	svccs	0x00312f40
     3e0:	312f4b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
     3e4:	2f2f3d3e 	svccs	0x002f3d3e
     3e8:	222f4b22 	eorcs	r4, pc, #34816	; 0x8800
     3ec:	502f222c 	eorpl	r2, pc, ip, lsr #4
     3f0:	01000702 	tsteq	r0, r2, lsl #14
     3f4:	02050001 	andeq	r0, r5, #1
     3f8:	080004a0 	stmdaeq	r0, {r5, r7, sl}
     3fc:	0101f403 	tsteq	r1, r3, lsl #8
     400:	221f4016 	andscs	r4, pc, #22
     404:	3d21211e 	stfccs	f2, [r1, #-120]!	; 0xffffff88
     408:	00080223 	andeq	r0, r8, r3, lsr #4
     40c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     410:	0004c802 	andeq	ip, r4, r2, lsl #16
     414:	02830308 	addeq	r0, r3, #8, 6	; 0x20000000
     418:	3d3d1301 	ldccc	3, cr1, [sp, #-4]!
     41c:	00060236 	andeq	r0, r6, r6, lsr r2
     420:	05000101 	streq	r0, [r0, #-257]	; 0x101
     424:	0004e402 	andeq	lr, r4, r2, lsl #8
     428:	00d60308 	sbcseq	r0, r6, r8, lsl #6
     42c:	02021401 	andeq	r1, r2, #16777216	; 0x1000000
     430:	00010100 	andeq	r0, r1, r0, lsl #2
     434:	04e80205 	strbteq	r0, [r8], #517	; 0x205
     438:	bd030800 	stclt	8, cr0, [r3, #-0]
     43c:	3d240103 	stfccs	f0, [r4, #-12]!
     440:	3d1f303d 	ldccc	0, cr3, [pc, #-244]	; 354 <_Minimum_Stack_Size+0x254>
     444:	0003022f 	andeq	r0, r3, pc, lsr #4
     448:	05000101 	streq	r0, [r0, #-257]	; 0x101
     44c:	00050c02 	andeq	r0, r5, r2, lsl #24
     450:	02900308 	addseq	r0, r0, #8, 6	; 0x20000000
     454:	4b302101 	blmi	c08860 <__Stack_Size+0xc08460>
     458:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     45c:	022f303d 	eoreq	r3, pc, #61	; 0x3d
     460:	0101000d 	tsteq	r1, sp
     464:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     468:	03080005 	movweq	r0, #32773	; 0x8005
     46c:	220103c8 	andcs	r0, r1, #200, 6	; 0x20000003
     470:	2f3d1d40 	svccs	0x003d1d40
     474:	03022f2f 	movweq	r2, #12079	; 0x2f2f
     478:	00010100 	andeq	r0, r1, r0, lsl #2
     47c:	05700205 	ldrbeq	r0, [r0, #-517]!	; 0x205
     480:	d1030800 	tstle	r3, r0, lsl #16
     484:	40210103 	eormi	r0, r1, r3, lsl #2
     488:	3d59321c 	lfmcc	f3, 2, [r9, #-112]	; 0xffffff90
     48c:	4b3c0d03 	blmi	f038a0 <__Stack_Size+0xf034a0>
     490:	423d4b50 	eorsmi	r4, sp, #80, 22	; 0x14000
     494:	5942345c 	stmdbpl	r2, {r2, r3, r4, r6, sl, ip, sp}^
     498:	3e4b5e3d 	mcrcc	14, 2, r5, cr11, cr13, {1}
     49c:	022a5f42 	eoreq	r5, sl, #264	; 0x108
     4a0:	0101000e 	tsteq	r1, lr
     4a4:	0000006e 	andeq	r0, r0, lr, rrx
     4a8:	00680002 	rsbeq	r0, r8, r2
     4ac:	01020000 	mrseq	r0, (UNDEF: 2)
     4b0:	000d0efb 	strdeq	r0, [sp], -fp
     4b4:	01010101 	tsteq	r1, r1, lsl #2
     4b8:	01000000 	mrseq	r0, (UNDEF: 0)
     4bc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     4c0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     4c4:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     4c8:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
     4cc:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
     4d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4d4:	74730000 	ldrbtvc	r0, [r3], #-0
     4d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     4dc:	5f783031 	svcpl	0x00783031
     4e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     4e4:	0100682e 	tsteq	r0, lr, lsr #16
     4e8:	73750000 	cmnvc	r5, #0
     4ec:	6f635f62 	svcvs	0x00635f62
     4f0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     4f4:	00000200 	andeq	r0, r0, r0, lsl #4
     4f8:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     4fc:	00000068 	andeq	r0, r0, r8, rrx
     500:	62737500 	rsbsvs	r7, r3, #0, 10
     504:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     508:	70697263 	rsbvc	r7, r9, r3, ror #4
     50c:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
     510:	00000063 	andeq	r0, r0, r3, rrx
     514:	00a50000 	adceq	r0, r5, r0
     518:	00020000 	andeq	r0, r2, r0
     51c:	0000005d 	andeq	r0, r0, sp, asr r0
     520:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     524:	0101000d 	tsteq	r1, sp
     528:	00000101 	andeq	r0, r0, r1, lsl #2
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	732f2e01 	teqvc	pc, #1, 28
     534:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     538:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     53c:	616d0000 	cmnvs	sp, r0
     540:	632e6e69 	teqvs	lr, #1680	; 0x690
     544:	00000000 	andeq	r0, r0, r0
     548:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     54c:	30316632 	eorscc	r6, r1, r2, lsr r6
     550:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     554:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     558:	00000100 	andeq	r0, r0, r0, lsl #2
     55c:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     560:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     564:	0000682e 	andeq	r6, r0, lr, lsr #16
     568:	73750000 	cmnvc	r5, #0
     56c:	00682e62 	rsbeq	r2, r8, r2, ror #28
     570:	64000000 	strvs	r0, [r0], #-0
     574:	682e7566 	stmdavs	lr!, {r1, r2, r5, r6, r8, sl, ip, sp, lr}
     578:	00000000 	andeq	r0, r0, r0
     57c:	02050000 	andeq	r0, r5, #0
     580:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
     584:	21012603 	tstcs	r1, r3, lsl #12
     588:	2f2f2f2f 	svccs	0x002f2f2f
     58c:	02009432 	andeq	r9, r0, #838860800	; 0x32000000
     590:	9e060104 	adflss	f0, f6, f4
     594:	04020058 	streq	r0, [r2], #-88	; 0x58
     598:	02002004 	andeq	r2, r0, #4
     59c:	24060404 	strcs	r0, [r6], #-1028	; 0x404
     5a0:	01040200 	mrseq	r0, R12_usr
     5a4:	31062006 	tstcc	r6, r6
     5a8:	02003e92 	andeq	r3, r0, #2336	; 0x920
     5ac:	79030204 	stmdbvc	r3, {r2, r9}
     5b0:	2e0c034a 	cdpcs	3, 0, cr0, cr12, cr10, {2}
     5b4:	4f4c324c 	svcmi	0x004c324c
     5b8:	0a023383 	beq	8d3cc <__Stack_Size+0x8cfcc>
     5bc:	a7010100 	strge	r0, [r1, -r0, lsl #2]
     5c0:	02000002 	andeq	r0, r0, #2
     5c4:	00006c00 	andeq	r6, r0, r0, lsl #24
     5c8:	fb010200 	blx	40dd2 <__Stack_Size+0x409d2>
     5cc:	01000d0e 	tsteq	r0, lr, lsl #26
     5d0:	00010101 	andeq	r0, r1, r1, lsl #2
     5d4:	00010000 	andeq	r0, r1, r0
     5d8:	2f2e0100 	svccs	0x002e0100
     5dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5e0:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     5e4:	68000062 	stmdavs	r0, {r1, r5, r6}
     5e8:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     5ec:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     5f0:	00000063 	andeq	r0, r0, r3, rrx
     5f4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     5f8:	31663233 	cmncc	r6, r3, lsr r2
     5fc:	745f7830 	ldrbvc	r7, [pc], #-2096	; 604 <__Stack_Size+0x204>
     600:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     604:	00010068 	andeq	r0, r1, r8, rrx
     608:	72616800 	rsbvc	r6, r1, #0, 16
     60c:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     610:	00682e65 	rsbeq	r2, r8, r5, ror #28
     614:	75000000 	strvc	r0, [r0, #-0]
     618:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     61c:	00000000 	andeq	r0, r0, r0
     620:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     624:	336d7865 	cmncc	sp, #6619136	; 0x650000
     628:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
     62c:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     630:	00000100 	andeq	r0, r0, r0, lsl #2
     634:	02050000 	andeq	r0, r5, #0
     638:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
     63c:	14012c03 	strne	r2, [r1], #-3075	; 0xc03
     640:	04024b3b 	streq	r4, [r2], #-2875	; 0xb3b
     644:	00010100 	andeq	r0, r1, r0, lsl #2
     648:	00000205 	andeq	r0, r0, r5, lsl #4
     64c:	31030000 	mrscc	r0, (UNDEF: 3)
     650:	025d1401 	subseq	r1, sp, #16777216	; 0x1000000
     654:	01010004 	tsteq	r1, r4
     658:	f2020500 	vrshl.s8	d0, d0, d2
     65c:	03080006 	movweq	r0, #32774	; 0x8006
     660:	0f03013a 	svceq	0x0003013a
     664:	00020201 	andeq	r0, r2, r1, lsl #4
     668:	05000101 	streq	r0, [r0, #-257]	; 0x101
     66c:	0006f602 	andeq	pc, r6, r2, lsl #12
     670:	00cc0308 	sbceq	r0, ip, r8, lsl #6
     674:	493d2e01 	ldmdbmi	sp!, {r0, r9, sl, fp, sp}
     678:	0402003d 	streq	r0, [r2], #-61	; 0x3d
     67c:	20063101 	andcs	r3, r6, r1, lsl #2
     680:	01040200 	mrseq	r0, R12_usr
     684:	02002206 	andeq	r2, r0, #1610612736	; 0x60000000
     688:	00220204 	eoreq	r0, r2, r4, lsl #4
     68c:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
     690:	02005a33 	andeq	r5, r0, #208896	; 0x33000
     694:	20060104 	andcs	r0, r6, r4, lsl #2
     698:	02040200 	andeq	r0, r4, #0, 4
     69c:	02002206 	andeq	r2, r0, #1610612736	; 0x60000000
     6a0:	321e0204 	andscc	r0, lr, #4, 4	; 0x40000000
     6a4:	01000a02 	tsteq	r0, r2, lsl #20
     6a8:	02050001 	andeq	r0, r5, #1
     6ac:	08000748 	stmdaeq	r0, {r3, r6, r8, r9, sl}
     6b0:	0100e103 	tsteq	r0, r3, lsl #2
     6b4:	4b1f2113 	blmi	7c8b08 <__Stack_Size+0x7c8708>
     6b8:	4c4b674b 	mcrrmi	7, 4, r6, fp, cr11
     6bc:	01000c02 	tsteq	r0, r2, lsl #24
     6c0:	02050001 	andeq	r0, r5, #1
     6c4:	08000790 	stmdaeq	r0, {r4, r7, r8, r9, sl}
     6c8:	0100eb03 	tsteq	r0, r3, lsl #22
     6cc:	04020014 	streq	r0, [r2], #-20
     6d0:	034d5901 	movteq	r5, #55553	; 0xd901
     6d4:	00853c0f 	addeq	r3, r5, pc, lsl #24
     6d8:	4b010402 	blmi	416e8 <__Stack_Size+0x412e8>
     6dc:	0402004d 	streq	r0, [r2], #-77	; 0x4d
     6e0:	4b3e4b01 	blmi	f932ec <__Stack_Size+0xf92eec>
     6e4:	01000902 	tsteq	r0, r2, lsl #18
     6e8:	02050001 	andeq	r0, r5, #1
     6ec:	080007f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl}
     6f0:	01018f03 	tsteq	r1, r3, lsl #30
     6f4:	000a021a 	andeq	r0, sl, sl, lsl r2
     6f8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     6fc:	00080402 	andeq	r0, r8, r2, lsl #8
     700:	019a0308 	orrseq	r0, sl, r8, lsl #6
     704:	214b1401 	cmpcs	fp, r1, lsl #8
     708:	0402002f 	streq	r0, [r2], #-47	; 0x2f
     70c:	023d2401 	eorseq	r2, sp, #16777216	; 0x1000000
     710:	01010003 	tsteq	r1, r3
     714:	20020500 	andcs	r0, r2, r0, lsl #10
     718:	03080008 	movweq	r0, #32776	; 0x8008
     71c:	130101a6 	movwne	r0, #4518	; 0x11a6
     720:	07023322 	streq	r3, [r2, -r2, lsr #6]
     724:	00010100 	andeq	r0, r1, r0, lsl #2
     728:	08340205 	ldmdaeq	r4!, {r0, r2, r9}
     72c:	ca030800 	bgt	c2734 <__Stack_Size+0xc2334>
     730:	0c030101 	stfeqs	f0, [r3], {1}
     734:	20740301 	rsbscs	r0, r4, r1, lsl #6
     738:	24200c03 	strtcs	r0, [r0], #-3075	; 0xc03
     73c:	2c313d1c 	ldccs	13, cr3, [r1], #-112	; 0xffffff90
     740:	311d2331 	tstcc	sp, r1, lsr r3
     744:	231d243b 	tstcs	sp, #989855744	; 0x3b000000
     748:	212f3073 	teqcs	pc, r3, ror r0	; <UNPREDICTABLE>
     74c:	1f213122 	svcne	0x00213122
     750:	09024921 	stmdbeq	r2, {r0, r5, r8, fp, lr}
     754:	00010100 	andeq	r0, r1, r0, lsl #2
     758:	08a00205 	stmiaeq	r0!, {r0, r2, r9}
     75c:	ed030800 	stc	8, cr0, [r3, #-0]
     760:	59140101 	ldmdbpl	r4, {r0, r8}
     764:	02302f2f 	eorseq	r2, r0, #47, 30	; 0xbc
     768:	01010007 	tsteq	r1, r7
     76c:	c4020500 	strgt	r0, [r2], #-1280	; 0x500
     770:	03080008 	movweq	r0, #32776	; 0x8008
     774:	030101b0 	movweq	r0, #4528	; 0x11b0
     778:	0320018d 	teqeq	r0, #1073741859	; 0x40000023
     77c:	1d2e7ef6 	stcne	14, cr7, [lr, #-984]!	; 0xfffffc28
     780:	20018d03 	andcs	r8, r1, r3, lsl #26
     784:	207efd03 	rsbscs	pc, lr, r3, lsl #26
     788:	3132312f 	teqcc	r2, pc, lsr #2
     78c:	0005023e 	andeq	r0, r5, lr, lsr r2
     790:	05000101 	streq	r0, [r0, #-257]	; 0x101
     794:	0008f002 	andeq	pc, r8, r2
     798:	01f70308 	mvnseq	r0, r8, lsl #6
     79c:	02001601 	andeq	r1, r0, #1048576	; 0x100000
     7a0:	02400104 	subeq	r0, r0, #4, 2
     7a4:	01010007 	tsteq	r1, r7
     7a8:	04020500 	streq	r0, [r2], #-1280	; 0x500
     7ac:	03080009 	movweq	r0, #32777	; 0x8009
     7b0:	13010283 	movwne	r0, #4739	; 0x1283
     7b4:	0022211f 	eoreq	r2, r2, pc, lsl r1
     7b8:	30010402 	andcc	r0, r1, r2, lsl #8
     7bc:	02002167 	andeq	r2, r0, #-1073741799	; 0xc0000019
     7c0:	4f2f0104 	svcmi	0x002f0104
     7c4:	00070223 	andeq	r0, r7, r3, lsr #4
     7c8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     7cc:	00000002 	andeq	r0, r0, r2
     7d0:	02940300 	addseq	r0, r4, #0, 6
     7d4:	02002e01 	andeq	r2, r0, #1, 28
     7d8:	4b2f0104 	blmi	bc0bf0 <__Stack_Size+0xbc07f0>
     7dc:	040221b1 	streq	r2, [r2], #-433	; 0x1b1
     7e0:	00010100 	andeq	r0, r1, r0, lsl #2
     7e4:	09380205 	ldmdbeq	r8!, {r0, r2, r9}
     7e8:	9e030800 	cdpls	8, 0, cr0, cr3, cr0, {0}
     7ec:	2f220102 	svccs	0x00220102
     7f0:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     7f4:	01040200 	mrseq	r0, R12_usr
     7f8:	02004b24 	andeq	r4, r0, #36, 22	; 0x9000
     7fc:	3d3d0104 	ldfccs	f0, [sp, #-16]!
     800:	01040200 	mrseq	r0, R12_usr
     804:	232f3e3d 	teqcs	pc, #976	; 0x3d0
     808:	00090225 	andeq	r0, r9, r5, lsr #4
     80c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     810:	00098402 	andeq	r8, r9, r2, lsl #8
     814:	02b90308 	adcseq	r0, r9, #8, 6	; 0x20000000
     818:	06021601 	streq	r1, [r2], -r1, lsl #12
     81c:	00010100 	andeq	r0, r1, r0, lsl #2
     820:	09900205 	ldmibeq	r0, {r0, r2, r9}
     824:	c0030800 	andgt	r0, r3, r0, lsl #16
     828:	3d140102 	ldfccs	f0, [r4, #-8]
     82c:	01000902 	tsteq	r0, r2, lsl #18
     830:	02050001 	andeq	r0, r5, #1
     834:	080009a8 	stmdaeq	r0, {r3, r5, r7, r8, fp}
     838:	0102c903 	tsteq	r2, r3, lsl #18
     83c:	4c302214 	lfmmi	f2, 4, [r0], #-80	; 0xffffffb0
     840:	01000202 	tsteq	r0, r2, lsl #4
     844:	02050001 	andeq	r0, r5, #1
     848:	080009bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp}
     84c:	0102d503 	tsteq	r2, r3, lsl #10
     850:	04024b14 	streq	r4, [r2], #-2836	; 0xb14
     854:	00010100 	andeq	r0, r1, r0, lsl #2
     858:	09cc0205 	stmibeq	ip, {r0, r2, r9}^
     85c:	db030800 	blle	c2864 <__Stack_Size+0xc2464>
     860:	30150102 	andscc	r0, r5, r2, lsl #2
     864:	00090226 	andeq	r0, r9, r6, lsr #4
     868:	022e0101 	eoreq	r0, lr, #1073741824	; 0x40000000
     86c:	00020000 	andeq	r0, r2, r0
     870:	00000082 	andeq	r0, r0, r2, lsl #1
     874:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     878:	0101000d 	tsteq	r1, sp
     87c:	00000101 	andeq	r0, r0, r1, lsl #2
     880:	00000100 	andeq	r0, r0, r0, lsl #2
     884:	732f2e01 	teqvc	pc, #1, 28
     888:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     88c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     890:	752f2e00 	strvc	r2, [pc, #-3584]!	; fffffa98 <BootRAM+0xef70239>
     894:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
     898:	00006269 	andeq	r6, r0, r9, ror #4
     89c:	2e756664 	cdpcs	6, 7, cr6, cr5, cr4, {3}
     8a0:	00000063 	andeq	r0, r0, r3, rrx
     8a4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     8a8:	31663233 	cmncc	r6, r3, lsr r2
     8ac:	745f7830 	ldrbvc	r7, [pc], #-2096	; 8b4 <__Stack_Size+0x4b4>
     8b0:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     8b4:	00010068 	andeq	r0, r1, r8, rrx
     8b8:	62737500 	rsbsvs	r7, r3, #0, 10
     8bc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     8c0:	00682e65 	rsbeq	r2, r8, r5, ror #28
     8c4:	64000002 	strvs	r0, [r0], #-2
     8c8:	682e7566 	stmdavs	lr!, {r1, r2, r5, r6, r8, sl, ip, sp, lr}
     8cc:	00000000 	andeq	r0, r0, r0
     8d0:	5f627375 	svcpl	0x00627375
     8d4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     8d8:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8dc:	73750000 	cmnvc	r5, #0
     8e0:	00682e62 	rsbeq	r2, r8, r2, ror #28
     8e4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     8e8:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     8ec:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     8f0:	00000068 	andeq	r0, r0, r8, rrx
     8f4:	05000000 	streq	r0, [r0, #-0]
     8f8:	0009e402 	andeq	lr, r9, r2, lsl #8
     8fc:	01370308 	teqeq	r7, r8, lsl #6
     900:	211c3213 	tstcs	ip, r3, lsl r2
     904:	21212121 	teqcs	r1, r1, lsr #2
     908:	211e2221 	tstcs	lr, r1, lsr #4
     90c:	214b2f2f 	cmpcs	fp, pc, lsr #30
     910:	022f211f 	eoreq	r2, pc, #-1073741817	; 0xc0000007
     914:	01010015 	tsteq	r1, r5, lsl r0
     918:	40020500 	andmi	r0, r2, r0, lsl #10
     91c:	0308000a 	movweq	r0, #32778	; 0x800a
     920:	210102d5 	ldrdcs	r0, [r1, -r5]
     924:	1f211f21 	svcne	0x00211f21
     928:	21221e23 	teqcs	r2, r3, lsr #28
     92c:	0e03222f 	cdpeq	2, 0, cr2, cr3, cr15, {1}
     930:	2e73032e 	cdpcs	3, 7, cr0, cr3, cr14, {1}
     934:	242f4230 	strtcs	r4, [pc], #-560	; 93c <__Stack_Size+0x53c>
     938:	0008022c 	andeq	r0, r8, ip, lsr #4
     93c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     940:	00000002 	andeq	r0, r0, r2
     944:	02ed0300 	rsceq	r0, sp, #0, 6
     948:	00010201 	andeq	r0, r1, r1, lsl #4
     94c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     950:	000a8402 	andeq	r8, sl, r2, lsl #8
     954:	02f00308 	rscseq	r0, r0, #8, 6	; 0x20000000
     958:	4b211301 	blmi	845564 <__Stack_Size+0x845164>
     95c:	05022222 	streq	r2, [r2, #-546]	; 0x222
     960:	00010100 	andeq	r0, r1, r0, lsl #2
     964:	0a9c0205 	beq	fe701180 <BootRAM+0xd671921>
     968:	f9030800 			; <UNDEFINED> instruction: 0xf9030800
     96c:	21130102 	tstcs	r3, r2, lsl #2
     970:	0222224b 	eoreq	r2, r2, #-1342177276	; 0xb0000004
     974:	01010005 	tsteq	r1, r5
     978:	b4020500 	strlt	r0, [r2], #-1280	; 0x500
     97c:	0308000a 	movweq	r0, #32778	; 0x800a
     980:	22010383 	andcs	r0, r1, #201326594	; 0xc000002
     984:	2f4b211f 	svccs	0x004b211f
     988:	07023e22 	streq	r3, [r2, -r2, lsr #28]
     98c:	00010100 	andeq	r0, r1, r0, lsl #2
     990:	0adc0205 	beq	ff7011ac <BootRAM+0xe67194d>
     994:	8d030800 	stchi	8, cr0, [r3, #-0]
     998:	21210103 	teqcs	r1, r3, lsl #2
     99c:	02842267 	addeq	r2, r4, #1879048198	; 0x70000006
     9a0:	01010009 	tsteq	r1, r9
     9a4:	10020500 	andne	r0, r2, r0, lsl #10
     9a8:	0308000b 	movweq	r0, #32779	; 0x800b
     9ac:	03010396 	movweq	r0, #5014	; 0x1396
     9b0:	1e3e2013 	mrcne	0, 1, r2, cr14, cr3, {0}
     9b4:	3e315c22 	cdpcc	12, 3, cr5, cr1, cr2, {1}
     9b8:	01040200 	mrseq	r0, R12_usr
     9bc:	02002006 	andeq	r2, r0, #6
     9c0:	59060204 	stmdbpl	r6, {r2, r9}
     9c4:	02040200 	andeq	r0, r4, #0, 4
     9c8:	025a3357 	subseq	r3, sl, #1543503873	; 0x5c000001
     9cc:	0101000c 	tsteq	r1, ip
     9d0:	6c020500 	cfstr32vs	mvfx0, [r2], {-0}
     9d4:	0308000b 	movweq	r0, #32779	; 0x800b
     9d8:	310100ca 	smlabtcc	r1, sl, r0, r0
     9dc:	21321c24 	teqcs	r2, r4, lsr #24
     9e0:	221e231f 	andscs	r2, lr, #2080374784	; 0x7c000000
     9e4:	4b5a2222 	blmi	1689274 <__Stack_Size+0x1688e74>
     9e8:	1f221e22 	svcne	0x00221e22
     9ec:	3c14033d 	ldccc	3, cr0, [r4], {61}	; 0x3d
     9f0:	2f2f3e2f 	svccs	0x002f3e2f
     9f4:	3d207103 	stfccs	f7, [r0, #-12]!
     9f8:	3d302f31 	ldccc	15, cr2, [r0, #-196]!	; 0xffffff3c
     9fc:	36200a03 	strtcc	r0, [r0], -r3, lsl #20
     a00:	4c3d312f 	ldfmis	f3, [sp], #-188	; 0xffffff44
     a04:	580c0367 	stmdapl	ip, {r0, r1, r2, r5, r6, r8, r9}
     a08:	4b2f242a 	blmi	bc9ab8 <__Stack_Size+0xbc96b8>
     a0c:	31312f25 	teqcc	r1, r5, lsr #30
     a10:	03313530 	teqeq	r1, #48, 10	; 0xc000000
     a14:	3f2f581d 	svccc	0x002f581d
     a18:	1f4c3035 	svcne	0x004c3035
     a1c:	30412121 	subcc	r2, r1, r1, lsr #2
     a20:	31312f59 	teqcc	r1, r9, asr pc
     a24:	4330303e 	teqmi	r0, #62	; 0x3e
     a28:	2f2f5931 	svccs	0x002f5931
     a2c:	31353543 	teqcc	r5, r3, asr #10
     a30:	1f3d3059 	svcne	0x003d3059
     a34:	c9211f3d 	stmdbgt	r1!, {r0, r2, r3, r4, r5, r8, r9, sl, fp, ip}
     a38:	414b764f 	cmpmi	fp, pc, asr #12
     a3c:	2f2f302f 	svccs	0x002f302f
     a40:	31352f30 	teqcc	r5, r0, lsr pc
     a44:	30302f5a 	eorscc	r2, r0, sl, asr pc
     a48:	312f362f 	teqcc	pc, pc, lsr #12
     a4c:	001f0225 	andseq	r0, pc, r5, lsr #4
     a50:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a54:	00000002 	andeq	r0, r0, r2
     a58:	03be0300 			; <UNDEFINED> instruction: 0x03be0300
     a5c:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     a60:	01010004 	tsteq	r1, r4
     a64:	00020500 	andeq	r0, r2, r0, lsl #10
     a68:	03000000 	movweq	r0, #0
     a6c:	130103c2 	movwne	r0, #5058	; 0x13c2
     a70:	01000602 	tsteq	r0, r2, lsl #12
     a74:	02050001 	andeq	r0, r5, #1
     a78:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
     a7c:	0103c603 	tsteq	r3, r3, lsl #12
     a80:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     a84:	00010100 	andeq	r0, r1, r0, lsl #2
     a88:	0dac0205 	sfmeq	f0, 4, [ip, #20]!
     a8c:	ca030800 	bgt	c2a94 <__Stack_Size+0xc2694>
     a90:	02000103 	andeq	r0, r0, #-1073741824	; 0xc0000000
     a94:	02150104 	andseq	r0, r5, #4, 2
     a98:	01010002 	tsteq	r1, r2
     a9c:	000004c7 	andeq	r0, r0, r7, asr #9
     aa0:	00450002 	subeq	r0, r5, r2
     aa4:	01020000 	mrseq	r0, (UNDEF: 2)
     aa8:	000d0efb 	strdeq	r0, [sp], -fp
     aac:	01010101 	tsteq	r1, r1, lsl #2
     ab0:	01000000 	mrseq	r0, (UNDEF: 0)
     ab4:	75010000 	strvc	r0, [r1, #-0]
     ab8:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
     abc:	00006269 	andeq	r6, r0, r9, ror #4
     ac0:	5f627375 	svcpl	0x00627375
     ac4:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
     ac8:	0100632e 	tsteq	r0, lr, lsr #6
     acc:	73750000 	cmnvc	r5, #0
     ad0:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     ad4:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     ad8:	00000100 	andeq	r0, r0, r0, lsl #2
     adc:	5f627375 	svcpl	0x00627375
     ae0:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
     ae4:	0100682e 	tsteq	r0, lr, lsr #16
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	00000205 	andeq	r0, r0, r5, lsl #4
     af0:	22030000 	andcs	r0, r3, #0
     af4:	06021301 	streq	r1, [r2], -r1, lsl #6
     af8:	00010100 	andeq	r0, r1, r0, lsl #2
     afc:	00000205 	andeq	r0, r0, r5, lsl #4
     b00:	2e030000 	cdpcs	0, 0, cr0, cr3, cr0, {0}
     b04:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     b08:	01010004 	tsteq	r1, r4
     b0c:	00020500 	andeq	r0, r2, r0, lsl #10
     b10:	03000000 	movweq	r0, #0
     b14:	0213013a 	andseq	r0, r3, #-2147483634	; 0x8000000e
     b18:	01010006 	tsteq	r1, r6
     b1c:	00020500 	andeq	r0, r2, r0, lsl #10
     b20:	03000000 	movweq	r0, #0
     b24:	130100c6 	movwne	r0, #4294	; 0x10c6
     b28:	0004022f 	andeq	r0, r4, pc, lsr #4
     b2c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b30:	00000002 	andeq	r0, r0, r2
     b34:	00d20300 	sbcseq	r0, r2, r0, lsl #6
     b38:	022f1301 	eoreq	r1, pc, #67108864	; 0x4000000
     b3c:	01010004 	tsteq	r1, r4
     b40:	00020500 	andeq	r0, r2, r0, lsl #10
     b44:	03000000 	movweq	r0, #0
     b48:	130100de 	movwne	r0, #4318	; 0x10de
     b4c:	01000602 	tsteq	r0, r2, lsl #12
     b50:	02050001 	andeq	r0, r5, #1
     b54:	00000000 	andeq	r0, r0, r0
     b58:	0100ea03 	tsteq	r0, r3, lsl #20
     b5c:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     b60:	00010100 	andeq	r0, r1, r0, lsl #2
     b64:	00000205 	andeq	r0, r0, r5, lsl #4
     b68:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
     b6c:	02130100 	andseq	r0, r3, #0, 2
     b70:	01010008 	tsteq	r1, r8
     b74:	00020500 	andeq	r0, r2, r0, lsl #10
     b78:	03000000 	movweq	r0, #0
     b7c:	13010182 	movwne	r0, #4482	; 0x1182
     b80:	0004022f 	andeq	r0, r4, pc, lsr #4
     b84:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b88:	00000002 	andeq	r0, r0, r2
     b8c:	018f0300 	orreq	r0, pc, r0, lsl #6
     b90:	07021301 	streq	r1, [r2, -r1, lsl #6]
     b94:	00010100 	andeq	r0, r1, r0, lsl #2
     b98:	00000205 	andeq	r0, r0, r5, lsl #4
     b9c:	9b030000 	blls	c0ba4 <__Stack_Size+0xc07a4>
     ba0:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
     ba4:	01000202 	tsteq	r0, r2, lsl #4
     ba8:	02050001 	andeq	r0, r5, #1
     bac:	00000000 	andeq	r0, r0, r0
     bb0:	0101a803 	tsteq	r1, r3, lsl #16
     bb4:	000e0213 	andeq	r0, lr, r3, lsl r2
     bb8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bbc:	00000002 	andeq	r0, r0, r2
     bc0:	01b40300 			; <UNDEFINED> instruction: 0x01b40300
     bc4:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
     bc8:	01010003 	tsteq	r1, r3
     bcc:	b0020500 	andlt	r0, r2, r0, lsl #10
     bd0:	0308000d 	movweq	r0, #32781	; 0x800d
     bd4:	130101c1 	movwne	r0, #4545	; 0x11c1
     bd8:	01001502 	tsteq	r0, r2, lsl #10
     bdc:	02050001 	andeq	r0, r5, #1
     be0:	00000000 	andeq	r0, r0, r0
     be4:	0101ce03 	tsteq	r1, r3, lsl #28
     be8:	00150213 	andseq	r0, r5, r3, lsl r2
     bec:	05000101 	streq	r0, [r0, #-257]	; 0x101
     bf0:	00000002 	andeq	r0, r0, r2
     bf4:	01db0300 	bicseq	r0, fp, r0, lsl #6
     bf8:	01410301 	cmpeq	r1, r1, lsl #6
     bfc:	5800c203 	stmdapl	r0, {r0, r1, r9, lr, pc}
     c00:	207fbe03 	rsbscs	fp, pc, r3, lsl #28
     c04:	2000c203 	andcs	ip, r0, r3, lsl #4
     c08:	02303e22 	eorseq	r3, r0, #544	; 0x220
     c0c:	01010005 	tsteq	r1, r5
     c10:	00020500 	andeq	r0, r2, r0, lsl #10
     c14:	03000000 	movweq	r0, #0
     c18:	130101f0 	movwne	r0, #4592	; 0x11f0
     c1c:	00030267 	andeq	r0, r3, r7, ror #4
     c20:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c24:	00000002 	andeq	r0, r0, r2
     c28:	01fc0300 	mvnseq	r0, r0, lsl #6
     c2c:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
     c30:	01010003 	tsteq	r1, r3
     c34:	00020500 	andeq	r0, r2, r0, lsl #10
     c38:	03000000 	movweq	r0, #0
     c3c:	13010288 	movwne	r0, #4744	; 0x1288
     c40:	01000f02 	tsteq	r0, r2, lsl #30
     c44:	02050001 	andeq	r0, r5, #1
     c48:	08000dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp}
     c4c:	01029403 	tsteq	r2, r3, lsl #8
     c50:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     c54:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c58:	00000002 	andeq	r0, r0, r2
     c5c:	02a00300 	adceq	r0, r0, #0, 6
     c60:	0f021301 	svceq	0x00021301
     c64:	00010100 	andeq	r0, r1, r0, lsl #2
     c68:	00000205 	andeq	r0, r0, r5, lsl #4
     c6c:	ac030000 	stcge	0, cr0, [r3], {-0}
     c70:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     c74:	0101000e 	tsteq	r1, lr
     c78:	f8020500 			; <UNDEFINED> instruction: 0xf8020500
     c7c:	0308000d 	movweq	r0, #32781	; 0x800d
     c80:	130102b7 	movwne	r0, #4791	; 0x12b7
     c84:	01000e02 	tsteq	r0, r2, lsl #28
     c88:	02050001 	andeq	r0, r5, #1
     c8c:	00000000 	andeq	r0, r0, r0
     c90:	0102c203 	tsteq	r2, r3, lsl #4
     c94:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     c98:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c9c:	00000002 	andeq	r0, r0, r2
     ca0:	02cd0300 	sbceq	r0, sp, #0, 6
     ca4:	0f021301 	svceq	0x00021301
     ca8:	00010100 	andeq	r0, r1, r0, lsl #2
     cac:	00000205 	andeq	r0, r0, r5, lsl #4
     cb0:	d8030000 	stmdale	r3, {}	; <UNPREDICTABLE>
     cb4:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     cb8:	0101000e 	tsteq	r1, lr
     cbc:	00020500 	andeq	r0, r2, r0, lsl #10
     cc0:	03000000 	movweq	r0, #0
     cc4:	130102e3 	movwne	r0, #4835	; 0x12e3
     cc8:	00050283 	andeq	r0, r5, r3, lsl #5
     ccc:	05000101 	streq	r0, [r0, #-257]	; 0x101
     cd0:	00000002 	andeq	r0, r0, r2
     cd4:	02ee0300 	rsceq	r0, lr, #0, 6
     cd8:	02831301 	addeq	r1, r3, #67108864	; 0x4000000
     cdc:	01010005 	tsteq	r1, r5
     ce0:	00020500 	andeq	r0, r2, r0, lsl #10
     ce4:	03000000 	movweq	r0, #0
     ce8:	130102f9 	movwne	r0, #4857	; 0x12f9
     cec:	01000c02 	tsteq	r0, r2, lsl #24
     cf0:	02050001 	andeq	r0, r5, #1
     cf4:	00000000 	andeq	r0, r0, r0
     cf8:	01038403 	tsteq	r3, r3, lsl #8
     cfc:	000e0213 	andeq	r0, lr, r3, lsl r2
     d00:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d04:	00000002 	andeq	r0, r0, r2
     d08:	038f0300 	orreq	r0, pc, #0, 6
     d0c:	10021301 	andne	r1, r2, r1, lsl #6
     d10:	00010100 	andeq	r0, r1, r0, lsl #2
     d14:	00000205 	andeq	r0, r0, r5, lsl #4
     d18:	9a030000 	bls	c0d20 <__Stack_Size+0xc0920>
     d1c:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     d20:	01010010 	tsteq	r1, r0, lsl r0
     d24:	14020500 	strne	r0, [r2], #-1280	; 0x500
     d28:	0308000e 	movweq	r0, #32782	; 0x800e
     d2c:	130103a5 	movwne	r0, #5029	; 0x13a5
     d30:	01040200 	mrseq	r0, R12_usr
     d34:	08028206 	stmdaeq	r2, {r1, r2, r9, pc}
     d38:	00010100 	andeq	r0, r1, r0, lsl #2
     d3c:	0e340205 	cdpeq	2, 3, cr0, cr4, cr5, {0}
     d40:	b0030800 	andlt	r0, r3, r0, lsl #16
     d44:	00130103 	andseq	r0, r3, r3, lsl #2
     d48:	06010402 	streq	r0, [r1], -r2, lsl #8
     d4c:	00080282 	andeq	r0, r8, r2, lsl #5
     d50:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d54:	00000002 	andeq	r0, r0, r2
     d58:	03bc0300 			; <UNDEFINED> instruction: 0x03bc0300
     d5c:	0f021301 	svceq	0x00021301
     d60:	00010100 	andeq	r0, r1, r0, lsl #2
     d64:	00000205 	andeq	r0, r0, r5, lsl #4
     d68:	c7030000 	strgt	r0, [r3, -r0]
     d6c:	67130103 	ldrvs	r0, [r3, -r3, lsl #2]
     d70:	01000302 	tsteq	r0, r2, lsl #6
     d74:	02050001 	andeq	r0, r5, #1
     d78:	00000000 	andeq	r0, r0, r0
     d7c:	0103d303 	tsteq	r3, r3, lsl #6
     d80:	00100213 	andseq	r0, r0, r3, lsl r2
     d84:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d88:	00000002 	andeq	r0, r0, r2
     d8c:	03df0300 	bicseq	r0, pc, #0, 6
     d90:	10021301 	andne	r1, r2, r1, lsl #6
     d94:	00010100 	andeq	r0, r1, r0, lsl #2
     d98:	0e540205 	cdpeq	2, 5, cr0, cr4, cr5, {0}
     d9c:	ea030800 	b	c2da4 <__Stack_Size+0xc29a4>
     da0:	9f130103 	svcls	0x00130103
     da4:	01000402 	tsteq	r0, r2, lsl #8
     da8:	02050001 	andeq	r0, r5, #1
     dac:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
     db0:	0103f503 	tsteq	r3, r3, lsl #10
     db4:	06028313 			; <UNDEFINED> instruction: 0x06028313
     db8:	00010100 	andeq	r0, r1, r0, lsl #2
     dbc:	0e8c0205 	cdpeq	2, 8, cr0, cr12, cr5, {0}
     dc0:	81030800 	tsthi	r3, r0, lsl #16
     dc4:	02130104 	andseq	r0, r3, #4, 2
     dc8:	0101000e 	tsteq	r1, lr
     dcc:	00020500 	andeq	r0, r2, r0, lsl #10
     dd0:	03000000 	movweq	r0, #0
     dd4:	1301048d 	movwne	r0, #5261	; 0x148d
     dd8:	01040200 	mrseq	r0, R12_usr
     ddc:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
     de0:	029e0204 	addseq	r0, lr, #4, 4	; 0x40000000
     de4:	01010007 	tsteq	r1, r7
     de8:	a8020500 	stmdage	r2, {r8, sl}
     dec:	0308000e 	movweq	r0, #32782	; 0x800e
     df0:	13010499 	movwne	r0, #5273	; 0x1499
     df4:	01040200 	mrseq	r0, R12_usr
     df8:	0200ac06 	andeq	sl, r0, #1536	; 0x600
     dfc:	029e0204 	addseq	r0, lr, #4, 4	; 0x40000000
     e00:	0101000b 	tsteq	r1, fp
     e04:	00020500 	andeq	r0, r2, r0, lsl #10
     e08:	03000000 	movweq	r0, #0
     e0c:	130104a4 	movwne	r0, #5284	; 0x14a4
     e10:	00070291 	muleq	r7, r1, r2
     e14:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e18:	00000002 	andeq	r0, r0, r2
     e1c:	04af0300 	strteq	r0, [pc], #768	; e24 <__Stack_Size+0xa24>
     e20:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
     e24:	01010007 	tsteq	r1, r7
     e28:	00020500 	andeq	r0, r2, r0, lsl #10
     e2c:	03000000 	movweq	r0, #0
     e30:	210104bc 			; <UNDEFINED> instruction: 0x210104bc
     e34:	01001b02 	tsteq	r0, r2, lsl #22
     e38:	02050001 	andeq	r0, r5, #1
     e3c:	00000000 	andeq	r0, r0, r0
     e40:	0104c803 	tsteq	r4, r3, lsl #16
     e44:	00100213 	andseq	r0, r0, r3, lsl r2
     e48:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e4c:	00000002 	andeq	r0, r0, r2
     e50:	04d40300 	ldrbeq	r0, [r4], #768	; 0x300
     e54:	10021301 	andne	r1, r2, r1, lsl #6
     e58:	00010100 	andeq	r0, r1, r0, lsl #2
     e5c:	00000205 	andeq	r0, r0, r5, lsl #4
     e60:	df030000 	svcle	0x00030000
     e64:	9f130104 	svcls	0x00130104
     e68:	01000402 	tsteq	r0, r2, lsl #8
     e6c:	02050001 	andeq	r0, r5, #1
     e70:	00000000 	andeq	r0, r0, r0
     e74:	0104ea03 	tsteq	r4, r3, lsl #20
     e78:	06028313 			; <UNDEFINED> instruction: 0x06028313
     e7c:	00010100 	andeq	r0, r1, r0, lsl #2
     e80:	00000205 	andeq	r0, r0, r5, lsl #4
     e84:	f6030000 			; <UNDEFINED> instruction: 0xf6030000
     e88:	1f130104 	svcne	0x00130104
     e8c:	04020021 	streq	r0, [r2], #-33	; 0x21
     e90:	00200601 	eoreq	r0, r0, r1, lsl #12
     e94:	08020402 	stmdaeq	r2, {r1, sl}
     e98:	04020058 	streq	r0, [r2], #-88	; 0x58
     e9c:	0200f201 	andeq	pc, r0, #268435456	; 0x10000000
     ea0:	009e0204 	addseq	r0, lr, r4, lsl #4
     ea4:	2e010402 	cdpcs	4, 0, cr0, cr1, cr2, {0}
     ea8:	02040200 	andeq	r0, r4, #0, 4
     eac:	0e021208 	cdpeq	2, 0, cr1, cr2, cr8, {0}
     eb0:	00010100 	andeq	r0, r1, r0, lsl #2
     eb4:	00000205 	andeq	r0, r0, r5, lsl #4
     eb8:	82030000 	andhi	r0, r3, #0
     ebc:	00130105 	andseq	r0, r3, r5, lsl #2
     ec0:	06010402 	streq	r0, [r1], -r2, lsl #8
     ec4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     ec8:	004a0802 	subeq	r0, sl, r2, lsl #16
     ecc:	90010402 	andls	r0, r1, r2, lsl #8
     ed0:	01000e02 	tsteq	r0, r2, lsl #28
     ed4:	02050001 	andeq	r0, r5, #1
     ed8:	00000000 	andeq	r0, r0, r0
     edc:	01058e03 	tsteq	r5, r3, lsl #28
     ee0:	04020013 	streq	r0, [r2], #-19
     ee4:	002e0601 	eoreq	r0, lr, r1, lsl #12
     ee8:	08020402 	stmdaeq	r2, {r1, sl}
     eec:	0402004a 	streq	r0, [r2], #-74	; 0x4a
     ef0:	0e029001 	cdpeq	0, 0, cr9, cr2, cr1, {0}
     ef4:	00010100 	andeq	r0, r1, r0, lsl #2
     ef8:	00000205 	andeq	r0, r0, r5, lsl #4
     efc:	9a030000 	bls	c0f04 <__Stack_Size+0xc0b04>
     f00:	91130105 	tstls	r3, r5, lsl #2
     f04:	01000702 	tsteq	r0, r2, lsl #14
     f08:	02050001 	andeq	r0, r5, #1
     f0c:	00000000 	andeq	r0, r0, r0
     f10:	0105a603 	tsteq	r5, r3, lsl #12
     f14:	07029113 	smladeq	r2, r3, r1, r9
     f18:	00010100 	andeq	r0, r1, r0, lsl #2
     f1c:	00000205 	andeq	r0, r0, r5, lsl #4
     f20:	b2030000 	andlt	r0, r3, #0
     f24:	bc130105 	ldflts	f0, [r3], {5}
     f28:	0225489f 	eoreq	r4, r5, #10420224	; 0x9f0000
     f2c:	01010007 	tsteq	r1, r7
     f30:	00020500 	andeq	r0, r2, r0, lsl #10
     f34:	03000000 	movweq	r0, #0
     f38:	130105c3 	movwne	r0, #5571	; 0x15c3
     f3c:	0230bc30 	eorseq	fp, r0, #48, 24	; 0x3000
     f40:	0101000d 	tsteq	r1, sp
     f44:	00020500 	andeq	r0, r2, r0, lsl #10
     f48:	03000000 	movweq	r0, #0
     f4c:	160105d6 			; <UNDEFINED> instruction: 0x160105d6
     f50:	01000302 	tsteq	r0, r2, lsl #6
     f54:	02050001 	andeq	r0, r5, #1
     f58:	00000000 	andeq	r0, r0, r0
     f5c:	0105e303 	tsteq	r5, r3, lsl #6
     f60:	03023016 	movweq	r3, #8214	; 0x2016
     f64:	b4010100 	strlt	r0, [r1], #-256	; 0x100
     f68:	02000000 	andeq	r0, r0, #0
     f6c:	00006000 	andeq	r6, r0, r0
     f70:	fb010200 	blx	4177a <__Stack_Size+0x4137a>
     f74:	01000d0e 	tsteq	r0, lr, lsl #26
     f78:	00010101 	andeq	r0, r1, r1, lsl #2
     f7c:	00010000 	andeq	r0, r1, r0
     f80:	73750100 	cmnvc	r5, #0, 2
     f84:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     f88:	75000062 	strvc	r0, [r0, #-98]	; 0x62
     f8c:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     f90:	632e746e 	teqvs	lr, #1845493760	; 0x6e000000
     f94:	00000100 	andeq	r0, r0, r0, lsl #2
     f98:	5f627375 	svcpl	0x00627375
     f9c:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     fa0:	0100682e 	tsteq	r0, lr, lsr #16
     fa4:	73750000 	cmnvc	r5, #0
     fa8:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
     fac:	682e7367 	stmdavs	lr!, {r0, r1, r2, r5, r6, r8, r9, ip, sp, lr}
     fb0:	00000100 	andeq	r0, r0, r0, lsl #2
     fb4:	5f627375 	svcpl	0x00627375
     fb8:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     fbc:	0100682e 	tsteq	r0, lr, lsr #16
     fc0:	73750000 	cmnvc	r5, #0
     fc4:	6f635f62 	svcvs	0x00635f62
     fc8:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     fcc:	00000100 	andeq	r0, r0, r0, lsl #2
     fd0:	02050000 	andeq	r0, r5, #0
     fd4:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
     fd8:	23012903 	movwcs	r2, #6403	; 0x1903
     fdc:	36593e84 	ldrbcc	r3, [r9], -r4, lsl #29
     fe0:	4b3d1f3d 	blmi	f48cdc <__Stack_Size+0xf488dc>
     fe4:	17039591 			; <UNDEFINED> instruction: 0x17039591
     fe8:	5930213c 	ldmdbpl	r0!, {r2, r3, r4, r5, r8, sp}
     fec:	43593042 	cmpmi	r9, #66	; 0x42
     ff0:	08305930 	ldmdaeq	r0!, {r4, r5, r8, fp, ip, lr}
     ff4:	0903f313 	stmdbeq	r3, {r0, r1, r4, r8, r9, ip, sp, lr, pc}
     ff8:	5b316720 	blpl	c5ac80 <__Stack_Size+0xc5a880>
     ffc:	1d933f5c 	ldcne	15, cr3, [r3, #368]	; 0x170
    1000:	00160231 	andseq	r0, r6, r1, lsr r2
    1004:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1008:	00000002 	andeq	r0, r0, r2
    100c:	019e0300 	orrseq	r0, lr, r0, lsl #6
    1010:	3e762301 	cdpcc	3, 7, cr2, cr6, cr1, {0}
    1014:	5b31675a 	blpl	c5ad84 <__Stack_Size+0xc5a984>
    1018:	085b313f 	ldmdaeq	fp, {r0, r1, r2, r3, r4, r5, r8, ip, sp}^
    101c:	63010100 	movwvs	r0, #4352	; 0x1100
    1020:	02000000 	andeq	r0, r0, #0
    1024:	00004500 	andeq	r4, r0, r0, lsl #10
    1028:	fb010200 	blx	41832 <__Stack_Size+0x41432>
    102c:	01000d0e 	tsteq	r0, lr, lsl #26
    1030:	00010101 	andeq	r0, r1, r1, lsl #2
    1034:	00010000 	andeq	r0, r1, r0
    1038:	73750100 	cmnvc	r5, #0, 2
    103c:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1040:	75000062 	strvc	r0, [r0, #-98]	; 0x62
    1044:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
    1048:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
    104c:	00010063 	andeq	r0, r1, r3, rrx
    1050:	62737500 	rsbsvs	r7, r3, #0, 10
    1054:	7079745f 	rsbsvc	r7, r9, pc, asr r4
    1058:	00682e65 	rsbeq	r2, r8, r5, ror #28
    105c:	75000001 	strvc	r0, [r0, #-1]
    1060:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    1064:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    1068:	00010068 	andeq	r0, r1, r8, rrx
    106c:	05000000 	streq	r0, [r0, #-0]
    1070:	00103c02 	andseq	r3, r0, r2, lsl #24
    1074:	01350308 	teqeq	r5, r8, lsl #6
    1078:	211d3121 	tstcs	sp, r1, lsr #2
    107c:	1d233d2f 	stcne	13, cr3, [r3, #-188]!	; 0xffffff44
    1080:	000f0223 	andeq	r0, pc, r3, lsr #4
    1084:	03500101 	cmpeq	r0, #1073741824	; 0x40000000
    1088:	00020000 	andeq	r0, r2, r0
    108c:	0000007b 	andeq	r0, r0, fp, ror r0
    1090:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    1094:	0101000d 	tsteq	r1, sp
    1098:	00000101 	andeq	r0, r0, r1, lsl #2
    109c:	00000100 	andeq	r0, r0, r0, lsl #2
    10a0:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
    10a4:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    10a8:	73750000 	cmnvc	r5, #0
    10ac:	6f635f62 	svcvs	0x00635f62
    10b0:	632e6572 	teqvs	lr, #478150656	; 0x1c800000
    10b4:	00000100 	andeq	r0, r0, r0, lsl #2
    10b8:	5f627375 	svcpl	0x00627375
    10bc:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    10c0:	0100682e 	tsteq	r0, lr, lsr #16
    10c4:	73750000 	cmnvc	r5, #0
    10c8:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
    10cc:	00682e66 	rsbeq	r2, r8, r6, ror #28
    10d0:	75000001 	strvc	r0, [r0, #-1]
    10d4:	635f6273 	cmpvs	pc, #805306375	; 0x30000007
    10d8:	2e65726f 	cdpcs	2, 6, cr7, cr5, cr15, {3}
    10dc:	00010068 	andeq	r0, r1, r8, rrx
    10e0:	62737500 	rsbsvs	r7, r3, #0, 10
    10e4:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    10e8:	00682e74 	rsbeq	r2, r8, r4, ror lr
    10ec:	75000001 	strvc	r0, [r0, #-1]
    10f0:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; f2c <__Stack_Size+0xb2c>
    10f4:	682e6d65 	stmdavs	lr!, {r0, r2, r5, r6, r8, sl, fp, sp, lr}
    10f8:	00000100 	andeq	r0, r0, r0, lsl #2
    10fc:	5f627375 	svcpl	0x00627375
    1100:	73676572 	cmnvc	r7, #478150656	; 0x1c800000
    1104:	0100682e 	tsteq	r0, lr, lsr #16
    1108:	00000000 	andeq	r0, r0, r0
    110c:	10740205 	rsbsne	r0, r4, r5, lsl #4
    1110:	35030800 	strcc	r0, [r3, #-2048]	; 0x800
    1114:	3e222f01 	cdpcc	15, 2, cr2, cr2, cr1, {0}
    1118:	022f4b22 	eoreq	r4, pc, #34816	; 0x8800
    111c:	01010005 	tsteq	r1, r5
    1120:	98020500 	stmdals	r2, {r8, sl}
    1124:	03080010 	movweq	r0, #32784	; 0x8010
    1128:	2f0100e3 	svccs	0x000100e3
    112c:	4b223e22 	blmi	8909bc <__Stack_Size+0x8905bc>
    1130:	0005022f 	andeq	r0, r5, pc, lsr #4
    1134:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1138:	0010bc02 	andseq	fp, r0, r2, lsl #24
    113c:	019b0308 	orrseq	r0, fp, r8, lsl #6
    1140:	3d222f01 	stccc	15, cr2, [r2, #-4]!
    1144:	311d2323 	tstcc	sp, r3, lsr #6
    1148:	4022235b 	eormi	r2, r2, fp, asr r3
    114c:	33404e30 	movtcc	r4, #3632	; 0xe30
    1150:	47402231 	smlaldxmi	r2, r0, r1, r2
    1154:	4c231d31 	stcmi	13, cr1, [r3], #-196	; 0xffffff3c
    1158:	580b0342 	stmdapl	fp, {r1, r6, r8, r9}
    115c:	2e60034b 	cdpcs	3, 6, cr0, cr0, cr11, {2}
    1160:	02202103 	eoreq	r2, r0, #-1073741824	; 0xc0000000
    1164:	01010007 	tsteq	r1, r7
    1168:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
    116c:	03080011 	movweq	r0, #32785	; 0x8011
    1170:	130103e0 	movwne	r0, #5088	; 0x13e0
    1174:	212f2f1f 	teqcs	pc, pc, lsl pc	; <UNPREDICTABLE>
    1178:	04020033 	streq	r0, [r2], #-51	; 0x33
    117c:	06200601 	strteq	r0, [r0], -r1, lsl #12
    1180:	34924d30 	ldrcc	r4, [r2], #3376	; 0xd30
    1184:	5121352d 	teqpl	r1, sp, lsr #10
    1188:	244c8476 	strbcs	r8, [ip], #-1142	; 0x476
    118c:	302f2f2a 	eorcc	r2, pc, sl, lsr #30
    1190:	0223231d 	eoreq	r2, r3, #1946157056	; 0x74000000
    1194:	01010012 	tsteq	r1, r2, lsl r0
    1198:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
    119c:	03080011 	movweq	r0, #32785	; 0x8011
    11a0:	220100ca 	andcs	r0, r1, #202	; 0xca
    11a4:	2f591f21 	svccs	0x00591f21
    11a8:	324b2130 	subcc	r2, fp, #48, 2
    11ac:	00080222 	andeq	r0, r8, r2, lsr #4
    11b0:	05000101 	streq	r0, [r0, #-257]	; 0x101
    11b4:	00122c02 	andseq	r2, r2, r2, lsl #24
    11b8:	00f80308 	rscseq	r0, r8, r8, lsl #6
    11bc:	3e842401 	cdpcc	4, 8, cr2, cr4, cr1, {0}
    11c0:	01040200 	mrseq	r0, R12_usr
    11c4:	2f062006 	svccs	0x00062006
    11c8:	1e224b34 	vmovne.16	d2[2], r4
    11cc:	21252f2f 	teqcs	r5, pc, lsr #30
    11d0:	01000702 	tsteq	r0, r2, lsl #14
    11d4:	02050001 	andeq	r0, r5, #1
    11d8:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
    11dc:	0101e903 	tsteq	r1, r3, lsl #18
    11e0:	4b3e4021 	blmi	f9126c <__Stack_Size+0xf90e6c>
    11e4:	423d3522 	eorsmi	r3, sp, #142606336	; 0x8800000
    11e8:	03200f03 	teqeq	r0, #3, 30
    11ec:	5f432072 	svcpl	0x00432072
    11f0:	32207503 	eorcc	r7, r0, #12582912	; 0xc00000
    11f4:	02003140 	andeq	r3, r0, #64, 2
    11f8:	2e060104 	adfcss	f0, f6, f4
    11fc:	09032f06 	stmdbeq	r3, {r1, r2, r8, r9, sl, fp, sp}
    1200:	1d23472e 	stcne	7, cr4, [r3, #-184]!	; 0xffffff48
    1204:	5e4b4c23 	cdppl	12, 4, cr4, cr11, cr3, {1}
    1208:	2f6b235a 	svccs	0x006b235a
    120c:	21314b94 			; <UNDEFINED> instruction: 0x21314b94
    1210:	01000a02 	tsteq	r0, r2, lsl #20
    1214:	02050001 	andeq	r0, r5, #1
    1218:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
    121c:	0102c203 	tsteq	r2, r3, lsl #4
    1220:	200f0326 	andcs	r0, pc, r6, lsr #6
    1224:	03207103 	teqeq	r0, #-1073741824	; 0xc0000000
    1228:	7103200f 	tstvc	r3, pc
    122c:	54432120 	strbpl	r2, [r3], #-288	; 0x120
    1230:	2f314032 	svccs	0x00314032
    1234:	01040200 	mrseq	r0, R12_usr
    1238:	21062e06 	tstcs	r6, r6, lsl #28
    123c:	472e0903 	strmi	r0, [lr, -r3, lsl #18]!
    1240:	88231d31 	stmdahi	r3!, {r0, r4, r5, r8, sl, fp, ip}
    1244:	6f034b85 	svcvs	0x00034b85
    1248:	2012032e 	andscs	r0, r2, lr, lsr #6
    124c:	01000702 	tsteq	r0, r2, lsl #14
    1250:	02050001 	andeq	r0, r5, #1
    1254:	080013c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip}
    1258:	0102f803 	tsteq	r2, r3, lsl #16
    125c:	024c6721 	subeq	r6, ip, #8650752	; 0x840000
    1260:	01010007 	tsteq	r1, r7
    1264:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    1268:	03080013 	movweq	r0, #32787	; 0x8013
    126c:	15010392 	strne	r0, [r1, #-914]	; 0x392
    1270:	233d223d 	teqcs	sp, #-805306365	; 0xd0000003
    1274:	0004022f 	andeq	r0, r4, pc, lsr #4
    1278:	05000101 	streq	r0, [r0, #-257]	; 0x101
    127c:	00140802 	andseq	r0, r4, r2, lsl #16
    1280:	07c90308 	strbeq	r0, [r9, r8, lsl #6]
    1284:	5a682101 	bpl	1a09690 <__Stack_Size+0x1a09290>
    1288:	0d02404b 	stceq	0, cr4, [r2, #-300]	; 0xfffffed4
    128c:	00010100 	andeq	r0, r1, r0, lsl #2
    1290:	14480205 	strbne	r0, [r8], #-517	; 0x205
    1294:	cc030800 	stcgt	8, cr0, [r3], {-0}
    1298:	3e280106 	sufcce	f0, f0, f6
    129c:	5c563e2c 	mrrcpl	14, 2, r3, r6, cr12
    12a0:	3030302f 	eorscc	r3, r0, pc, lsr #32
    12a4:	bd032f31 	stclt	15, cr2, [r3, #-196]	; 0xffffff3c
    12a8:	304e4a7d 	subcc	r4, lr, sp, ror sl
    12ac:	294f3040 	stmdbcs	pc, {r6, ip, sp}^	; <UNPREDICTABLE>
    12b0:	0c033d3d 	stceq	13, cr3, [r3], {61}	; 0x3d
    12b4:	3c03304a 	stccc	0, cr3, [r3], {74}	; 0x4a
    12b8:	4403593c 	strmi	r5, [r3], #-2364	; 0x93c
    12bc:	443e3d3c 	ldrtmi	r3, [lr], #-3388	; 0xd3c
    12c0:	3e3d3d30 	mrccc	13, 1, r3, cr13, cr0, {1}
    12c4:	313c0b03 	teqcc	ip, r3, lsl #22
    12c8:	33314130 	teqcc	r1, #48, 2
    12cc:	2e090330 	mcrcs	3, 0, r0, cr9, cr0, {1}
    12d0:	362e0a03 	strtcc	r0, [lr], -r3, lsl #20
    12d4:	2e75039c 	mrccs	3, 3, r0, cr5, cr12, {4}
    12d8:	03201003 	teqeq	r0, #3
    12dc:	3e303c19 	mrccc	12, 1, r3, cr0, cr9, {0}
    12e0:	303e302f 	eorscc	r3, lr, pc, lsr #32
    12e4:	303d303e 	eorscc	r3, sp, lr, lsr r0
    12e8:	4b695a42 	blmi	1a57bf8 <__Stack_Size+0x1a577f8>
    12ec:	6d75305e 	ldclvs	0, cr3, [r5, #-376]!	; 0xfffffe88
    12f0:	200e0330 	andcs	r0, lr, r0, lsr r3
    12f4:	43207203 	teqmi	r0, #805306368	; 0x30000000
    12f8:	2075035f 	rsbscs	r0, r5, pc, asr r3
    12fc:	59314032 	ldmdbpl	r1!, {r1, r4, r5, lr}
    1300:	303c0903 	eorscc	r0, ip, r3, lsl #18
    1304:	4b593050 	blmi	164d44c <__Stack_Size+0x164d04c>
    1308:	3d228967 	stccc	9, cr8, [r2, #-412]!	; 0xfffffe64
    130c:	67322f23 	ldrvs	r2, [r2, -r3, lsr #30]!
    1310:	31694130 	cmncc	r9, r0, lsr r1
    1314:	314d413f 	cmpcc	sp, pc, lsr r1
    1318:	3023084c 	eorcc	r0, r3, ip, asr #16
    131c:	405a305a 	subsmi	r3, sl, sl, asr r0
    1320:	032f404b 	teqeq	pc, #75	; 0x4b
    1324:	032f4a2f 	teqeq	pc, #192512	; 0x2f000
    1328:	032e7ed6 	teqeq	lr, #3424	; 0xd60
    132c:	0b032e2c 	bleq	ccbe4 <__Stack_Size+0xcc7e4>
    1330:	000c022e 	andeq	r0, ip, lr, lsr #4
    1334:	05000101 	streq	r0, [r0, #-257]	; 0x101
    1338:	00172402 	andseq	r2, r7, r2, lsl #8
    133c:	07a00308 	streq	r0, [r0, r8, lsl #6]!
    1340:	003e2101 	eorseq	r2, lr, r1, lsl #2
    1344:	06010402 	streq	r0, [r1], -r2, lsl #8
    1348:	8a03062e 	bhi	c2c08 <__Stack_Size+0xc2808>
    134c:	221e2e7c 	andscs	r2, lr, #124, 28	; 0x7c0
    1350:	1f592633 	svcne	0x00592633
    1354:	1e222f21 	cdpne	15, 2, cr2, cr2, cr1, {1}
    1358:	21307730 	teqcs	r0, r0, lsr r7
    135c:	211f2f1f 	tstcs	pc, pc, lsl pc	; <UNPREDICTABLE>
    1360:	404c3f2f 	submi	r3, ip, pc, lsr #30
    1364:	033d4e22 	teqeq	sp, #544	; 0x220
    1368:	3f9e03d3 	svccc	0x009e03d3
    136c:	09035130 	stmdbeq	r3, {r4, r5, r8, ip, lr}
    1370:	022d3120 	eoreq	r3, sp, #32, 2
    1374:	0101000f 	tsteq	r1, pc
    1378:	ec020500 	cfstr32	mvfx0, [r2], {-0}
    137c:	03080017 	movweq	r0, #32791	; 0x8017
    1380:	220107dd 	andcs	r0, r1, #57933824	; 0x3740000
    1384:	04020031 	streq	r0, [r2], #-49	; 0x31
    1388:	00200601 	eoreq	r0, r0, r1, lsl #12
    138c:	06020402 	streq	r0, [r2], -r2, lsl #8
    1390:	04020076 	streq	r0, [r2], #-118	; 0x76
    1394:	02326402 	eorseq	r6, r2, #33554432	; 0x2000000
    1398:	01010009 	tsteq	r1, r9
    139c:	24020500 	strcs	r0, [r2], #-1280	; 0x500
    13a0:	03080018 	movweq	r0, #32792	; 0x8018
    13a4:	210106f8 	strdcs	r0, [r1, -r8]
    13a8:	0402003e 	streq	r0, [r2], #-62	; 0x3e
    13ac:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    13b0:	303f3030 	eorscc	r3, pc, r0, lsr r0	; <UNPREDICTABLE>
    13b4:	01040200 	mrseq	r0, R12_usr
    13b8:	0402003d 	streq	r0, [r2], #-61	; 0x3d
    13bc:	3d311f01 	ldccc	15, cr1, [r1, #-4]!
    13c0:	3123504c 	teqcc	r3, ip, asr #32
    13c4:	0009022d 	andeq	r0, r9, sp, lsr #4
    13c8:	05000101 	streq	r0, [r0, #-257]	; 0x101
    13cc:	00000002 	andeq	r0, r0, r2
    13d0:	07f10300 	ldrbeq	r0, [r1, r0, lsl #6]!
    13d4:	00010201 	andeq	r0, r1, r1, lsl #4
    13d8:	008f0101 	addeq	r0, pc, r1, lsl #2
    13dc:	00020000 	andeq	r0, r2, r0
    13e0:	00000036 	andeq	r0, r0, r6, lsr r0
    13e4:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    13e8:	0101000d 	tsteq	r1, sp
    13ec:	00000101 	andeq	r0, r0, r1, lsl #2
    13f0:	00000100 	andeq	r0, r0, r0, lsl #2
    13f4:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
    13f8:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    13fc:	73750000 	cmnvc	r5, #0
    1400:	656d5f62 	strbvs	r5, [sp, #-3938]!	; 0xf62
    1404:	00632e6d 	rsbeq	r2, r3, sp, ror #28
    1408:	75000001 	strvc	r0, [r0, #-1]
    140c:	745f6273 	ldrbvc	r6, [pc], #-627	; 1414 <__Stack_Size+0x1014>
    1410:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    1414:	00010068 	andeq	r0, r1, r8, rrx
    1418:	05000000 	streq	r0, [r0, #-0]
    141c:	00188002 	andseq	r8, r8, r2
    1420:	01230308 	teqeq	r3, r8, lsl #6
    1424:	2b232b24 	blcs	8cc0bc <__Stack_Size+0x8cbcbc>
    1428:	02002123 	andeq	r2, r0, #-1073741816	; 0xc0000008
    142c:	20060104 	andcs	r0, r6, r4, lsl #2
    1430:	02040200 	andeq	r0, r4, #0, 4
    1434:	02004e06 	andeq	r4, r0, #6, 28	; 0x60
    1438:	002c0204 	eoreq	r0, ip, r4, lsl #4
    143c:	30020402 	andcc	r0, r2, r2, lsl #8
    1440:	02040200 	andeq	r0, r4, #0, 4
    1444:	01024e2f 	tsteq	r2, pc, lsr #28
    1448:	00010100 	andeq	r0, r1, r0, lsl #2
    144c:	18b00205 	ldmne	r0!, {r0, r2, r9}
    1450:	3c030800 	stccc	8, cr0, [r3], {-0}
    1454:	232b2401 	teqcs	fp, #16777216	; 0x1000000
    1458:	0021232b 	eoreq	r2, r1, fp, lsr #6
    145c:	06010402 	streq	r0, [r1], -r2, lsl #8
    1460:	04020020 	streq	r0, [r2], #-32
    1464:	69300602 	ldmdbvs	r0!, {r1, r9, sl}
    1468:	01000102 	tsteq	r0, r2, lsl #2
    146c:	Address 0x0000146c is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	080001b8 	stmdaeq	r0, {r3, r4, r5, r7, r8}
  1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	080001ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	080001bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	00000000 	andeq	r0, r0, r0
  48:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}
  4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000000 	andeq	r0, r0, r0
  68:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000000c 	andeq	r0, r0, ip
  74:	00000000 	andeq	r0, r0, r0
  78:	080001e4 	stmdaeq	r0, {r2, r5, r6, r7, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000000 	andeq	r0, r0, r0
  88:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0000000c 	andeq	r0, r0, ip
  94:	00000000 	andeq	r0, r0, r0
  98:	080001e8 	stmdaeq	r0, {r3, r5, r6, r7, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	00000000 	andeq	r0, r0, r0
  a8:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	0000000c 	andeq	r0, r0, ip
  b4:	00000000 	andeq	r0, r0, r0
  b8:	080001ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8}
  bc:	00000002 	andeq	r0, r0, r2
  c0:	0000000c 	andeq	r0, r0, ip
  c4:	00000000 	andeq	r0, r0, r0
  c8:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
  cc:	00000002 	andeq	r0, r0, r2
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	00000000 	andeq	r0, r0, r0
  d8:	080001f0 	stmdaeq	r0, {r4, r5, r6, r7, r8}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	00000018 	andeq	r0, r0, r8, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
  ec:	000000a8 	andeq	r0, r0, r8, lsr #1
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
  f8:	00000001 	andeq	r0, r0, r1
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
 108:	00000060 	andeq	r0, r0, r0, rrx
 10c:	40100e41 	andsmi	r0, r0, r1, asr #28
 110:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 114:	02854003 	addeq	r4, r5, #3
 118:	00018e40 	andeq	r8, r1, r0, asr #28
 11c:	0000000c 	andeq	r0, r0, ip
 120:	00000000 	andeq	r0, r0, r0
 124:	08000304 	stmdaeq	r0, {r2, r8, r9}
 128:	0000000c 	andeq	r0, r0, ip
 12c:	0000000c 	andeq	r0, r0, ip
 130:	00000000 	andeq	r0, r0, r0
 134:	08000310 	stmdaeq	r0, {r4, r8, r9}
 138:	0000000c 	andeq	r0, r0, ip
 13c:	0000000c 	andeq	r0, r0, ip
 140:	00000000 	andeq	r0, r0, r0
 144:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
 148:	00000020 	andeq	r0, r0, r0, lsr #32
 14c:	0000000c 	andeq	r0, r0, ip
 150:	00000000 	andeq	r0, r0, r0
 154:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
 158:	0000000c 	andeq	r0, r0, ip
 15c:	00000018 	andeq	r0, r0, r8, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	08000348 	stmdaeq	r0, {r3, r6, r8, r9}
 168:	00000028 	andeq	r0, r0, r8, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 174:	00000001 	andeq	r0, r0, r1
 178:	00000024 	andeq	r0, r0, r4, lsr #32
 17c:	00000000 	andeq	r0, r0, r0
 180:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 184:	00000078 	andeq	r0, r0, r8, ror r0
 188:	40180e41 	andsmi	r0, r8, r1, asr #28
 18c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 190:	04824005 	streq	r4, [r2], #5
 194:	40038440 	andmi	r8, r3, r0, asr #8
 198:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	0000000c 	andeq	r0, r0, ip
	...
 1ac:	00000004 	andeq	r0, r0, r4
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	08000404 	stmdaeq	r0, {r2, sl}
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
 1dc:	00000084 	andeq	r0, r0, r4, lsl #1
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	080004a0 	stmdaeq	r0, {r5, r7, sl}
 1f8:	00000028 	andeq	r0, r0, r8, lsr #32
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	00000000 	andeq	r0, r0, r0
 204:	080004c8 	stmdaeq	r0, {r3, r6, r7, sl}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	0000000c 	andeq	r0, r0, ip
 210:	00000000 	andeq	r0, r0, r0
 214:	080004e4 	stmdaeq	r0, {r2, r5, r6, r7, sl}
 218:	00000004 	andeq	r0, r0, r4
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	080004e8 	stmdaeq	r0, {r3, r5, r6, r7, sl}
 228:	00000024 	andeq	r0, r0, r4, lsr #32
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 234:	02824003 	addeq	r4, r2, #3
 238:	00018e40 	andeq	r8, r1, r0, asr #28
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
 248:	00000040 	andeq	r0, r0, r0, asr #32
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 254:	00000001 	andeq	r0, r0, r1
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	0800054c 	stmdaeq	r0, {r2, r3, r6, r8, sl}
 264:	00000022 	andeq	r0, r0, r2, lsr #32
 268:	40100e41 	andsmi	r0, r0, r1, asr #28
 26c:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 270:	02824003 	addeq	r4, r2, #3
 274:	00018e40 	andeq	r8, r1, r0, asr #28
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
 284:	000000b4 	strheq	r0, [r0], -r4
 288:	40100e41 	andsmi	r0, r0, r1, asr #28
 28c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 290:	02864003 	addeq	r4, r6, #3
 294:	00018e40 	andeq	r8, r1, r0, asr #28
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	00000024 	andeq	r0, r0, r4, lsr #32
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 2b4:	000000b8 	strheq	r0, [r0], -r8
 2b8:	40180e41 	andsmi	r0, r8, r1, asr #28
 2bc:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 2c0:	04824005 	streq	r4, [r2], #5
 2c4:	40038440 	andmi	r8, r3, r0, asr #8
 2c8:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 2cc:	00000001 	andeq	r0, r0, r1
 2d0:	0000000c 	andeq	r0, r0, ip
 2d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e0:	0000000c 	andeq	r0, r0, ip
 2e4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2e8:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
 2ec:	00000016 	andeq	r0, r0, r6, lsl r0
 2f0:	0000000c 	andeq	r0, r0, ip
 2f4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	00000012 	andeq	r0, r0, r2, lsl r0
 300:	0000000c 	andeq	r0, r0, ip
 304:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 308:	080006f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl}
 30c:	00000004 	andeq	r0, r0, r4
 310:	00000028 	andeq	r0, r0, r8, lsr #32
 314:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 318:	080006f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl}
 31c:	00000050 	andeq	r0, r0, r0, asr r0
 320:	40200e42 	eormi	r0, r0, r2, asr #28
 324:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
 328:	06864007 	streq	r4, [r6], r7
 32c:	40058740 	andmi	r8, r5, r0, asr #14
 330:	89400488 	stmdbhi	r0, {r3, r7, sl}^
 334:	028a4003 	addeq	r4, sl, #3
 338:	00018e40 	andeq	r8, r1, r0, asr #28
 33c:	0000000c 	andeq	r0, r0, ip
 340:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 344:	08000748 	stmdaeq	r0, {r3, r6, r8, r9, sl}
 348:	00000048 	andeq	r0, r0, r8, asr #32
 34c:	0000000c 	andeq	r0, r0, ip
 350:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 354:	08000790 	stmdaeq	r0, {r4, r7, r8, r9, sl}
 358:	00000060 	andeq	r0, r0, r0, rrx
 35c:	0000000c 	andeq	r0, r0, ip
 360:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 364:	080007f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl}
 368:	00000014 	andeq	r0, r0, r4, lsl r0
 36c:	0000000c 	andeq	r0, r0, ip
 370:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 374:	08000804 	stmdaeq	r0, {r2, fp}
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	0000000c 	andeq	r0, r0, ip
 380:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 384:	08000820 	stmdaeq	r0, {r5, fp}
 388:	00000014 	andeq	r0, r0, r4, lsl r0
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 394:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 398:	0000006c 	andeq	r0, r0, ip, rrx
 39c:	400c0e42 	andmi	r0, ip, r2, asr #28
 3a0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 3a4:	018e4002 	orreq	r4, lr, r2
 3a8:	0000000c 	andeq	r0, r0, ip
 3ac:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3b0:	080008a0 	stmdaeq	r0, {r5, r7, fp}
 3b4:	00000024 	andeq	r0, r0, r4, lsr #32
 3b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3bc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3c0:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
 3c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 3c8:	40100e41 	andsmi	r0, r0, r1, asr #28
 3cc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 3d0:	02854003 	addeq	r4, r5, #3
 3d4:	00018e40 	andeq	r8, r1, r0, asr #28
 3d8:	0000000c 	andeq	r0, r0, ip
 3dc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3e0:	080008f0 	stmdaeq	r0, {r4, r5, r6, r7, fp}
 3e4:	00000014 	andeq	r0, r0, r4, lsl r0
 3e8:	00000018 	andeq	r0, r0, r8, lsl r0
 3ec:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3f0:	08000904 	stmdaeq	r0, {r2, r8, fp}
 3f4:	00000034 	andeq	r0, r0, r4, lsr r0
 3f8:	40080e42 	andmi	r0, r8, r2, asr #28
 3fc:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 400:	00000001 	andeq	r0, r0, r1
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 40c:	00000000 	andeq	r0, r0, r0
 410:	00000030 	andeq	r0, r0, r0, lsr r0
 414:	40100e42 	andsmi	r0, r0, r2, asr #28
 418:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 41c:	02854003 	addeq	r4, r5, #3
 420:	00018e40 	andeq	r8, r1, r0, asr #28
 424:	00000024 	andeq	r0, r0, r4, lsr #32
 428:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 42c:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 430:	0000004c 	andeq	r0, r0, ip, asr #32
 434:	40180e41 	andsmi	r0, r8, r1, asr #28
 438:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 43c:	04824005 	streq	r4, [r2], #5
 440:	40038440 	andmi	r8, r3, r0, asr #8
 444:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 448:	00000001 	andeq	r0, r0, r1
 44c:	0000000c 	andeq	r0, r0, ip
 450:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 454:	08000984 	stmdaeq	r0, {r2, r7, r8, fp}
 458:	0000000c 	andeq	r0, r0, ip
 45c:	0000000c 	andeq	r0, r0, ip
 460:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 464:	08000990 	stmdaeq	r0, {r4, r7, r8, fp}
 468:	00000018 	andeq	r0, r0, r8, lsl r0
 46c:	0000000c 	andeq	r0, r0, ip
 470:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 474:	080009a8 	stmdaeq	r0, {r3, r5, r7, r8, fp}
 478:	00000012 	andeq	r0, r0, r2, lsl r0
 47c:	0000000c 	andeq	r0, r0, ip
 480:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 484:	080009bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp}
 488:	00000010 	andeq	r0, r0, r0, lsl r0
 48c:	0000000c 	andeq	r0, r0, ip
 490:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 494:	080009cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp}
 498:	00000018 	andeq	r0, r0, r8, lsl r0
 49c:	0000000c 	andeq	r0, r0, ip
 4a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4ac:	0000000c 	andeq	r0, r0, ip
 4b0:	0000049c 	muleq	r0, ip, r4
 4b4:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
 4b8:	0000005c 	andeq	r0, r0, ip, asr r0
 4bc:	00000018 	andeq	r0, r0, r8, lsl r0
 4c0:	0000049c 	muleq	r0, ip, r4
 4c4:	08000a40 	stmdaeq	r0, {r6, r9, fp}
 4c8:	00000044 	andeq	r0, r0, r4, asr #32
 4cc:	40080e41 	andmi	r0, r8, r1, asr #28
 4d0:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	0000000c 	andeq	r0, r0, ip
 4dc:	0000049c 	muleq	r0, ip, r4
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000002 	andeq	r0, r0, r2
 4e8:	0000000c 	andeq	r0, r0, ip
 4ec:	0000049c 	muleq	r0, ip, r4
 4f0:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	0000000c 	andeq	r0, r0, ip
 4fc:	0000049c 	muleq	r0, ip, r4
 500:	08000a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp}
 504:	00000018 	andeq	r0, r0, r8, lsl r0
 508:	0000000c 	andeq	r0, r0, ip
 50c:	0000049c 	muleq	r0, ip, r4
 510:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
 514:	00000028 	andeq	r0, r0, r8, lsr #32
 518:	0000000c 	andeq	r0, r0, ip
 51c:	0000049c 	muleq	r0, ip, r4
 520:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 524:	00000034 	andeq	r0, r0, r4, lsr r0
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	0000049c 	muleq	r0, ip, r4
 530:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
 534:	0000005c 	andeq	r0, r0, ip, asr r0
 538:	40100e41 	andsmi	r0, r0, r1, asr #28
 53c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 540:	02864003 	addeq	r4, r6, #3
 544:	00018e40 	andeq	r8, r1, r0, asr #28
 548:	00000024 	andeq	r0, r0, r4, lsr #32
 54c:	0000049c 	muleq	r0, ip, r4
 550:	08000b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp}
 554:	00000234 	andeq	r0, r0, r4, lsr r2
 558:	40180e42 	andsmi	r0, r8, r2, asr #28
 55c:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
 560:	04864005 	streq	r4, [r6], #5
 564:	40038740 	andmi	r8, r3, r0, asr #14
 568:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
 56c:	00000001 	andeq	r0, r0, r1
 570:	0000000c 	andeq	r0, r0, ip
 574:	0000049c 	muleq	r0, ip, r4
 578:	00000000 	andeq	r0, r0, r0
 57c:	0000000c 	andeq	r0, r0, ip
 580:	0000000c 	andeq	r0, r0, ip
 584:	0000049c 	muleq	r0, ip, r4
 588:	00000000 	andeq	r0, r0, r0
 58c:	0000000c 	andeq	r0, r0, ip
 590:	0000000c 	andeq	r0, r0, ip
 594:	0000049c 	muleq	r0, ip, r4
 598:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
 59c:	0000000c 	andeq	r0, r0, ip
 5a0:	0000000c 	andeq	r0, r0, ip
 5a4:	0000049c 	muleq	r0, ip, r4
 5a8:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 5ac:	00000004 	andeq	r0, r0, r4
 5b0:	0000000c 	andeq	r0, r0, ip
 5b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 5bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5c0:	0000000c 	andeq	r0, r0, ip
 5c4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 5c8:	00000000 	andeq	r0, r0, r0
 5cc:	0000000c 	andeq	r0, r0, ip
 5d0:	0000000c 	andeq	r0, r0, ip
 5d4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 5d8:	00000000 	andeq	r0, r0, r0
 5dc:	0000000c 	andeq	r0, r0, ip
 5e0:	0000000c 	andeq	r0, r0, ip
 5e4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 5e8:	00000000 	andeq	r0, r0, r0
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	0000000c 	andeq	r0, r0, ip
 5f4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	0000000c 	andeq	r0, r0, ip
 604:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 608:	00000000 	andeq	r0, r0, r0
 60c:	0000000c 	andeq	r0, r0, ip
 610:	0000000c 	andeq	r0, r0, ip
 614:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 618:	00000000 	andeq	r0, r0, r0
 61c:	0000000c 	andeq	r0, r0, ip
 620:	0000000c 	andeq	r0, r0, ip
 624:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 628:	00000000 	andeq	r0, r0, r0
 62c:	0000000c 	andeq	r0, r0, ip
 630:	0000000c 	andeq	r0, r0, ip
 634:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 638:	00000000 	andeq	r0, r0, r0
 63c:	00000010 	andeq	r0, r0, r0, lsl r0
 640:	0000000c 	andeq	r0, r0, ip
 644:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 648:	00000000 	andeq	r0, r0, r0
 64c:	0000000c 	andeq	r0, r0, ip
 650:	0000000c 	andeq	r0, r0, ip
 654:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 658:	00000000 	andeq	r0, r0, r0
 65c:	0000000e 	andeq	r0, r0, lr
 660:	0000000c 	andeq	r0, r0, ip
 664:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 668:	00000000 	andeq	r0, r0, r0
 66c:	00000010 	andeq	r0, r0, r0, lsl r0
 670:	0000000c 	andeq	r0, r0, ip
 674:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 678:	00000000 	andeq	r0, r0, r0
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	0000000c 	andeq	r0, r0, ip
 684:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 688:	00000000 	andeq	r0, r0, r0
 68c:	00000012 	andeq	r0, r0, r2, lsl r0
 690:	0000000c 	andeq	r0, r0, ip
 694:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 698:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
 69c:	0000002a 	andeq	r0, r0, sl, lsr #32
 6a0:	0000000c 	andeq	r0, r0, ip
 6a4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6a8:	00000000 	andeq	r0, r0, r0
 6ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 6b0:	0000000c 	andeq	r0, r0, ip
 6b4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	00000024 	andeq	r0, r0, r4, lsr #32
 6c0:	0000000c 	andeq	r0, r0, ip
 6c4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6c8:	00000000 	andeq	r0, r0, r0
 6cc:	00000012 	andeq	r0, r0, r2, lsl r0
 6d0:	0000000c 	andeq	r0, r0, ip
 6d4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6d8:	00000000 	andeq	r0, r0, r0
 6dc:	00000012 	andeq	r0, r0, r2, lsl r0
 6e0:	0000000c 	andeq	r0, r0, ip
 6e4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	0000001e 	andeq	r0, r0, lr, lsl r0
 6f0:	0000000c 	andeq	r0, r0, ip
 6f4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6f8:	08000dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp}
 6fc:	0000001e 	andeq	r0, r0, lr, lsl r0
 700:	0000000c 	andeq	r0, r0, ip
 704:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 708:	00000000 	andeq	r0, r0, r0
 70c:	0000001e 	andeq	r0, r0, lr, lsl r0
 710:	0000000c 	andeq	r0, r0, ip
 714:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 718:	00000000 	andeq	r0, r0, r0
 71c:	0000001c 	andeq	r0, r0, ip, lsl r0
 720:	0000000c 	andeq	r0, r0, ip
 724:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 728:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 72c:	0000001c 	andeq	r0, r0, ip, lsl r0
 730:	0000000c 	andeq	r0, r0, ip
 734:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 738:	00000000 	andeq	r0, r0, r0
 73c:	0000001e 	andeq	r0, r0, lr, lsl r0
 740:	0000000c 	andeq	r0, r0, ip
 744:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 748:	00000000 	andeq	r0, r0, r0
 74c:	0000001e 	andeq	r0, r0, lr, lsl r0
 750:	0000000c 	andeq	r0, r0, ip
 754:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 758:	00000000 	andeq	r0, r0, r0
 75c:	0000001c 	andeq	r0, r0, ip, lsl r0
 760:	0000000c 	andeq	r0, r0, ip
 764:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 768:	00000000 	andeq	r0, r0, r0
 76c:	0000001a 	andeq	r0, r0, sl, lsl r0
 770:	0000000c 	andeq	r0, r0, ip
 774:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 778:	00000000 	andeq	r0, r0, r0
 77c:	0000001a 	andeq	r0, r0, sl, lsl r0
 780:	0000000c 	andeq	r0, r0, ip
 784:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000018 	andeq	r0, r0, r8, lsl r0
 790:	0000000c 	andeq	r0, r0, ip
 794:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 798:	00000000 	andeq	r0, r0, r0
 79c:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a0:	0000000c 	andeq	r0, r0, ip
 7a4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7a8:	00000000 	andeq	r0, r0, r0
 7ac:	00000020 	andeq	r0, r0, r0, lsr #32
 7b0:	0000000c 	andeq	r0, r0, ip
 7b4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00000020 	andeq	r0, r0, r0, lsr #32
 7c0:	0000000c 	andeq	r0, r0, ip
 7c4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7c8:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
 7cc:	00000020 	andeq	r0, r0, r0, lsr #32
 7d0:	0000000c 	andeq	r0, r0, ip
 7d4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7d8:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 7dc:	00000020 	andeq	r0, r0, r0, lsr #32
 7e0:	0000000c 	andeq	r0, r0, ip
 7e4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	0000001e 	andeq	r0, r0, lr, lsl r0
 7f0:	0000000c 	andeq	r0, r0, ip
 7f4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7f8:	00000000 	andeq	r0, r0, r0
 7fc:	00000012 	andeq	r0, r0, r2, lsl r0
 800:	0000000c 	andeq	r0, r0, ip
 804:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 808:	00000000 	andeq	r0, r0, r0
 80c:	00000020 	andeq	r0, r0, r0, lsr #32
 810:	0000000c 	andeq	r0, r0, ip
 814:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 818:	00000000 	andeq	r0, r0, r0
 81c:	00000020 	andeq	r0, r0, r0, lsr #32
 820:	0000000c 	andeq	r0, r0, ip
 824:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 828:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 82c:	0000001c 	andeq	r0, r0, ip, lsl r0
 830:	0000000c 	andeq	r0, r0, ip
 834:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 838:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
 83c:	0000001c 	andeq	r0, r0, ip, lsl r0
 840:	0000000c 	andeq	r0, r0, ip
 844:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 848:	08000e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp}
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
 850:	0000000c 	andeq	r0, r0, ip
 854:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 858:	00000000 	andeq	r0, r0, r0
 85c:	00000026 	andeq	r0, r0, r6, lsr #32
 860:	0000000c 	andeq	r0, r0, ip
 864:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 868:	08000ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp}
 86c:	00000040 	andeq	r0, r0, r0, asr #32
 870:	0000000c 	andeq	r0, r0, ip
 874:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 878:	00000000 	andeq	r0, r0, r0
 87c:	00000020 	andeq	r0, r0, r0, lsr #32
 880:	0000000c 	andeq	r0, r0, ip
 884:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 888:	00000000 	andeq	r0, r0, r0
 88c:	00000020 	andeq	r0, r0, r0, lsr #32
 890:	00000018 	andeq	r0, r0, r8, lsl r0
 894:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 898:	00000000 	andeq	r0, r0, r0
 89c:	00000038 	andeq	r0, r0, r8, lsr r0
 8a0:	40080e41 	andmi	r0, r8, r1, asr #28
 8a4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 8a8:	00000001 	andeq	r0, r0, r1
 8ac:	0000000c 	andeq	r0, r0, ip
 8b0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8b4:	00000000 	andeq	r0, r0, r0
 8b8:	00000020 	andeq	r0, r0, r0, lsr #32
 8bc:	0000000c 	andeq	r0, r0, ip
 8c0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8c4:	00000000 	andeq	r0, r0, r0
 8c8:	00000020 	andeq	r0, r0, r0, lsr #32
 8cc:	0000000c 	andeq	r0, r0, ip
 8d0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8d4:	00000000 	andeq	r0, r0, r0
 8d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8dc:	0000000c 	andeq	r0, r0, ip
 8e0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8e4:	00000000 	andeq	r0, r0, r0
 8e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8ec:	00000018 	andeq	r0, r0, r8, lsl r0
 8f0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8f4:	00000000 	andeq	r0, r0, r0
 8f8:	000000a8 	andeq	r0, r0, r8, lsr #1
 8fc:	40080e42 	andmi	r0, r8, r2, asr #28
 900:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 904:	00000001 	andeq	r0, r0, r1
 908:	0000000c 	andeq	r0, r0, ip
 90c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 910:	00000000 	andeq	r0, r0, r0
 914:	0000005c 	andeq	r0, r0, ip, asr r0
 918:	0000000c 	andeq	r0, r0, ip
 91c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 920:	00000000 	andeq	r0, r0, r0
 924:	0000005c 	andeq	r0, r0, ip, asr r0
 928:	0000000c 	andeq	r0, r0, ip
 92c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 930:	00000000 	andeq	r0, r0, r0
 934:	00000020 	andeq	r0, r0, r0, lsr #32
 938:	0000000c 	andeq	r0, r0, ip
 93c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 940:	00000000 	andeq	r0, r0, r0
 944:	00000020 	andeq	r0, r0, r0, lsr #32
 948:	0000000c 	andeq	r0, r0, ip
 94c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 950:	00000000 	andeq	r0, r0, r0
 954:	00000044 	andeq	r0, r0, r4, asr #32
 958:	0000000c 	andeq	r0, r0, ip
 95c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 960:	00000000 	andeq	r0, r0, r0
 964:	0000003a 	andeq	r0, r0, sl, lsr r0
 968:	0000000c 	andeq	r0, r0, ip
 96c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 970:	00000000 	andeq	r0, r0, r0
 974:	00000006 	andeq	r0, r0, r6
 978:	0000000c 	andeq	r0, r0, ip
 97c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 980:	00000000 	andeq	r0, r0, r0
 984:	0000000a 	andeq	r0, r0, sl
 988:	0000000c 	andeq	r0, r0, ip
 98c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 990:	7c020001 	stcvc	0, cr0, [r2], {1}
 994:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 998:	0000001c 	andeq	r0, r0, ip, lsl r0
 99c:	00000988 	andeq	r0, r0, r8, lsl #19
 9a0:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
 9a4:	00000154 	andeq	r0, r0, r4, asr r1
 9a8:	40100e41 	andsmi	r0, r0, r1, asr #28
 9ac:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 9b0:	02864003 	addeq	r4, r6, #3
 9b4:	00018e40 	andeq	r8, r1, r0, asr #28
 9b8:	00000018 	andeq	r0, r0, r8, lsl r0
 9bc:	00000988 	andeq	r0, r0, r8, lsl #19
 9c0:	00000000 	andeq	r0, r0, r0
 9c4:	00000070 	andeq	r0, r0, r0, ror r0
 9c8:	40080e41 	andmi	r0, r8, r1, asr #28
 9cc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 9d0:	00000001 	andeq	r0, r0, r1
 9d4:	0000000c 	andeq	r0, r0, ip
 9d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 9e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9e4:	00000018 	andeq	r0, r0, r8, lsl r0
 9e8:	000009d4 	ldrdeq	r0, [r0], -r4
 9ec:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
 9f0:	00000038 	andeq	r0, r0, r8, lsr r0
 9f4:	40080e41 	andmi	r0, r8, r1, asr #28
 9f8:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 9fc:	00000001 	andeq	r0, r0, r1
 a00:	0000000c 	andeq	r0, r0, ip
 a04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a08:	7c020001 	stcvc	0, cr0, [r2], {1}
 a0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a10:	00000018 	andeq	r0, r0, r8, lsl r0
 a14:	00000a00 	andeq	r0, r0, r0, lsl #20
 a18:	08001074 	stmdaeq	r0, {r2, r4, r5, r6, ip}
 a1c:	00000024 	andeq	r0, r0, r4, lsr #32
 a20:	40080e41 	andmi	r0, r8, r1, asr #28
 a24:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a28:	00000001 	andeq	r0, r0, r1
 a2c:	00000018 	andeq	r0, r0, r8, lsl r0
 a30:	00000a00 	andeq	r0, r0, r0, lsl #20
 a34:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
 a38:	00000024 	andeq	r0, r0, r4, lsr #32
 a3c:	40080e41 	andmi	r0, r8, r1, asr #28
 a40:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a44:	00000001 	andeq	r0, r0, r1
 a48:	00000018 	andeq	r0, r0, r8, lsl r0
 a4c:	00000a00 	andeq	r0, r0, r0, lsl #20
 a50:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
 a54:	00000090 	muleq	r0, r0, r0
 a58:	40080e41 	andmi	r0, r8, r1, asr #28
 a5c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a60:	00000001 	andeq	r0, r0, r1
 a64:	00000028 	andeq	r0, r0, r8, lsr #32
 a68:	00000a00 	andeq	r0, r0, r0, lsl #20
 a6c:	0800114c 	stmdaeq	r0, {r2, r3, r6, r8, ip}
 a70:	000000a8 	andeq	r0, r0, r8, lsr #1
 a74:	40200e43 	eormi	r0, r0, r3, asr #28
 a78:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
 a7c:	06854007 	streq	r4, [r5], r7
 a80:	40058640 	andmi	r8, r5, r0, asr #12
 a84:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
 a88:	02894003 	addeq	r4, r9, #3
 a8c:	00018e40 	andeq	r8, r1, r0, asr #28
 a90:	00000018 	andeq	r0, r0, r8, lsl r0
 a94:	00000a00 	andeq	r0, r0, r0, lsl #20
 a98:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
 a9c:	00000038 	andeq	r0, r0, r8, lsr r0
 aa0:	40080e41 	andmi	r0, r8, r1, asr #28
 aa4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 aa8:	00000001 	andeq	r0, r0, r1
 aac:	0000001c 	andeq	r0, r0, ip, lsl r0
 ab0:	00000a00 	andeq	r0, r0, r0, lsl #20
 ab4:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
 ab8:	00000048 	andeq	r0, r0, r8, asr #32
 abc:	40100e41 	andsmi	r0, r0, r1, asr #28
 ac0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 ac4:	02854003 	addeq	r4, r5, #3
 ac8:	00018e40 	andeq	r8, r1, r0, asr #28
 acc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ad0:	00000a00 	andeq	r0, r0, r0, lsl #20
 ad4:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
 ad8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 adc:	40100e41 	andsmi	r0, r0, r1, asr #28
 ae0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 ae4:	02854003 	addeq	r4, r5, #3
 ae8:	00018e40 	andeq	r8, r1, r0, asr #28
 aec:	0000001c 	andeq	r0, r0, ip, lsl r0
 af0:	00000a00 	andeq	r0, r0, r0, lsl #20
 af4:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 af8:	00000084 	andeq	r0, r0, r4, lsl #1
 afc:	40100e41 	andsmi	r0, r0, r1, asr #28
 b00:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b04:	02854003 	addeq	r4, r5, #3
 b08:	00018e40 	andeq	r8, r1, r0, asr #28
 b0c:	00000018 	andeq	r0, r0, r8, lsl r0
 b10:	00000a00 	andeq	r0, r0, r0, lsl #20
 b14:	080013c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip}
 b18:	00000024 	andeq	r0, r0, r4, lsr #32
 b1c:	40080e41 	andmi	r0, r8, r1, asr #28
 b20:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b24:	00000001 	andeq	r0, r0, r1
 b28:	0000000c 	andeq	r0, r0, ip
 b2c:	00000a00 	andeq	r0, r0, r0, lsl #20
 b30:	080013ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip}
 b34:	0000001c 	andeq	r0, r0, ip, lsl r0
 b38:	00000018 	andeq	r0, r0, r8, lsl r0
 b3c:	00000a00 	andeq	r0, r0, r0, lsl #20
 b40:	08001408 	stmdaeq	r0, {r3, sl, ip}
 b44:	00000040 	andeq	r0, r0, r0, asr #32
 b48:	40080e41 	andmi	r0, r8, r1, asr #28
 b4c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b50:	00000001 	andeq	r0, r0, r1
 b54:	00000024 	andeq	r0, r0, r4, lsr #32
 b58:	00000a00 	andeq	r0, r0, r0, lsl #20
 b5c:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
 b60:	000002dc 	ldrdeq	r0, [r0], -ip
 b64:	40180e41 	andsmi	r0, r8, r1, asr #28
 b68:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 b6c:	04844005 	streq	r4, [r4], #5
 b70:	40038540 	andmi	r8, r3, r0, asr #10
 b74:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
 b78:	00000001 	andeq	r0, r0, r1
 b7c:	00000024 	andeq	r0, r0, r4, lsr #32
 b80:	00000a00 	andeq	r0, r0, r0, lsl #20
 b84:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
 b88:	000000c8 	andeq	r0, r0, r8, asr #1
 b8c:	40180e41 	andsmi	r0, r8, r1, asr #28
 b90:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
 b94:	04854005 	streq	r4, [r5], #5
 b98:	40038640 	andmi	r8, r3, r0, asr #12
 b9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ba0:	00000001 	andeq	r0, r0, r1
 ba4:	00000018 	andeq	r0, r0, r8, lsl r0
 ba8:	00000a00 	andeq	r0, r0, r0, lsl #20
 bac:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 bb0:	00000038 	andeq	r0, r0, r8, lsr r0
 bb4:	400c0e41 	andmi	r0, ip, r1, asr #28
 bb8:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 bbc:	018e4002 	orreq	r4, lr, r2
 bc0:	00000018 	andeq	r0, r0, r8, lsl r0
 bc4:	00000a00 	andeq	r0, r0, r0, lsl #20
 bc8:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
 bcc:	0000005c 	andeq	r0, r0, ip, asr r0
 bd0:	40080e41 	andmi	r0, r8, r1, asr #28
 bd4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 bd8:	00000001 	andeq	r0, r0, r1
 bdc:	0000000c 	andeq	r0, r0, ip
 be0:	00000a00 	andeq	r0, r0, r0, lsl #20
 be4:	00000000 	andeq	r0, r0, r0
 be8:	00000002 	andeq	r0, r0, r2
 bec:	0000000c 	andeq	r0, r0, ip
 bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000bec 	andeq	r0, r0, ip, ror #23
 c04:	08001880 	stmdaeq	r0, {r7, fp, ip}
 c08:	00000030 	andeq	r0, r0, r0, lsr r0
 c0c:	400c0e41 	andmi	r0, ip, r1, asr #28
 c10:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 c14:	018e4002 	orreq	r4, lr, r2
 c18:	00000018 	andeq	r0, r0, r8, lsl r0
 c1c:	00000bec 	andeq	r0, r0, ip, ror #23
 c20:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
 c24:	00000024 	andeq	r0, r0, r4, lsr #32
 c28:	40080e41 	andmi	r0, r8, r1, asr #28
 c2c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c30:	00000001 	andeq	r0, r0, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4349564e 	movtmi	r5, #38478	; 0x964e
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	5152495f 	cmppl	r2, pc, asr r9
       8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
       c:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	7300646d 	movwvc	r6, #1133	; 0x46d
      14:	6e497274 	mcrvs	2, 2, r7, cr9, cr4, {3}
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	00786564 	rsbseq	r6, r8, r4, ror #10
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      24:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
      28:	64416563 	strbvs	r6, [r1], #-1379	; 0x563
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	45700073 	ldrbmi	r0, [r0, #-115]!	; 0x73
      34:	746e4970 	strbtvc	r4, [lr], #-2416	; 0x970
      38:	004e495f 	subeq	r4, lr, pc, asr r9

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	5645445f 			; <UNDEFINED> instruction: 0x5645445f

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	5f454349 	svcpl	0x00454349
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	4f464e49 	svcmi	0x00464e49
      48:	65446200 	strbvs	r6, [r4, #-512]	; 0x200
      4c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
      54:	73750065 	cmnvc	r5, #101	; 0x65
      58:	626e4562 	rsbvs	r4, lr, #411041792	; 0x18800000
      5c:	00525349 	subseq	r5, r2, r9, asr #6
      60:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
      64:	575f454d 	ldrbpl	r4, [pc, -sp, asr #10]
      68:	00544941 	subseq	r4, r4, r1, asr #18
      6c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      70:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      74:	50646e45 	rsbpl	r6, r4, r5, asr #28
      78:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
      7c:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
      80:	00657275 	rsbeq	r7, r5, r5, ror r2
      84:	49756664 	ldmdbmi	r5!, {r2, r5, r6, r9, sl, sp, lr}^
      88:	0074696e 	rsbseq	r6, r4, lr, ror #18
      8c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xe4f
      90:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
      94:	6f747069 	svcvs	0x00747069
      98:	73750072 	cmnvc	r5, #114	; 0x72
      9c:	73755362 	cmnvc	r5, #-2013265919	; 0x88000001
      a0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
      a4:	53456200 	movtpl	r6, #20992	; 0x5200
      a8:	6e63464f 	cdpvs	6, 6, cr4, cr3, cr15, {2}
      ac:	73750074 	cmnvc	r5, #116	; 0x74
      b0:	73655262 	cmnvc	r5, #536870918	; 0x20000006
      b4:	00656d75 	rsbeq	r6, r5, r5, ror sp
      b8:	50535553 	subspl	r5, r3, r3, asr r5
      bc:	45444e45 	strbmi	r4, [r4, #-3653]	; 0xe45
      c0:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
      c4:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
      c8:	4154535f 	cmpmi	r4, pc, asr r3
      cc:	75005452 	strvc	r5, [r0, #-1106]	; 0x452
      d0:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
      d4:	76654474 			; <UNDEFINED> instruction: 0x76654474
      d8:	46656369 	strbtmi	r6, [r5], -r9, ror #6
      dc:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
      e0:	43006572 	movwmi	r6, #1394	; 0x572
      e4:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
      e8:	00617461 	rsbeq	r7, r1, r1, ror #8
      ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      f0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      f4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
      f8:	63616672 	cmnvs	r1, #119537664	; 0x7200000
      fc:	45440065 	strbmi	r0, [r4, #-101]	; 0x65
     100:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     104:	4345525f 	movtmi	r5, #21087	; 0x525f
     108:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     10c:	5000544e 	andpl	r5, r0, lr, asr #8
     110:	5245574f 	subpl	r5, r5, #20709376	; 0x13c0000
     114:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     118:	632e6273 	teqvs	lr, #805306375	; 0x30000007
     11c:	62737500 	rsbsvs	r7, r3, #0, 10
     120:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     124:	6544676e 	strbvs	r6, [r4, #-1902]	; 0x76e
     128:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     12c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     130:	62737500 	rsbsvs	r7, r3, #0, 10
     134:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
     138:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     13c:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
     140:	70697263 	rsbvc	r7, r9, r3, ror #4
     144:	00726f74 	rsbseq	r6, r2, r4, ror pc
     148:	77425355 	smlsldvc	r5, r2, r5, r3
     14c:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     150:	76007378 			; <UNDEFINED> instruction: 0x76007378
     154:	00363175 	eorseq	r3, r6, r5, ror r1
     158:	20554e47 	subscs	r4, r5, r7, asr #28
     15c:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     160:	20332e38 	eorscs	r2, r3, r8, lsr lr
     164:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     168:	38323230 	ldmdacc	r2!, {r4, r5, r9, ip, sp}
     16c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     170:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     174:	5b202965 	blpl	80a710 <__Stack_Size+0x80a310>
     178:	2f4d5241 	svccs	0x004d5241
     17c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     180:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     184:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     188:	6172622d 	cmnvs	r2, sp, lsr #4
     18c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     190:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     194:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     198:	38303220 	ldmdacc	r0!, {r5, r9, ip, sp}
     19c:	5d323233 	lfmpl	f3, 4, [r2, #-204]!	; 0xffffff34
     1a0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1a4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1a8:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     1ac:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     1b0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     1b4:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
     1b8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1c0:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
     1c4:	6f777265 	svcvs	0x00777265
     1c8:	2d206b72 	vstmdbcs	r0!, {d6-<overflow reg d62>}
     1cc:	4f2d2067 	svcmi	0x002d2067
     1d0:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1d4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     1d8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1dc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1e0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1e4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1e8:	61746164 	cmnvs	r4, r4, ror #2
     1ec:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1f4:	6f6c0073 	svcvs	0x006c0073
     1f8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     1fc:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
     200:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     204:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     208:	44676966 	strbtmi	r6, [r7], #-2406	; 0x966
     20c:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     210:	6f747069 	svcvs	0x00747069
     214:	53550072 	cmppl	r5, #114	; 0x72
     218:	65526242 	ldrbvs	r6, [r2, #-578]	; 0x242
     21c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     220:	53550074 	cmppl	r5, #116	; 0x74
     224:	4f4e5f42 	svcmi	0x004e5f42
     228:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xf54
     22c:	00594441 	subseq	r4, r9, r1, asr #8
     230:	74734977 	ldrbtvc	r4, [r3], #-2423	; 0x977
     234:	45520072 	ldrbmi	r0, [r2, #-114]	; 0x72
     238:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     23c:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
     240:	414e5245 	cmpmi	lr, r5, asr #4
     244:	6544004c 	strbvs	r0, [r4, #-76]	; 0x4c
     248:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     24c:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
     250:	7300656c 	movwvc	r6, #1388	; 0x56c
     254:	70757465 	rsbsvc	r7, r5, r5, ror #8
     258:	00425355 	subeq	r5, r2, r5, asr r3
     25c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     260:	6f437465 	svcvs	0x00437465
     264:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     268:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     26c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     270:	746e4962 	strbtvc	r4, [lr], #-2402	; 0x962
     274:	6b636150 	blvs	18d87bc <__Stack_Size+0x18d83bc>
     278:	00464f53 	subeq	r4, r6, r3, asr pc
     27c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
     280:	616d726f 	cmnvs	sp, pc, ror #4
     284:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     288:	4d726300 	ldclmi	3, cr6, [r2, #-0]
     28c:	006b7361 	rsbeq	r7, fp, r1, ror #6
     290:	5f627355 	svcpl	0x00627355
     294:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
     298:	00687467 	rsbeq	r7, r8, r7, ror #8
     29c:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
     2a0:	53656d75 	cmnpl	r5, #7488	; 0x1d40
     2a4:	61567465 	cmpvs	r6, r5, ror #8
     2a8:	4e49006c 	cdpmi	0, 4, cr0, cr9, cr12, {3}
     2ac:	46524554 			; <UNDEFINED> instruction: 0x46524554
     2b0:	5f454341 	svcpl	0x00454341
     2b4:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     2b8:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     2bc:	43770054 	cmnmi	r7, #84	; 0x54
     2c0:	0052544e 	subseq	r5, r2, lr, asr #8
     2c4:	46746567 	ldrbtmi	r6, [r4], -r7, ror #10
     2c8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     2cc:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     2d0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     2d4:	4e4f5000 	cdpmi	0, 4, cr5, cr15, cr0, {0}
     2d8:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
     2dc:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
     2e0:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
     2e4:	62737500 	rsbsvs	r7, r3, #0, 10
     2e8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     2ec:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     2f0:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
     2f4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     2f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     2fc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     300:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     304:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     308:	00657275 	rsbeq	r7, r5, r5, ror r2
     30c:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     310:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     314:	74754f73 	ldrbtvc	r4, [r5], #-3955	; 0xf73
     318:	62735500 	rsbsvs	r5, r3, #0, 10
     31c:	664f775f 			; <UNDEFINED> instruction: 0x664f775f
     320:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     324:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     328:	61647055 	qdsubvs	r7, r5, r4
     32c:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     330:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     334:	00747365 	rsbseq	r7, r4, r5, ror #6
     338:	41545441 	cmpmi	r4, r1, asr #8
     33c:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     340:	62737500 	rsbsvs	r7, r3, #0, 10
     344:	61446f4e 	cmpvs	r4, lr, asr #30
     348:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
     34c:	00707574 	rsbseq	r7, r0, r4, ror r5
     350:	4349564e 	movtmi	r5, #38478	; 0x964e
     354:	5152495f 	cmppl	r2, pc, asr r9
     358:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     35c:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     360:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     364:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     368:	5f007974 	svcpl	0x00007974
     36c:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     370:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     374:	59545f54 	ldmdbpl	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     378:	6c004550 	cfstr32vs	mvfx4, [r0], {80}	; 0x50
     37c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     380:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     384:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     388:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     38c:	52544300 	subspl	r4, r4, #0, 6
     390:	00504c5f 	subseq	r4, r0, pc, asr ip
     394:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     398:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     39c:	006e4973 	rsbeq	r4, lr, r3, ror r9
     3a0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     3a4:	5f746e65 	svcpl	0x00746e65
     3a8:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     3ac:	00657275 	rsbeq	r7, r5, r5, ror r2
     3b0:	61746f54 	cmnvs	r4, r4, asr pc
     3b4:	6f435f6c 	svcvs	0x00435f6c
     3b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     3bc:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     3c0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     3c4:	52627375 	rsbpl	r7, r2, #-738197503	; 0xd4000001
     3c8:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     3cc:	62737500 	rsbsvs	r7, r3, #0, 10
     3d0:	49627344 	stmdbmi	r2!, {r2, r6, r8, r9, ip, sp, lr}^
     3d4:	73005253 	movwvc	r5, #595	; 0x253
     3d8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     3dc:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     3e0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     3e4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     3e8:	53550074 	cmppl	r5, #116	; 0x74
     3ec:	52455f42 	subpl	r5, r5, #264	; 0x108
     3f0:	00524f52 	subseq	r4, r2, r2, asr pc
     3f4:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     3f8:	4f5f454d 	svcmi	0x005f454d
     3fc:	75004646 	strvc	r4, [r0, #-1606]	; 0x646
     400:	755f3631 	ldrbvc	r3, [pc, #-1585]	; fffffdd7 <BootRAM+0xef70578>
     404:	73550038 	cmpvc	r5, #56	; 0x38
     408:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
     40c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     410:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     414:	00657275 	rsbeq	r7, r5, r5, ror r2
     418:	77425355 	smlsldvc	r5, r2, r5, r3
     41c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
     420:	4f007365 	svcmi	0x00007365
     424:	52454854 	subpl	r4, r5, #84, 16	; 0x540000
     428:	4345525f 	movtmi	r5, #21087	; 0x525f
     42c:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     430:	6200544e 	andvs	r5, r0, #1308622848	; 0x4e000000
     434:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
     438:	61725477 	cmnvs	r2, r7, ror r4
     43c:	6566736e 	strbvs	r7, [r6, #-878]!	; 0x36e
     440:	7a695372 	bvc	1a55210 <__Stack_Size+0x1a54e10>
     444:	75760065 	ldrbvc	r0, [r6, #-101]!	; 0x65
     448:	4e003233 	mcrmi	2, 0, r3, cr0, cr3, {1}
     44c:	5f434956 	svcpl	0x00434956
     450:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     454:	6e6e6168 	powvsez	f6, f6, #0.0
     458:	5f006c65 	svcpl	0x00006c65
     45c:	67655277 			; <UNDEFINED> instruction: 0x67655277
     460:	006c6156 	rsbeq	r6, ip, r6, asr r1
     464:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     468:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     46c:	564e0065 	strbpl	r0, [lr], -r5, rrx
     470:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     474:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     478:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     47c:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0x6c
     480:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
     484:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     488:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     48c:	00797469 	rsbseq	r7, r9, r9, ror #8
     490:	4349564e 	movtmi	r5, #38478	; 0x964e
     494:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     498:	70795474 	rsbsvc	r5, r9, r4, ror r4
     49c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     4a0:	72754300 	rsbsvc	r4, r5, #0, 6
     4a4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     4a8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     4ac:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     4b0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4b4:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xe6f
     4b8:	70416273 	subvc	r6, r1, r3, ror r2
     4bc:	696e4970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, lr}^
     4c0:	49770074 	ldmdbmi	r7!, {r2, r4, r5, r6}^
     4c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     4c8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     4cc:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
     4d0:	7375006b 	cmnvc	r5, #107	; 0x6b
     4d4:	74655362 	strbtvc	r5, [r5], #-866	; 0x362
     4d8:	70646e45 	rsbvc	r6, r4, r5, asr #28
     4dc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     4e0:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     4e4:	00657275 	rsbeq	r7, r5, r5, ror r2
     4e8:	73616c43 	cmnvc	r1, #17152	; 0x4300
     4ec:	65475f73 	strbvs	r5, [r7, #-3955]	; 0xf73
     4f0:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     4f4:	66726574 			; <UNDEFINED> instruction: 0x66726574
     4f8:	5f656361 	svcpl	0x00656361
     4fc:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     500:	00676e69 	rsbeq	r6, r7, r9, ror #28
     504:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     508:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
     50c:	52794265 	rsbspl	r4, r9, #1342177286	; 0x50000006
     510:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     514:	7a697300 	bvc	1a5d11c <__Stack_Size+0x1a5cd1c>
     518:	70797465 	rsbsvc	r7, r9, r5, ror #8
     51c:	6c430065 	mcrrvs	0, 6, r0, r3, cr5
     520:	5f737361 	svcpl	0x00737361
     524:	61746144 	cmnvs	r4, r4, asr #2
     528:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     52c:	70007075 	andvc	r7, r0, r5, ror r0
     530:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
     534:	79747265 	ldmdbvc	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     538:	42535500 	subsmi	r5, r3, #0, 10
     53c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     540:	445f0074 	ldrbmi	r0, [pc], #-116	; 548 <__Stack_Size+0x148>
     544:	43495645 	movtmi	r5, #38469	; 0x9645
     548:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45
     54c:	00455441 	subeq	r5, r5, r1, asr #8
     550:	62425355 	subvs	r5, r2, #1409286145	; 0x54000001
     554:	7165526d 	cmnvc	r5, sp, ror #4
     558:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
     55c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     560:	62737500 	rsbsvs	r7, r3, #0, 10
     564:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     568:	006e4f72 	rsbeq	r4, lr, r2, ror pc
     56c:	6f697067 	svcvs	0x00697067
     570:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     574:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
     578:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     57c:	5f504578 	svcpl	0x00504578
     580:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     584:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     588:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     58c:	53455f45 	movtpl	r5, #24389	; 0x5f45
     590:	4400464f 	strmi	r4, [r0], #-1615	; 0x64f
     594:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     598:	6f747069 	svcvs	0x00747069
     59c:	69535f72 	ldmdbvs	r3, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5a0:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
     5a4:	5f726573 	svcpl	0x00726573
     5a8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     5ac:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     5b0:	61654665 	cmnvs	r5, r5, ror #12
     5b4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     5b8:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     5bc:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     5c0:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     5c4:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     5c8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     5cc:	43006e6f 	movwmi	r6, #3695	; 0xe6f
     5d0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     5d4:	74536c6f 	ldrbvc	r6, [r3], #-3183	; 0xc6f
     5d8:	00657461 	rsbeq	r7, r5, r1, ror #8
     5dc:	534c4146 	movtpl	r4, #49478	; 0xc146
     5e0:	73550045 	cmpvc	r5, #69	; 0x45
     5e4:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
     5e8:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     5ec:	66726574 			; <UNDEFINED> instruction: 0x66726574
     5f0:	00656361 	rsbeq	r6, r5, r1, ror #6
     5f4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     5f8:	505f6563 	subspl	r6, pc, r3, ror #10
     5fc:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xf72
     600:	00797472 	rsbseq	r7, r9, r2, ror r4
     604:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     608:	4f5f454d 	svcmi	0x005f454d
     60c:	7375004e 	cmnvc	r5, #78	; 0x4e
     610:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     614:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     618:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     61c:	65446c61 	strbvs	r6, [r4, #-3169]	; 0xc61
     620:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     624:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     628:	72754300 	rsbsvc	r4, r5, #0, 6
     62c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     630:	746c415f 	strbtvc	r4, [ip], #-351	; 0x15f
     634:	616e7265 	cmnvs	lr, r5, ror #4
     638:	65536574 	ldrbvs	r6, [r3, #-1396]	; 0x574
     63c:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     640:	73750067 	cmnvc	r5, #103	; 0x67
     644:	74614462 	strbtvc	r4, [r1], #-1122	; 0x462
     648:	74655361 	strbtvc	r5, [r5], #-865	; 0x361
     64c:	75007075 	strvc	r7, [r0, #-117]	; 0x75
     650:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     654:	2064656e 	rsbcs	r6, r4, lr, ror #10
     658:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     65c:	53555f00 	cmppl	r5, #0, 30
     660:	535f5245 	cmppl	pc, #1342177284	; 0x50000004
     664:	444e4154 	strbmi	r4, [lr], #-340	; 0x154
     668:	5f445241 	svcpl	0x00445241
     66c:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0x552
     670:	53545345 	cmppl	r4, #335544321	; 0x14000001
     674:	42535500 	subsmi	r5, r3, #0, 10
     678:	5f504c5f 	svcpl	0x00504c5f
     67c:	314e4143 	cmpcc	lr, r3, asr #2
     680:	3058525f 	subscc	r5, r8, pc, asr r2
     684:	5152495f 	cmppl	r2, pc, asr r9
     688:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     68c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     690:	616c6564 	cmnvs	ip, r4, ror #10
     694:	73550079 	cmpvc	r5, #121	; 0x79
     698:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
     69c:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     6a0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     6a4:	6f687300 	svcvs	0x00687300
     6a8:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     6ac:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
     6b0:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     6b4:	6e754662 	cdpvs	6, 7, cr4, cr5, cr2, {3}
     6b8:	6f697463 	svcvs	0x00697463
     6bc:	446c616e 	strbtmi	r6, [ip], #-366	; 0x16e
     6c0:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     6c4:	6f747069 	svcvs	0x00747069
     6c8:	73550072 	cmpvc	r5, #114	; 0x72
     6cc:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
     6d0:	6f437465 	svcvs	0x00437465
     6d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6d8:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     6dc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     6e0:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     6e4:	4c5f454d 	cfldr64mi	mvdx4, [pc], {77}	; 0x4d
     6e8:	52455441 	subpl	r5, r5, #1090519040	; 0x41000000
     6ec:	62737500 	rsbsvs	r7, r3, #0, 10
     6f0:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     6f4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6f8:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     6fc:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     700:	00676e69 	rsbeq	r6, r7, r9, ror #28
     704:	73616c43 	cmnvc	r1, #17152	; 0x4300
     708:	6f4e5f73 	svcvs	0x004e5f73
     70c:	61746144 	cmnvs	r4, r4, asr #2
     710:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     714:	6e007075 	mcrvs	0, 0, r7, cr0, cr5, {3}
     718:	49636976 	stmdbmi	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     71c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     720:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     724:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
     728:	6552006f 	ldrbvs	r0, [r2, #-111]	; 0x6f
     72c:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     730:	73750053 	cmnvc	r5, #83	; 0x53
     734:	74655362 	strbtvc	r5, [r5], #-866	; 0x362
     738:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     73c:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     740:	525f0065 	subspl	r0, pc, #101	; 0x65
     744:	4c555345 	mrrcmi	3, 4, r5, r5, cr5	; <UNPREDICTABLE>
     748:	52540054 	subspl	r0, r4, #84	; 0x54
     74c:	5f004555 	svcpl	0x00004555
     750:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     754:	505f4543 	subspl	r4, pc, r3, asr #10
     758:	00504f52 	subseq	r4, r0, r2, asr pc
     75c:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     760:	6f437465 	svcvs	0x00437465
     764:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     768:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     76c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     770:	61656c43 	cmnvs	r5, r3, asr #24
     774:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
     778:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     77c:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
     780:	42535500 	subsmi	r5, r3, #0, 10
     784:	534e555f 	movtpl	r5, #58719	; 0xe55f
     788:	4f505055 	svcmi	0x00505055
     78c:	61005452 	tstvs	r0, r2, asr r4
     790:	6553746c 	ldrbvs	r7, [r3, #-1132]	; 0x46c
     794:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     798:	65530067 	ldrbvs	r0, [r3, #-103]	; 0x67
     79c:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
     7a0:	756f4378 	strbvc	r4, [pc, #-888]!	; 430 <__Stack_Size+0x30>
     7a4:	5000746e 	andpl	r7, r0, lr, ror #8
     7a8:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
     7ac:	535f7373 	cmppl	pc, #-872415231	; 0xcc000001
     7b0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     7b4:	4e495f73 	mcrmi	15, 2, r5, cr9, cr3, {3}
     7b8:	6f725000 	svcvs	0x00725000
     7bc:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
     7c0:	6174535f 	cmnvs	r4, pc, asr r3
     7c4:	5f737574 	svcpl	0x00737574
     7c8:	0054554f 	subseq	r5, r4, pc, asr #10
     7cc:	52627375 	rsbpl	r7, r2, #-738197503	; 0xd4000001
     7d0:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     7d4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     7d8:	445f0074 	ldrbmi	r0, [pc], #-116	; 7e0 <__Stack_Size+0x3e0>
     7dc:	43495645 	movtmi	r5, #38469	; 0x9645
     7e0:	73750045 	cmnvc	r5, #69	; 0x45
     7e4:	62734462 	rsbsvs	r4, r3, #1644167168	; 0x62000000
     7e8:	00737542 	rsbseq	r7, r3, r2, asr #10
     7ec:	49704570 	ldmdbmi	r0!, {r4, r5, r6, r8, sl, lr}^
     7f0:	4f5f746e 	svcmi	0x005f746e
     7f4:	72005455 	andvc	r5, r0, #1426063360	; 0x55000000
     7f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     7fc:	45007473 	strmi	r7, [r0, #-1139]	; 0x473
     800:	4f50444e 	svcmi	0x0050444e
     804:	5f544e49 	svcpl	0x00544e49
     808:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     80c:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     810:	73750054 	cmnvc	r5, #84	; 0x54
     814:	696e4962 	stmdbvs	lr!, {r1, r5, r6, r8, fp, lr}^
     818:	53550074 	cmppl	r5, #116	; 0x74
     81c:	654c7742 	strbvs	r7, [ip, #-1858]	; 0x742
     820:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     824:	73750073 	cmnvc	r5, #115	; 0x73
     828:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     82c:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     830:	6544676e 	strbvs	r6, [r4, #-1902]	; 0x76e
     834:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     838:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     83c:	61745300 	cmnvs	r4, r0, lsl #6
     840:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
     844:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
     848:	73654474 	cmnvc	r5, #116, 8	; 0x74000000
     84c:	70697263 	rsbvc	r7, r9, r3, ror #4
     850:	44726f74 	ldrbtmi	r6, [r2], #-3956	; 0xf74
     854:	00617461 	rsbeq	r7, r1, r1, ror #8
     858:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     85c:	52554749 	subspl	r4, r5, #19136512	; 0x1240000
     860:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     864:	6f506273 	svcvs	0x00506273
     868:	4f726577 	svcmi	0x00726577
     86c:	43006666 	movwmi	r6, #1638	; 0x666
     870:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     874:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     878:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     87c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     880:	62737500 	rsbsvs	r7, r3, #0, 10
     884:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     888:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     88c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     890:	5f387500 	svcpl	0x00387500
     894:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
     898:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     89c:	73654467 	cmnvc	r5, #1728053248	; 0x67000000
     8a0:	70697263 	rsbvc	r7, r9, r3, ror #4
     8a4:	44726f74 	ldrbtmi	r6, [r2], #-3956	; 0xf74
     8a8:	41005546 	tstmi	r0, r6, asr #10
     8ac:	45524444 	ldrbmi	r4, [r2, #-1092]	; 0x444
     8b0:	44455353 	strbmi	r5, [r5], #-851	; 0x353
     8b4:	53455200 	movtpl	r5, #20992	; 0x5200
     8b8:	5f454d55 	svcpl	0x00454d55
     8bc:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
     8c0:	4c414e52 	mcrrmi	14, 5, r4, r1, cr2
     8c4:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     8c8:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     8cc:	4154535f 	cmpmi	r4, pc, asr r3
     8d0:	55004554 	strpl	r4, [r0, #-1364]	; 0x554
     8d4:	535f4253 	cmppl	pc, #805306373	; 0x30000005
     8d8:	45434355 	strbmi	r4, [r3, #-853]	; 0x355
     8dc:	55005353 	strpl	r5, [r0, #-851]	; 0x353
     8e0:	4e4f434e 	cdpmi	3, 4, cr4, cr15, cr14, {2}
     8e4:	5443454e 	strbpl	r4, [r3], #-1358	; 0x54e
     8e8:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     8ec:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     8f0:	61745374 	cmnvs	r4, r4, ror r3
     8f4:	00737574 	rsbseq	r7, r3, r4, ror r5
     8f8:	444e455f 	strbmi	r4, [lr], #-1375	; 0x55f
     8fc:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
     900:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     904:	75004f46 	strvc	r4, [r0, #-3910]	; 0xf46
     908:	6c436273 	sfmvs	f6, 2, [r3], {115}	; 0x73
     90c:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     910:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
     914:	54006572 	strpl	r6, [r0], #-1394	; 0x572
     918:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
     91c:	646e455f 	strbtvs	r4, [lr], #-1375	; 0x55f
     920:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     924:	3a430074 	bcc	10c0afc <__Stack_Size+0x10c06fc>
     928:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0x55c
     92c:	725c7372 	subsvc	r7, ip, #-939524095	; 0xc8000001
     930:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
     934:	6f445c6b 	svcvs	0x00445c6b
     938:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
     93c:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
     940:	75647241 	strbvc	r7, [r4, #-577]!	; 0x241
     944:	5c6f6e69 	stclpl	14, cr6, [pc], #-420	; 7a8 <__Stack_Size+0x3a8>
     948:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     94c:	69756432 	ldmdbvs	r5!, {r1, r4, r5, sl, sp, lr}^
     950:	622d6f6e 	eorvs	r6, sp, #440	; 0x1b8
     954:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
     958:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
     95c:	44475c72 	strbmi	r5, [r7], #-3186	; 0xc72
     960:	31463233 	cmpcc	r6, r3, lsr r2
     964:	706f4300 	rsbvc	r4, pc, r0, lsl #6
     968:	756f5279 	strbvc	r5, [pc, #-633]!	; 6f7 <__Stack_Size+0x2f7>
     96c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     970:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     974:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     978:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
     97c:	6f6e0064 	svcvs	0x006e0064
     980:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
     984:	6f725067 	svcvs	0x00725067
     988:	38750063 	ldmdacc	r5!, {r0, r1, r5, r6}^
     98c:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     990:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     994:	6556676e 	ldrbvs	r6, [r6, #-1902]	; 0x76e
     998:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
     99c:	5f387500 	svcpl	0x00387500
     9a0:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9a4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9a8:	746e4967 	strbtvc	r4, [lr], #-2407	; 0x967
     9ac:	61667265 	cmnvs	r6, r5, ror #4
     9b0:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     9b4:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     9b8:	76654462 	strbtvc	r4, [r5], -r2, ror #8
     9bc:	44656369 	strbtmi	r6, [r5], #-873	; 0x369
     9c0:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     9c4:	6f747069 	svcvs	0x00747069
     9c8:	55464472 	strbpl	r4, [r6, #-1138]	; 0x472
     9cc:	5f387500 	svcpl	0x00387500
     9d0:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9d4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9d8:	72655367 	rsbvc	r5, r5, #-1677721599	; 0x9c000001
     9dc:	006c6169 	rsbeq	r6, ip, r9, ror #2
     9e0:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 173 <_Minimum_Stack_Size+0x73>
     9e4:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     9e8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     9ec:	30746c41 	rsbscc	r6, r4, r1, asr #24
     9f0:	5f387500 	svcpl	0x00387500
     9f4:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9f8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9fc:	746c4167 	strbtvc	r4, [ip], #-359	; 0x167
     a00:	38750031 	ldmdacc	r5!, {r0, r4, r5}^
     a04:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a08:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a0c:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a10:	75003274 	strvc	r3, [r0, #-628]	; 0x274
     a14:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a18:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a1c:	50676e69 	rsbpl	r6, r7, r9, ror #28
     a20:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xf72
     a24:	75007463 	strvc	r7, [r0, #-1123]	; 0x463
     a28:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a2c:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a30:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
     a34:	49676e61 	stmdbmi	r7!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     a38:	73750064 	cmnvc	r5, #100	; 0x64
     a3c:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     a40:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     a44:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     a48:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
     a4c:	69467566 	stmdbvs	r6, {r1, r2, r5, r6, r8, sl, ip, sp, lr}^
     a50:	6873696e 	ldmdavs	r3!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     a54:	6f6c7055 	svcvs	0x006c7055
     a58:	6a006461 	bvs	19be4 <__Stack_Size+0x197e4>
     a5c:	54706d75 	ldrbtpl	r6, [r0], #-3445	; 0xd75
     a60:	6573556f 	ldrbvs	r5, [r3, #-1391]!	; 0x56f
     a64:	68630072 	stmdavs	r3!, {r1, r4, r5, r6}^
     a68:	556b6365 	strbpl	r6, [fp, #-869]!	; 0x365
     a6c:	43726573 	cmnmi	r2, #482344960	; 0x1cc00000
     a70:	0065646f 	rsbeq	r6, r5, pc, ror #8
     a74:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     a78:	65526d65 	ldrbvs	r6, [r2, #-3429]	; 0xd65
     a7c:	00746573 	rsbseq	r6, r4, r3, ror r5
     a80:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     a84:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     a88:	74536e6f 	ldrbvc	r6, [r3], #-3695	; 0xe6f
     a8c:	00657461 	rsbeq	r7, r5, r1, ror #8
     a90:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0x573
     a94:	414c4670 	hvcmi	50272	; 0xc460
     a98:	73004853 	movwvc	r4, #2131	; 0x853
     a9c:	70757465 	rsbsvc	r7, r5, r5, ror #8
     aa0:	004b4c43 	subeq	r4, fp, r3, asr #24
     aa4:	6e69616d 	powvsez	f6, f1, #5.0
     aa8:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     aac:	454c7075 	strbmi	r7, [ip, #-117]	; 0x75
     ab0:	646e4144 	strbtvs	r4, [lr], #-324	; 0x144
     ab4:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     ab8:	6e006e6f 	cdpvs	14, 0, cr6, cr0, cr15, {3}
     abc:	73755f6f 	cmnvc	r5, #444	; 0x1bc
     ac0:	6a5f7265 	bvs	17dd45c <__Stack_Size+0x17dd05c>
     ac4:	00706d75 	rsbseq	r6, r0, r5, ror sp
     ac8:	6e69616d 	powvsez	f6, f1, #5.0
     acc:	7300632e 	movwvc	r6, #814	; 0x32e
     ad0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     ad4:	7261486d 	rsbvc	r4, r1, #7143424	; 0x6d0000
     ad8:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
     adc:	64007465 	strvs	r7, [r0], #-1125	; 0x465
     ae0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     ae4:	756f635f 	strbvc	r6, [pc, #-863]!	; 78d <__Stack_Size+0x38d>
     ae8:	7300746e 	movwvc	r7, #1134	; 0x46e
     aec:	626f7274 	rsbvs	r7, pc, #116, 4	; 0x40000007
     af0:	6e695065 	cdpvs	0, 6, cr5, cr9, cr5, {3}
     af4:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     af8:	6f6c7055 	svcvs	0x006c7055
     afc:	74536461 	ldrbvc	r6, [r3], #-1121	; 0x461
     b00:	65747261 	ldrbvs	r7, [r4, #-609]!	; 0x261
     b04:	43490064 	movtmi	r0, #36964	; 0x9064
     b08:	74005250 	strvc	r5, [r0], #-592	; 0x250
     b0c:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0x6d
     b10:	77720062 	ldrbvc	r0, [r2, -r2, rrx]!
     b14:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
     b18:	50534900 	subspl	r4, r3, r0, lsl #18
     b1c:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0x52
     b20:	69506461 	ldmdbvs	r0, {r0, r5, r6, sl, sp, lr}^
     b24:	6c66006e 	stclvs	0, cr0, [r6], #-440	; 0xfffffe48
     b28:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
     b2c:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
     b30:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     b34:	61720073 	cmnvs	r2, r3, ror r0
     b38:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
     b3c:	00424353 	subeq	r4, r2, r3, asr r3
     b40:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     b44:	73006765 	movwvc	r6, #1893	; 0x765
     b48:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     b4c:	42504100 	subsmi	r4, r0, #0, 2
     b50:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
     b54:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
     b58:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0x70
     b5c:	616c6600 	cmnvs	ip, r0, lsl #12
     b60:	6e556873 	mrcvs	8, 2, r6, cr5, cr3, {3}
     b64:	6b636f6c 	blvs	18dc91c <__Stack_Size+0x18dc51c>
     b68:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
     b6c:	73616c46 	cmnvc	r1, #17920	; 0x4600
     b70:	646e4568 	strbtvs	r4, [lr], #-1384	; 0x568
     b74:	41464200 	mrsmi	r4, (UNDEF: 102)
     b78:	766e0052 			; <UNDEFINED> instruction: 0x766e0052
     b7c:	69446369 	stmdbvs	r4, {r0, r3, r5, r6, r8, r9, sp, lr}^
     b80:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     b84:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
     b88:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     b8c:	00737470 	rsbseq	r7, r3, r0, ror r4
     b90:	534d5f5f 	movtpl	r5, #57183	; 0xdf5f
     b94:	534d5f52 	movtpl	r5, #57170	; 0xdf52
     b98:	54560050 	ldrbpl	r0, [r6], #-80	; 0x50
     b9c:	6a00524f 	bvs	154e0 <__Stack_Size+0x150e0>
     ba0:	41706d75 	cmnmi	r0, r5, ror sp
     ba4:	00726464 	rsbseq	r6, r2, r4, ror #8
     ba8:	5f434352 	svcpl	0x00434352
     bac:	53676552 	cmnpl	r7, #343932928	; 0x14800000
     bb0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     bb4:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
     bb8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     bbc:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     bc0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     bc4:	43490074 	movtmi	r0, #36980	; 0x9074
     bc8:	74005253 	strvc	r5, [r0], #-595	; 0x253
     bcc:	616d706d 	cmnvs	sp, sp, rrx
     bd0:	41006b73 	tstmi	r0, r3, ror fp
     bd4:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
     bd8:	49410052 	stmdbmi	r1, {r1, r4, r6}^
     bdc:	00524352 	subseq	r4, r2, r2, asr r3
     be0:	41464d4d 	cmpmi	r6, sp, asr #26
     be4:	686c0052 	stmdavs	ip!, {r1, r4, r6}^
     be8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     bec:	616c6600 	cmnvs	ip, r0, lsl #12
     bf0:	6f4c6873 	svcvs	0x004c6873
     bf4:	43006b63 	movwmi	r6, #2915	; 0xb63
     bf8:	00525346 	subseq	r5, r2, r6, asr #6
     bfc:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     c00:	726f7700 	rsbvc	r7, pc, #0, 14
     c04:	43490064 	movtmi	r0, #36964	; 0x9064
     c08:	41005245 	tstmi	r0, r5, asr #4
     c0c:	52314250 	eorspl	r4, r1, #80, 4
     c10:	00525453 	subseq	r5, r2, r3, asr r4
     c14:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     c18:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
     c1c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c20:	00304445 	eorseq	r4, r0, r5, asr #8
     c24:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     c28:	53455200 	movtpl	r5, #20992	; 0x5200
     c2c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     c30:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     c34:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c38:	33444556 	movtcc	r4, #17750	; 0x4556
     c3c:	53455200 	movtpl	r5, #20992	; 0x5200
     c40:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     c44:	61003444 	tstvs	r0, r4, asr #8
     c48:	00726464 	rsbseq	r6, r2, r4, ror #8
     c4c:	49564e72 	ldmdbmi	r6, {r1, r4, r5, r6, r9, sl, fp, lr}^
     c50:	48530043 	ldmdami	r3, {r0, r1, r6}^
     c54:	00525343 	subseq	r5, r2, r3, asr #6
     c58:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
     c5c:	42504100 	subsmi	r4, r0, #0, 2
     c60:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     c64:	67617000 	strbvs	r7, [r1, -r0]!
     c68:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
     c6c:	73750072 	cmnvc	r5, #114	; 0x72
     c70:	69614d72 	stmdbvs	r1!, {r1, r4, r5, r6, r8, sl, fp, lr}^
     c74:	4641006e 	strbmi	r0, [r1], -lr, rrx
     c78:	68005253 	stmdavs	r0, {r0, r1, r4, r6, r9, ip, lr}
     c7c:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     c80:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     c84:	564e0063 	strbpl	r0, [lr], -r3, rrx
     c88:	545f4349 	ldrbpl	r4, [pc], #-841	; c90 <__Stack_Size+0x890>
     c8c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     c90:	41006665 	tstmi	r0, r5, ror #12
     c94:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
     c98:	6600524e 	strvs	r5, [r0], -lr, asr #4
     c9c:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     ca0:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     ca4:	726f5765 	rsbvc	r5, pc, #26476544	; 0x1940000
     ca8:	6c660064 	stclvs	0, cr0, [r6], #-400	; 0xfffffe70
     cac:	53687361 	cmnpl	r8, #-2080374783	; 0x84000001
     cb0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     cb4:	52504853 	subspl	r4, r0, #5439488	; 0x530000
     cb8:	6e616200 	cdpvs	2, 6, cr6, cr1, cr0, {0}
     cbc:	6c66006b 	stclvs	0, cr0, [r6], #-428	; 0xfffffe54
     cc0:	41687361 	cmnmi	r8, r1, ror #6
     cc4:	00726464 	rsbseq	r6, r2, r4, ror #8
     cc8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     ccc:	00727450 	rsbseq	r7, r2, r0, asr r4
     cd0:	41727375 	cmnmi	r2, r5, ror r3
     cd4:	00726464 	rsbseq	r6, r2, r4, ror #8
     cd8:	73616c66 	cmnvc	r1, #26112	; 0x6600
     cdc:	61724568 	cmnvs	r2, r8, ror #10
     ce0:	61506573 	cmpvs	r0, r3, ror r5
     ce4:	42006567 	andmi	r6, r0, #432013312	; 0x19c00000
     ce8:	00524344 	subseq	r4, r2, r4, asr #6
     cec:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     cf0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     cf4:	00797469 	rsbseq	r7, r9, r9, ror #8
     cf8:	6f576868 	svcvs	0x00576868
     cfc:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
     d00:	56524553 			; <UNDEFINED> instruction: 0x56524553
     d04:	00314445 	eorseq	r4, r1, r5, asr #8
     d08:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     d0c:	63757600 	cmnvs	r5, #0, 12
     d10:	53003233 	movwpl	r3, #563	; 0x233
     d14:	545f4243 	ldrbpl	r4, [pc], #-579	; d1c <__Stack_Size+0x91c>
     d18:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     d1c:	48006665 	stmdami	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
     d20:	00525346 	subseq	r5, r2, r6, asr #6
     d24:	72745369 	rsbsvc	r5, r4, #-1543503871	; 0xa4000001
     d28:	00676e69 	rsbeq	r6, r7, r9, ror #28
     d2c:	76636572 			; <UNDEFINED> instruction: 0x76636572
     d30:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     d34:	64007265 	strvs	r7, [r0], #-613	; 0x265
     d38:	632e7566 	teqvs	lr, #427819008	; 0x19800000
     d3c:	4c505f00 	mrrcmi	15, 0, r5, r0, cr0
     d40:	4400544f 	strmi	r5, [r0], #-1103	; 0x44f
     d44:	555f5546 	ldrbpl	r5, [pc, #-1350]	; 806 <__Stack_Size+0x406>
     d48:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
     d4c:	4c465f44 	mcrrmi	15, 4, r5, r6, cr4
     d50:	5f485341 	svcpl	0x00485341
     d54:	30385830 	eorscc	r5, r8, r0, lsr r8
     d58:	30303530 	eorscc	r3, r0, r0, lsr r5
     d5c:	445f0030 	ldrbmi	r0, [pc], #-48	; d64 <__Stack_Size+0x964>
     d60:	74535546 	ldrbvc	r5, [r3], #-1350	; 0x546
     d64:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     d68:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0x500
     d6c:	70704172 	rsbsvc	r4, r0, r2, ror r1
     d70:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     d74:	50776200 	rsbspl	r6, r7, r0, lsl #4
     d78:	546c6c6f 	strbtpl	r6, [ip], #-3183	; 0xc6f
     d7c:	6f656d69 	svcvs	0x00656d69
     d80:	00307475 	eorseq	r7, r0, r5, ror r4
     d84:	6f507762 	svcvs	0x00507762
     d88:	69546c6c 	ldmdbvs	r4, {r2, r3, r5, r6, sl, fp, sp, lr}^
     d8c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 827 <__Stack_Size+0x427>
     d90:	62003174 	andvs	r3, r0, #116, 2
     d94:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; bc0 <__Stack_Size+0x7c0>
     d98:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
     d9c:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
     da0:	46440032 			; <UNDEFINED> instruction: 0x46440032
     da4:	50555f55 	subspl	r5, r5, r5, asr pc
     da8:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     dac:	4e4f4e5f 	mcrmi	14, 2, r4, cr15, cr15, {2}
     db0:	66640045 	strbtvs	r0, [r4], -r5, asr #32
     db4:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
     db8:	4c505579 	cfldr64mi	mvdx5, [r0], {121}	; 0x79
     dbc:	0044414f 	subeq	r4, r4, pc, asr #2
     dc0:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     dc4:	6f6c7055 	svcvs	0x006c7055
     dc8:	79546461 	ldmdbvc	r4, {r0, r5, r6, sl, sp, lr}^
     dcc:	64006570 	strvs	r6, [r0], #-1392	; 0x570
     dd0:	6f437566 	svcvs	0x00437566
     dd4:	75427970 	strbvc	r7, [r2, #-2416]	; 0x970
     dd8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     ddc:	78456f54 	stmdavc	r5, {r2, r4, r6, r8, r9, sl, fp, sp, lr}^
     de0:	64006365 	strvs	r6, [r0], #-869	; 0x365
     de4:	6f437566 	svcvs	0x00437566
     de8:	74537970 	ldrbvc	r7, [r3], #-2416	; 0x970
     dec:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     df0:	646f6300 	strbtvs	r6, [pc], #-768	; df8 <__Stack_Size+0x9f8>
     df4:	6f635f65 	svcvs	0x00635f65
     df8:	6c5f7970 	mrrcvs	9, 7, r7, pc, cr0	; <UNPREDICTABLE>
     dfc:	006b636f 	rsbeq	r6, fp, pc, ror #6
     e00:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
     e04:	5379706f 	cmnpl	r9, #111	; 0x6f
     e08:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     e0c:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e10:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     e14:	4f4c4e44 	svcmi	0x004c4e44
     e18:	64004441 	strvs	r4, [r0], #-1089	; 0x441
     e1c:	70557566 	subsvc	r7, r5, r6, ror #10
     e20:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     e24:	69547942 	ldmdbvs	r4, {r1, r6, r8, fp, ip, sp, lr}^
     e28:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8c3 <__Stack_Size+0x4c3>
     e2c:	46440074 			; <UNDEFINED> instruction: 0x46440074
     e30:	50555f55 	subspl	r5, r5, r5, asr pc
     e34:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     e38:	414c465f 	cmpmi	ip, pc, asr r6
     e3c:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
     e40:	30303858 	eorscc	r3, r0, r8, asr r8
     e44:	30303032 	eorscc	r3, r0, r2, lsr r0
     e48:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
     e4c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     e50:	66640065 	strbtvs	r0, [r4], -r5, rrx
     e54:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
     e58:	5464616f 	strbtpl	r6, [r4], #-367	; 0x16f
     e5c:	73657079 	cmnvc	r5, #121	; 0x79
     e60:	6400745f 	strvs	r7, [r0], #-1119	; 0x45f
     e64:	70417566 	subvc	r7, r1, r6, ror #10
     e68:	61745370 	cmnvs	r4, r0, ror r3
     e6c:	00737574 	rsbseq	r7, r3, r4, ror r5
     e70:	6f6c7075 	svcvs	0x006c7075
     e74:	6c426461 	cfstrdvs	mvd6, [r2], {97}	; 0x61
     e78:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     e7c:	74006e65 	strvc	r6, [r0], #-3685	; 0xe65
     e80:	42736968 	rsbsmi	r6, r3, #104, 18	; 0x1a0000
     e84:	6b636f6c 	blvs	18dcc3c <__Stack_Size+0x18dc83c>
     e88:	006e654c 	rsbeq	r6, lr, ip, asr #10
     e8c:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     e90:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
     e94:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     e98:	006e654c 	rsbeq	r6, lr, ip, asr #10
     e9c:	42756664 	rsbsmi	r6, r5, #100, 12	; 0x6400000
     ea0:	00797375 	rsbseq	r7, r9, r5, ror r3
     ea4:	61745362 	cmnvs	r4, r2, ror #6
     ea8:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
     eac:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     eb0:	74730068 	ldrbtvc	r0, [r3], #-104	; 0x68
     eb4:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     eb8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     ebc:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
     ec0:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
     ec4:	5f44414f 	svcpl	0x0044414f
     ec8:	004d4152 	subeq	r4, sp, r2, asr r1
     ecc:	49474542 	stmdbmi	r7, {r1, r6, r8, sl, lr}^
     ed0:	4e494e4e 	cdpmi	14, 4, cr4, cr9, cr14, {2}
     ed4:	73750047 	cmnvc	r5, #71	; 0x47
     ed8:	70537265 	subsvc	r7, r3, r5, ror #4
     edc:	00656361 	rsbeq	r6, r5, r1, ror #6
     ee0:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     ee4:	45707041 	ldrbmi	r7, [r0, #-65]!	; 0x41
     ee8:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
     eec:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     ef0:	64007375 	strvs	r7, [r0], #-885	; 0x375
     ef4:	65537566 	ldrbvs	r7, [r3, #-1382]	; 0x566
     ef8:	61745374 	cmnvs	r4, r4, ror r3
     efc:	4d006574 	cfstr32mi	mvfx6, [r0, #-464]	; 0xfffffe30
     f00:	4c444449 	cfstrdmi	mvd4, [r4], {73}	; 0x49
     f04:	66640045 	strbtvs	r0, [r4], -r5, asr #32
     f08:	74654775 	strbtvc	r4, [r5], #-1909	; 0x775
     f0c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f10:	72460065 	subvc	r0, r6, #101	; 0x65
     f14:	73556565 	cmpvc	r5, #423624704	; 0x19400000
     f18:	75427265 	strbvc	r7, [r2, #-613]	; 0x265
     f1c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     f20:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
     f24:	74537854 	ldrbvc	r7, [r3], #-2132	; 0x854
     f28:	536c6c61 	cmnpl	ip, #24832	; 0x6100
     f2c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     f30:	65530073 	ldrbvs	r0, [r3, #-115]	; 0x73
     f34:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
     f38:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
     f3c:	64413166 	strbvs	r3, [r1], #-358	; 0x166
     f40:	53007264 	movwpl	r7, #612	; 0x264
     f44:	50457465 	subpl	r7, r5, r5, ror #8
     f48:	61567854 	cmpvs	r6, r4, asr r8
     f4c:	0064696c 	rsbeq	r6, r4, ip, ror #18
     f50:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     f54:	6c42756f 	cfstr64vs	mvdx7, [r2], {111}	; 0x6f
     f58:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
     f5c:	53504566 	cmppl	r0, #427819008	; 0x19800000
     f60:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
     f64:	5f504500 	svcpl	0x00504500
     f68:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
     f6c:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
     f70:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
     f74:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     f78:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f7c:	54007375 	strpl	r7, [r0], #-885	; 0x375
     f80:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
     f84:	4f544465 	svcmi	0x00544465
     f88:	58545f47 	ldmdapl	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
     f8c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
     f90:	64415045 	strbvs	r5, [r1], #-69	; 0x45
     f94:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
     f98:	455f0073 	ldrbmi	r0, [pc, #-115]	; f2d <__Stack_Size+0xb2d>
     f9c:	42445f50 	submi	r5, r4, #80, 30	; 0x140
     fa0:	445f4655 	ldrbmi	r4, [pc], #-1621	; fa8 <__Stack_Size+0xba8>
     fa4:	62005249 	andvs	r5, r0, #-1879048188	; 0x90000004
     fa8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     fac:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     fb0:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
     fb4:	424e7700 	submi	r7, lr, #0, 14
     fb8:	6b636f6c 	blvs	18dcd70 <__Stack_Size+0x18dc970>
     fbc:	6c430073 	mcrrvs	0, 7, r0, r3, cr3
     fc0:	44726165 	ldrbtmi	r6, [r2], #-357	; 0x165
     fc4:	5f474f54 	svcpl	0x00474f54
     fc8:	47005852 	smlsdmi	r0, r2, r8, r5
     fcc:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
     fd0:	47005254 	smlsdmi	r0, r4, r2, r5
     fd4:	78527465 	ldmdavc	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     fd8:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
     fdc:	6174536c 	cmnvs	r4, ip, ror #6
     fe0:	00737574 	rsbseq	r7, r3, r4, ror r5
     fe4:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
     fe8:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
     fec:	6f437700 	svcvs	0x00437700
     ff0:	00746e75 	rsbseq	r6, r4, r5, ror lr
     ff4:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     ff8:	64644150 	strbtvs	r4, [r4], #-336	; 0x150
     ffc:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1000:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1004:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    1008:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    100c:	54007375 	strpl	r7, [r0], #-885	; 0x375
    1010:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    1014:	4f544465 	svcmi	0x00544465
    1018:	58525f47 	ldmdapl	r2, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    101c:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1020:	62445045 	subvs	r5, r4, #69	; 0x45
    1024:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1028:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    102c:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    1030:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1034:	00657079 	rsbeq	r7, r5, r9, ror r0
    1038:	445f5045 	ldrbmi	r5, [pc], #-69	; 1040 <__Stack_Size+0xc40>
    103c:	5f465542 	svcpl	0x00465542
    1040:	77004e49 	strvc	r4, [r0, -r9, asr #28]
    1044:	00746552 	rsbseq	r6, r4, r2, asr r5
    1048:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    104c:	41785250 	cmnmi	r8, r0, asr r2
    1050:	00726464 	rsbseq	r6, r2, r4, ror #8
    1054:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1058:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    105c:	30667542 	rsbcc	r7, r6, r2, asr #10
    1060:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1064:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1068:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    106c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1070:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
    1074:	00726944 	rsbseq	r6, r2, r4, asr #18
    1078:	70795477 	rsbsvc	r5, r9, r7, ror r4
    107c:	73750065 	cmnvc	r5, #101	; 0x65
    1080:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1084:	73752f62 	cmnvc	r5, #392	; 0x188
    1088:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    108c:	632e7367 	teqvs	lr, #-1677721599	; 0x9c000001
    1090:	5f504500 	svcpl	0x00504500
    1094:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1098:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    109c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    10a0:	62445045 	subvs	r5, r4, #69	; 0x45
    10a4:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    10a8:	00726944 	rsbseq	r6, r2, r4, asr #18
    10ac:	66754277 			; <UNDEFINED> instruction: 0x66754277
    10b0:	64644131 	strbtvs	r4, [r4], #-305	; 0x131
    10b4:	53770072 	cmnpl	r7, #114	; 0x72
    10b8:	53005777 	movwpl	r5, #1911	; 0x777
    10bc:	50457465 	subpl	r7, r5, r5, ror #8
    10c0:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    10c4:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    10c8:	53006666 	movwpl	r6, #1638	; 0x666
    10cc:	50457465 	subpl	r7, r5, r5, ror #8
    10d0:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    10d4:	43316675 	teqmi	r1, #122683392	; 0x7500000
    10d8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    10dc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    10e0:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    10e4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    10e8:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    10ec:	50457261 	subpl	r7, r5, r1, ror #4
    10f0:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    10f4:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    10f8:	54006666 	strpl	r6, [r0], #-1638	; 0x666
    10fc:	726f576f 	rsbvc	r5, pc, #29097984	; 0x1bc0000
    1100:	65470064 	strbvs	r0, [r7, #-100]	; 0x64
    1104:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1108:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    110c:	64413166 	strbvs	r3, [r1], #-358	; 0x166
    1110:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1114:	50457465 	subpl	r7, r5, r5, ror #8
    1118:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    111c:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    1120:	50457261 	subpl	r7, r5, r1, ror #4
    1124:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
    1128:	0058525f 	subseq	r5, r8, pc, asr r2
    112c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1130:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1134:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1138:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    113c:	65530074 	ldrbvs	r0, [r3, #-116]	; 0x74
    1140:	5f504574 	svcpl	0x00504574
    1144:	444e494b 	strbmi	r4, [lr], #-2379	; 0x94b
    1148:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    114c:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1150:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1154:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    1158:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    115c:	494b5f50 	stmdbmi	fp, {r4, r6, r8, r9, sl, fp, ip, lr}^
    1160:	4700444e 	strmi	r4, [r0, -lr, asr #8]
    1164:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    1168:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    116c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1170:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
    1174:	65527700 	ldrbvs	r7, [r2, #-1792]	; 0x700
    1178:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    117c:	47006575 	smlsdxmi	r0, r5, r5, r6
    1180:	4e457465 	cdpmi	4, 4, cr7, cr5, cr5, {3}
    1184:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    1188:	7700544e 	strvc	r5, [r0, -lr, asr #8]
    118c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1190:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1194:	62445045 	subvs	r5, r4, #69	; 0x45
    1198:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    119c:	756f4330 	strbvc	r4, [pc, #-816]!	; e74 <__Stack_Size+0xa74>
    11a0:	5300746e 	movwpl	r7, #1134	; 0x46e
    11a4:	41447465 	cmpmi	r4, r5, ror #8
    11a8:	00524444 	subseq	r4, r2, r4, asr #8
    11ac:	52776470 	rsbspl	r6, r7, #112, 8	; 0x70000000
    11b0:	42006765 	andmi	r6, r0, #26476544	; 0x1940000
    11b4:	53657479 	cmnpl	r5, #2030043136	; 0x79000000
    11b8:	00706177 	rsbseq	r6, r0, r7, ror r1
    11bc:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    11c0:	756f4350 	strbvc	r4, [pc, #-848]!	; e78 <__Stack_Size+0xa78>
    11c4:	7852746e 	ldmdavc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    11c8:	00676552 	rsbeq	r6, r7, r2, asr r5
    11cc:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    11d0:	43785250 	cmnmi	r8, #80, 4
    11d4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    11d8:	65546200 	ldrbvs	r6, [r4, #-512]	; 0x200
    11dc:	5300706d 	movwpl	r7, #109	; 0x6d
    11e0:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    11e4:	53005254 	movwpl	r5, #596	; 0x254
    11e8:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    11ec:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    11f0:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    11f4:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    11f8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    11fc:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    1200:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    1204:	54435f50 	strbpl	r5, [r3], #-3920	; 0xf50
    1208:	58545f52 	ldmdapl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    120c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1210:	62445045 	subvs	r5, r4, #69	; 0x45
    1214:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1218:	756f4331 	strbvc	r4, [pc, #-817]!	; eef <__Stack_Size+0xaef>
    121c:	5300746e 	movwpl	r7, #1134	; 0x46e
    1220:	50457465 	subpl	r7, r5, r5, ror #8
    1224:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1228:	43306675 	teqmi	r0, #122683392	; 0x7500000
    122c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1230:	75427700 	strbvc	r7, [r2, #-1792]	; 0x700
    1234:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    1238:	53007264 	movwpl	r7, #612	; 0x264
    123c:	535f7465 	cmppl	pc, #1694498816	; 0x65000000
    1240:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1244:	754f5f73 	strbvc	r5, [pc, #-3955]	; 2d9 <_Minimum_Stack_Size+0x1d9>
    1248:	65470074 	strbvs	r0, [r7, #-116]	; 0x74
    124c:	524e4674 	subpl	r4, lr, #116, 12	; 0x7400000
    1250:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1254:	62445045 	subvs	r5, r4, #69	; 0x45
    1258:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    125c:	64644130 	strbtvs	r4, [r4], #-304	; 0x130
    1260:	6e450072 	mcrvs	0, 2, r0, cr5, cr2, {3}
    1264:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    1268:	445f746e 	ldrbmi	r7, [pc], #-1134	; 1270 <__Stack_Size+0xe70>
    126c:	5f474f54 	svcpl	0x00474f54
    1270:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1274:	47007375 	smlsdxmi	r0, r5, r3, r7
    1278:	50457465 	subpl	r7, r5, r5, ror #8
    127c:	64417854 	strbvs	r7, [r1], #-2132	; 0x854
    1280:	43007264 	movwmi	r7, #612	; 0x264
    1284:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1288:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    128c:	0058545f 	subseq	r5, r8, pc, asr r4
    1290:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1294:	53785450 	cmnpl	r8, #80, 8	; 0x50000000
    1298:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    129c:	45620073 	strbmi	r0, [r2, #-115]!	; 0x73
    12a0:	6d754e70 	ldclvs	14, cr4, [r5, #-448]!	; 0xfffffe40
    12a4:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    12a8:	50444e45 	subpl	r4, r4, r5, asr #28
    12ac:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    12b0:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    12b4:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    12b8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    12bc:	52544300 	subspl	r4, r4, #0, 6
    12c0:	0050485f 	subseq	r4, r0, pc, asr r8
    12c4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    12c8:	505f3070 	subspl	r3, pc, r0, ror r0	; <UNPREDICTABLE>
    12cc:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    12d0:	53007373 	movwpl	r7, #883	; 0x373
    12d4:	52657661 	rsbpl	r7, r5, #101711872	; 0x6100000
    12d8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    12dc:	61530065 	cmpvs	r3, r5, rrx
    12e0:	53546576 	cmppl	r4, #494927872	; 0x1d800000
    12e4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    12e8:	50457700 	subpl	r7, r5, r0, lsl #14
    12ec:	006c6156 	rsbeq	r6, ip, r6, asr r1
    12f0:	5f627375 	svcpl	0x00627375
    12f4:	2f62696c 	svccs	0x0062696c
    12f8:	5f627375 	svcpl	0x00627375
    12fc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1300:	6e490063 	cdpvs	0, 4, cr0, cr9, cr3, {3}
    1304:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    1308:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    130c:	754f0073 	strbvc	r0, [pc, #-115]	; 12a1 <__Stack_Size+0xea1>
    1310:	505f3074 	subspl	r3, pc, r4, ror r0	; <UNPREDICTABLE>
    1314:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1318:	45007373 	strmi	r7, [r0, #-883]	; 0x373
    131c:	646e6950 	strbtvs	r6, [lr], #-2384	; 0x950
    1320:	53007865 	movwpl	r7, #2149	; 0x865
    1324:	53657661 	cmnpl	r5, #101711872	; 0x6100000
    1328:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    132c:	62737500 	rsbsvs	r7, r3, #0, 10
    1330:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1334:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    1338:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    133c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1340:	65735570 	ldrbvs	r5, [r3, #-1392]!	; 0x570
    1344:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
    1348:	61646e61 	cmnvs	r4, r1, ror #28
    134c:	525f6472 	subspl	r6, pc, #1912602624	; 0x72000000
    1350:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    1354:	00737473 	rsbseq	r7, r3, r3, ror r4
    1358:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    135c:	495f6563 	ldmdbmi	pc, {r0, r1, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1360:	006f666e 	rsbeq	r6, pc, lr, ror #12
    1364:	5f627375 	svcpl	0x00627375
    1368:	2f62696c 	svccs	0x0062696c
    136c:	5f627375 	svcpl	0x00627375
    1370:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1374:	4500632e 	strmi	r6, [r0, #-814]	; 0x32e
    1378:	4f50444e 	svcmi	0x0050444e
    137c:	5f544e49 	svcpl	0x00544e49
    1380:	4c415453 	cfstrdmi	mvd5, [r1], {83}	; 0x53
    1384:	6552004c 	ldrbvs	r0, [r2, #-76]	; 0x4c
    1388:	746c7573 	strbtvc	r7, [ip], #-1395	; 0x573
    138c:	736f5000 	cmnvc	pc, #0
    1390:	505f3074 	subspl	r3, pc, r4, ror r0	; <UNPREDICTABLE>
    1394:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1398:	44007373 	strmi	r7, [r0], #-883	; 0x373
    139c:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    13a0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    13a4:	65520072 	ldrbvs	r0, [r2, #-114]	; 0x72
    13a8:	76726573 			; <UNDEFINED> instruction: 0x76726573
    13ac:	53006465 	movwpl	r6, #1125	; 0x465
    13b0:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    13b4:	5f647261 	svcpl	0x00647261
    13b8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    13bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13c0:	61727567 	cmnvs	r2, r7, ror #10
    13c4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    13c8:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    13cc:	61745361 	cmnvs	r4, r1, ror #6
    13d0:	6e496567 	cdpvs	5, 4, cr6, cr9, cr7, {3}
    13d4:	56454400 	strbpl	r4, [r5], -r0, lsl #8
    13d8:	5f454349 	svcpl	0x00454349
    13dc:	4f4d4552 	svcmi	0x004d4552
    13e0:	575f4554 			; <UNDEFINED> instruction: 0x575f4554
    13e4:	55454b41 	strbpl	r4, [r5, #-2881]	; 0xb41
    13e8:	54530050 	ldrbpl	r0, [r3], #-80	; 0x50
    13ec:	454c4c41 	strbmi	r4, [ip, #-3137]	; 0xc41
    13f0:	79540044 	ldmdbvc	r4, {r2, r6}^
    13f4:	525f6570 	subspl	r6, pc, #112, 10	; 0x1c000000
    13f8:	65006365 	strvs	r6, [r0, #-869]	; 0x365
    13fc:	5f746978 	svcpl	0x00746978
    1400:	61446f4e 	cmpvs	r4, lr, asr #30
    1404:	535f6174 	cmppl	pc, #116, 2
    1408:	70757465 	rsbsvc	r7, r5, r5, ror #8
    140c:	56770030 			; <UNDEFINED> instruction: 0x56770030
    1410:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1414:	45440031 	strbmi	r0, [r4, #-49]	; 0x31
    1418:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
    141c:	5345445f 	movtpl	r4, #21599	; 0x545f
    1420:	50495243 	subpl	r5, r9, r3, asr #4
    1424:	00524f54 	subseq	r4, r2, r4, asr pc
    1428:	49525453 	ldmdbmi	r2, {r0, r1, r4, r6, sl, ip, lr}^
    142c:	445f474e 	ldrbmi	r4, [pc], #-1870	; 1434 <__Stack_Size+0x1034>
    1430:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    1434:	4f545049 	svcmi	0x00545049
    1438:	73550052 	cmpvc	r5, #82	; 0x52
    143c:	6f547265 	svcvs	0x00547265
    1440:	42414d50 	submi	r4, r1, #80, 26	; 0x1400
    1444:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1448:	706f4372 	rsbvc	r4, pc, r2, ror r3	; <UNPREDICTABLE>
    144c:	61730079 	cmnvs	r3, r9, ror r0
    1450:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
    1454:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1458:	4c006874 	stcmi	8, cr6, [r0], {116}	; 0x74
    145c:	5f545341 	svcpl	0x00545341
    1460:	445f4e49 	ldrbmi	r4, [pc], #-3657	; 1468 <__Stack_Size+0x1068>
    1464:	00415441 	subeq	r5, r1, r1, asr #8
    1468:	5f504f4e 	svcpl	0x00504f4e
    146c:	636f7250 	cmnvs	pc, #80, 4
    1470:	00737365 	rsbseq	r7, r3, r5, ror #6
    1474:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1478:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    147c:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1480:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    1484:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    1488:	78450065 	stmdavc	r5, {r0, r2, r5, r6}^
    148c:	74636570 	strbtvc	r6, [r3], #-1392	; 0x570
    1490:	6174535f 	cmnvs	r4, pc, asr r3
    1494:	5f737574 	svcpl	0x00737574
    1498:	0074754f 	rsbseq	r7, r4, pc, asr #10
    149c:	53554150 	cmppl	r5, #80, 2
    14a0:	65520045 	ldrbvs	r0, [r2, #-69]	; 0x45
    14a4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    14a8:	006f4e74 	rsbeq	r4, pc, r4, ror lr	; <UNPREDICTABLE>
    14ac:	5f544547 	svcpl	0x00544547
    14b0:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    14b4:	43414652 	movtmi	r4, #5714	; 0x1652
    14b8:	74530045 	ldrbvc	r0, [r3], #-69	; 0x45
    14bc:	61646e61 	cmnvs	r4, r1, ror #28
    14c0:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    14c4:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
    14c8:	696f5064 	stmdbvs	pc!, {r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
    14cc:	6546746e 	strbvs	r7, [r6, #-1134]	; 0x46e
    14d0:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    14d4:	45470065 	strbmi	r0, [r7, #-101]	; 0x65
    14d8:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    14dc:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    14e0:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    14e4:	4145465f 	cmpmi	r5, pc, asr r6
    14e8:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    14ec:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    14f0:	754d5f61 	strbvc	r5, [sp, #-3937]	; 0xf61
    14f4:	614d5f6c 	cmpvs	sp, ip, ror #30
    14f8:	63615078 	cmnvs	r1, #120	; 0x78
    14fc:	5374656b 	cmnpl	r4, #448790528	; 0x1ac00000
    1500:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1504:	76654470 			; <UNDEFINED> instruction: 0x76654470
    1508:	61745300 	cmnvs	r4, r0, lsl #6
    150c:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    1510:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    1514:	76654474 			; <UNDEFINED> instruction: 0x76654474
    1518:	46656369 	strbtmi	r6, [r5], -r9, ror #6
    151c:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
    1520:	70006572 	andvc	r6, r0, r2, ror r5
    1524:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    1528:	4e595300 	cdpmi	3, 5, cr5, cr9, cr0, {0}
    152c:	465f4843 	ldrbmi	r4, [pc], -r3, asr #16
    1530:	454d4152 	strbmi	r4, [sp, #-338]	; 0x152
    1534:	61745300 	cmnvs	r4, r0, lsl #6
    1538:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    153c:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
    1540:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
    1544:	61667265 	cmnvs	r6, r5, ror #4
    1548:	53006563 	movwpl	r6, #1379	; 0x563
    154c:	445f5445 	ldrbmi	r5, [pc], #-1093	; 1554 <__Stack_Size+0x1154>
    1550:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    1554:	4f545049 	svcmi	0x00545049
    1558:	45530052 	ldrbmi	r0, [r3, #-82]	; 0x52
    155c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1560:	46524554 			; <UNDEFINED> instruction: 0x46524554
    1564:	00454341 	subeq	r4, r5, r1, asr #6
    1568:	4145465f 	cmpmi	r5, pc, asr r6
    156c:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    1570:	4c45535f 	mcrrmi	3, 5, r5, r5, cr15
    1574:	4f544345 	svcmi	0x00544345
    1578:	74530052 	ldrbvc	r0, [r3], #-82	; 0x52
    157c:	61646e61 	cmnvs	r4, r1, ror #28
    1580:	475f6472 			; <UNDEFINED> instruction: 0x475f6472
    1584:	6f437465 	svcvs	0x00437465
    1588:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    158c:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
    1590:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1594:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1598:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    159c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    15a0:	65467261 	strbvs	r7, [r6, #-609]	; 0x261
    15a4:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    15a8:	45470065 	strbmi	r0, [r7, #-101]	; 0x65
    15ac:	4f435f54 	svcmi	0x00435f54
    15b0:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    15b4:	54415255 	strbpl	r5, [r1], #-597	; 0x255
    15b8:	004e4f49 	subeq	r4, lr, r9, asr #30
    15bc:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    15c0:	4c4f5254 	sfmmi	f5, 2, [pc], {84}	; 0x54
    15c4:	4154535f 	cmpmi	r4, pc, asr r3
    15c8:	5f004554 	svcpl	0x00004554
    15cc:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    15d0:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    15d4:	545f524f 	ldrbpl	r5, [pc], #-591	; 15dc <__Stack_Size+0x11dc>
    15d8:	00455059 	subeq	r5, r5, r9, asr r0
    15dc:	54544553 	ldrbpl	r4, [r4], #-1363	; 0x553
    15e0:	5f474e49 	svcpl	0x00474e49
    15e4:	50005055 	andpl	r5, r0, r5, asr r0
    15e8:	6f54414d 	svcvs	0x0054414d
    15ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    15f0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    15f4:	6f437265 	svcvs	0x00437265
    15f8:	52007970 	andpl	r7, r0, #112, 18	; 0x1c0000
    15fc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    1600:	31444556 	cmpcc	r4, r6, asr r5
    1604:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    1608:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    160c:	55474946 	strbpl	r4, [r7, #-2374]	; 0x946
    1610:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
    1614:	57004e4f 	strpl	r4, [r0, -pc, asr #28]
    1618:	5f544941 	svcpl	0x00544941
    161c:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    1620:	4f5f5355 	svcmi	0x005f5355
    1624:	54005455 	strpl	r5, [r0], #-1109	; 0x455
    1628:	4c41544f 	cfstrdmi	mvd5, [r1], {79}	; 0x4f
    162c:	4552735f 	ldrbmi	r7, [r2, #-863]	; 0x35f
    1630:	53455551 	movtpl	r5, #21841	; 0x5551
    1634:	4e490054 	mcrmi	0, 2, r0, cr9, cr4, {2}
    1638:	46524554 			; <UNDEFINED> instruction: 0x46524554
    163c:	5f454341 	svcpl	0x00454341
    1640:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    1644:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    1648:	7300524f 	movwvc	r5, #591	; 0x24f
    164c:	5f657661 	svcpl	0x00657661
    1650:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
    1654:	00687467 	rsbeq	r7, r8, r7, ror #8
    1658:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    165c:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1660:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1664:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1668:	45007375 	strmi	r7, [r0, #-885]	; 0x375
    166c:	4f50444e 	svcmi	0x0050444e
    1670:	5f544e49 	svcpl	0x00544e49
    1674:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    1678:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    167c:	4300524f 	movwmi	r5, #591	; 0x24f
    1680:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1684:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xf47
    1688:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    168c:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    1690:	75427000 	strbvc	r7, [r2, #-0]
    1694:	45700066 	ldrbmi	r0, [r0, #-102]!	; 0x66
    1698:	666e6950 			; <UNDEFINED> instruction: 0x666e6950
    169c:	4553006f 	ldrbmi	r0, [r3, #-111]	; 0x6f
    16a0:	44415f54 	strbmi	r5, [r1], #-3924	; 0xf54
    16a4:	53455244 	movtpl	r5, #21060	; 0x5244
    16a8:	65520053 	ldrbvs	r0, [r2, #-83]	; 0x53
    16ac:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    16b0:	6e455f64 	cdpvs	15, 4, cr5, cr5, cr4, {3}
    16b4:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    16b8:	5300746e 	movwpl	r7, #1134	; 0x46e
    16bc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    16c0:	666e4973 			; <UNDEFINED> instruction: 0x666e4973
    16c4:	4977006f 	ldmdbmi	r7!, {r0, r1, r2, r3, r5, r6}^
    16c8:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    16cc:	45470030 	strbmi	r0, [r7, #-48]	; 0x30
    16d0:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    16d4:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    16d8:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    16dc:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    16e0:	61745361 	cmnvs	r4, r1, ror #6
    16e4:	754f6567 	strbvc	r6, [pc, #-1383]	; 1185 <__Stack_Size+0xd85>
    16e8:	41570074 	cmpmi	r7, r4, ror r0
    16ec:	535f5449 	cmppl	pc, #1224736768	; 0x49000000
    16f0:	50555445 	subspl	r5, r5, r5, asr #8
    16f4:	71655200 	cmnvc	r5, r0, lsl #4
    16f8:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    16fc:	006f4e5f 	rsbeq	r4, pc, pc, asr lr	; <UNPREDICTABLE>
    1700:	54494157 	strbpl	r4, [r9], #-343	; 0x157
    1704:	4154535f 	cmpmi	r4, pc, asr r3
    1708:	5f535554 	svcpl	0x00535554
    170c:	43004e49 	movwmi	r4, #3657	; 0xe49
    1710:	5241454c 	subpl	r4, r1, #76, 10	; 0x13000000
    1714:	4145465f 	cmpmi	r5, pc, asr r6
    1718:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    171c:	53414c00 	movtpl	r4, #7168	; 0x1c00
    1720:	554f5f54 	strbpl	r5, [pc, #-3924]	; 7d4 <__Stack_Size+0x3d4>
    1724:	41445f54 	cmpmi	r4, r4, asr pc
    1728:	75004154 	strvc	r4, [r0, #-340]	; 0x154
    172c:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    1730:	752f6269 	strvc	r6, [pc, #-617]!	; 14cf <__Stack_Size+0x10cf>
    1734:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 1570 <__Stack_Size+0x1170>
    1738:	632e6d65 	teqvs	lr, #6464	; 0x1940
    173c:	424e7700 	submi	r7, lr, #0, 14
    1740:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    1744:	55627000 	strbpl	r7, [r2, #-0]!
    1748:	75427273 	strbvc	r7, [r2, #-627]	; 0x273
    174c:	65740066 	ldrbvs	r0, [r4, #-102]!	; 0x66
    1750:	0031706d 	eorseq	r7, r1, sp, rrx
    1754:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1758:	50770032 	rsbspl	r0, r7, r2, lsr r0
    175c:	7542414d 	strbvc	r4, [r2, #-333]	; 0x14d
    1760:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    1764:	64700072 	ldrbtvs	r0, [r0], #-114	; 0x72
    1768:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	080001c6 	stmdaeq	r0, {r1, r2, r6, r7, r8}
       8:	c6500001 	ldrbgt	r0, [r0], -r1
       c:	c8080001 	stmdagt	r8, {r0}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	04080001 	streq	r0, [r8], #-1
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00023800 	andeq	r3, r2, r0, lsl #16
      24:	00023c08 	andeq	r3, r2, r8, lsl #24
      28:	71000508 	tstvc	r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	0800023c 	stmdaeq	r0, {r2, r3, r4, r5, r9}
      34:	08000240 	stmdaeq	r0, {r6, r9}
      38:	00710007 	rsbseq	r0, r1, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0002409f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	00024208 	andeq	r4, r2, r8, lsl #4
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	429f2740 	addsmi	r2, pc, #64, 14	; 0x1000000
      54:	61080002 	tstvs	r8, r2
      58:	0b080002 	bleq	200068 <__Stack_Size+0x1ffc68>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
      74:	080002bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r9}
      78:	bb500001 	bllt	1400084 <__Stack_Size+0x13ffc84>
      7c:	04080002 	streq	r0, [r8], #-2
      80:	04080003 	streq	r0, [r8], #-3
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      8c:	00000000 	andeq	r0, r0, r0
      90:	0002a400 	andeq	sl, r2, r0, lsl #8
      94:	0002ce08 	andeq	ip, r2, r8, lsl #28
      98:	30000208 	andcc	r0, r0, r8, lsl #4
      9c:	0002d69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
      a0:	0002dc08 	andeq	sp, r2, r8, lsl #24
      a4:	30000208 	andcc	r0, r0, r8, lsl #4
      a8:	0002dc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
      ac:	0002e708 	andeq	lr, r2, r8, lsl #14
      b0:	53000108 	movwpl	r0, #264	; 0x108
      b4:	080002ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9}
      b8:	08000304 	stmdaeq	r0, {r2, r8, r9}
      bc:	9f300002 	svcls	0x00300002
	...
      c8:	08000304 	stmdaeq	r0, {r2, r8, r9}
      cc:	08000309 	stmdaeq	r0, {r0, r3, r8, r9}
      d0:	09500001 	ldmdbeq	r0, {r0}^
      d4:	10080003 	andne	r0, r8, r3
      d8:	04080003 	streq	r0, [r8], #-3
      dc:	5001f300 	andpl	pc, r1, r0, lsl #6
      e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e4:	00000000 	andeq	r0, r0, r0
      e8:	00031000 	andeq	r1, r3, r0
      ec:	00031508 	andeq	r1, r3, r8, lsl #10
      f0:	50000108 	andpl	r0, r0, r8, lsl #2
      f4:	08000315 	stmdaeq	r0, {r0, r2, r4, r8, r9}
      f8:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
      fc:	01f30004 	mvnseq	r0, r4
     100:	00009f50 	andeq	r9, r0, r0, asr pc
     104:	00000000 	andeq	r0, r0, r0
     108:	031c0000 	tsteq	ip, #0
     10c:	032f0800 	teqeq	pc, #0, 16
     110:	00010800 	andeq	r0, r1, r0, lsl #16
     114:	00032f50 	andeq	r2, r3, r0, asr pc
     118:	00033008 	andeq	r3, r3, r8
     11c:	f3000408 	vshl.u8	d0, d8, d0
     120:	309f5001 	addscc	r5, pc, r1
     124:	32080003 	andcc	r0, r8, #3
     128:	01080003 	tsteq	r8, r3
     12c:	03325000 	teqeq	r2, #0
     130:	033c0800 	teqeq	ip, #0, 16
     134:	00040800 	andeq	r0, r4, r0, lsl #16
     138:	9f5001f3 	svcls	0x005001f3
	...
     144:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
     148:	08000341 	stmdaeq	r0, {r0, r6, r8, r9}
     14c:	41500001 	cmpmi	r0, r1
     150:	48080003 	stmdami	r8, {r0, r1}
     154:	04080003 	streq	r0, [r8], #-3
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     160:	00000000 	andeq	r0, r0, r0
     164:	00034800 	andeq	r4, r3, r0, lsl #16
     168:	00035b08 	andeq	r5, r3, r8, lsl #22
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	0800035b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r8, r9}
     174:	08000366 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9}
     178:	01f30004 	mvnseq	r0, r4
     17c:	03669f50 	cmneq	r6, #80, 30	; 0x140
     180:	03680800 	cmneq	r8, #0, 16
     184:	00010800 	andeq	r0, r1, r0, lsl #16
     188:	00036850 	andeq	r6, r3, r0, asr r8
     18c:	00037008 	andeq	r7, r3, r8
     190:	f3000408 	vshl.u8	d0, d8, d0
     194:	009f5001 	addseq	r5, pc, r1
     198:	00000000 	andeq	r0, r0, r0
     19c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     1a0:	66080003 	strvs	r0, [r8], -r3
     1a4:	04080003 	streq	r0, [r8], #-3
     1a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	0003ee00 	andeq	lr, r3, r0, lsl #28
     1b8:	0003f208 	andeq	pc, r3, r8, lsl #4
     1bc:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
     1c0:	9f213c00 	svcls	0x00213c00
	...
     1cc:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
     1d0:	08000439 	stmdaeq	r0, {r0, r3, r4, r5, sl}
     1d4:	39500001 	ldmdbcc	r0, {r0}^
     1d8:	3c080004 	stccc	0, cr0, [r8], {4}
     1dc:	04080004 	streq	r0, [r8], #-4
     1e0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1e4:	00043c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
     1e8:	00043f08 	andeq	r3, r4, r8, lsl #30
     1ec:	50000108 	andpl	r0, r0, r8, lsl #2
     1f0:	0800043f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, sl}
     1f4:	08000444 	stmdaeq	r0, {r2, r6, sl}
     1f8:	01f30004 	mvnseq	r0, r4
     1fc:	04449f50 	strbeq	r9, [r4], #-3920	; 0xf50
     200:	04920800 	ldreq	r0, [r2], #2048	; 0x800
     204:	00010800 	andeq	r0, r1, r0, lsl #16
     208:	00049250 	andeq	r9, r4, r0, asr r2
     20c:	0004a008 	andeq	sl, r4, r8
     210:	f3000408 	vshl.u8	d0, d8, d0
     214:	009f5001 	addseq	r5, pc, r1
     218:	00000000 	andeq	r0, r0, r0
     21c:	62000000 	andvs	r0, r0, #0
     220:	66080004 	strvs	r0, [r8], -r4
     224:	05080004 	streq	r0, [r8, #-4]
     228:	40007200 	andmi	r7, r0, r0, lsl #4
     22c:	04869f21 	streq	r9, [r6], #3873	; 0xf21
     230:	048c0800 	streq	r0, [ip], #2048	; 0x800
     234:	00060800 	andeq	r0, r6, r0, lsl #16
     238:	ef090071 	svc	0x00090071
     23c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     240:	00000000 	andeq	r0, r0, r0
     244:	066e0000 	strbteq	r0, [lr], -r0
     248:	06700800 	ldrbteq	r0, [r0], -r0, lsl #16
     24c:	00010800 	andeq	r0, r1, r0, lsl #16
     250:	00067050 	andeq	r7, r6, r0, asr r0
     254:	0006ce08 	andeq	ip, r6, r8, lsl #28
     258:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     264:	0800066e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl}
     268:	08000670 	stmdaeq	r0, {r4, r5, r6, r9, sl}
     26c:	9f300002 	svcls	0x00300002
     270:	08000670 	stmdaeq	r0, {r4, r5, r6, r9, sl}
     274:	08000692 	stmdaeq	r0, {r1, r4, r7, r9, sl}
     278:	01740003 	cmneq	r4, r3
     27c:	0006929f 	muleq	r6, pc, r2	; <UNPREDICTABLE>
     280:	00069408 	andeq	r9, r6, r8, lsl #8
     284:	54000108 	strpl	r0, [r0], #-264	; 0x108
     288:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
     28c:	080006ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl}
     290:	01740003 	cmneq	r4, r3
     294:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     298:	00000000 	andeq	r0, r0, r0
     29c:	0006dc00 	andeq	sp, r6, r0, lsl #24
     2a0:	0006e208 	andeq	lr, r6, r8, lsl #4
     2a4:	51000108 	tstpl	r0, r8, lsl #2
     2a8:	080006e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl}
     2ac:	080006f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl}
     2b0:	01f30004 	mvnseq	r0, r4
     2b4:	00009f51 	andeq	r9, r0, r1, asr pc
     2b8:	00000000 	andeq	r0, r0, r0
     2bc:	06dc0000 	ldrbeq	r0, [ip], r0
     2c0:	06dc0800 	ldrbeq	r0, [ip], r0, lsl #16
     2c4:	00010800 	andeq	r0, r1, r0, lsl #16
     2c8:	0006dc52 	andeq	sp, r6, r2, asr ip
     2cc:	0006e608 	andeq	lr, r6, r8, lsl #12
     2d0:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
     2d4:	30244800 	eorcc	r4, r4, r0, lsl #16
     2d8:	06e69f29 	strbteq	r9, [r6], r9, lsr #30
     2dc:	06f20800 	ldrbteq	r0, [r2], r0, lsl #16
     2e0:	00080800 	andeq	r0, r8, r0, lsl #16
     2e4:	485201f3 	ldmdami	r2, {r0, r1, r4, r5, r6, r7, r8}^
     2e8:	9f293024 	svcls	0x00293024
	...
     2fc:	00500001 	subseq	r0, r0, r1
     300:	00000000 	andeq	r0, r0, r0
     304:	04000000 	streq	r0, [r0], #-0
     308:	5001f300 	andpl	pc, r1, r0, lsl #6
     30c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     31c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     328:	01f30004 	mvnseq	r0, r4
     32c:	00009f51 	andeq	r9, r0, r1, asr pc
     330:	00000000 	andeq	r0, r0, r0
     334:	06f60000 	ldrbteq	r0, [r6], r0
     338:	07110800 	ldreq	r0, [r1, -r0, lsl #16]
     33c:	00010800 	andeq	r0, r1, r0, lsl #16
     340:	00071150 	andeq	r1, r7, r0, asr r1
     344:	00074608 	andeq	r4, r7, r8, lsl #12
     348:	58000108 	stmdapl	r0, {r3, r8}
	...
     354:	080006f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl}
     358:	08000711 	stmdaeq	r0, {r0, r4, r8, r9, sl}
     35c:	11510001 	cmpne	r1, r1
     360:	46080007 	strmi	r0, [r8], -r7
     364:	04080007 	streq	r0, [r8], #-7
     368:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     36c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     370:	00000000 	andeq	r0, r0, r0
     374:	0006f600 	andeq	pc, r6, r0, lsl #12
     378:	00070808 	andeq	r0, r7, r8, lsl #16
     37c:	52000108 	andpl	r0, r0, #8, 2
     380:	08000708 	stmdaeq	r0, {r3, r8, r9, sl}
     384:	08000712 	stmdaeq	r0, {r1, r4, r8, r9, sl}
     388:	01f30004 	mvnseq	r0, r4
     38c:	07129f52 			; <UNDEFINED> instruction: 0x07129f52
     390:	073a0800 	ldreq	r0, [sl, -r0, lsl #16]!
     394:	00030800 	andeq	r0, r3, r0, lsl #16
     398:	3a9f7f74 	bcc	fe7e0170 <BootRAM+0xd750911>
     39c:	40080007 	andmi	r0, r8, r7
     3a0:	03080007 	movweq	r0, #32775	; 0x8007
     3a4:	9f007400 	svcls	0x00007400
     3a8:	08000742 	stmdaeq	r0, {r1, r6, r8, r9, sl}
     3ac:	08000746 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl}
     3b0:	7f740003 	svcvc	0x00740003
     3b4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     3b8:	00000000 	andeq	r0, r0, r0
     3bc:	0006f600 	andeq	pc, r6, r0, lsl #12
     3c0:	00071108 	andeq	r1, r7, r8, lsl #2
     3c4:	53000108 	movwpl	r0, #264	; 0x108
     3c8:	08000711 	stmdaeq	r0, {r0, r4, r8, r9, sl}
     3cc:	08000746 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl}
     3d0:	00560001 	subseq	r0, r6, r1
     3d4:	00000000 	andeq	r0, r0, r0
     3d8:	16000000 	strne	r0, [r0], -r0
     3dc:	28080007 	stmdacs	r8, {r0, r1, r2}
     3e0:	01080007 	tsteq	r8, r7
     3e4:	07285500 	streq	r5, [r8, -r0, lsl #10]!
     3e8:	072a0800 	streq	r0, [sl, -r0, lsl #16]!
     3ec:	00010800 	andeq	r0, r1, r0, lsl #16
     3f0:	00072a56 	andeq	r2, r7, r6, asr sl
     3f4:	00074208 	andeq	r4, r7, r8, lsl #4
     3f8:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     404:	0800080e 	stmdaeq	r0, {r1, r2, r3, fp}
     408:	08000814 	stmdaeq	r0, {r2, r4, fp}
     40c:	00520001 	subseq	r0, r2, r1
     410:	00000000 	andeq	r0, r0, r0
     414:	20000000 	andcs	r0, r0, r0
     418:	24080008 	strcs	r0, [r8], #-8
     41c:	01080008 	tsteq	r8, r8
     420:	08245000 	stmdaeq	r4!, {ip, lr}
     424:	08340800 	ldmdaeq	r4!, {fp}
     428:	00040800 	andeq	r0, r4, r0, lsl #16
     42c:	9f5001f3 	svcls	0x005001f3
	...
     438:	08000822 	stmdaeq	r0, {r1, r5, fp}
     43c:	0800082a 	stmdaeq	r0, {r1, r3, r5, fp}
     440:	00530001 	subseq	r0, r3, r1
     444:	00000000 	andeq	r0, r0, r0
     448:	34000000 	strcc	r0, [r0], #-0
     44c:	42080008 	andmi	r0, r8, #8
     450:	02080008 	andeq	r0, r8, #8
     454:	429f3000 	addsmi	r3, pc, #0
     458:	4a080008 	bmi	200480 <__Stack_Size+0x200080>
     45c:	01080008 	tsteq	r8, r8
     460:	084a5300 	stmdaeq	sl, {r8, r9, ip, lr}^
     464:	08560800 	ldmdaeq	r6, {fp}^
     468:	00010800 	andeq	r0, r1, r0, lsl #16
     46c:	00085652 	andeq	r5, r8, r2, asr r6
     470:	00087808 	andeq	r7, r8, r8, lsl #16
     474:	54000108 	strpl	r0, [r0], #-264	; 0x108
     478:	08000878 	stmdaeq	r0, {r3, r4, r5, r6, fp}
     47c:	0800087a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp}
     480:	00740006 	rsbseq	r0, r4, r6
     484:	9f1a0072 	svcls	0x001a0072
     488:	0800087a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp}
     48c:	0800087c 	stmdaeq	r0, {r2, r3, r4, r5, r6, fp}
     490:	7c520001 	mrrcvc	0, 0, r0, r2, cr1
     494:	80080008 	andhi	r0, r8, r8
     498:	12080008 	andne	r0, r8, #8
     49c:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
     4a0:	33019400 	movwcc	r9, #5120	; 0x1400
     4a4:	1aff081a 	bne	fffc2514 <BootRAM+0xef32cb5>
     4a8:	74242433 	strtvc	r2, [r4], #-1075	; 0x433
     4ac:	009f1a00 	addseq	r1, pc, r0, lsl #20
     4b0:	00000000 	andeq	r0, r0, r0
     4b4:	34000000 	strcc	r0, [r0], #-0
     4b8:	74080008 	strvc	r0, [r8], #-8
     4bc:	02080008 	andeq	r0, r8, #8
     4c0:	749f3000 	ldrvc	r3, [pc], #0	; 4c8 <__Stack_Size+0xc8>
     4c4:	78080008 	stmdavc	r8, {r3}
     4c8:	01080008 	tsteq	r8, r8
     4cc:	08785500 	ldmdaeq	r8!, {r8, sl, ip, lr}^
     4d0:	087c0800 	ldmdaeq	ip!, {fp}^
     4d4:	00010800 	andeq	r0, r1, r0, lsl #16
     4d8:	00087c51 	andeq	r7, r8, r1, asr ip
     4dc:	00088408 	andeq	r8, r8, r8, lsl #8
     4e0:	52000108 	andpl	r0, r0, #8, 2
	...
     4ec:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
     4f0:	08000874 	stmdaeq	r0, {r2, r4, r5, r6, fp}
     4f4:	9f300002 	svcls	0x00300002
     4f8:	08000874 	stmdaeq	r0, {r2, r4, r5, r6, fp}
     4fc:	0800087a 	stmdaeq	r0, {r1, r3, r4, r5, r6, fp}
     500:	7a520001 	bvc	148050c <__Stack_Size+0x148010c>
     504:	80080008 	andhi	r0, r8, r8
     508:	0f080008 	svceq	0x00080008
     50c:	70ff0800 	rscsvc	r0, pc, r0, lsl #16
     510:	33019400 	movwcc	r9, #5120	; 0x1400
     514:	1aff081a 	bne	fffc2584 <BootRAM+0xef32d25>
     518:	9f242433 	svcls	0x00242433
	...
     524:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
     528:	08000842 	stmdaeq	r0, {r1, r6, fp}
     52c:	9f300002 	svcls	0x00300002
     530:	08000842 	stmdaeq	r0, {r1, r6, fp}
     534:	08000846 	stmdaeq	r0, {r1, r2, r6, fp}
     538:	73340005 	teqvc	r4, #5
     53c:	469f1c00 	ldrmi	r1, [pc], r0, lsl #24
     540:	4a080008 	bmi	200568 <__Stack_Size+0x200168>
     544:	01080008 	tsteq	r8, r8
     548:	084a5200 	stmdaeq	sl, {r9, ip, lr}^
     54c:	08520800 	ldmdaeq	r2, {fp}^
     550:	00050800 	andeq	r0, r5, r0, lsl #16
     554:	1c007334 	stcne	3, cr7, [r0], {52}	; 0x34
     558:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     55c:	00000000 	andeq	r0, r0, r0
     560:	00083400 	andeq	r3, r8, r0, lsl #8
     564:	00084208 	andeq	r4, r8, r8, lsl #4
     568:	3f000208 	svccc	0x00000208
     56c:	0008429f 	muleq	r8, pc, r2	; <UNPREDICTABLE>
     570:	00084e08 	andeq	r4, r8, r8, lsl #28
     574:	3f000508 	svccc	0x00000508
     578:	9f250073 	svcls	0x00250073
     57c:	0800084e 	stmdaeq	r0, {r1, r2, r3, r6, fp}
     580:	08000854 	stmdaeq	r0, {r2, r4, r6, fp}
     584:	00540001 	subseq	r0, r4, r1
     588:	00000000 	andeq	r0, r0, r0
     58c:	c4000000 	strgt	r0, [r0], #-0
     590:	d3080008 	movwle	r0, #32776	; 0x8008
     594:	01080008 	tsteq	r8, r8
     598:	08d35000 	ldmeq	r3, {ip, lr}^
     59c:	08ea0800 	stmiaeq	sl!, {fp}^
     5a0:	00010800 	andeq	r0, r1, r0, lsl #16
     5a4:	0008ea54 	andeq	lr, r8, r4, asr sl
     5a8:	0008f008 	andeq	pc, r8, r8
     5ac:	f3000408 	vshl.u8	d0, d8, d0
     5b0:	009f5001 	addseq	r5, pc, r1
     5b4:	00000000 	andeq	r0, r0, r0
     5b8:	cc000000 	stcgt	0, cr0, [r0], {-0}
     5bc:	ea080008 	b	2005e4 <__Stack_Size+0x2001e4>
     5c0:	01080008 	tsteq	r8, r8
     5c4:	00005500 	andeq	r5, r0, r0, lsl #10
     5c8:	00000000 	andeq	r0, r0, r0
     5cc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     5d0:	092c0800 	stmdbeq	ip!, {fp}
     5d4:	00010800 	andeq	r0, r1, r0, lsl #16
     5d8:	00092c50 	andeq	r2, r9, r0, asr ip
     5dc:	00093808 	andeq	r3, r9, r8, lsl #16
     5e0:	f3000408 	vshl.u8	d0, d8, d0
     5e4:	009f5001 	addseq	r5, pc, r1
     5e8:	00000000 	andeq	r0, r0, r0
     5ec:	0a000000 	beq	5f4 <__Stack_Size+0x1f4>
     5f0:	28080009 	stmdacs	r8, {r0, r3}
     5f4:	02080009 	andeq	r0, r8, #9
     5f8:	289f3200 	ldmcs	pc, {r9, ip, sp}	; <UNPREDICTABLE>
     5fc:	38080009 	stmdacc	r8, {r0, r3}
     600:	02080009 	andeq	r0, r8, #9
     604:	009f3000 	addseq	r3, pc, r0
	...
     614:	01000000 	mrseq	r0, (UNDEF: 0)
     618:	00005000 	andeq	r5, r0, r0
     61c:	00000000 	andeq	r0, r0, r0
     620:	00010000 	andeq	r0, r1, r0
     624:	00000055 	andeq	r0, r0, r5, asr r0
     628:	00000000 	andeq	r0, r0, r0
     62c:	f3000400 	vshl.u8	d0, d0, d0
     630:	009f5001 	addseq	r5, pc, r1
	...
     640:	01000000 	mrseq	r0, (UNDEF: 0)
     644:	00005100 	andeq	r5, r0, r0, lsl #2
     648:	00000000 	andeq	r0, r0, r0
     64c:	00040000 	andeq	r0, r4, r0
     650:	9f5101f3 	svcls	0x005101f3
	...
     65c:	00540001 	subseq	r0, r4, r1
     660:	00000000 	andeq	r0, r0, r0
     664:	03000000 	movweq	r0, #0
     668:	9f017400 	svcls	0x00017400
	...
     674:	00540001 	subseq	r0, r4, r1
     678:	00000000 	andeq	r0, r0, r0
     67c:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
     680:	72080009 	andvc	r0, r8, #9
     684:	01080009 	tsteq	r8, r9
     688:	09725000 	ldmdbeq	r2!, {ip, lr}^
     68c:	09840800 	stmibeq	r4, {fp}
     690:	00040800 	andeq	r0, r4, r0, lsl #16
     694:	9f5001f3 	svcls	0x005001f3
	...
     6a0:	08000948 	stmdaeq	r0, {r3, r6, r8, fp}
     6a4:	0800096e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, fp}
     6a8:	6e540001 	cdpvs	0, 5, cr0, cr4, cr1, {0}
     6ac:	84080009 	strhi	r0, [r8], #-9
     6b0:	01080009 	tsteq	r8, r9
     6b4:	00005200 	andeq	r5, r0, r0, lsl #4
     6b8:	00000000 	andeq	r0, r0, r0
     6bc:	09a80000 	stmibeq	r8!, {}	; <UNPREDICTABLE>
     6c0:	09ae0800 	stmibeq	lr!, {fp}
     6c4:	00010800 	andeq	r0, r1, r0, lsl #16
     6c8:	0009ae50 	andeq	sl, r9, r0, asr lr
     6cc:	0009b208 	andeq	fp, r9, r8, lsl #4
     6d0:	50000108 	andpl	r0, r0, r8, lsl #2
	...
     6dc:	080009ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, fp}
     6e0:	080009b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, fp}
     6e4:	703f0007 	eorsvc	r0, pc, r7
     6e8:	24243200 	strtcs	r3, [r4], #-512	; 0x200
     6ec:	0009b69f 	muleq	r9, pc, r6	; <UNPREDICTABLE>
     6f0:	0009b808 	andeq	fp, r9, r8, lsl #16
     6f4:	50000108 	andpl	r0, r0, r8, lsl #2
     6f8:	080009b8 	stmdaeq	r0, {r3, r4, r5, r7, r8, fp}
     6fc:	080009ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, fp}
     700:	00700004 	rsbseq	r0, r0, r4
     704:	00009f20 	andeq	r9, r0, r0, lsr #30
     708:	00000000 	andeq	r0, r0, r0
     70c:	0a4c0000 	beq	1300714 <__Stack_Size+0x1300314>
     710:	0a540800 	beq	1502718 <__Stack_Size+0x1502318>
     714:	00010800 	andeq	r0, r1, r0, lsl #16
     718:	000a6451 	andeq	r6, sl, r1, asr r4
     71c:	000a6c08 	andeq	r6, sl, r8, lsl #24
     720:	51000108 	tstpl	r0, r8, lsl #2
     724:	08000a78 	stmdaeq	r0, {r3, r4, r5, r6, r9, fp}
     728:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
     72c:	00510001 	subseq	r0, r1, r1
     730:	00000000 	andeq	r0, r0, r0
     734:	84000000 	strhi	r0, [r0], #-0
     738:	9208000a 	andls	r0, r8, #10
     73c:	0108000a 	tsteq	r8, sl
     740:	0a925000 	beq	fe494748 <BootRAM+0xd404ee9>
     744:	0a9c0800 	beq	fe70274c <BootRAM+0xd672eed>
     748:	00040800 	andeq	r0, r4, r0, lsl #16
     74c:	9f5001f3 	svcls	0x005001f3
	...
     758:	08000a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp}
     75c:	08000aaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, fp}
     760:	aa500001 	bge	140076c <__Stack_Size+0x140036c>
     764:	b408000a 	strlt	r0, [r8], #-10
     768:	0408000a 	streq	r0, [r8], #-10
     76c:	5001f300 	andpl	pc, r1, r0, lsl #6
     770:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     774:	00000000 	andeq	r0, r0, r0
     778:	000ab400 	andeq	fp, sl, r0, lsl #8
     77c:	000acc08 	andeq	ip, sl, r8, lsl #24
     780:	50000108 	andpl	r0, r0, r8, lsl #2
     784:	08000acc 	stmdaeq	r0, {r2, r3, r6, r7, r9, fp}
     788:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
     78c:	01f30004 	mvnseq	r0, r4
     790:	00009f50 	andeq	r9, r0, r0, asr pc
     794:	00000000 	andeq	r0, r0, r0
     798:	0adc0000 	beq	ff7007a0 <BootRAM+0xe670f41>
     79c:	0af80800 	beq	ffe027a4 <BootRAM+0xed72f45>
     7a0:	00010800 	andeq	r0, r1, r0, lsl #16
     7a4:	000af850 	andeq	pc, sl, r0, asr r8	; <UNPREDICTABLE>
     7a8:	000b1008 	andeq	r1, fp, r8
     7ac:	f3000408 	vshl.u8	d0, d8, d0
     7b0:	009f5001 	addseq	r5, pc, r1
     7b4:	00000000 	andeq	r0, r0, r0
     7b8:	30000000 	andcc	r0, r0, r0
     7bc:	3208000b 	andcc	r0, r8, #11
     7c0:	0208000b 	andeq	r0, r8, #11
     7c4:	329f3000 	addscc	r3, pc, #0
     7c8:	5a08000b 	bpl	2007fc <__Stack_Size+0x2003fc>
     7cc:	0108000b 	tsteq	r8, fp
     7d0:	00005500 	andeq	r5, r0, r0, lsl #10
     7d4:	00000000 	andeq	r0, r0, r0
     7d8:	0b7e0000 	bleq	1f807e0 <__Stack_Size+0x1f803e0>
     7dc:	0bae0800 	bleq	feb827e4 <BootRAM+0xdaf2f85>
     7e0:	00010800 	andeq	r0, r1, r0, lsl #16
     7e4:	000bc053 	andeq	ip, fp, r3, asr r0
     7e8:	000bcd08 	andeq	ip, fp, r8, lsl #26
     7ec:	53000108 	movwpl	r0, #264	; 0x108
     7f0:	08000bda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, fp}
     7f4:	08000bdc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, r9, fp}
     7f8:	de530001 	cdple	0, 5, cr0, cr3, cr1, {0}
     7fc:	e408000b 	str	r0, [r8], #-11
     800:	0108000b 	tsteq	r8, fp
     804:	0c265300 	stceq	3, cr5, [r6], #-0
     808:	0c420800 	mcrreq	8, 0, r0, r2, cr0
     80c:	00010800 	andeq	r0, r1, r0, lsl #16
     810:	000c4a53 	andeq	r4, ip, r3, asr sl
     814:	000c5c08 	andeq	r5, ip, r8, lsl #24
     818:	53000108 	movwpl	r0, #264	; 0x108
     81c:	08000c66 	stmdaeq	r0, {r1, r2, r5, r6, sl, fp}
     820:	08000c6c 	stmdaeq	r0, {r2, r3, r5, r6, sl, fp}
     824:	94530001 	ldrbls	r0, [r3], #-1
     828:	a408000c 	strge	r0, [r8], #-12
     82c:	0108000c 	tsteq	r8, ip
     830:	0caa5300 	stceq	3, cr5, [sl]
     834:	0cbe0800 	ldceq	8, cr0, [lr]
     838:	00010800 	andeq	r0, r1, r0, lsl #16
     83c:	000d3653 	andeq	r3, sp, r3, asr r6
     840:	000d3c08 	andeq	r3, sp, r8, lsl #24
     844:	53000108 	movwpl	r0, #264	; 0x108
	...
     858:	00500001 	subseq	r0, r0, r1
     85c:	00000000 	andeq	r0, r0, r0
     860:	04000000 	streq	r0, [r0], #-0
     864:	5001f300 	andpl	pc, r1, r0, lsl #6
     868:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     878:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     884:	01f30004 	mvnseq	r0, r4
     888:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     898:	00010000 	andeq	r0, r1, r0
     89c:	00000050 	andeq	r0, r0, r0, asr r0
     8a0:	00000000 	andeq	r0, r0, r0
     8a4:	f3000400 	vshl.u8	d0, d0, d0
     8a8:	009f5001 	addseq	r5, pc, r1
	...
     8b8:	01000000 	mrseq	r0, (UNDEF: 0)
     8bc:	00005100 	andeq	r5, r0, r0, lsl #2
     8c0:	00000000 	andeq	r0, r0, r0
     8c4:	00040000 	andeq	r0, r4, r0
     8c8:	9f5101f3 	svcls	0x005101f3
	...
     8dc:	00500001 	subseq	r0, r0, r1
     8e0:	00000000 	andeq	r0, r0, r0
     8e4:	04000000 	streq	r0, [r0], #-0
     8e8:	5001f300 	andpl	pc, r1, r0, lsl #6
     8ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     8f0:	00000000 	andeq	r0, r0, r0
     8f4:	000db000 	andeq	fp, sp, r0
     8f8:	000db208 	andeq	fp, sp, r8, lsl #4
     8fc:	50000108 	andpl	r0, r0, r8, lsl #2
     900:	08000db2 	stmdaeq	r0, {r1, r4, r5, r7, r8, sl, fp}
     904:	08000dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp}
     908:	01f30004 	mvnseq	r0, r4
     90c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     91c:	00010000 	andeq	r0, r1, r0
     920:	00000050 	andeq	r0, r0, r0, asr r0
     924:	00000000 	andeq	r0, r0, r0
     928:	f3000400 	vshl.u8	d0, d0, d0
     92c:	009f5001 	addseq	r5, pc, r1
	...
     93c:	01000000 	mrseq	r0, (UNDEF: 0)
     940:	00005000 	andeq	r5, r0, r0
     944:	00000000 	andeq	r0, r0, r0
     948:	00040000 	andeq	r0, r4, r0
     94c:	9f5001f3 	svcls	0x005001f3
	...
     960:	00500001 	subseq	r0, r0, r1
     964:	00000000 	andeq	r0, r0, r0
     968:	04000000 	streq	r0, [r0], #-0
     96c:	5001f300 	andpl	pc, r1, r0, lsl #6
     970:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     980:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     98c:	01f30004 	mvnseq	r0, r4
     990:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     9a0:	00010000 	andeq	r0, r1, r0
     9a4:	00000050 	andeq	r0, r0, r0, asr r0
     9a8:	00000000 	andeq	r0, r0, r0
     9ac:	f3000400 	vshl.u8	d0, d0, d0
     9b0:	009f5001 	addseq	r5, pc, r1
	...
     9c0:	06000000 	streq	r0, [r0], -r0
     9c4:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
     9c8:	009f2730 	addseq	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
     9cc:	00000000 	andeq	r0, r0, r0
     9d0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     9d4:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
     9d8:	30082730 	andcc	r2, r8, r0, lsr r7
     9dc:	00009f27 	andeq	r9, r0, r7, lsr #30
     9e0:	00000000 	andeq	r0, r0, r0
     9e4:	0dda0000 	ldcleq	0, cr0, [sl]
     9e8:	0ddc0800 	ldcleq	8, cr0, [ip]
     9ec:	00010800 	andeq	r0, r1, r0, lsl #16
     9f0:	000ddc50 	andeq	sp, sp, r0, asr ip
     9f4:	000df808 	andeq	pc, sp, r8, lsl #16
     9f8:	f3000408 	vshl.u8	d0, d8, d0
     9fc:	009f5001 	addseq	r5, pc, r1
     a00:	00000000 	andeq	r0, r0, r0
     a04:	f0000000 			; <UNDEFINED> instruction: 0xf0000000
     a08:	f408000d 	vst4.8	{d0-d3}, [r8]!
     a0c:	0708000d 	streq	r0, [r8, -sp]
     a10:	0a007300 	beq	1d618 <__Stack_Size+0x1d218>
     a14:	9f273000 	svcls	0x00273000
     a18:	08000df4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, sl, fp}
     a1c:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
     a20:	0073000b 	rsbseq	r0, r3, fp
     a24:	2730000a 	ldrcs	r0, [r0, -sl]!
     a28:	2730000a 	ldrcs	r0, [r0, -sl]!
     a2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     a3c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a48:	01f30004 	mvnseq	r0, r4
     a4c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     a5c:	00010000 	andeq	r0, r1, r0
     a60:	00000050 	andeq	r0, r0, r0, asr r0
     a64:	00000000 	andeq	r0, r0, r0
     a68:	f3000400 	vshl.u8	d0, d0, d0
     a6c:	009f5001 	addseq	r5, pc, r1
     a70:	00000000 	andeq	r0, r0, r0
     a74:	f8000000 			; <UNDEFINED> instruction: 0xf8000000
     a78:	fa08000d 	blx	200ab4 <__Stack_Size+0x2006b4>
     a7c:	0108000d 	tsteq	r8, sp
     a80:	0dfa5000 	ldcleq	0, cr5, [sl]
     a84:	0e140800 	cdpeq	8, 1, cr0, cr4, cr0, {0}
     a88:	00040800 	andeq	r0, r4, r0, lsl #16
     a8c:	9f5001f3 	svcls	0x005001f3
	...
     aa0:	00500001 	subseq	r0, r0, r1
     aa4:	00000000 	andeq	r0, r0, r0
     aa8:	04000000 	streq	r0, [r0], #-0
     aac:	5001f300 	andpl	pc, r1, r0, lsl #6
     ab0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     ac0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     acc:	01f30004 	mvnseq	r0, r4
     ad0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     ae0:	00010000 	andeq	r0, r1, r0
     ae4:	00000050 	andeq	r0, r0, r0, asr r0
     ae8:	00000000 	andeq	r0, r0, r0
     aec:	f3000400 	vshl.u8	d0, d0, d0
     af0:	009f5001 	addseq	r5, pc, r1
	...
     b00:	01000000 	mrseq	r0, (UNDEF: 0)
     b04:	00005000 	andeq	r5, r0, r0
     b08:	00000000 	andeq	r0, r0, r0
     b0c:	00040000 	andeq	r0, r4, r0
     b10:	9f5001f3 	svcls	0x005001f3
	...
     b24:	00500001 	subseq	r0, r0, r1
     b28:	00000000 	andeq	r0, r0, r0
     b2c:	04000000 	streq	r0, [r0], #-0
     b30:	5001f300 	andpl	pc, r1, r0, lsl #6
     b34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b44:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b50:	01f30004 	mvnseq	r0, r4
     b54:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b64:	00010000 	andeq	r0, r1, r0
     b68:	00000050 	andeq	r0, r0, r0, asr r0
     b6c:	00000000 	andeq	r0, r0, r0
     b70:	f3000400 	vshl.u8	d0, d0, d0
     b74:	009f5001 	addseq	r5, pc, r1
	...
     b84:	01000000 	mrseq	r0, (UNDEF: 0)
     b88:	00005000 	andeq	r5, r0, r0
     b8c:	00000000 	andeq	r0, r0, r0
     b90:	00040000 	andeq	r0, r4, r0
     b94:	9f5001f3 	svcls	0x005001f3
	...
     ba8:	00500001 	subseq	r0, r0, r1
     bac:	00000000 	andeq	r0, r0, r0
     bb0:	04000000 	streq	r0, [r0], #-0
     bb4:	5001f300 	andpl	pc, r1, r0, lsl #6
     bb8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     bbc:	00000000 	andeq	r0, r0, r0
     bc0:	000e1400 	andeq	r1, lr, r0, lsl #8
     bc4:	000e1608 	andeq	r1, lr, r8, lsl #12
     bc8:	50000108 	andpl	r0, r0, r8, lsl #2
     bcc:	08000e16 	stmdaeq	r0, {r1, r2, r4, r9, sl, fp}
     bd0:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
     bd4:	01f30004 	mvnseq	r0, r4
     bd8:	00009f50 	andeq	r9, r0, r0, asr pc
     bdc:	00000000 	andeq	r0, r0, r0
     be0:	0e340000 	cdpeq	0, 3, cr0, cr4, cr0, {0}
     be4:	0e360800 	cdpeq	8, 3, cr0, cr6, cr0, {0}
     be8:	00010800 	andeq	r0, r1, r0, lsl #16
     bec:	000e3650 	andeq	r3, lr, r0, asr r6
     bf0:	000e5408 	andeq	r5, lr, r8, lsl #8
     bf4:	f3000408 	vshl.u8	d0, d8, d0
     bf8:	009f5001 	addseq	r5, pc, r1
	...
     c08:	01000000 	mrseq	r0, (UNDEF: 0)
     c0c:	00005000 	andeq	r5, r0, r0
     c10:	00000000 	andeq	r0, r0, r0
     c14:	00040000 	andeq	r0, r4, r0
     c18:	9f5001f3 	svcls	0x005001f3
	...
     c2c:	00510001 	subseq	r0, r1, r1
     c30:	00000000 	andeq	r0, r0, r0
     c34:	04000000 	streq	r0, [r0], #-0
     c38:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     c3c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     c4c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     c58:	01f30004 	mvnseq	r0, r4
     c5c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     c6c:	00010000 	andeq	r0, r1, r0
     c70:	00000050 	andeq	r0, r0, r0, asr r0
     c74:	00000000 	andeq	r0, r0, r0
     c78:	f3000400 	vshl.u8	d0, d0, d0
     c7c:	009f5001 	addseq	r5, pc, r1
	...
     c8c:	01000000 	mrseq	r0, (UNDEF: 0)
     c90:	00005100 	andeq	r5, r0, r0, lsl #2
     c94:	00000000 	andeq	r0, r0, r0
     c98:	00040000 	andeq	r0, r4, r0
     c9c:	9f5101f3 	svcls	0x005101f3
	...
     cb0:	00500001 	subseq	r0, r0, r1
     cb4:	00000000 	andeq	r0, r0, r0
     cb8:	04000000 	streq	r0, [r0], #-0
     cbc:	5001f300 	andpl	pc, r1, r0, lsl #6
     cc0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     cd0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     cdc:	01f30004 	mvnseq	r0, r4
     ce0:	00009f51 	andeq	r9, r0, r1, asr pc
     ce4:	00000000 	andeq	r0, r0, r0
     ce8:	0e540000 	cdpeq	0, 5, cr0, cr4, cr0, {0}
     cec:	0e5e0800 	cdpeq	8, 5, cr0, cr14, cr0, {0}
     cf0:	00010800 	andeq	r0, r1, r0, lsl #16
     cf4:	000e5e50 	andeq	r5, lr, r0, asr lr
     cf8:	000e7008 	andeq	r7, lr, r8
     cfc:	f3000408 	vshl.u8	d0, d8, d0
     d00:	009f5001 	addseq	r5, pc, r1
     d04:	00000000 	andeq	r0, r0, r0
     d08:	70000000 	andvc	r0, r0, r0
     d0c:	7a08000e 	bvc	200d4c <__Stack_Size+0x20094c>
     d10:	0108000e 	tsteq	r8, lr
     d14:	0e7a5000 	cdpeq	0, 7, cr5, cr10, cr0, {0}
     d18:	0e8c0800 	cdpeq	8, 8, cr0, cr12, cr0, {0}
     d1c:	00040800 	andeq	r0, r4, r0, lsl #16
     d20:	9f5001f3 	svcls	0x005001f3
	...
     d2c:	08000e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp}
     d30:	08000e96 	stmdaeq	r0, {r1, r2, r4, r7, r9, sl, fp}
     d34:	96500001 	ldrbls	r0, [r0], -r1
     d38:	a808000e 	stmdage	r8, {r1, r2, r3}
     d3c:	0408000e 	streq	r0, [r8], #-14
     d40:	5001f300 	andpl	pc, r1, r0, lsl #6
     d44:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     d54:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     d60:	01f30004 	mvnseq	r0, r4
     d64:	00009f51 	andeq	r9, r0, r1, asr pc
     d68:	00000000 	andeq	r0, r0, r0
     d6c:	00010000 	andeq	r0, r1, r0
     d70:	00000051 	andeq	r0, r0, r1, asr r0
     d74:	00000000 	andeq	r0, r0, r0
     d78:	f3000400 	vshl.u8	d0, d0, d0
     d7c:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     d8c:	01000000 	mrseq	r0, (UNDEF: 0)
     d90:	00005300 	andeq	r5, r0, r0, lsl #6
     d94:	00000000 	andeq	r0, r0, r0
     d98:	00010000 	andeq	r0, r1, r0
     d9c:	00000053 	andeq	r0, r0, r3, asr r0
     da0:	00000000 	andeq	r0, r0, r0
     da4:	53000100 	movwpl	r0, #256	; 0x100
	...
     db0:	08000ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp}
     db4:	08000eb4 	stmdaeq	r0, {r2, r4, r5, r7, r9, sl, fp}
     db8:	b4500001 	ldrblt	r0, [r0], #-1
     dbc:	e808000e 	stmda	r8, {r1, r2, r3}
     dc0:	0408000e 	streq	r0, [r8], #-14
     dc4:	5001f300 	andpl	pc, r1, r0, lsl #6
     dc8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     dcc:	00000000 	andeq	r0, r0, r0
     dd0:	000ea800 	andeq	sl, lr, r0, lsl #16
     dd4:	000ed608 	andeq	sp, lr, r8, lsl #12
     dd8:	51000108 	tstpl	r0, r8, lsl #2
     ddc:	08000ed6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r9, sl, fp}
     de0:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
     de4:	01f30004 	mvnseq	r0, r4
     de8:	00009f51 	andeq	r9, r0, r1, asr pc
     dec:	00000000 	andeq	r0, r0, r0
     df0:	0ec00000 	cdpeq	0, 12, cr0, cr0, cr0, {0}
     df4:	0ec80800 	cdpeq	8, 12, cr0, cr8, cr0, {0}
     df8:	00010800 	andeq	r0, r1, r0, lsl #16
     dfc:	000ec853 	andeq	ip, lr, r3, asr r8
     e00:	000eca08 	andeq	ip, lr, r8, lsl #20
     e04:	71000508 	tstvc	r0, r8, lsl #10
     e08:	9f253500 	svcls	0x00253500
     e0c:	08000eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp}
     e10:	08000ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp}
     e14:	d4530001 	ldrble	r0, [r3], #-1
     e18:	dc08000e 	stcle	0, cr0, [r8], {14}
     e1c:	0108000e 	tsteq	r8, lr
     e20:	00005300 	andeq	r5, r0, r0, lsl #6
	...
     e30:	00010000 	andeq	r0, r1, r0
     e34:	00000050 	andeq	r0, r0, r0, asr r0
     e38:	00000000 	andeq	r0, r0, r0
     e3c:	f3000400 	vshl.u8	d0, d0, d0
     e40:	009f5001 	addseq	r5, pc, r1
	...
     e50:	01000000 	mrseq	r0, (UNDEF: 0)
     e54:	00005000 	andeq	r5, r0, r0
     e58:	00000000 	andeq	r0, r0, r0
     e5c:	00040000 	andeq	r0, r4, r0
     e60:	9f5001f3 	svcls	0x005001f3
	...
     e74:	00500001 	subseq	r0, r0, r1
     e78:	00000000 	andeq	r0, r0, r0
     e7c:	04000000 	streq	r0, [r0], #-0
     e80:	5001f300 	andpl	pc, r1, r0, lsl #6
     e84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     e94:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     ea0:	01f30004 	mvnseq	r0, r4
     ea4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     eb4:	00010000 	andeq	r0, r1, r0
     eb8:	00000052 	andeq	r0, r0, r2, asr r0
     ebc:	00000000 	andeq	r0, r0, r0
     ec0:	f3000400 	vshl.u8	d0, d0, d0
     ec4:	009f5201 	addseq	r5, pc, r1, lsl #4
	...
     ed4:	01000000 	mrseq	r0, (UNDEF: 0)
     ed8:	00005000 	andeq	r5, r0, r0
     edc:	00000000 	andeq	r0, r0, r0
     ee0:	00040000 	andeq	r0, r4, r0
     ee4:	9f5001f3 	svcls	0x005001f3
	...
     ef8:	00510001 	subseq	r0, r1, r1
     efc:	00000000 	andeq	r0, r0, r0
     f00:	04000000 	streq	r0, [r0], #-0
     f04:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     f08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     f18:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     f24:	01f30004 	mvnseq	r0, r4
     f28:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     f38:	00010000 	andeq	r0, r1, r0
     f3c:	00000051 	andeq	r0, r0, r1, asr r0
     f40:	00000000 	andeq	r0, r0, r0
     f44:	f3000400 	vshl.u8	d0, d0, d0
     f48:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     f58:	01000000 	mrseq	r0, (UNDEF: 0)
     f5c:	00005000 	andeq	r5, r0, r0
     f60:	00000000 	andeq	r0, r0, r0
     f64:	00040000 	andeq	r0, r4, r0
     f68:	9f5001f3 	svcls	0x005001f3
	...
     f7c:	00500001 	subseq	r0, r0, r1
     f80:	00000000 	andeq	r0, r0, r0
     f84:	04000000 	streq	r0, [r0], #-0
     f88:	5001f300 	andpl	pc, r1, r0, lsl #6
     f8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     f9c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fa8:	01f30004 	mvnseq	r0, r4
     fac:	00009f50 	andeq	r9, r0, r0, asr pc
     fb0:	00000000 	andeq	r0, r0, r0
     fb4:	00010000 	andeq	r0, r1, r0
     fb8:	00000050 	andeq	r0, r0, r0, asr r0
     fbc:	00000000 	andeq	r0, r0, r0
     fc0:	f3000400 	vshl.u8	d0, d0, d0
     fc4:	009f5001 	addseq	r5, pc, r1
     fc8:	00000000 	andeq	r0, r0, r0
     fcc:	01000000 	mrseq	r0, (UNDEF: 0)
     fd0:	00005000 	andeq	r5, r0, r0
	...
     fe0:	00010000 	andeq	r0, r1, r0
     fe4:	00000051 	andeq	r0, r0, r1, asr r0
     fe8:	00000000 	andeq	r0, r0, r0
     fec:	f3000400 	vshl.u8	d0, d0, d0
     ff0:	009f5101 	addseq	r5, pc, r1, lsl #2
     ff4:	00000000 	andeq	r0, r0, r0
     ff8:	01000000 	mrseq	r0, (UNDEF: 0)
     ffc:	00005100 	andeq	r5, r0, r0, lsl #2
    1000:	00000000 	andeq	r0, r0, r0
    1004:	00040000 	andeq	r0, r4, r0
    1008:	9f5101f3 	svcls	0x005101f3
	...
    1014:	00510001 	subseq	r0, r1, r1
	...
    1024:	01000000 	mrseq	r0, (UNDEF: 0)
    1028:	00005200 	andeq	r5, r0, r0, lsl #4
    102c:	00000000 	andeq	r0, r0, r0
    1030:	00040000 	andeq	r0, r4, r0
    1034:	9f5201f3 	svcls	0x005201f3
	...
    1040:	00520001 	subseq	r0, r2, r1
	...
    1050:	01000000 	mrseq	r0, (UNDEF: 0)
    1054:	00005100 	andeq	r5, r0, r0, lsl #2
    1058:	00000000 	andeq	r0, r0, r0
    105c:	00010000 	andeq	r0, r1, r0
    1060:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1070:	53000100 	movwpl	r0, #256	; 0x100
	...
    107c:	00720005 	rsbseq	r0, r2, r5
    1080:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    1084:	00000000 	andeq	r0, r0, r0
    1088:	01000000 	mrseq	r0, (UNDEF: 0)
    108c:	00005300 	andeq	r5, r0, r0, lsl #6
    1090:	00000000 	andeq	r0, r0, r0
    1094:	00010000 	andeq	r0, r1, r0
    1098:	00000053 	andeq	r0, r0, r3, asr r0
	...
    10a8:	53000100 	movwpl	r0, #256	; 0x100
	...
    10b4:	00530001 	subseq	r0, r3, r1
	...
    10c4:	01000000 	mrseq	r0, (UNDEF: 0)
    10c8:	00005100 	andeq	r5, r0, r0, lsl #2
    10cc:	00000000 	andeq	r0, r0, r0
    10d0:	00050000 	andeq	r0, r5, r0
    10d4:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    10d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    10dc:	00000000 	andeq	r0, r0, r0
    10e0:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    10ec:	00510001 	subseq	r0, r1, r1
	...
    10fc:	01000000 	mrseq	r0, (UNDEF: 0)
    1100:	00005000 	andeq	r5, r0, r0
    1104:	00000000 	andeq	r0, r0, r0
    1108:	00040000 	andeq	r0, r4, r0
    110c:	9f5001f3 	svcls	0x005001f3
	...
    1118:	00500001 	subseq	r0, r0, r1
    111c:	00000000 	andeq	r0, r0, r0
    1120:	04000000 	streq	r0, [r0], #-0
    1124:	5001f300 	andpl	pc, r1, r0, lsl #6
    1128:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1138:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1144:	01f30004 	mvnseq	r0, r4
    1148:	00009f51 	andeq	r9, r0, r1, asr pc
    114c:	00000000 	andeq	r0, r0, r0
    1150:	00010000 	andeq	r0, r1, r0
    1154:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1164:	52000100 	andpl	r0, r0, #0, 2
	...
    1170:	01f30004 	mvnseq	r0, r4
    1174:	00009f52 	andeq	r9, r0, r2, asr pc
    1178:	00000000 	andeq	r0, r0, r0
    117c:	00010000 	andeq	r0, r1, r0
    1180:	00000052 	andeq	r0, r0, r2, asr r0
	...
    1190:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    11a4:	00530001 	subseq	r0, r3, r1
    11a8:	00000000 	andeq	r0, r0, r0
    11ac:	05000000 	streq	r0, [r0, #-0]
    11b0:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    11b4:	00009f25 	andeq	r9, r0, r5, lsr #30
    11b8:	00000000 	andeq	r0, r0, r0
    11bc:	00010000 	andeq	r0, r1, r0
    11c0:	00000053 	andeq	r0, r0, r3, asr r0
    11c4:	00000000 	andeq	r0, r0, r0
    11c8:	53000100 	movwpl	r0, #256	; 0x100
	...
    11dc:	00500001 	subseq	r0, r0, r1
    11e0:	00000000 	andeq	r0, r0, r0
    11e4:	04000000 	streq	r0, [r0], #-0
    11e8:	5001f300 	andpl	pc, r1, r0, lsl #6
    11ec:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11f0:	00000000 	andeq	r0, r0, r0
    11f4:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1200:	01f30004 	mvnseq	r0, r4
    1204:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1214:	00010000 	andeq	r0, r1, r0
    1218:	00000051 	andeq	r0, r0, r1, asr r0
    121c:	00000000 	andeq	r0, r0, r0
    1220:	f3000400 	vshl.u8	d0, d0, d0
    1224:	009f5101 	addseq	r5, pc, r1, lsl #2
    1228:	00000000 	andeq	r0, r0, r0
    122c:	01000000 	mrseq	r0, (UNDEF: 0)
    1230:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1240:	00010000 	andeq	r0, r1, r0
    1244:	00000052 	andeq	r0, r0, r2, asr r0
    1248:	00000000 	andeq	r0, r0, r0
    124c:	f3000400 	vshl.u8	d0, d0, d0
    1250:	009f5201 	addseq	r5, pc, r1, lsl #4
    1254:	00000000 	andeq	r0, r0, r0
    1258:	01000000 	mrseq	r0, (UNDEF: 0)
    125c:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    126c:	00010000 	andeq	r0, r1, r0
    1270:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1280:	53000100 	movwpl	r0, #256	; 0x100
	...
    128c:	00720005 	rsbseq	r0, r2, r5
    1290:	009f2535 	addseq	r2, pc, r5, lsr r5	; <UNPREDICTABLE>
    1294:	00000000 	andeq	r0, r0, r0
    1298:	01000000 	mrseq	r0, (UNDEF: 0)
    129c:	00005300 	andeq	r5, r0, r0, lsl #6
    12a0:	00000000 	andeq	r0, r0, r0
    12a4:	00010000 	andeq	r0, r1, r0
    12a8:	00000053 	andeq	r0, r0, r3, asr r0
	...
    12b8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    12c4:	01f30004 	mvnseq	r0, r4
    12c8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    12d8:	00010000 	andeq	r0, r1, r0
    12dc:	00000050 	andeq	r0, r0, r0, asr r0
    12e0:	00000000 	andeq	r0, r0, r0
    12e4:	f3000400 	vshl.u8	d0, d0, d0
    12e8:	009f5001 	addseq	r5, pc, r1
	...
    12f8:	01000000 	mrseq	r0, (UNDEF: 0)
    12fc:	00005000 	andeq	r5, r0, r0
    1300:	00000000 	andeq	r0, r0, r0
    1304:	00040000 	andeq	r0, r4, r0
    1308:	9f5001f3 	svcls	0x005001f3
	...
    131c:	00500001 	subseq	r0, r0, r1
    1320:	00000000 	andeq	r0, r0, r0
    1324:	04000000 	streq	r0, [r0], #-0
    1328:	5001f300 	andpl	pc, r1, r0, lsl #6
    132c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1330:	00000000 	andeq	r0, r0, r0
    1334:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1340:	01f30004 	mvnseq	r0, r4
    1344:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1354:	00010000 	andeq	r0, r1, r0
    1358:	00000050 	andeq	r0, r0, r0, asr r0
    135c:	00000000 	andeq	r0, r0, r0
    1360:	f3000400 	vshl.u8	d0, d0, d0
    1364:	009f5001 	addseq	r5, pc, r1
	...
    1374:	0e000000 	cdpeq	0, 0, cr0, cr0, cr0, {0}
    1378:	08007000 	stmdaeq	r0, {ip, sp, lr}
    137c:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    1380:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    1384:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    1388:	00000000 	andeq	r0, r0, r0
    138c:	0f000000 	svceq	0x00000000
    1390:	5001f300 	andpl	pc, r1, r0, lsl #6
    1394:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    1398:	08007124 	stmdaeq	r0, {r2, r5, r8, ip, sp, lr}
    139c:	9f211aff 	svcls	0x00211aff
	...
    13b0:	00500001 	subseq	r0, r0, r1
    13b4:	00000000 	andeq	r0, r0, r0
    13b8:	04000000 	streq	r0, [r0], #-0
    13bc:	5001f300 	andpl	pc, r1, r0, lsl #6
    13c0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    13d0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    13e4:	0070000d 	rsbseq	r0, r0, sp
    13e8:	00702538 	rsbseq	r2, r0, r8, lsr r5
    13ec:	381aff08 	ldmdacc	sl, {r3, r8, r9, sl, fp, ip, sp, lr, pc}
    13f0:	009f2124 	addseq	r2, pc, r4, lsr #2
    13f4:	00000000 	andeq	r0, r0, r0
    13f8:	ea000000 	b	1400 <__Stack_Size+0x1000>
    13fc:	5008000e 	andpl	r0, r8, lr
    1400:	0208000f 	andeq	r0, r8, #15
    1404:	509f3000 	addspl	r3, pc, r0
    1408:	5408000f 	strpl	r0, [r8], #-15
    140c:	0708000f 	streq	r0, [r8, -pc]
    1410:	0a007300 	beq	1e018 <__Stack_Size+0x1dc18>
    1414:	9f1affff 	svcls	0x001affff
    1418:	08000f64 	stmdaeq	r0, {r2, r5, r6, r8, r9, sl, fp}
    141c:	08000f6e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, r9, sl, fp}
    1420:	00730007 	rsbseq	r0, r3, r7
    1424:	1affff0a 	bne	1054 <__Stack_Size+0xc54>
    1428:	000f789f 	muleq	pc, pc, r8	; <UNPREDICTABLE>
    142c:	000f8208 	andeq	r8, pc, r8, lsl #4
    1430:	73000708 	movwvc	r0, #1800	; 0x708
    1434:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1438:	0fce9f1a 	svceq	0x00ce9f1a
    143c:	0fda0800 	svceq	0x00da0800
    1440:	00020800 	andeq	r0, r2, r0, lsl #16
    1444:	0fda9f30 	svceq	0x00da9f30
    1448:	101a0800 	andsne	r0, sl, r0, lsl #16
    144c:	00070800 	andeq	r0, r7, r0, lsl #16
    1450:	ff0a0075 			; <UNDEFINED> instruction: 0xff0a0075
    1454:	1a9f1aff 	bne	fe7c8058 <BootRAM+0xd7387f9>
    1458:	3c080010 	stccc	0, cr0, [r8], {16}
    145c:	02080010 	andeq	r0, r8, #16
    1460:	009f3000 	addseq	r3, pc, r0
    1464:	00000000 	andeq	r0, r0, r0
    1468:	30000000 	andcc	r0, r0, r0
    146c:	3408000f 	strcc	r0, [r8], #-15
    1470:	0708000f 	streq	r0, [r8, -pc]
    1474:	0a007200 	beq	1dc7c <__Stack_Size+0x1d87c>
    1478:	9f272000 	svcls	0x00272000
    147c:	08000f34 	stmdaeq	r0, {r2, r4, r5, r8, r9, sl, fp}
    1480:	08000f38 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl, fp}
    1484:	0072000b 	rsbseq	r0, r2, fp
    1488:	2720000a 	strcs	r0, [r0, -sl]!
    148c:	2720000a 	strcs	r0, [r0, -sl]!
    1490:	000f389f 	muleq	pc, pc, r8	; <UNPREDICTABLE>
    1494:	000f4808 	andeq	r4, pc, r8, lsl #16
    1498:	74000c08 	strvc	r0, [r0], #-3080	; 0xc08
    149c:	000a0600 	andeq	r0, sl, r0, lsl #12
    14a0:	000a2720 	andeq	r2, sl, r0, lsr #14
    14a4:	009f2720 	addseq	r2, pc, r0, lsr #14
    14a8:	00000000 	andeq	r0, r0, r0
    14ac:	42000000 	andmi	r0, r0, #0
    14b0:	4608000f 	strmi	r0, [r8], -pc
    14b4:	0608000f 	streq	r0, [r8], -pc
    14b8:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    14bc:	469f2720 	ldrmi	r2, [pc], r0, lsr #14
    14c0:	5608000f 	strpl	r0, [r8], -pc
    14c4:	0908000f 	stmdbeq	r8, {r0, r1, r2, r3}
    14c8:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    14cc:	20082720 	andcs	r2, r8, r0, lsr #14
    14d0:	0f569f27 	svceq	0x00569f27
    14d4:	0f5e0800 	svceq	0x005e0800
    14d8:	000a0800 	andeq	r0, sl, r0, lsl #16
    14dc:	08060074 	stmdaeq	r6, {r2, r4, r5, r6}
    14e0:	20082720 	andcs	r2, r8, r0, lsr #14
    14e4:	0f649f27 	svceq	0x00649f27
    14e8:	0f660800 	svceq	0x00660800
    14ec:	00090800 	andeq	r0, r9, r0, lsl #16
    14f0:	20080072 	andcs	r0, r8, r2, ror r0
    14f4:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    14f8:	000f669f 	muleq	pc, pc, r6	; <UNPREDICTABLE>
    14fc:	000f7208 	andeq	r7, pc, r8, lsl #4
    1500:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    1504:	20080600 	andcs	r0, r8, r0, lsl #12
    1508:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    150c:	000f789f 	muleq	pc, pc, r8	; <UNPREDICTABLE>
    1510:	000f8608 	andeq	r8, pc, r8, lsl #12
    1514:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    1518:	20080600 	andcs	r0, r8, r0, lsl #12
    151c:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    1520:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1524:	00000000 	andeq	r0, r0, r0
    1528:	000f9800 	andeq	r9, pc, r0, lsl #16
    152c:	000fae08 	andeq	sl, pc, r8, lsl #28
    1530:	53000108 	movwpl	r0, #264	; 0x108
    1534:	08000fae 	stmdaeq	r0, {r1, r2, r3, r5, r7, r8, r9, sl, fp}
    1538:	08000fcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, r9, sl, fp}
    153c:	00720004 	rsbseq	r0, r2, r4
    1540:	00009f06 	andeq	r9, r0, r6, lsl #30
    1544:	00000000 	andeq	r0, r0, r0
    1548:	0fba0000 	svceq	0x00ba0000
    154c:	0fce0800 	svceq	0x00ce0800
    1550:	00010800 	andeq	r0, r1, r0, lsl #16
    1554:	00000053 	andeq	r0, r0, r3, asr r0
	...
    1564:	30000200 	andcc	r0, r0, r0, lsl #4
    1568:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    156c:	00000000 	andeq	r0, r0, r0
    1570:	71000700 	tstvc	r0, r0, lsl #14
    1574:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    1578:	00009f1a 	andeq	r9, r0, sl, lsl pc
    157c:	00000000 	andeq	r0, r0, r0
    1580:	00070000 	andeq	r0, r7, r0
    1584:	ff0a0071 			; <UNDEFINED> instruction: 0xff0a0071
    1588:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    158c:	00000000 	andeq	r0, r0, r0
    1590:	02000000 	andeq	r0, r0, #0
    1594:	009f3000 	addseq	r3, pc, r0
    1598:	00000000 	andeq	r0, r0, r0
    159c:	74000000 	strvc	r0, [r0], #-0
    15a0:	89080010 	stmdbhi	r8, {r4}
    15a4:	01080010 	tsteq	r8, r0, lsl r0
    15a8:	10895000 	addne	r5, r9, r0
    15ac:	10980800 	addsne	r0, r8, r0, lsl #16
    15b0:	00040800 	andeq	r0, r4, r0, lsl #16
    15b4:	9f5001f3 	svcls	0x005001f3
	...
    15c0:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
    15c4:	080010ad 	stmdaeq	r0, {r0, r2, r3, r5, r7, ip}
    15c8:	ad500001 	ldclge	0, cr0, [r0, #-4]
    15cc:	bc080010 	stclt	0, cr0, [r8], {16}
    15d0:	04080010 	streq	r0, [r8], #-16
    15d4:	5001f300 	andpl	pc, r1, r0, lsl #6
    15d8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15dc:	00000000 	andeq	r0, r0, r0
    15e0:	0010bc00 	andseq	fp, r0, r0, lsl #24
    15e4:	0010d008 	andseq	sp, r0, r8
    15e8:	50000108 	andpl	r0, r0, r8, lsl #2
    15ec:	080010d0 	stmdaeq	r0, {r4, r6, r7, ip}
    15f0:	0800114c 	stmdaeq	r0, {r2, r3, r6, r8, ip}
    15f4:	01f30004 	mvnseq	r0, r4
    15f8:	00009f50 	andeq	r9, r0, r0, asr pc
    15fc:	00000000 	andeq	r0, r0, r0
    1600:	10de0000 	sbcsne	r0, lr, r0
    1604:	10e00800 	rscne	r0, r0, r0, lsl #16
    1608:	00020800 	andeq	r0, r2, r0, lsl #16
    160c:	00000971 	andeq	r0, r0, r1, ror r9
    1610:	00000000 	andeq	r0, r0, r0
    1614:	11060000 	mrsne	r0, (UNDEF: 6)
    1618:	11080800 	tstne	r8, r0, lsl #16
    161c:	00010800 	andeq	r0, r1, r0, lsl #16
    1620:	00110852 	andseq	r0, r1, r2, asr r8
    1624:	00112208 	andseq	r2, r1, r8, lsl #4
    1628:	71000508 	tstvc	r0, r8, lsl #10
    162c:	9f1a3f00 	svcls	0x001a3f00
    1630:	08001126 	stmdaeq	r0, {r1, r2, r5, r8, ip}
    1634:	08001130 	stmdaeq	r0, {r4, r5, r8, ip}
    1638:	00710005 	rsbseq	r0, r1, r5
    163c:	009f1a3f 	addseq	r1, pc, pc, lsr sl	; <UNPREDICTABLE>
    1640:	00000000 	andeq	r0, r0, r0
    1644:	54000000 	strpl	r0, [r0], #-0
    1648:	da080011 	ble	201694 <__Stack_Size+0x201294>
    164c:	03080011 	movweq	r0, #32785	; 0x8011
    1650:	9f107400 	svcls	0x00107400
	...
    165c:	08001158 	stmdaeq	r0, {r3, r4, r6, r8, ip}
    1660:	08001182 	stmdaeq	r0, {r1, r7, r8, ip}
    1664:	82530001 	subshi	r0, r3, #1
    1668:	88080011 	stmdahi	r8, {r0, r4}
    166c:	09080011 	stmdbeq	r8, {r0, r4}
    1670:	94107400 	ldrls	r7, [r0], #-1024	; 0x400
    1674:	ffff0a02 			; <UNDEFINED> instruction: 0xffff0a02
    1678:	11889f1a 	orrne	r9, r8, sl, lsl pc
    167c:	119c0800 	orrsne	r0, ip, r0, lsl #16
    1680:	00010800 	andeq	r0, r1, r0, lsl #16
    1684:	00119c53 	andseq	r9, r1, r3, asr ip
    1688:	00119d08 	andseq	r9, r1, r8, lsl #26
    168c:	74000908 	strvc	r0, [r0], #-2312	; 0x908
    1690:	0a029410 	beq	a66d8 <__Stack_Size+0xa62d8>
    1694:	9f1affff 	svcls	0x001affff
	...
    16a0:	0800115a 	stmdaeq	r0, {r1, r3, r4, r6, r8, ip}
    16a4:	0800117c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip}
    16a8:	00760006 	rsbseq	r0, r6, r6
    16ac:	9f1aff08 	svcls	0x001aff08
    16b0:	0800117c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, ip}
    16b4:	08001180 	stmdaeq	r0, {r7, r8, ip}
    16b8:	9f340002 	svcls	0x00340002
    16bc:	08001180 	stmdaeq	r0, {r7, r8, ip}
    16c0:	08001188 	stmdaeq	r0, {r3, r7, r8, ip}
    16c4:	9f370002 	svcls	0x00370002
    16c8:	08001188 	stmdaeq	r0, {r3, r7, r8, ip}
    16cc:	08001192 	stmdaeq	r0, {r1, r4, r7, r8, ip}
    16d0:	00760006 	rsbseq	r0, r6, r6
    16d4:	9f1aff08 	svcls	0x001aff08
    16d8:	08001192 	stmdaeq	r0, {r1, r4, r7, r8, ip}
    16dc:	080011da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, ip}
    16e0:	00560001 	subseq	r0, r6, r1
    16e4:	00000000 	andeq	r0, r0, r0
    16e8:	a0000000 	andge	r0, r0, r0
    16ec:	a2080011 	andge	r0, r8, #17
    16f0:	01080011 	tsteq	r8, r1, lsl r0
    16f4:	11a25000 			; <UNDEFINED> instruction: 0x11a25000
    16f8:	11d00800 	bicsne	r0, r0, r0, lsl #16
    16fc:	00010800 	andeq	r0, r1, r0, lsl #16
    1700:	00000059 	andeq	r0, r0, r9, asr r0
    1704:	00000000 	andeq	r0, r0, r0
    1708:	00118a00 	andseq	r8, r1, r0, lsl #20
    170c:	00119208 	andseq	r9, r1, r8, lsl #4
    1710:	55000108 	strpl	r0, [r0, #-264]	; 0x108
    1714:	08001192 	stmdaeq	r0, {r1, r4, r7, r8, ip}
    1718:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
    171c:	00750016 	rsbseq	r0, r5, r6, lsl r0
    1720:	244b4012 	strbcs	r4, [fp], #-18
    1724:	16007322 	strne	r7, [r0], -r2, lsr #6
    1728:	244b4014 	strbcs	r4, [fp], #-20
    172c:	01282d22 	teqeq	r8, r2, lsr #26
    1730:	9f131600 	svcls	0x00131600
    1734:	08001198 	stmdaeq	r0, {r3, r4, r7, r8, ip}
    1738:	080011c6 	stmdaeq	r0, {r1, r2, r6, r7, r8, ip}
    173c:	00550001 	subseq	r0, r5, r1
    1740:	00000000 	andeq	r0, r0, r0
    1744:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    1748:	55080012 	strpl	r0, [r8, #-18]
    174c:	01080012 	tsteq	r8, r2, lsl r0
    1750:	12645000 	rsbne	r5, r4, #0
    1754:	12660800 	rsbne	r0, r6, #0, 16
    1758:	00010800 	andeq	r0, r1, r0, lsl #16
    175c:	00000050 	andeq	r0, r0, r0, asr r0
    1760:	00000000 	andeq	r0, r0, r0
    1764:	00127c00 	andseq	r7, r2, r0, lsl #24
    1768:	00128008 	andseq	r8, r2, r8
    176c:	70000608 	andvc	r0, r0, r8, lsl #12
    1770:	1a7f0800 	bne	1fc3778 <__Stack_Size+0x1fc3378>
    1774:	0012809f 	mulseq	r2, pc, r0	; <UNPREDICTABLE>
    1778:	0012a408 	andseq	sl, r2, r8, lsl #8
    177c:	50000108 	andpl	r0, r0, r8, lsl #2
    1780:	080012a4 	stmdaeq	r0, {r2, r5, r7, r9, ip}
    1784:	080012ca 	stmdaeq	r0, {r1, r3, r6, r7, r9, ip}
    1788:	0073000b 	rsbseq	r0, r3, fp
    178c:	7f080194 	svcvc	0x00080194
    1790:	1aff081a 	bne	fffc3800 <BootRAM+0xef33fa1>
    1794:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1798:	00000000 	andeq	r0, r0, r0
    179c:	0012bc00 	andseq	fp, r2, r0, lsl #24
    17a0:	0012e908 	andseq	lr, r2, r8, lsl #18
    17a4:	51000108 	tstpl	r0, r8, lsl #2
    17a8:	080012f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, ip}
    17ac:	08001306 	stmdaeq	r0, {r1, r2, r8, r9, ip}
    17b0:	0c510001 	mrrceq	0, 0, r0, r1, cr1
    17b4:	0f080013 	svceq	0x00080013
    17b8:	01080013 	tsteq	r8, r3, lsl r0
    17bc:	00005100 	andeq	r5, r0, r0, lsl #2
    17c0:	00000000 	andeq	r0, r0, r0
    17c4:	12a40000 	adcne	r0, r4, #0
    17c8:	12e60800 	rscne	r0, r6, #0, 16
    17cc:	00010800 	andeq	r0, r1, r0, lsl #16
    17d0:	0012f450 	andseq	pc, r2, r0, asr r4	; <UNPREDICTABLE>
    17d4:	00130908 	andseq	r0, r3, r8, lsl #18
    17d8:	50000108 	andpl	r0, r0, r8, lsl #2
    17dc:	0800130c 	stmdaeq	r0, {r2, r3, r8, r9, ip}
    17e0:	0800130f 	stmdaeq	r0, {r0, r1, r2, r3, r8, r9, ip}
    17e4:	00500001 	subseq	r0, r0, r1
    17e8:	00000000 	andeq	r0, r0, r0
    17ec:	9e000000 	cdpls	0, 0, cr0, cr0, cr0, {0}
    17f0:	d6080012 			; <UNDEFINED> instruction: 0xd6080012
    17f4:	06080012 			; <UNDEFINED> instruction: 0x06080012
    17f8:	08007200 	stmdaeq	r0, {r9, ip, sp, lr}
    17fc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1800:	00000000 	andeq	r0, r0, r0
    1804:	1c000000 	stcne	0, cr0, [r0], {-0}
    1808:	20080013 	andcs	r0, r8, r3, lsl r0
    180c:	07080013 	smladeq	r8, r3, r0, r0
    1810:	0a007300 	beq	1e418 <__Stack_Size+0x1e018>
    1814:	9f273000 	svcls	0x00273000
    1818:	08001320 	stmdaeq	r0, {r5, r8, r9, ip}
    181c:	08001322 	stmdaeq	r0, {r1, r5, r8, r9, ip}
    1820:	0073000b 	rsbseq	r0, r3, fp
    1824:	2730000a 	ldrcs	r0, [r0, -sl]!
    1828:	2730000a 	ldrcs	r0, [r0, -sl]!
    182c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1830:	00000000 	andeq	r0, r0, r0
    1834:	00135000 	andseq	r5, r3, r0
    1838:	00138a08 	andseq	r8, r3, r8, lsl #20
    183c:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1840:	1aff0800 	bne	fffc3848 <BootRAM+0xef33fe9>
    1844:	0013b89f 	mulseq	r3, pc, r8	; <UNPREDICTABLE>
    1848:	0013c808 	andseq	ip, r3, r8, lsl #16
    184c:	72000608 	andvc	r0, r0, #8, 12	; 0x800000
    1850:	1aff0800 	bne	fffc3858 <BootRAM+0xef33ff9>
    1854:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1858:	00000000 	andeq	r0, r0, r0
    185c:	00135400 	andseq	r5, r3, r0, lsl #8
    1860:	00137408 	andseq	r7, r3, r8, lsl #8
    1864:	54000108 	strpl	r0, [r0], #-264	; 0x108
    1868:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
    186c:	0800138a 	stmdaeq	r0, {r1, r3, r7, r8, r9, ip}
    1870:	00720007 	rsbseq	r0, r2, r7
    1874:	1aff7f0b 	bne	fffe14a8 <BootRAM+0xef51c49>
    1878:	0013b89f 	mulseq	r3, pc, r8	; <UNPREDICTABLE>
    187c:	0013c808 	andseq	ip, r3, r8, lsl #16
    1880:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
    1884:	ff7f0b00 			; <UNDEFINED> instruction: 0xff7f0b00
    1888:	00009f1a 	andeq	r9, r0, sl, lsl pc
    188c:	00000000 	andeq	r0, r0, r0
    1890:	136a0000 	cmnne	sl, #0
    1894:	13b30800 			; <UNDEFINED> instruction: 0x13b30800
    1898:	00010800 	andeq	r0, r1, r0, lsl #16
    189c:	0013b850 	andseq	fp, r3, r0, asr r8
    18a0:	0013ba08 	andseq	fp, r3, r8, lsl #20
    18a4:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    18b0:	08001396 	stmdaeq	r0, {r1, r2, r4, r7, r8, r9, ip}
    18b4:	0800139a 	stmdaeq	r0, {r1, r3, r4, r7, r8, r9, ip}
    18b8:	00720005 	rsbseq	r0, r2, r5
    18bc:	9a9f2740 	bls	fe7cb5c4 <BootRAM+0xd73bd65>
    18c0:	9c080013 	stcls	0, cr0, [r8], {19}
    18c4:	07080013 	smladeq	r8, r3, r0, r0
    18c8:	40007200 	andmi	r7, r0, r0, lsl #4
    18cc:	9f274027 	svcls	0x00274027
	...
    18d8:	080013a6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, ip}
    18dc:	080013aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, ip}
    18e0:	00720007 	rsbseq	r0, r2, r7
    18e4:	2710000a 	ldrcs	r0, [r0, -sl]
    18e8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    18ec:	00000000 	andeq	r0, r0, r0
    18f0:	0013ec00 	andseq	lr, r3, r0, lsl #24
    18f4:	0013fe08 	andseq	pc, r3, r8, lsl #28
    18f8:	50000108 	andpl	r0, r0, r8, lsl #2
    18fc:	080013fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, r8, r9, ip}
    1900:	08001408 	stmdaeq	r0, {r3, sl, ip}
    1904:	01f30004 	mvnseq	r0, r4
    1908:	00009f50 	andeq	r9, r0, r0, asr pc
    190c:	00000000 	andeq	r0, r0, r0
    1910:	13ec0000 	mvnne	r0, #0
    1914:	13f60800 	mvnsne	r0, #0, 16
    1918:	00010800 	andeq	r0, r1, r0, lsl #16
    191c:	0013f651 	andseq	pc, r3, r1, asr r6	; <UNPREDICTABLE>
    1920:	0013fc08 	andseq	pc, r3, r8, lsl #24
    1924:	f3000408 	vshl.u8	d0, d8, d0
    1928:	fc9f5101 	ldc2	1, cr5, [pc], {1}
    192c:	08080013 	stmdaeq	r8, {r0, r1, r4}
    1930:	01080014 	tsteq	r8, r4, lsl r0
    1934:	00005100 	andeq	r5, r0, r0, lsl #2
    1938:	00000000 	andeq	r0, r0, r0
    193c:	13f20000 	mvnsne	r0, #0
    1940:	13f80800 	mvnsne	r0, #0, 16
    1944:	00010800 	andeq	r0, r1, r0, lsl #16
    1948:	0013f853 	andseq	pc, r3, r3, asr r8	; <UNPREDICTABLE>
    194c:	0013fc08 	andseq	pc, r3, r8, lsl #24
    1950:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    1954:	0a029412 	beq	a69a4 <__Stack_Size+0xa65a4>
    1958:	9f1affff 	svcls	0x001affff
    195c:	080013fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, ip}
    1960:	08001408 	stmdaeq	r0, {r3, sl, ip}
    1964:	00530001 	subseq	r0, r3, r1
    1968:	00000000 	andeq	r0, r0, r0
    196c:	5a000000 	bpl	1974 <__Stack_Size+0x1574>
    1970:	64080014 	strvs	r0, [r8], #-20
    1974:	11080014 	tstne	r8, r4, lsl r0
    1978:	0a007200 	beq	1e180 <__Stack_Size+0x1dd80>
    197c:	311affff 			; <UNDEFINED> instruction: 0x311affff
    1980:	c0802324 	addgt	r2, r0, r4, lsr #6
    1984:	9f048081 	svcls	0x00048081
    1988:	00000493 	muleq	r0, r3, r4
    198c:	00000000 	andeq	r0, r0, r0
    1990:	148e0000 	strne	r0, [lr], #0
    1994:	149e0800 	ldrne	r0, [lr], #2048	; 0x800
    1998:	00020800 	andeq	r0, r2, r0, lsl #16
    199c:	149e9f32 	ldrne	r9, [lr], #3890	; 0xf32
    19a0:	14a00800 	strtne	r0, [r0], #2048	; 0x800
    19a4:	00010800 	andeq	r0, r1, r0, lsl #16
    19a8:	0014a050 	andseq	sl, r4, r0, asr r0
    19ac:	0014ac08 	andseq	sl, r4, r8, lsl #24
    19b0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    19b4:	0014b09f 	mulseq	r4, pc, r0	; <UNPREDICTABLE>
    19b8:	0014ce08 	andseq	ip, r4, r8, lsl #28
    19bc:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    19c0:	0014d89f 	mulseq	r4, pc, r8	; <UNPREDICTABLE>
    19c4:	0014de08 	andseq	sp, r4, r8, lsl #28
    19c8:	50000108 	andpl	r0, r0, r8, lsl #2
    19cc:	080014de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, sl, ip}
    19d0:	080014ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip}
    19d4:	9f320002 	svcls	0x00320002
    19d8:	080014ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip}
    19dc:	080014f0 	stmdaeq	r0, {r4, r5, r6, r7, sl, ip}
    19e0:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
    19e4:	0a080014 	beq	201a3c <__Stack_Size+0x20163c>
    19e8:	02080015 	andeq	r0, r8, #21
    19ec:	0a9f3200 	beq	fe7ce1f4 <BootRAM+0xd73e995>
    19f0:	0c080015 	stceq	0, cr0, [r8], {21}
    19f4:	01080015 	tsteq	r8, r5, lsl r0
    19f8:	150c5000 	strne	r5, [ip, #-0]
    19fc:	15180800 	ldrne	r0, [r8, #-2048]	; 0x800
    1a00:	00020800 	andeq	r0, r2, r0, lsl #16
    1a04:	15189f32 	ldrne	r9, [r8, #-3890]	; 0xf32
    1a08:	151a0800 	ldrne	r0, [sl, #-2048]	; 0x800
    1a0c:	00010800 	andeq	r0, r1, r0, lsl #16
    1a10:	00151a50 	andseq	r1, r5, r0, asr sl
    1a14:	00152a08 	andseq	r2, r5, r8, lsl #20
    1a18:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1a1c:	00152a9f 	mulseq	r5, pc, sl	; <UNPREDICTABLE>
    1a20:	00153208 	andseq	r3, r5, r8, lsl #4
    1a24:	50000108 	andpl	r0, r0, r8, lsl #2
    1a28:	0800154a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip}
    1a2c:	0800154c 	stmdaeq	r0, {r2, r3, r6, r8, sl, ip}
    1a30:	00500001 	subseq	r0, r0, r1
    1a34:	00000000 	andeq	r0, r0, r0
    1a38:	8e000000 	cdphi	0, 0, cr0, cr0, cr0, {0}
    1a3c:	52080014 	andpl	r0, r8, #20
    1a40:	01080015 	tsteq	r8, r5, lsl r0
    1a44:	00005400 	andeq	r5, r0, r0, lsl #8
    1a48:	00000000 	andeq	r0, r0, r0
    1a4c:	15320000 	ldrne	r0, [r2, #-0]!
    1a50:	154a0800 	strbne	r0, [sl, #-2048]	; 0x800
    1a54:	00020800 	andeq	r0, r2, r0, lsl #16
    1a58:	154c9f36 	strbne	r9, [ip, #-3894]	; 0xf36
    1a5c:	15520800 	ldrbne	r0, [r2, #-2048]	; 0x800
    1a60:	00010800 	andeq	r0, r1, r0, lsl #16
    1a64:	00000053 	andeq	r0, r0, r3, asr r0
    1a68:	00000000 	andeq	r0, r0, r0
    1a6c:	00155200 	andseq	r5, r5, r0, lsl #4
    1a70:	00156808 	andseq	r6, r5, r8, lsl #16
    1a74:	30000208 	andcc	r0, r0, r8, lsl #4
    1a78:	0015689f 	mulseq	r5, pc, r8	; <UNPREDICTABLE>
    1a7c:	00156a08 	andseq	r6, r5, r8, lsl #20
    1a80:	53000108 	movwpl	r0, #264	; 0x108
    1a84:	0800156a 	stmdaeq	r0, {r1, r3, r5, r6, r8, sl, ip}
    1a88:	08001572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, ip}
    1a8c:	9f300002 	svcls	0x00300002
    1a90:	08001572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, ip}
    1a94:	08001574 	stmdaeq	r0, {r2, r4, r5, r6, r8, sl, ip}
    1a98:	74530001 	ldrbvc	r0, [r3], #-1
    1a9c:	7c080015 	stcvc	0, cr0, [r8], {21}
    1aa0:	02080015 	andeq	r0, r8, #21
    1aa4:	7c9f3000 	ldcvc	0, cr3, [pc], {0}
    1aa8:	7e080015 	mcrvc	0, 0, r0, cr8, cr5, {0}
    1aac:	01080015 	tsteq	r8, r5, lsl r0
    1ab0:	157e5300 	ldrbne	r5, [lr, #-768]!	; 0x300
    1ab4:	15860800 	strne	r0, [r6, #2048]	; 0x800
    1ab8:	00020800 	andeq	r0, r2, r0, lsl #16
    1abc:	15869f30 	strne	r9, [r6, #3888]	; 0xf30
    1ac0:	15880800 	strne	r0, [r8, #2048]	; 0x800
    1ac4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ac8:	00158853 	andseq	r8, r5, r3, asr r8
    1acc:	00164408 	andseq	r4, r6, r8, lsl #8
    1ad0:	30000208 	andcc	r0, r0, r8, lsl #4
    1ad4:	0016449f 	mulseq	r6, pc, r4	; <UNPREDICTABLE>
    1ad8:	00165108 	andseq	r5, r6, r8, lsl #2
    1adc:	53000108 	movwpl	r0, #264	; 0x108
    1ae0:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
    1ae4:	0800170e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, ip}
    1ae8:	9f300002 	svcls	0x00300002
    1aec:	0800170e 	stmdaeq	r0, {r1, r2, r3, r8, r9, sl, ip}
    1af0:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
    1af4:	99030006 	stmdbls	r3, {r1, r2}
    1af8:	9f080010 	svcls	0x00080010
	...
    1b04:	08001652 	stmdaeq	r0, {r1, r4, r6, r9, sl, ip}
    1b08:	08001656 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, ip}
    1b0c:	9f300002 	svcls	0x00300002
    1b10:	08001662 	stmdaeq	r0, {r1, r5, r6, r9, sl, ip}
    1b14:	08001678 	stmdaeq	r0, {r3, r4, r5, r6, r9, sl, ip}
    1b18:	7c500001 	mrrcvc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1b1c:	84080016 	strhi	r0, [r8], #-22
    1b20:	01080016 	tsteq	r8, r6, lsl r0
    1b24:	16885000 	strne	r5, [r8], r0
    1b28:	16960800 	ldrne	r0, [r6], r0, lsl #16
    1b2c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b30:	0016f050 	andseq	pc, r6, r0, asr r0	; <UNPREDICTABLE>
    1b34:	0016fc08 	andseq	pc, r6, r8, lsl #24
    1b38:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    1b44:	08001552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip}
    1b48:	0800164a 	stmdaeq	r0, {r1, r3, r6, r9, sl, ip}
    1b4c:	56540001 	ldrbpl	r0, [r4], -r1
    1b50:	6c080016 	stcvs	0, cr0, [r8], {22}
    1b54:	01080016 	tsteq	r8, r6, lsl r0
    1b58:	17045400 	strne	r5, [r4, -r0, lsl #8]
    1b5c:	17240800 	strne	r0, [r4, -r0, lsl #16]!
    1b60:	00010800 	andeq	r0, r1, r0, lsl #16
    1b64:	00000054 	andeq	r0, r0, r4, asr r0
    1b68:	00000000 	andeq	r0, r0, r0
    1b6c:	0015da00 	andseq	sp, r5, r0, lsl #20
    1b70:	00160608 	andseq	r0, r6, r8, lsl #12
    1b74:	51000108 	tstpl	r0, r8, lsl #2
	...
    1b80:	080015da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, ip}
    1b84:	08001606 	stmdaeq	r0, {r1, r2, r9, sl, ip}
    1b88:	00730009 	rsbseq	r0, r3, r9
    1b8c:	081a7008 	ldmdaeq	sl, {r3, ip, sp, lr}
    1b90:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1b94:	00000000 	andeq	r0, r0, r0
    1b98:	52000000 	andpl	r0, r0, #0
    1b9c:	fc080015 	stc2	0, cr0, [r8], {21}
    1ba0:	02080016 	andeq	r0, r8, #22
    1ba4:	049f3000 	ldreq	r3, [pc], #0	; 1bac <__Stack_Size+0x17ac>
    1ba8:	24080017 	strcs	r0, [r8], #-23
    1bac:	02080017 	andeq	r0, r8, #23
    1bb0:	009f3000 	addseq	r3, pc, r0
    1bb4:	00000000 	andeq	r0, r0, r0
    1bb8:	f2000000 	vhadd.s8	d0, d0, d0
    1bbc:	06080015 			; <UNDEFINED> instruction: 0x06080015
    1bc0:	01080016 	tsteq	r8, r6, lsl r0
    1bc4:	00005200 	andeq	r5, r0, r0, lsl #4
    1bc8:	00000000 	andeq	r0, r0, r0
    1bcc:	155e0000 	ldrbne	r0, [lr, #-0]
    1bd0:	15600800 	strbne	r0, [r0, #-2048]!	; 0x800
    1bd4:	00020800 	andeq	r0, r2, r0, lsl #16
    1bd8:	15600373 	strbne	r0, [r0, #-883]!	; 0x373
    1bdc:	15880800 	strne	r0, [r8, #2048]	; 0x800
    1be0:	00010800 	andeq	r0, r1, r0, lsl #16
    1be4:	00164452 	andseq	r4, r6, r2, asr r4
    1be8:	00164608 	andseq	r4, r6, r8, lsl #12
    1bec:	52000108 	andpl	r0, r0, #8, 2
	...
    1bf8:	0800172c 	stmdaeq	r0, {r2, r3, r5, r8, r9, sl, ip}
    1bfc:	08001736 	stmdaeq	r0, {r1, r2, r4, r5, r8, r9, sl, ip}
    1c00:	36530001 	ldrbcc	r0, [r3], -r1
    1c04:	47080017 	smladmi	r8, r7, r0, r0
    1c08:	08080017 	stmdaeq	r8, {r0, r1, r2, r4}
    1c0c:	94087400 	strls	r7, [r8], #-1024	; 0x400
    1c10:	1aff0801 	bne	fffc3c1c <BootRAM+0xef343bd>
    1c14:	0017b69f 	mulseq	r7, pc, r6	; <UNPREDICTABLE>
    1c18:	0017be08 	andseq	fp, r7, r8, lsl #28
    1c1c:	53000108 	movwpl	r0, #264	; 0x108
    1c20:	080017be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8, r9, sl, ip}
    1c24:	080017c3 	stmdaeq	r0, {r0, r1, r6, r7, r8, r9, sl, ip}
    1c28:	08740008 	ldmdaeq	r4!, {r3}^
    1c2c:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1c30:	17c69f1a 	bfine	r9, sl, (invalid: 30:6)
    1c34:	17ce0800 	strbne	r0, [lr, r0, lsl #16]
    1c38:	00010800 	andeq	r0, r1, r0, lsl #16
    1c3c:	00000053 	andeq	r0, r0, r3, asr r0
    1c40:	00000000 	andeq	r0, r0, r0
    1c44:	00173400 	andseq	r3, r7, r0, lsl #8
    1c48:	0017b808 	andseq	fp, r7, r8, lsl #16
    1c4c:	74000308 	strvc	r0, [r0], #-776	; 0x308
    1c50:	00009f10 	andeq	r9, r0, r0, lsl pc
    1c54:	00000000 	andeq	r0, r0, r0
    1c58:	17380000 	ldrne	r0, [r8, -r0]!
    1c5c:	17470800 	strbne	r0, [r7, -r0, lsl #16]
    1c60:	00010800 	andeq	r0, r1, r0, lsl #16
    1c64:	00000052 	andeq	r0, r0, r2, asr r0
    1c68:	00000000 	andeq	r0, r0, r0
    1c6c:	00174c00 	andseq	r4, r7, r0, lsl #24
    1c70:	00175408 	andseq	r5, r7, r8, lsl #8
    1c74:	50000108 	andpl	r0, r0, r8, lsl #2
    1c78:	08001754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip}
    1c7c:	08001766 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, sl, ip}
    1c80:	00570001 	subseq	r0, r7, r1
    1c84:	00000000 	andeq	r0, r0, r0
    1c88:	3e000000 	cdpcc	0, 0, cr0, cr0, cr0, {0}
    1c8c:	44080017 	strmi	r0, [r8], #-23
    1c90:	16080017 			; <UNDEFINED> instruction: 0x16080017
    1c94:	12007600 	andne	r7, r0, #0, 12
    1c98:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1c9c:	14160072 	ldrne	r0, [r6], #-114	; 0x72
    1ca0:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1ca4:	0001282d 	andeq	r2, r1, sp, lsr #16
    1ca8:	449f1316 	ldrmi	r1, [pc], #790	; 1cb0 <__Stack_Size+0x18b0>
    1cac:	66080017 			; <UNDEFINED> instruction: 0x66080017
    1cb0:	01080017 	tsteq	r8, r7, lsl r0
    1cb4:	00005600 	andeq	r5, r0, r0, lsl #12
    1cb8:	00000000 	andeq	r0, r0, r0
    1cbc:	17ec0000 	strbne	r0, [ip, r0]!
    1cc0:	18180800 	ldmdane	r8, {fp}
    1cc4:	00010800 	andeq	r0, r1, r0, lsl #16
    1cc8:	00181850 	andseq	r1, r8, r0, asr r8
    1ccc:	00182408 	andseq	r2, r8, r8, lsl #8
    1cd0:	f3000408 	vshl.u8	d0, d8, d0
    1cd4:	009f5001 	addseq	r5, pc, r1
    1cd8:	00000000 	andeq	r0, r0, r0
    1cdc:	f2000000 	vhadd.s8	d0, d0, d0
    1ce0:	f4080017 	vst4.8	{d0-d3}, [r8 :64], r7
    1ce4:	02080017 	andeq	r0, r8, #23
    1ce8:	f49f3000 			; <UNDEFINED> instruction: 0xf49f3000
    1cec:	14080017 	strne	r0, [r8], #-23
    1cf0:	01080018 	tsteq	r8, r8, lsl r0
    1cf4:	00005300 	andeq	r5, r0, r0, lsl #6
    1cf8:	00000000 	andeq	r0, r0, r0
    1cfc:	17f20000 	ldrbne	r0, [r2, r0]!
    1d00:	181c0800 	ldmdane	ip, {fp}
    1d04:	00010800 	andeq	r0, r1, r0, lsl #16
    1d08:	00000054 	andeq	r0, r0, r4, asr r0
    1d0c:	00000000 	andeq	r0, r0, r0
    1d10:	00182c00 	andseq	r2, r8, r0, lsl #24
    1d14:	00183708 	andseq	r3, r8, r8, lsl #14
    1d18:	52000108 	andpl	r0, r0, #8, 2
    1d1c:	0800183c 	stmdaeq	r0, {r2, r3, r4, r5, fp, ip}
    1d20:	0800183e 	stmdaeq	r0, {r1, r2, r3, r4, r5, fp, ip}
    1d24:	3e530001 	cdpcc	0, 5, cr0, cr3, cr1, {0}
    1d28:	44080018 	strmi	r0, [r8], #-24
    1d2c:	01080018 	tsteq	r8, r8, lsl r0
    1d30:	18445200 	stmdane	r4, {r9, ip, lr}^
    1d34:	18530800 	ldmdane	r3, {fp}^
    1d38:	00080800 	andeq	r0, r8, r0, lsl #16
    1d3c:	01940873 	orrseq	r0, r4, r3, ror r8
    1d40:	9f1aff08 	svcls	0x001aff08
    1d44:	08001866 	stmdaeq	r0, {r1, r2, r5, r6, fp, ip}
    1d48:	08001871 	stmdaeq	r0, {r0, r4, r5, r6, fp, ip}
    1d4c:	00530001 	subseq	r0, r3, r1
    1d50:	00000000 	andeq	r0, r0, r0
    1d54:	80000000 	andhi	r0, r0, r0
    1d58:	98080018 	stmdals	r8, {r3, r4}
    1d5c:	01080018 	tsteq	r8, r8, lsl r0
    1d60:	18985000 	ldmne	r8, {ip, lr}
    1d64:	189a0800 	ldmne	sl, {fp}
    1d68:	00030800 	andeq	r0, r3, r0, lsl #16
    1d6c:	9a9f7e70 	bls	fe7e1734 <BootRAM+0xd751ed5>
    1d70:	aa080018 	bge	201dd8 <__Stack_Size+0x2019d8>
    1d74:	03080018 	movweq	r0, #32792	; 0x8018
    1d78:	9f7f7000 	svcls	0x007f7000
    1d7c:	080018aa 	stmdaeq	r0, {r1, r3, r5, r7, fp, ip}
    1d80:	080018ae 	stmdaeq	r0, {r1, r2, r3, r5, r7, fp, ip}
    1d84:	ae500001 	cdpge	0, 5, cr0, cr0, cr1, {0}
    1d88:	b0080018 	andlt	r0, r8, r8, lsl r0
    1d8c:	03080018 	movweq	r0, #32792	; 0x8018
    1d90:	9f7e7000 	svcls	0x007e7000
	...
    1d9c:	08001880 	stmdaeq	r0, {r7, fp, ip}
    1da0:	08001886 	stmdaeq	r0, {r1, r2, r7, fp, ip}
    1da4:	86510001 	ldrbhi	r0, [r1], -r1
    1da8:	b0080018 	andlt	r0, r8, r8, lsl r0
    1dac:	04080018 	streq	r0, [r8], #-24
    1db0:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1db4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1db8:	00000000 	andeq	r0, r0, r0
    1dbc:	00188000 	andseq	r8, r8, r0
    1dc0:	00188808 	andseq	r8, r8, r8, lsl #16
    1dc4:	52000108 	andpl	r0, r0, #8, 2
    1dc8:	08001888 	stmdaeq	r0, {r3, r7, fp, ip}
    1dcc:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
    1dd0:	01f30004 	mvnseq	r0, r4
    1dd4:	00009f52 	andeq	r9, r0, r2, asr pc
    1dd8:	00000000 	andeq	r0, r0, r0
    1ddc:	18900000 	ldmne	r0, {}	; <UNPREDICTABLE>
    1de0:	18920800 	ldmne	r2, {fp}
    1de4:	00010800 	andeq	r0, r1, r0, lsl #16
    1de8:	00189252 	andseq	r9, r8, r2, asr r2
    1dec:	0018aa08 	andseq	sl, r8, r8, lsl #20
    1df0:	f3000f08 	vpmax.f32	d0, d0, d8
    1df4:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    1df8:	01231aff 	strdeq	r1, [r3, -pc]!
    1dfc:	00732631 	rsbseq	r2, r3, r1, lsr r6
    1e00:	18aa9f1c 	stmiane	sl!, {r2, r3, r4, r8, r9, sl, fp, ip, pc}
    1e04:	18ac0800 	stmiane	ip!, {fp}
    1e08:	00100800 	andseq	r0, r0, r0, lsl #16
    1e0c:	0a5201f3 	beq	14825e0 <__Stack_Size+0x14821e0>
    1e10:	231affff 	tstcs	sl, #1020	; 0x3fc
    1e14:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1e18:	9f222000 	svcls	0x00222000
    1e1c:	080018ac 	stmdaeq	r0, {r2, r3, r5, r7, fp, ip}
    1e20:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
    1e24:	01f3000f 	mvnseq	r0, pc
    1e28:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1e2c:	3101231a 	tstcc	r1, sl, lsl r3
    1e30:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    1e34:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e38:	00000000 	andeq	r0, r0, r0
    1e3c:	00189a00 	andseq	r9, r8, r0, lsl #20
    1e40:	0018a208 	andseq	sl, r8, r8, lsl #4
    1e44:	70000808 	andvc	r0, r0, r8, lsl #16
    1e48:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1e4c:	a29f1aff 	addsge	r1, pc, #1044480	; 0xff000
    1e50:	a6080018 			; <UNDEFINED> instruction: 0xa6080018
    1e54:	01080018 	tsteq	r8, r8, lsl r0
    1e58:	18a65400 	stmiane	r6!, {sl, ip, lr}
    1e5c:	18aa0800 	stmiane	sl!, {fp}
    1e60:	00080800 	andeq	r0, r8, r0, lsl #16
    1e64:	01947e70 	orrseq	r7, r4, r0, ror lr
    1e68:	9f1aff08 	svcls	0x001aff08
	...
    1e74:	0800189a 	stmdaeq	r0, {r1, r3, r4, r7, fp, ip}
    1e78:	080018aa 	stmdaeq	r0, {r1, r3, r5, r7, fp, ip}
    1e7c:	7f700012 	svcvc	0x00700012
    1e80:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1e84:	7024381a 	eorvc	r3, r4, sl, lsl r8
    1e88:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1e8c:	9f211aff 	svcls	0x00211aff
	...
    1e98:	08001890 	stmdaeq	r0, {r4, r7, fp, ip}
    1e9c:	08001892 	stmdaeq	r0, {r1, r4, r7, fp, ip}
    1ea0:	aa510001 	bge	1441eac <__Stack_Size+0x1441aac>
    1ea4:	ac080018 	stcge	0, cr0, [r8], {24}
    1ea8:	0a080018 	beq	201f10 <__Stack_Size+0x201b10>
    1eac:	32007300 	andcc	r7, r0, #0, 6
    1eb0:	22007124 	andcs	r7, r0, #36, 2
    1eb4:	ac9f0423 	cfldrsge	mvf0, [pc], {35}	; 0x23
    1eb8:	ae080018 	mcrge	0, 0, r0, cr8, cr8, {0}
    1ebc:	0a080018 	beq	201f24 <__Stack_Size+0x201b24>
    1ec0:	327f7300 	rsbscc	r7, pc, #0, 6
    1ec4:	22007124 	andcs	r7, r0, #36, 2
    1ec8:	009f0423 	addseq	r0, pc, r3, lsr #8
    1ecc:	00000000 	andeq	r0, r0, r0
    1ed0:	b0000000 	andlt	r0, r0, r0
    1ed4:	c2080018 	andgt	r0, r8, #24
    1ed8:	01080018 	tsteq	r8, r8, lsl r0
    1edc:	18ce5000 	stmiane	lr, {ip, lr}^
    1ee0:	18d00800 	ldmne	r0, {fp}^
    1ee4:	000a0800 	andeq	r0, sl, r0, lsl #16
    1ee8:	24310073 	ldrtcs	r0, [r1], #-115	; 0x73
    1eec:	23220070 	teqcs	r2, #112	; 0x70
    1ef0:	18d09f02 	ldmne	r0, {r1, r8, r9, sl, fp, ip, pc}^
    1ef4:	18d20800 	ldmne	r2, {fp}^
    1ef8:	000a0800 	andeq	r0, sl, r0, lsl #16
    1efc:	24317f73 	ldrtcs	r7, [r1], #-3955	; 0xf73
    1f00:	23220070 	teqcs	r2, #112	; 0x70
    1f04:	00009f02 	andeq	r9, r0, r2, lsl #30
    1f08:	00000000 	andeq	r0, r0, r0
    1f0c:	18b00000 	ldmne	r0!, {}	; <UNPREDICTABLE>
    1f10:	18b60800 	ldmne	r6!, {fp}
    1f14:	00010800 	andeq	r0, r1, r0, lsl #16
    1f18:	0018b651 	andseq	fp, r8, r1, asr r6
    1f1c:	0018d408 	andseq	sp, r8, r8, lsl #8
    1f20:	f3000408 	vshl.u8	d0, d8, d0
    1f24:	009f5101 	addseq	r5, pc, r1, lsl #2
    1f28:	00000000 	andeq	r0, r0, r0
    1f2c:	b0000000 	andlt	r0, r0, r0
    1f30:	b8080018 	stmdalt	r8, {r3, r4}
    1f34:	01080018 	tsteq	r8, r8, lsl r0
    1f38:	18b85200 	ldmne	r8!, {r9, ip, lr}
    1f3c:	18d40800 	ldmne	r4, {fp}^
    1f40:	00040800 	andeq	r0, r4, r0, lsl #16
    1f44:	9f5201f3 	svcls	0x005201f3
	...
    1f50:	080018c0 	stmdaeq	r0, {r6, r7, fp, ip}
    1f54:	080018c2 	stmdaeq	r0, {r1, r6, r7, fp, ip}
    1f58:	c2520001 	subsgt	r0, r2, #1
    1f5c:	ce080018 	mcrgt	0, 0, r0, cr8, cr8, {0}
    1f60:	0f080018 	svceq	0x00080018
    1f64:	5201f300 	andpl	pc, r1, #0, 6
    1f68:	1affff0a 	bne	1b98 <__Stack_Size+0x1798>
    1f6c:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    1f70:	9f1c0073 	svcls	0x001c0073
    1f74:	080018ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp, ip}
    1f78:	080018d0 	stmdaeq	r0, {r4, r6, r7, fp, ip}
    1f7c:	01f30010 	mvnseq	r0, r0, lsl r0
    1f80:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1f84:	3101231a 	tstcc	r1, sl, lsl r3
    1f88:	20007326 	andcs	r7, r0, r6, lsr #6
    1f8c:	18d09f22 	ldmne	r0, {r1, r5, r8, r9, sl, fp, ip, pc}^
    1f90:	18d40800 	ldmne	r4, {fp}^
    1f94:	000f0800 	andeq	r0, pc, r0, lsl #16
    1f98:	0a5201f3 	beq	148276c <__Stack_Size+0x148236c>
    1f9c:	231affff 	tstcs	sl, #1020	; 0x3fc
    1fa0:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1fa4:	009f1c00 	addseq	r1, pc, r0, lsl #24
    1fa8:	00000000 	andeq	r0, r0, r0
    1fac:	c0000000 	andgt	r0, r0, r0
    1fb0:	c2080018 	andgt	r0, r8, #24
    1fb4:	01080018 	tsteq	r8, r8, lsl r0
    1fb8:	18c65100 	stmiane	r6, {r8, ip, lr}^
    1fbc:	18d00800 	ldmne	r0, {fp}^
    1fc0:	000a0800 	andeq	r0, sl, r0, lsl #16
    1fc4:	24320073 	ldrtcs	r0, [r2], #-115	; 0x73
    1fc8:	23220071 	teqcs	r2, #113	; 0x71
    1fcc:	18d09f04 	ldmne	r0, {r2, r8, r9, sl, fp, ip, pc}^
    1fd0:	18d20800 	ldmne	r2, {fp}^
    1fd4:	000a0800 	andeq	r0, sl, r0, lsl #16
    1fd8:	24327f73 	ldrtcs	r7, [r2], #-3955	; 0xf73
    1fdc:	23220071 	teqcs	r2, #113	; 0x71
    1fe0:	00009f04 	andeq	r9, r0, r4, lsl #30
    1fe4:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000000 	andeq	r0, r0, r0
   8:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
   c:	080001b4 	stmdaeq	r0, {r2, r4, r5, r7, r8}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	080001b4 	stmdaeq	r0, {r2, r4, r5, r7, r8}
  14:	080001b8 	stmdaeq	r0, {r3, r4, r5, r7, r8}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	080001b8 	stmdaeq	r0, {r3, r4, r5, r7, r8}
  24:	080001ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8}
  28:	080001ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	080001bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	080001bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8}
  34:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}
  38:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	080001ca 	stmdaeq	r0, {r1, r3, r6, r7, r8}
  48:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
  4c:	080001e4 	stmdaeq	r0, {r2, r5, r6, r7, r8}

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	080001e4 	stmdaeq	r0, {r2, r5, r6, r7, r8}
  54:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
  58:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
  5c:	080001e8 	stmdaeq	r0, {r3, r5, r6, r7, r8}
  60:	080001e8 	stmdaeq	r0, {r3, r5, r6, r7, r8}
  64:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
  68:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
  6c:	080001ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8}
  70:	080001ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8}
  74:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
  78:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
  7c:	080001f0 	stmdaeq	r0, {r4, r5, r6, r7, r8}
  80:	080001f0 	stmdaeq	r0, {r4, r5, r6, r7, r8}
  84:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
  88:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
  8c:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
  90:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
  94:	08000304 	stmdaeq	r0, {r2, r8, r9}
  98:	08000304 	stmdaeq	r0, {r2, r8, r9}
  9c:	08000310 	stmdaeq	r0, {r4, r8, r9}
  a0:	08000310 	stmdaeq	r0, {r4, r8, r9}
  a4:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
  a8:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
  ac:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
  b0:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
  b4:	08000348 	stmdaeq	r0, {r3, r6, r8, r9}
  b8:	08000348 	stmdaeq	r0, {r3, r6, r8, r9}
  bc:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  c0:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  c4:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
  c8:	00000001 	andeq	r0, r0, r1
  cc:	00000001 	andeq	r0, r0, r1
  d0:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
  d4:	08000404 	stmdaeq	r0, {r2, sl}
  d8:	08000404 	stmdaeq	r0, {r2, sl}
  dc:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
  e0:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
  e4:	080004a0 	stmdaeq	r0, {r5, r7, sl}
  e8:	080004a0 	stmdaeq	r0, {r5, r7, sl}
  ec:	080004c8 	stmdaeq	r0, {r3, r6, r7, sl}
  f0:	080004c8 	stmdaeq	r0, {r3, r6, r7, sl}
  f4:	080004e4 	stmdaeq	r0, {r2, r5, r6, r7, sl}
  f8:	080004e4 	stmdaeq	r0, {r2, r5, r6, r7, sl}
  fc:	080004e8 	stmdaeq	r0, {r3, r5, r6, r7, sl}
 100:	080004e8 	stmdaeq	r0, {r3, r5, r6, r7, sl}
 104:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
 108:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
 10c:	0800054c 	stmdaeq	r0, {r2, r3, r6, r8, sl}
 110:	0800054c 	stmdaeq	r0, {r2, r3, r6, r8, sl}
 114:	0800056e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl}
 118:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
 11c:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
	...
 128:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 12c:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
	...
 138:	080008c6 	stmdaeq	r0, {r1, r2, r6, r7, fp}
 13c:	080008ca 	stmdaeq	r0, {r1, r3, r6, r7, fp}
 140:	080008ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, fp}
 144:	080008d0 	stmdaeq	r0, {r4, r6, r7, fp}
	...
 150:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
 154:	080006f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl}
 158:	00000001 	andeq	r0, r0, r1
 15c:	00000001 	andeq	r0, r0, r1
 160:	080006f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl}
 164:	080006f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl}
 168:	080006f6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl}
 16c:	08000746 	stmdaeq	r0, {r1, r2, r6, r8, r9, sl}
 170:	08000748 	stmdaeq	r0, {r3, r6, r8, r9, sl}
 174:	08000790 	stmdaeq	r0, {r4, r7, r8, r9, sl}
 178:	08000790 	stmdaeq	r0, {r4, r7, r8, r9, sl}
 17c:	080007f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl}
 180:	080007f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, r9, sl}
 184:	08000804 	stmdaeq	r0, {r2, fp}
 188:	08000804 	stmdaeq	r0, {r2, fp}
 18c:	08000820 	stmdaeq	r0, {r5, fp}
 190:	08000820 	stmdaeq	r0, {r5, fp}
 194:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 198:	08000834 	stmdaeq	r0, {r2, r4, r5, fp}
 19c:	080008a0 	stmdaeq	r0, {r5, r7, fp}
 1a0:	080008a0 	stmdaeq	r0, {r5, r7, fp}
 1a4:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
 1a8:	080008c4 	stmdaeq	r0, {r2, r6, r7, fp}
 1ac:	080008f0 	stmdaeq	r0, {r4, r5, r6, r7, fp}
 1b0:	080008f0 	stmdaeq	r0, {r4, r5, r6, r7, fp}
 1b4:	08000904 	stmdaeq	r0, {r2, r8, fp}
 1b8:	08000904 	stmdaeq	r0, {r2, r8, fp}
 1bc:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 1c0:	00000001 	andeq	r0, r0, r1
 1c4:	00000001 	andeq	r0, r0, r1
 1c8:	08000938 	stmdaeq	r0, {r3, r4, r5, r8, fp}
 1cc:	08000984 	stmdaeq	r0, {r2, r7, r8, fp}
 1d0:	08000984 	stmdaeq	r0, {r2, r7, r8, fp}
 1d4:	08000990 	stmdaeq	r0, {r4, r7, r8, fp}
 1d8:	08000990 	stmdaeq	r0, {r4, r7, r8, fp}
 1dc:	080009a8 	stmdaeq	r0, {r3, r5, r7, r8, fp}
 1e0:	080009a8 	stmdaeq	r0, {r3, r5, r7, r8, fp}
 1e4:	080009ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8, fp}
 1e8:	080009bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, fp}
 1ec:	080009cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp}
 1f0:	080009cc 	stmdaeq	r0, {r2, r3, r6, r7, r8, fp}
 1f4:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
	...
 200:	080009e4 	stmdaeq	r0, {r2, r5, r6, r7, r8, fp}
 204:	08000a40 	stmdaeq	r0, {r6, r9, fp}
 208:	08000a40 	stmdaeq	r0, {r6, r9, fp}
 20c:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
 210:	00000001 	andeq	r0, r0, r1
 214:	00000001 	andeq	r0, r0, r1
 218:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
 21c:	08000a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp}
 220:	08000a9c 	stmdaeq	r0, {r2, r3, r4, r7, r9, fp}
 224:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
 228:	08000ab4 	stmdaeq	r0, {r2, r4, r5, r7, r9, fp}
 22c:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 230:	08000adc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, fp}
 234:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
 238:	08000b10 	stmdaeq	r0, {r4, r8, r9, fp}
 23c:	08000b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp}
 240:	08000b6c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, fp}
 244:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
 248:	00000001 	andeq	r0, r0, r1
 24c:	00000001 	andeq	r0, r0, r1
 250:	00000001 	andeq	r0, r0, r1
 254:	00000001 	andeq	r0, r0, r1
 258:	08000da0 	stmdaeq	r0, {r5, r7, r8, sl, fp}
 25c:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 260:	08000dac 	stmdaeq	r0, {r2, r3, r5, r7, r8, sl, fp}
 264:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
	...
 270:	00000001 	andeq	r0, r0, r1
 274:	00000001 	andeq	r0, r0, r1
 278:	00000001 	andeq	r0, r0, r1
 27c:	00000001 	andeq	r0, r0, r1
	...
 288:	08000eaa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl, fp}
 28c:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
 290:	08000ebc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, sl, fp}
 294:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
	...
 2a0:	00000001 	andeq	r0, r0, r1
 2a4:	00000001 	andeq	r0, r0, r1
 2a8:	00000001 	andeq	r0, r0, r1
 2ac:	00000001 	andeq	r0, r0, r1
	...
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	00000001 	andeq	r0, r0, r1
	...
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	00000001 	andeq	r0, r0, r1
 2e0:	00000001 	andeq	r0, r0, r1
 2e4:	00000001 	andeq	r0, r0, r1
	...
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
	...
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
	...
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
 330:	00000001 	andeq	r0, r0, r1
 334:	00000001 	andeq	r0, r0, r1
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
 350:	00000001 	andeq	r0, r0, r1
 354:	00000001 	andeq	r0, r0, r1
 358:	00000001 	andeq	r0, r0, r1
 35c:	00000001 	andeq	r0, r0, r1
 360:	00000001 	andeq	r0, r0, r1
 364:	00000001 	andeq	r0, r0, r1
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	00000001 	andeq	r0, r0, r1
 374:	00000001 	andeq	r0, r0, r1
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	08000db0 	stmdaeq	r0, {r4, r5, r7, r8, sl, fp}
 38c:	08000dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp}
 390:	00000001 	andeq	r0, r0, r1
 394:	00000001 	andeq	r0, r0, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	00000001 	andeq	r0, r0, r1
 3a4:	00000001 	andeq	r0, r0, r1
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
 3b8:	08000dda 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, sl, fp}
 3bc:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	00000001 	andeq	r0, r0, r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	08000df8 	stmdaeq	r0, {r3, r4, r5, r6, r7, r8, sl, fp}
 3d4:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	00000001 	andeq	r0, r0, r1
 3e8:	00000001 	andeq	r0, r0, r1
 3ec:	00000001 	andeq	r0, r0, r1
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	00000001 	andeq	r0, r0, r1
 3f8:	00000001 	andeq	r0, r0, r1
 3fc:	00000001 	andeq	r0, r0, r1
 400:	00000001 	andeq	r0, r0, r1
 404:	00000001 	andeq	r0, r0, r1
 408:	00000001 	andeq	r0, r0, r1
 40c:	00000001 	andeq	r0, r0, r1
 410:	00000001 	andeq	r0, r0, r1
 414:	00000001 	andeq	r0, r0, r1
 418:	00000001 	andeq	r0, r0, r1
 41c:	00000001 	andeq	r0, r0, r1
 420:	08000e14 	stmdaeq	r0, {r2, r4, r9, sl, fp}
 424:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 428:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 42c:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 430:	00000001 	andeq	r0, r0, r1
 434:	00000001 	andeq	r0, r0, r1
 438:	00000001 	andeq	r0, r0, r1
 43c:	00000001 	andeq	r0, r0, r1
 440:	00000001 	andeq	r0, r0, r1
 444:	00000001 	andeq	r0, r0, r1
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 454:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
 458:	08000e70 	stmdaeq	r0, {r4, r5, r6, r9, sl, fp}
 45c:	08000e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp}
 460:	08000e8c 	stmdaeq	r0, {r2, r3, r7, r9, sl, fp}
 464:	08000ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp}
 468:	00000001 	andeq	r0, r0, r1
 46c:	00000001 	andeq	r0, r0, r1
 470:	08000ea8 	stmdaeq	r0, {r3, r5, r7, r9, sl, fp}
 474:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
 478:	00000001 	andeq	r0, r0, r1
 47c:	00000001 	andeq	r0, r0, r1
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
 488:	00000001 	andeq	r0, r0, r1
 48c:	00000001 	andeq	r0, r0, r1
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	00000001 	andeq	r0, r0, r1
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	00000001 	andeq	r0, r0, r1
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	00000001 	andeq	r0, r0, r1
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
 4c8:	00000001 	andeq	r0, r0, r1
 4cc:	00000001 	andeq	r0, r0, r1
 4d0:	00000001 	andeq	r0, r0, r1
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	00000001 	andeq	r0, r0, r1
 4dc:	00000001 	andeq	r0, r0, r1
 4e0:	00000001 	andeq	r0, r0, r1
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
 4f0:	00000001 	andeq	r0, r0, r1
 4f4:	00000001 	andeq	r0, r0, r1
	...
 500:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
 504:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
 508:	00000001 	andeq	r0, r0, r1
 50c:	00000001 	andeq	r0, r0, r1
	...
 518:	0800103c 	stmdaeq	r0, {r2, r3, r4, r5, ip}
 51c:	08001074 	stmdaeq	r0, {r2, r4, r5, r6, ip}
	...
 528:	0800137c 	stmdaeq	r0, {r2, r3, r4, r5, r6, r8, r9, ip}
 52c:	08001384 	stmdaeq	r0, {r2, r7, r8, r9, ip}
 530:	08001388 	stmdaeq	r0, {r3, r7, r8, r9, ip}
 534:	0800138a 	stmdaeq	r0, {r1, r3, r7, r8, r9, ip}
 538:	0800138c 	stmdaeq	r0, {r2, r3, r7, r8, r9, ip}
 53c:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
	...
 548:	08001552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip}
 54c:	080016fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, sl, ip}
 550:	08001704 	stmdaeq	r0, {r2, r8, r9, sl, ip}
 554:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
	...
 560:	08001074 	stmdaeq	r0, {r2, r4, r5, r6, ip}
 564:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
 568:	08001098 	stmdaeq	r0, {r3, r4, r7, ip}
 56c:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
 570:	080010bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, ip}
 574:	0800114c 	stmdaeq	r0, {r2, r3, r6, r8, ip}
 578:	0800114c 	stmdaeq	r0, {r2, r3, r6, r8, ip}
 57c:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
 580:	080011f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r8, ip}
 584:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
 588:	0800122c 	stmdaeq	r0, {r2, r3, r5, r9, ip}
 58c:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
 590:	08001274 	stmdaeq	r0, {r2, r4, r5, r6, r9, ip}
 594:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 598:	08001344 	stmdaeq	r0, {r2, r6, r8, r9, ip}
 59c:	080013c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip}
 5a0:	080013c8 	stmdaeq	r0, {r3, r6, r7, r8, r9, ip}
 5a4:	080013ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip}
 5a8:	080013ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, ip}
 5ac:	08001408 	stmdaeq	r0, {r3, sl, ip}
 5b0:	08001408 	stmdaeq	r0, {r3, sl, ip}
 5b4:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
 5b8:	08001448 	stmdaeq	r0, {r3, r6, sl, ip}
 5bc:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
 5c0:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
 5c4:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 5c8:	080017ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, r9, sl, ip}
 5cc:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
 5d0:	08001824 	stmdaeq	r0, {r2, r5, fp, ip}
 5d4:	08001880 	stmdaeq	r0, {r7, fp, ip}
 5d8:	00000001 	andeq	r0, r0, r1
 5dc:	00000001 	andeq	r0, r0, r1
	...
 5e8:	08001880 	stmdaeq	r0, {r7, fp, ip}
 5ec:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
 5f0:	080018b0 	stmdaeq	r0, {r4, r5, r7, fp, ip}
 5f4:	080018d4 	stmdaeq	r0, {r2, r4, r6, r7, fp, ip}
	...
