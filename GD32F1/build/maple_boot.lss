
build/maple_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000f0  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001804  080000f0  080000f0  000080f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         000002c8  20000000  080018f4  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000044  200002c8  08001bbc  000102c8  2**2
                  ALLOC
  4 .bss.bIntPackSOF 00000001  2000030c  08001c00  000102c8  2**0
                  ALLOC
  5 .bss.bDeviceState 00000004  20000310  08001c04  000102c8  2**2
                  ALLOC
  6 .bss.recvBuffer 00000800  20000314  08001c08  000102c8  2**2
                  ALLOC
  7 .bss.uploadBlockLen 00000002  20000b14  08002408  000102c8  2**1
                  ALLOC
  8 .bss.thisBlockLen 00000002  20000b16  0800240a  000102c8  2**1
                  ALLOC
  9 .bss.userFirmwareLen 00000004  20000b18  0800240c  000102c8  2**2
                  ALLOC
 10 .bss.userUploadType 00000001  20000b1c  08002410  000102c8  2**0
                  ALLOC
 11 .bss.dfuAppStatus 00000006  20000b1d  08002411  000102c8  2**0
                  ALLOC
 12 .bss.dfuBusy  00000001  20000b23  08002417  000102c8  2**0
                  ALLOC
 13 .bss.Data_Mul_MaxPacketSize 00000001  20000b24  08002418  000102c8  2**0
                  ALLOC
 14 ._usrstack    00000103  20000b25  08002419  000102c8  2**0
                  ALLOC
 15 .comment      00000070  00000000  00000000  000102c8  2**0
                  CONTENTS, READONLY
 16 .ARM.attributes 0000002f  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY
 17 .debug_aranges 000005d0  00000000  00000000  00010368  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_info   00004474  00000000  00000000  00010938  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 000013d4  00000000  00000000  00014dac  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   0000147c  00000000  00000000  00016180  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_frame  00000c34  00000000  00000000  000175fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_str    0000176d  00000000  00000000  00018230  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_loc    00002011  00000000  00000000  0001999d  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_ranges 00000618  00000000  00000000  0001b9b0  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .isr_vector:

08000000 <g_pfnVectors>:
 8000000:	20005000 	andcs	r5, r0, r0
 8000004:	0800016d 	stmdaeq	r0, {r0, r2, r3, r5, r6, r8}
 8000008:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800000c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000010:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000014:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000018:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
	...
 800002c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000030:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000034:	00000000 	andeq	r0, r0, r0
 8000038:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800003c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000040:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000044:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000048:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800004c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000050:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000054:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000058:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800005c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000060:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000064:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000068:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800006c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000070:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000074:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000078:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800007c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000080:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000084:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000088:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800008c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000090:	08000571 	stmdaeq	r0, {r0, r4, r5, r6, r8, sl}
 8000094:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 8000098:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 800009c:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000a0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000a4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000a8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000ac:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000b0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000b4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000b8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000bc:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000c0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000c4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000c8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000cc:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000d0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000d4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000d8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000dc:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000e0:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000e4:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000e8:	080001b5 	stmdaeq	r0, {r0, r2, r4, r5, r7, r8}
 80000ec:	f108f85f 			; <UNDEFINED> instruction: 0xf108f85f

Disassembly of section .text:

080000f0 <__WFI>:




.thumb_func
__WFE:
 80000f0:	bf30      	wfi

 80000f2:	4770      	bx	lr

080000f4 <__WFE>:




.thumb_func
__SEV:
 80000f4:	bf20      	wfe

 80000f6:	4770      	bx	lr

080000f8 <__SEV>:




.thumb_func
__ISB:
 80000f8:	bf40      	sev

 80000fa:	4770      	bx	lr

080000fc <__ISB>:




.thumb_func
__DSB:
 80000fc:	f3bf 8f6f 	isb	sy

 8000100:	4770      	bx	lr

08000102 <__DSB>:




.thumb_func
__DMB:
 8000102:	f3bf 8f4f 	dsb	sy

 8000106:	4770      	bx	lr

08000108 <__DMB>:




.thumb_func
__SVC:
 8000108:	f3bf 8f5f 	dmb	sy

 800010c:	4770      	bx	lr

0800010e <__SVC>:




.thumb_func
__MRS_CONTROL:
 800010e:	df01      	svc	1

 8000110:	4770      	bx	lr

08000112 <__MRS_CONTROL>:




.thumb_func
__MSR_CONTROL:
 8000112:	f3ef 8014 	mrs	r0, CONTROL

 8000116:	4770      	bx	lr

08000118 <__MSR_CONTROL>:




.thumb_func
__MRS_PSP:
 8000118:	f380 8814 	msr	CONTROL, r0

 800011c:	f3bf 8f6f 	isb	sy
  MRS r0, psp
 8000120:	4770      	bx	lr

08000122 <__MRS_PSP>:




.thumb_func
__MSR_PSP:
 8000122:	f3ef 8009 	mrs	r0, PSP

 8000126:	4770      	bx	lr

08000128 <__MSR_PSP>:




.thumb_func
__MRS_MSP:
 8000128:	f380 8809 	msr	PSP, r0

 800012c:	4770      	bx	lr

0800012e <__MRS_MSP>:




.thumb_func
__MSR_MSP:
 800012e:	f3ef 8008 	mrs	r0, MSP

 8000132:	4770      	bx	lr

08000134 <__MSR_MSP>:




.thumb_func
__RESETPRIMASK:
 8000134:	f380 8808 	msr	MSP, r0

 8000138:	4770      	bx	lr

0800013a <__RESETPRIMASK>:




.thumb_func
__SETPRIMASK:
 800013a:	b662      	cpsie	i

 800013c:	4770      	bx	lr

0800013e <__SETPRIMASK>:




.thumb_func
__READ_PRIMASK:
 800013e:	b672      	cpsid	i

 8000140:	4770      	bx	lr

08000142 <__READ_PRIMASK>:




.thumb_func
__RESETFAULTMASK:
 8000142:	f3ef 8010 	mrs	r0, PRIMASK

 8000146:	4770      	bx	lr

08000148 <__RESETFAULTMASK>:




.thumb_func
__SETFAULTMASK:
 8000148:	b661      	cpsie	f

 800014a:	4770      	bx	lr

0800014c <__SETFAULTMASK>:




.thumb_func
__READ_FAULTMASK:
 800014c:	b671      	cpsid	f

 800014e:	4770      	bx	lr

08000150 <__READ_FAULTMASK>:




.thumb_func
__BASEPRICONFIG:
 8000150:	f3ef 8013 	mrs	r0, FAULTMASK

 8000154:	4770      	bx	lr

08000156 <__BASEPRICONFIG>:




.thumb_func
__GetBASEPRI:
 8000156:	f380 8811 	msr	BASEPRI, r0

 800015a:	4770      	bx	lr

0800015c <__GetBASEPRI>:



.thumb_func
__REV_HalfWord:

 800015c:	f3ef 8012 	mrs	r0, BASEPRI_MAX
  REV16 r0, r0
 8000160:	4770      	bx	lr

08000162 <__REV_HalfWord>:




.thumb_func
__REV_Word:
 8000162:	ba40      	rev16	r0, r0

 8000164:	4770      	bx	lr

08000166 <__REV_Word>:
 8000166:	ba00      	rev	r0, r0
 8000168:	4770      	bx	lr
	...

0800016c <Reset_Handler>:
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800016c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800016e:	f000 b804 	b.w	800017a <LoopCopyDataInit>

08000172 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000172:	4b0b      	ldr	r3, [pc, #44]	; (80001a0 <LoopFillZerobss+0xe>)
	ldr	r3, [r3, r1]
 8000174:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000176:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000178:	3104      	adds	r1, #4

0800017a <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800017a:	480a      	ldr	r0, [pc, #40]	; (80001a4 <LoopFillZerobss+0x12>)
	ldr	r3, =_edata
 800017c:	4b0a      	ldr	r3, [pc, #40]	; (80001a8 <LoopFillZerobss+0x16>)
	adds	r2, r0, r1
 800017e:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000180:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000182:	f4ff aff6 	bcc.w	8000172 <CopyDataInit>
	ldr	r2, =_sbss
 8000186:	4a09      	ldr	r2, [pc, #36]	; (80001ac <LoopFillZerobss+0x1a>)
	b	LoopFillZerobss
 8000188:	f000 b803 	b.w	8000192 <LoopFillZerobss>

0800018c <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800018c:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800018e:	f842 3b04 	str.w	r3, [r2], #4

08000192 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000192:	4b07      	ldr	r3, [pc, #28]	; (80001b0 <LoopFillZerobss+0x1e>)
	cmp	r2, r3
 8000194:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000196:	f4ff aff9 	bcc.w	800018c <FillZerobss>
/* Call the application's entry point.*/
	bl	main
 800019a:	f000 fa43 	bl	8000624 <main>
	bx	lr
 800019e:	4770      	bx	lr
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80001a0:	080018f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip}
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001a4:	20000000 	andcs	r0, r0, r0
	ldr	r3, =_edata
 80001a8:	200002c8 	andcs	r0, r0, r8, asr #5
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80001ac:	200002c8 	andcs	r0, r0, r8, asr #5
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80001b0:	2000030c 	andcs	r0, r0, ip, lsl #6

080001b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80001b4:	f7ff bffe 	b.w	80001b4 <ADC1_2_IRQHandler>

080001b8 <nothingProc>:
    volatile RESUME_STATE eState;
    volatile u8 bESOFcnt;
} ResumeS;

/* dummy proc */
void nothingProc(void) {
 80001b8:	4770      	bx	lr

080001ba <usbStatusIn>:

    bDeviceState = ATTACHED;
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
}

void usbStatusIn(void) {
 80001ba:	4770      	bx	lr

080001bc <usbStatusOut>:
}

void usbStatusOut(void) {
 80001bc:	4770      	bx	lr

080001be <usbGetInterfaceSetting>:
}

RESULT usbGetInterfaceSetting(u8 interface, u8 altSetting) {
    /* alt setting 0 -> program RAM, alt setting 1 -> FLASH */
    if (interface > NUM_ALT_SETTINGS) {
        return USB_UNSUPPORT;
 80001be:	2803      	cmp	r0, #3
    } else {
        return USB_SUCCESS;
    }
}
 80001c0:	bf8c      	ite	hi
 80001c2:	2002      	movhi	r0, #2
 80001c4:	2000      	movls	r0, #0
 80001c6:	4770      	bx	lr

080001c8 <usbGetConfiguration>:
 * These are the USER STANDARD REQUESTS, they are handled
 * in the core but we are given these callbacks at the
 * application level
 *******************************************/

void usbGetConfiguration(void) {
 80001c8:	4770      	bx	lr
	...

080001cc <usbSetConfiguration>:
    /* nothing process */
}

void usbSetConfiguration(void) {
    if (pInformation->Current_Configuration != 0) {
 80001cc:	4b03      	ldr	r3, [pc, #12]	; (80001dc <usbSetConfiguration+0x10>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	7a9b      	ldrb	r3, [r3, #10]
 80001d2:	b113      	cbz	r3, 80001da <usbSetConfiguration+0xe>
        bDeviceState = CONFIGURED;
 80001d4:	4b02      	ldr	r3, [pc, #8]	; (80001e0 <usbSetConfiguration+0x14>)
 80001d6:	2205      	movs	r2, #5
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	4770      	bx	lr
 80001dc:	20000304 	andcs	r0, r0, r4, lsl #6
 80001e0:	20000310 	andcs	r0, r0, r0, lsl r3

080001e4 <usbGetInterface>:
    }
}

void usbGetInterface(void) {
 80001e4:	4770      	bx	lr

080001e6 <usbSetInterface>:
    /* nothing process */
}

void usbSetInterface(void) {
 80001e6:	4770      	bx	lr

080001e8 <usbGetStatus>:
    /* nothing process */
}

void usbGetStatus(void) {
 80001e8:	4770      	bx	lr

080001ea <usbClearFeature>:
    /* nothing process */
}

void usbClearFeature(void) {
 80001ea:	4770      	bx	lr

080001ec <usbSetEndpointFeature>:
    /* nothing process */
}

void usbSetEndpointFeature(void) {
 80001ec:	4770      	bx	lr

080001ee <usbSetDeviceFeature>:
    /* nothing process */
}

void usbSetDeviceFeature(void) {
 80001ee:	4770      	bx	lr

080001f0 <usbSetDeviceAddress>:
    /* nothing process */
}

void usbSetDeviceAddress(void) {
    bDeviceState = ADDRESSED;
 80001f0:	4b01      	ldr	r3, [pc, #4]	; (80001f8 <usbSetDeviceAddress+0x8>)
 80001f2:	2204      	movs	r2, #4
 80001f4:	601a      	str	r2, [r3, #0]
 80001f6:	4770      	bx	lr
 80001f8:	20000310 	andcs	r0, r0, r0, lsl r3

080001fc <usbReset>:

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
    bDeviceState = UNCONNECTED;
}

void usbReset(void) {
 80001fc:	b510      	push	{r4, lr}
    dfuUpdateByReset();
 80001fe:	f000 fc2f 	bl	8000a60 <dfuUpdateByReset>

    pInformation->Current_Configuration = 0;
 8000202:	4b21      	ldr	r3, [pc, #132]	; (8000288 <usbReset+0x8c>)
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000204:	4a21      	ldr	r2, [pc, #132]	; (800028c <usbReset+0x90>)
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	2400      	movs	r4, #0
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 800020a:	6812      	ldr	r2, [r2, #0]
}

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
 800020c:	729c      	strb	r4, [r3, #10]
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 800020e:	79d2      	ldrb	r2, [r2, #7]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);

    Clear_Status_Out(ENDP0);
 8000210:	4620      	mov	r0, r4

void usbReset(void) {
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];
 8000212:	725a      	strb	r2, [r3, #9]

    _SetBTABLE(BTABLE_ADDRESS);
 8000214:	4a1e      	ldr	r2, [pc, #120]	; (8000290 <usbReset+0x94>)

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 8000216:	4b1f      	ldr	r3, [pc, #124]	; (8000294 <usbReset+0x98>)
    dfuUpdateByReset();

    pInformation->Current_Configuration = 0;
    pInformation->Current_Feature = usbConfigDescriptorDFU.Descriptor[7];

    _SetBTABLE(BTABLE_ADDRESS);
 8000218:	6014      	str	r4, [r2, #0]

    /* setup the ctrl endpoint */
    _SetEPType(ENDP0, EP_CONTROL);
 800021a:	6819      	ldr	r1, [r3, #0]
 800021c:	f421 41ec 	bic.w	r1, r1, #30208	; 0x7600
 8000220:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8000224:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8000228:	b289      	uxth	r1, r1
 800022a:	6019      	str	r1, [r3, #0]
    _SetEPTxStatus(ENDP0, EP_TX_STALL);
 800022c:	6819      	ldr	r1, [r3, #0]
 800022e:	f421 41e0 	bic.w	r1, r1, #28672	; 0x7000
 8000232:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8000236:	b289      	uxth	r1, r1
 8000238:	f081 0110 	eor.w	r1, r1, #16
 800023c:	6019      	str	r1, [r3, #0]

    _SetEPRxAddr(ENDP0, ENDP0_RXADDR);
 800023e:	6811      	ldr	r1, [r2, #0]
 8000240:	4b15      	ldr	r3, [pc, #84]	; (8000298 <usbReset+0x9c>)
 8000242:	b289      	uxth	r1, r1
 8000244:	440b      	add	r3, r1
 8000246:	005b      	lsls	r3, r3, #1
 8000248:	2140      	movs	r1, #64	; 0x40
 800024a:	6019      	str	r1, [r3, #0]
    _SetEPTxAddr(ENDP0, ENDP0_TXADDR);
 800024c:	6813      	ldr	r3, [r2, #0]
 800024e:	2280      	movs	r2, #128	; 0x80
 8000250:	b29b      	uxth	r3, r3
 8000252:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8000256:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800025a:	005b      	lsls	r3, r3, #1
 800025c:	601a      	str	r2, [r3, #0]

    Clear_Status_Out(ENDP0);
 800025e:	f000 fddb 	bl	8000e18 <Clear_Status_Out>

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
 8000262:	4b0e      	ldr	r3, [pc, #56]	; (800029c <usbReset+0xa0>)
 8000264:	4620      	mov	r0, r4
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 800026c:	f000 fe2c 	bl	8000ec8 <SetEPRxCount>
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);
 8000270:	4620      	mov	r0, r4
 8000272:	f000 fdc2 	bl	8000dfa <SetEPRxValid>

    bDeviceState = ATTACHED;
 8000276:	4b0a      	ldr	r3, [pc, #40]	; (80002a0 <usbReset+0xa4>)
 8000278:	2201      	movs	r2, #1
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 800027a:	4620      	mov	r0, r4
}
 800027c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

    SetEPRxCount(ENDP0, pProperty->MaxPacketSize);
    //  SetEPTxCount(ENDP0, pProperty->MaxPacketSize);
    SetEPRxValid(ENDP0);

    bDeviceState = ATTACHED;
 8000280:	601a      	str	r2, [r3, #0]
    SetDeviceAddress(0); /* different than usbSetDeviceAddr! comes from usb_core */
 8000282:	f001 bac3 	b.w	800180c <SetDeviceAddress>
 8000286:	bf00      	nop
 8000288:	20000304 	andcs	r0, r0, r4, lsl #6
 800028c:	200002b8 			; <UNDEFINED> instruction: 0x200002b8
 8000290:	40005c50 	andmi	r5, r0, r0, asr ip
 8000294:	40005c00 	andmi	r5, r0, r0, lsl #24
 8000298:	20003004 	andcs	r3, r0, r4
 800029c:	200002dc 	ldrdcs	r0, [r0], -ip
 80002a0:	20000310 	andcs	r0, r0, r0, lsl r3

080002a4 <usbDataSetup>:
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 80002a4:	b538      	push	{r3, r4, r5, lr}
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 80002a6:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <usbDataSetup+0x4c>)
}

void usbStatusOut(void) {
}

RESULT usbDataSetup(u8 request) {
 80002a8:	4605      	mov	r5, r0
    u8 *(*CopyRoutine)(u16);
    CopyRoutine = NULL;

    /* handle dfu class requests */
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	461c      	mov	r4, r3
 80002ae:	7812      	ldrb	r2, [r2, #0]
 80002b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80002b4:	2a21      	cmp	r2, #33	; 0x21
 80002b6:	d119      	bne.n	80002ec <usbDataSetup+0x48>
        if (dfuUpdateByRequest()) {
 80002b8:	f000 fc68 	bl	8000b8c <dfuUpdateByRequest>
 80002bc:	b1b0      	cbz	r0, 80002ec <usbDataSetup+0x48>
            /* successfull state transition, handle the request */
            switch (request) {
 80002be:	1e68      	subs	r0, r5, #1
 80002c0:	2804      	cmp	r0, #4
 80002c2:	d813      	bhi.n	80002ec <usbDataSetup+0x48>
 80002c4:	e8df f000 	tbb	[pc, r0]
 80002c8:	12070503 	andne	r0, r7, #12582912	; 0xc00000
 80002cc:	4b090009 	blmi	82402f8 <_etext+0x23ea04>
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
                break;
            case(DFU_DNLOAD):
                CopyRoutine = dfuCopyDNLOAD;
                break;
 80002d0:	e004      	b.n	80002dc <usbDataSetup+0x38>
            case(DFU_UPLOAD):
                CopyRoutine = dfuCopyUPLOAD;
 80002d2:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <usbDataSetup+0x54>)
                break;
 80002d4:	e002      	b.n	80002dc <usbDataSetup+0x38>
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
        if (dfuUpdateByRequest()) {
            /* successfull state transition, handle the request */
            switch (request) {
            case(DFU_GETSTATUS):
                CopyRoutine = dfuCopyStatus;
 80002d6:	4b09      	ldr	r3, [pc, #36]	; (80002fc <usbDataSetup+0x58>)
 80002d8:	e000      	b.n	80002dc <usbDataSetup+0x38>
                break;
            case(DFU_GETSTATE):
                CopyRoutine = dfuCopyState;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <usbDataSetup+0x5c>)
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80002dc:	6822      	ldr	r2, [r4, #0]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 80002de:	2400      	movs	r4, #0
        (*CopyRoutine)(0);
 80002e0:	4620      	mov	r0, r4
            }
        }
    }

    if (CopyRoutine != NULL) {
        pInformation->Ctrl_Info.CopyData = CopyRoutine;
 80002e2:	6193      	str	r3, [r2, #24]
        pInformation->Ctrl_Info.Usb_wOffset = 0;
 80002e4:	8254      	strh	r4, [r2, #18]
        (*CopyRoutine)(0);
 80002e6:	4798      	blx	r3

        return USB_SUCCESS;
 80002e8:	4620      	mov	r0, r4
 80002ea:	bd38      	pop	{r3, r4, r5, pc}
    }

    return USB_UNSUPPORT;
 80002ec:	2002      	movs	r0, #2
}
 80002ee:	bd38      	pop	{r3, r4, r5, pc}
 80002f0:	20000304 	andcs	r0, r0, r4, lsl #6
 80002f4:	08000ad5 	stmdaeq	r0, {r0, r2, r4, r6, r7, r9, fp}
 80002f8:	08000afd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r9, fp}
 80002fc:	08000abd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r9, fp}
 8000300:	08000aa5 	stmdaeq	r0, {r0, r2, r5, r7, r9, fp}

08000304 <usbGetDeviceDescriptor>:
        return USB_SUCCESS;
    }
}

u8 *usbGetDeviceDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbDeviceDescriptorDFU);
 8000304:	4901      	ldr	r1, [pc, #4]	; (800030c <usbGetDeviceDescriptor+0x8>)
 8000306:	f001 b881 	b.w	800140c <Standard_GetDescriptorData>
 800030a:	bf00      	nop
 800030c:	20000144 	andcs	r0, r0, r4, asr #2

08000310 <usbGetConfigDescriptor>:
}

u8 *usbGetConfigDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbConfigDescriptorDFU);
 8000310:	4901      	ldr	r1, [pc, #4]	; (8000318 <usbGetConfigDescriptor+0x8>)
 8000312:	f001 b87b 	b.w	800140c <Standard_GetDescriptorData>
 8000316:	bf00      	nop
 8000318:	200002b8 			; <UNDEFINED> instruction: 0x200002b8

0800031c <usbGetStringDescriptor>:
}

u8 *usbGetStringDescriptor(u16 len) {
    u8 strIndex = pInformation->USBwValue0;
 800031c:	4b05      	ldr	r3, [pc, #20]	; (8000334 <usbGetStringDescriptor+0x18>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	789b      	ldrb	r3, [r3, #2]
    if (strIndex > STR_DESC_LEN) {
 8000322:	2b07      	cmp	r3, #7
 8000324:	d804      	bhi.n	8000330 <usbGetStringDescriptor+0x14>
        return NULL;
    } else {
        return Standard_GetDescriptorData(len, &usbStringDescriptor[strIndex]);
 8000326:	4904      	ldr	r1, [pc, #16]	; (8000338 <usbGetStringDescriptor+0x1c>)
 8000328:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800032c:	f001 b86e 	b.w	800140c <Standard_GetDescriptorData>
    }
}
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	20000304 	andcs	r0, r0, r4, lsl #6
 8000338:	20000094 	mulcs	r0, r4, r0

0800033c <usbGetFunctionalDescriptor>:

u8 *usbGetFunctionalDescriptor(u16 len) {
    return Standard_GetDescriptorData(len, &usbFunctionalDescriptor);
 800033c:	4901      	ldr	r1, [pc, #4]	; (8000344 <usbGetFunctionalDescriptor+0x8>)
 800033e:	f001 b865 	b.w	800140c <Standard_GetDescriptorData>
 8000342:	bf00      	nop
 8000344:	200000e0 	andcs	r0, r0, r0, ror #1

08000348 <usbNoDataSetup>:
    }

    return USB_UNSUPPORT;
}

RESULT usbNoDataSetup(u8 request) {
 8000348:	b508      	push	{r3, lr}
    if ((pInformation->USBbmRequestType & (REQUEST_TYPE | RECIPIENT)) == (CLASS_REQUEST | INTERFACE_RECIPIENT)) {
 800034a:	4b08      	ldr	r3, [pc, #32]	; (800036c <usbNoDataSetup+0x24>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000354:	2b21      	cmp	r3, #33	; 0x21
 8000356:	d106      	bne.n	8000366 <usbNoDataSetup+0x1e>
        /* todo, keep track of the destination interface, often stored in wIndex */
        if (dfuUpdateByRequest()) {
 8000358:	f000 fc18 	bl	8000b8c <dfuUpdateByRequest>
 800035c:	2800      	cmp	r0, #0
            return USB_SUCCESS;
 800035e:	bf0c      	ite	eq
 8000360:	2002      	moveq	r0, #2
 8000362:	2000      	movne	r0, #0
 8000364:	bd08      	pop	{r3, pc}
        }
    }
    return USB_UNSUPPORT;
 8000366:	2002      	movs	r0, #2
}
 8000368:	bd08      	pop	{r3, pc}
 800036a:	bf00      	nop
 800036c:	20000304 	andcs	r0, r0, r4, lsl #6

08000370 <setupUSB>:


extern u8 u8_usbConfigDescriptorDFU[];
extern u8 u8_usbFunctionalDescriptor[];

void setupUSB (void) {
 8000370:	b537      	push	{r0, r1, r2, r4, r5, lr}

/* Generic boards don't have disconnect hardware, so we drive PA12 which is connected to the usb D+ line*/
#define USB_DISC_BANK         GPIOA
#define USB_DISC              12

  SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC),
 8000372:	4c18      	ldr	r4, [pc, #96]	; (80003d4 <setupUSB+0x64>)
 8000374:	200c      	movs	r0, #12
 8000376:	6825      	ldr	r5, [r4, #0]
 8000378:	f000 fb26 	bl	80009c8 <crMask>
 800037c:	4028      	ands	r0, r5
 800037e:	f440 3580 	orr.w	r5, r0, #65536	; 0x10000
 8000382:	6025      	str	r5, [r4, #0]
          (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC)) & crMask(USB_DISC)) | CR_OUTPUT_PP << CR_SHITF(USB_DISC));

  gpio_write_bit(USB_DISC_BANK,USB_DISC,0);  /* present ourselves to the host */
 8000384:	4814      	ldr	r0, [pc, #80]	; (80003d8 <setupUSB+0x68>)
 8000386:	210c      	movs	r1, #12
 8000388:	2200      	movs	r2, #0
 800038a:	f000 f9a7 	bl	80006dc <gpio_write_bit>
  
  volatile unsigned int delay;
  for(delay = 0;delay<256;delay++);
 800038e:	2300      	movs	r3, #0
 8000390:	9301      	str	r3, [sp, #4]
 8000392:	9b01      	ldr	r3, [sp, #4]
 8000394:	2bff      	cmp	r3, #255	; 0xff
 8000396:	d802      	bhi.n	800039e <setupUSB+0x2e>
 8000398:	9b01      	ldr	r3, [sp, #4]
 800039a:	3301      	adds	r3, #1
 800039c:	e7f8      	b.n	8000390 <setupUSB+0x20>

  //  volatile unsigned x = 1024; do { ; }while(--x);// wait a moment
  /* turn on the USB clock */
   SET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC),
 800039e:	200c      	movs	r0, #12
 80003a0:	6825      	ldr	r5, [r4, #0]
 80003a2:	f000 fb11 	bl	80009c8 <crMask>
 80003a6:	4028      	ands	r0, r5
 80003a8:	f440 2580 	orr.w	r5, r0, #262144	; 0x40000
 80003ac:	6025      	str	r5, [r4, #0]
          (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC)) & crMask(USB_DISC)) | CR_INPUT << CR_SHITF(USB_DISC)); //Sets the PA12 as floating input
 //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif  
  /* initialize the usb application */
  
  wTransferSize=getFlashPageSize();
 80003ae:	f000 fb1d 	bl	80009ec <getFlashPageSize>
 80003b2:	4b0a      	ldr	r3, [pc, #40]	; (80003dc <setupUSB+0x6c>)
  u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 80003b4:	b2c2      	uxtb	r2, r0
          (GET_REG(GPIO_CR(USB_DISC_BANK,USB_DISC)) & crMask(USB_DISC)) | CR_INPUT << CR_SHITF(USB_DISC)); //Sets the PA12 as floating input
 //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif  
  /* initialize the usb application */
  
  wTransferSize=getFlashPageSize();
 80003b6:	6018      	str	r0, [r3, #0]
  u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <setupUSB+0x70>)
  u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 80003ba:	f3c0 2007 	ubfx	r0, r0, #8, #8
 //  pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
#endif  
  /* initialize the usb application */
  
  wTransferSize=getFlashPageSize();
  u8_usbConfigDescriptorDFU[41]=(wTransferSize & 0x00FF);
 80003be:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8_usbConfigDescriptorDFU[42]=(wTransferSize & 0xFF00)>>8;
 80003c2:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
  
  u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
 80003c6:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <setupUSB+0x74>)
 80003c8:	715a      	strb	r2, [r3, #5]
  u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;  
 80003ca:	7198      	strb	r0, [r3, #6]

/* Function Definitions */
void usbAppInit(void) {
    /* hook in to usb_core, depends on all those damn
       non encapsulated externs! */
    USB_Init();
 80003cc:	f000 fe46 	bl	800105c <USB_Init>
  u8_usbFunctionalDescriptor[5]=(wTransferSize & 0x00FF);
  u8_usbFunctionalDescriptor[6]=(wTransferSize & 0xFF00)>>8;  
  
  usbAppInit();

}
 80003d0:	b003      	add	sp, #12
 80003d2:	bd30      	pop	{r4, r5, pc}
 80003d4:	40010804 	andmi	r0, r1, r4, lsl #16
 80003d8:	40010800 	andmi	r0, r1, r0, lsl #16
 80003dc:	200002c8 	andcs	r0, r0, r8, asr #5
 80003e0:	200000ec 	andcs	r0, r0, ip, ror #1
 80003e4:	20000129 	andcs	r0, r0, r9, lsr #2

080003e8 <usbSuspend>:
    USB_Init();
}

void usbSuspend(void) {
    u16 wCNTR;
    wCNTR = _GetCNTR();
 80003e8:	4b04      	ldr	r3, [pc, #16]	; (80003fc <usbSuspend+0x14>)
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	b292      	uxth	r2, r2
    wCNTR |= CNTR_FSUSP | CNTR_LPMODE;
    _SetCNTR(wCNTR);
 80003ee:	f042 020c 	orr.w	r2, r2, #12
 80003f2:	601a      	str	r2, [r3, #0]

    /* run any power reduction handlers */
    bDeviceState = SUSPENDED;
 80003f4:	4b02      	ldr	r3, [pc, #8]	; (8000400 <usbSuspend+0x18>)
 80003f6:	2203      	movs	r2, #3
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	4770      	bx	lr
 80003fc:	40005c40 	andmi	r5, r0, r0, asr #24
 8000400:	20000310 	andcs	r0, r0, r0, lsl r3

08000404 <usbResumeInit>:
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 8000404:	4b04      	ldr	r3, [pc, #16]	; (8000418 <usbResumeInit+0x14>)
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 8000406:	f64f 72fb 	movw	r2, #65531	; 0xfffb
void usbResumeInit(void) {
    u16 wCNTR;

    /* restart any clocks that had been stopped */

    wCNTR = _GetCNTR();
 800040a:	6819      	ldr	r1, [r3, #0]
    wCNTR &= (~CNTR_LPMODE);
    _SetCNTR(wCNTR);
 800040c:	400a      	ands	r2, r1
 800040e:	601a      	str	r2, [r3, #0]

    /* undo power reduction handlers here */

    _SetCNTR(ISR_MSK);
 8000410:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	4770      	bx	lr
 8000418:	40005c40 	andmi	r5, r0, r0, asr #24

0800041c <usbResume>:
}

void usbResume(RESUME_STATE eResumeSetVal) {
 800041c:	b510      	push	{r4, lr}
 800041e:	4c1e      	ldr	r4, [pc, #120]	; (8000498 <usbResume+0x7c>)
    u16 wCNTR;

    if (eResumeSetVal != RESUME_ESOF)
 8000420:	2807      	cmp	r0, #7
        ResumeS.eState = eResumeSetVal;
 8000422:	bf18      	it	ne
 8000424:	7020      	strbne	r0, [r4, #0]

    switch (ResumeS.eState) {
 8000426:	7823      	ldrb	r3, [r4, #0]
 8000428:	2b05      	cmp	r3, #5
 800042a:	d832      	bhi.n	8000492 <usbResume+0x76>
 800042c:	e8df f003 	tbb	[pc, r3]
 8000430:	0e0a0603 	cfmadd32eq	mvax0, mvfx0, mvfx10, mvfx3
 8000434:	f7ff2116 			; <UNDEFINED> instruction: 0xf7ff2116
    case RESUME_EXTERNAL:
        usbResumeInit();
 8000438:	ffe5 e02a 	vaddl.u32	q15, d5, d26
        ResumeS.eState = RESUME_OFF;
        break;
    case RESUME_INTERNAL:
        usbResumeInit();
 800043c:	f7ff ffe2 	bl	8000404 <usbResumeInit>
        ResumeS.eState = RESUME_START;
 8000440:	2304      	movs	r3, #4
 8000442:	e027      	b.n	8000494 <usbResume+0x78>
        break;
    case RESUME_LATER:
        ResumeS.bESOFcnt = 2;
 8000444:	2302      	movs	r3, #2
 8000446:	7063      	strb	r3, [r4, #1]
        ResumeS.eState = RESUME_WAIT;
 8000448:	2303      	movs	r3, #3
 800044a:	e023      	b.n	8000494 <usbResume+0x78>
        break;
    case RESUME_WAIT:
        ResumeS.bESOFcnt--;
 800044c:	7863      	ldrb	r3, [r4, #1]
 800044e:	3b01      	subs	r3, #1
 8000450:	b2db      	uxtb	r3, r3
 8000452:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0)
 8000454:	7863      	ldrb	r3, [r4, #1]
 8000456:	b9f3      	cbnz	r3, 8000496 <usbResume+0x7a>
            ResumeS.eState = RESUME_START;
 8000458:	2204      	movs	r2, #4
 800045a:	e017      	b.n	800048c <usbResume+0x70>
        break;
    case RESUME_START:
        wCNTR = _GetCNTR();
 800045c:	4b0f      	ldr	r3, [pc, #60]	; (800049c <usbResume+0x80>)
 800045e:	681a      	ldr	r2, [r3, #0]
 8000460:	b292      	uxth	r2, r2
        wCNTR |= CNTR_RESUME;
        _SetCNTR(wCNTR);
 8000462:	f042 0210 	orr.w	r2, r2, #16
 8000466:	601a      	str	r2, [r3, #0]
        ResumeS.eState = RESUME_ON;
 8000468:	2305      	movs	r3, #5
 800046a:	7023      	strb	r3, [r4, #0]
        ResumeS.bESOFcnt = 10;
 800046c:	230a      	movs	r3, #10
 800046e:	7063      	strb	r3, [r4, #1]
        break;
 8000470:	bd10      	pop	{r4, pc}
    case RESUME_ON:
        ResumeS.bESOFcnt--;
 8000472:	7863      	ldrb	r3, [r4, #1]
 8000474:	3b01      	subs	r3, #1
 8000476:	b2db      	uxtb	r3, r3
 8000478:	7063      	strb	r3, [r4, #1]
        if (ResumeS.bESOFcnt == 0) {
 800047a:	7863      	ldrb	r3, [r4, #1]
 800047c:	b95b      	cbnz	r3, 8000496 <usbResume+0x7a>
            wCNTR = _GetCNTR();
 800047e:	4a07      	ldr	r2, [pc, #28]	; (800049c <usbResume+0x80>)
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000480:	f64f 73ef 	movw	r3, #65519	; 0xffef
        ResumeS.bESOFcnt = 10;
        break;
    case RESUME_ON:
        ResumeS.bESOFcnt--;
        if (ResumeS.bESOFcnt == 0) {
            wCNTR = _GetCNTR();
 8000484:	6811      	ldr	r1, [r2, #0]
            wCNTR &= (~CNTR_RESUME);
            _SetCNTR(wCNTR);
 8000486:	400b      	ands	r3, r1
 8000488:	6013      	str	r3, [r2, #0]
            ResumeS.eState = RESUME_OFF;
 800048a:	2206      	movs	r2, #6
 800048c:	4b02      	ldr	r3, [pc, #8]	; (8000498 <usbResume+0x7c>)
 800048e:	701a      	strb	r2, [r3, #0]
 8000490:	bd10      	pop	{r4, pc}
        }
        break;
    case RESUME_OFF:
    case RESUME_ESOF:
    default:
        ResumeS.eState = RESUME_OFF;
 8000492:	2306      	movs	r3, #6
 8000494:	7023      	strb	r3, [r4, #0]
 8000496:	bd10      	pop	{r4, pc}
 8000498:	200002ce 	andcs	r0, r0, lr, asr #5
 800049c:	40005c40 	andmi	r5, r0, r0, asr #24

080004a0 <usbPowerOn>:

RESULT usbPowerOn(void) {
    u16 wRegVal;

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <usbPowerOn+0x1c>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	601a      	str	r2, [r3, #0]

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
    _SetISTR(0);
 80004a6:	4a06      	ldr	r2, [pc, #24]	; (80004c0 <usbPowerOn+0x20>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 80004a8:	2000      	movs	r0, #0
    _SetISTR(0);
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 80004aa:	4906      	ldr	r1, [pc, #24]	; (80004c4 <usbPowerOn+0x24>)

    wRegVal = CNTR_FRES;
    _SetCNTR(wRegVal);

    wInterrupt_Mask = 0;
    _SetCNTR(wInterrupt_Mask);
 80004ac:	6018      	str	r0, [r3, #0]
    _SetISTR(0);
 80004ae:	6010      	str	r0, [r2, #0]
    wInterrupt_Mask = CNTR_RESETM | CNTR_SUSPM | CNTR_WKUPM; /* the bare minimum */
 80004b0:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 80004b4:	800a      	strh	r2, [r1, #0]
    _SetCNTR(wInterrupt_Mask);
 80004b6:	601a      	str	r2, [r3, #0]

    return USB_SUCCESS;
}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40005c40 	andmi	r5, r0, r0, asr #24
 80004c0:	40005c44 	andmi	r5, r0, r4, asr #24
 80004c4:	20000308 	andcs	r0, r0, r8, lsl #6

080004c8 <usbPowerOff>:

RESULT usbPowerOff(void) {
    _SetCNTR(CNTR_FRES);
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <usbPowerOff+0x14>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	601a      	str	r2, [r3, #0]
    _SetISTR(0);
 80004ce:	4a04      	ldr	r2, [pc, #16]	; (80004e0 <usbPowerOff+0x18>)
 80004d0:	2000      	movs	r0, #0
 80004d2:	6010      	str	r0, [r2, #0]
    _SetCNTR(CNTR_FRES + CNTR_PDWN);
 80004d4:	2203      	movs	r2, #3
 80004d6:	601a      	str	r2, [r3, #0]
       usb peripheral. we have no disabled the clocks,
       pulled the usb_disc pin back up, or reset the
       application state machines */

    return USB_SUCCESS;
}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40005c40 	andmi	r5, r0, r0, asr #24
 80004e0:	40005c44 	andmi	r5, r0, r4, asr #24

080004e4 <usbDsbBus>:



void usbDsbBus(void) {
// setPin(USB_DISC_BANK,USB_DISC);
usbPowerOff();
 80004e4:	f7ff bff0 	b.w	80004c8 <usbPowerOff>

080004e8 <usbEnbISR>:
    bDeviceState = ADDRESSED;
}
/***** end of USER STANDARD REQUESTS *****/


void usbEnbISR(void) {
 80004e8:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 80004ea:	2314      	movs	r3, #20
 80004ec:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 80004f6:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
 80004fa:	a801      	add	r0, sp, #4


    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
 80004fc:	2301      	movs	r3, #1
 80004fe:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 8000502:	f000 f9a7 	bl	8000854 <nvicInit>
}
 8000506:	b003      	add	sp, #12
 8000508:	f85d fb04 	ldr.w	pc, [sp], #4

0800050c <usbInit>:
       application state machines */

    return USB_SUCCESS;
}

void usbInit(void) {
 800050c:	b510      	push	{r4, lr}
    dfuInit();
 800050e:	f000 fa79 	bl	8000a04 <dfuInit>

    pInformation->Current_Configuration = 0;
 8000512:	4b09      	ldr	r3, [pc, #36]	; (8000538 <usbInit+0x2c>)
 8000514:	2400      	movs	r4, #0
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	729c      	strb	r4, [r3, #10]
    usbPowerOn();
 800051a:	f7ff ffc1 	bl	80004a0 <usbPowerOn>

    _SetISTR(0);
 800051e:	4b07      	ldr	r3, [pc, #28]	; (800053c <usbInit+0x30>)
    wInterrupt_Mask = ISR_MSK;
 8000520:	4a07      	ldr	r2, [pc, #28]	; (8000540 <usbInit+0x34>)
    dfuInit();

    pInformation->Current_Configuration = 0;
    usbPowerOn();

    _SetISTR(0);
 8000522:	601c      	str	r4, [r3, #0]
    wInterrupt_Mask = ISR_MSK;
 8000524:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8000528:	8013      	strh	r3, [r2, #0]
    _SetCNTR(wInterrupt_Mask);
 800052a:	4a06      	ldr	r2, [pc, #24]	; (8000544 <usbInit+0x38>)
 800052c:	6013      	str	r3, [r2, #0]

    usbEnbISR(); /* configure the cortex M3 private peripheral NVIC */
 800052e:	f7ff ffdb 	bl	80004e8 <usbEnbISR>
    bDeviceState = UNCONNECTED;
 8000532:	4b05      	ldr	r3, [pc, #20]	; (8000548 <usbInit+0x3c>)
 8000534:	601c      	str	r4, [r3, #0]
 8000536:	bd10      	pop	{r4, pc}
 8000538:	20000304 	andcs	r0, r0, r4, lsl #6
 800053c:	40005c44 	andmi	r5, r0, r4, asr #24
 8000540:	20000308 	andcs	r0, r0, r8, lsl #6
 8000544:	40005c40 	andmi	r5, r0, r0, asr #24
 8000548:	20000310 	andcs	r0, r0, r0, lsl r3

0800054c <usbDsbISR>:
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = TRUE;
    nvicInit(&NVIC_InitStructure);
}

void usbDsbISR(void) {
 800054c:	b507      	push	{r0, r1, r2, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
 800054e:	2314      	movs	r3, #20
 8000550:	f88d 3004 	strb.w	r3, [sp, #4]
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
 8000554:	a801      	add	r0, sp, #4
}

void usbDsbISR(void) {
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = USB_LP_IRQ;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8000556:	2300      	movs	r3, #0
 8000558:	f88d 3005 	strb.w	r3, [sp, #5]
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800055c:	f88d 3006 	strb.w	r3, [sp, #6]
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
 8000560:	f88d 3007 	strb.w	r3, [sp, #7]
    nvicInit(&NVIC_InitStructure);
 8000564:	f000 f976 	bl	8000854 <nvicInit>
}
 8000568:	b003      	add	sp, #12
 800056a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08000570 <USB_LP_CAN1_RX0_IRQHandler>:

void USB_LP_CAN1_RX0_IRQHandler(void) {
 8000570:	b570      	push	{r4, r5, r6, lr}
    wIstr = _GetISTR();
 8000572:	4d27      	ldr	r5, [pc, #156]	; (8000610 <USB_LP_CAN1_RX0_IRQHandler+0xa0>)
 8000574:	4c27      	ldr	r4, [pc, #156]	; (8000614 <USB_LP_CAN1_RX0_IRQHandler+0xa4>)
 8000576:	682b      	ldr	r3, [r5, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 8000578:	4e27      	ldr	r6, [pc, #156]	; (8000618 <USB_LP_CAN1_RX0_IRQHandler+0xa8>)
    NVIC_InitStructure.NVIC_IRQChannelCmd = FALSE;
    nvicInit(&NVIC_InitStructure);
}

void USB_LP_CAN1_RX0_IRQHandler(void) {
    wIstr = _GetISTR();
 800057a:	b29b      	uxth	r3, r3
 800057c:	8023      	strh	r3, [r4, #0]

    /* go nuts with the preproc switches since this is an ISTR and must be FAST */
#if (ISR_MSK & ISTR_RESET)
    if (wIstr & ISTR_RESET & wInterrupt_Mask) {
 800057e:	8822      	ldrh	r2, [r4, #0]
 8000580:	8833      	ldrh	r3, [r6, #0]
 8000582:	4013      	ands	r3, r2
 8000584:	0559      	lsls	r1, r3, #21
 8000586:	d505      	bpl.n	8000594 <USB_LP_CAN1_RX0_IRQHandler+0x24>
        _SetISTR((u16)CLR_RESET);
 8000588:	f64f 33ff 	movw	r3, #64511	; 0xfbff
 800058c:	602b      	str	r3, [r5, #0]
        Device_Property.Reset();
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <USB_LP_CAN1_RX0_IRQHandler+0xac>)
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	4798      	blx	r3
    }
#endif


#if (ISR_MSK & ISTR_ERR)
    if (wIstr & ISTR_ERR & wInterrupt_Mask) {
 8000594:	8822      	ldrh	r2, [r4, #0]
 8000596:	8833      	ldrh	r3, [r6, #0]
 8000598:	401a      	ands	r2, r3
 800059a:	0492      	lsls	r2, r2, #18
        _SetISTR((u16)CLR_ERR);
 800059c:	bf44      	itt	mi
 800059e:	f64d 72ff 	movwmi	r2, #57343	; 0xdfff
 80005a2:	602a      	strmi	r2, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_WKUP)
    if (wIstr & ISTR_WKUP & wInterrupt_Mask) {
 80005a4:	8822      	ldrh	r2, [r4, #0]
 80005a6:	4013      	ands	r3, r2
 80005a8:	04db      	lsls	r3, r3, #19
 80005aa:	d505      	bpl.n	80005b8 <USB_LP_CAN1_RX0_IRQHandler+0x48>
        _SetISTR((u16)CLR_WKUP);
 80005ac:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80005b0:	602b      	str	r3, [r5, #0]
        usbResume(RESUME_EXTERNAL);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f7ff ff32 	bl	800041c <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_SUSP)
    if (wIstr & ISTR_SUSP & wInterrupt_Mask) {
 80005b8:	8822      	ldrh	r2, [r4, #0]
 80005ba:	8833      	ldrh	r3, [r6, #0]
 80005bc:	4013      	ands	r3, r2
 80005be:	0518      	lsls	r0, r3, #20
 80005c0:	d504      	bpl.n	80005cc <USB_LP_CAN1_RX0_IRQHandler+0x5c>

        /* check if SUSPEND is possible */
        if (F_SUSPEND_ENABLED) {
            usbSuspend();
 80005c2:	f7ff ff11 	bl	80003e8 <usbSuspend>
        } else {
            /* if not possible then resume after xx ms */
            usbResume(RESUME_LATER);
        }
        /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
        _SetISTR((u16)CLR_SUSP);
 80005c6:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 80005ca:	602b      	str	r3, [r5, #0]
    }
#endif


#if (ISR_MSK & ISTR_SOF)
    if (wIstr & ISTR_SOF & wInterrupt_Mask) {
 80005cc:	8822      	ldrh	r2, [r4, #0]
 80005ce:	8833      	ldrh	r3, [r6, #0]
 80005d0:	401a      	ands	r2, r3
 80005d2:	0591      	lsls	r1, r2, #22
 80005d4:	d507      	bpl.n	80005e6 <USB_LP_CAN1_RX0_IRQHandler+0x76>
        _SetISTR((u16)CLR_SOF);
 80005d6:	f64f 52ff 	movw	r2, #65023	; 0xfdff
 80005da:	602a      	str	r2, [r5, #0]
        bIntPackSOF++;
 80005dc:	4a10      	ldr	r2, [pc, #64]	; (8000620 <USB_LP_CAN1_RX0_IRQHandler+0xb0>)
 80005de:	7811      	ldrb	r1, [r2, #0]
 80005e0:	3101      	adds	r1, #1
 80005e2:	b2c9      	uxtb	r1, r1
 80005e4:	7011      	strb	r1, [r2, #0]
    }
#endif


#if (ISR_MSK & ISTR_ESOF)
    if (wIstr & ISTR_ESOF & wInterrupt_Mask) {
 80005e6:	8822      	ldrh	r2, [r4, #0]
 80005e8:	4013      	ands	r3, r2
 80005ea:	05da      	lsls	r2, r3, #23
 80005ec:	d505      	bpl.n	80005fa <USB_LP_CAN1_RX0_IRQHandler+0x8a>
        _SetISTR((u16)CLR_ESOF);
 80005ee:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 80005f2:	602b      	str	r3, [r5, #0]
        /* resume handling timing is made with ESOFs */
        usbResume(RESUME_ESOF); /* request without change of the machine state */
 80005f4:	2007      	movs	r0, #7
 80005f6:	f7ff ff11 	bl	800041c <usbResume>
    }
#endif

    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
 80005fa:	8822      	ldrh	r2, [r4, #0]
 80005fc:	8833      	ldrh	r3, [r6, #0]
 80005fe:	4013      	ands	r3, r2
 8000600:	041b      	lsls	r3, r3, #16
 8000602:	d503      	bpl.n	800060c <USB_LP_CAN1_RX0_IRQHandler+0x9c>
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
    }
#endif

}
 8000604:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    /*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*/
#if (ISR_MSK & ISTR_CTR)
    if (wIstr & ISTR_CTR & wInterrupt_Mask) {
        /* servicing of the endpoint correct transfer interrupt */
        /* clear of the CTR flag into the sub */
        CTR_LP(); /* low priority ISR defined in the usb core lib */
 8000608:	f000 bc7e 	b.w	8000f08 <CTR_LP>
 800060c:	bd70      	pop	{r4, r5, r6, pc}
 800060e:	bf00      	nop
 8000610:	40005c44 	andmi	r5, r0, r4, asr #24
 8000614:	200002cc 	andcs	r0, r0, ip, asr #5
 8000618:	20000308 	andcs	r0, r0, r8, lsl #6
 800061c:	20000000 	andcs	r0, r0, r0
 8000620:	2000030c 	andcs	r0, r0, ip, lsl #6

08000624 <main>:
#include "common.h"
#include "dfu.h"
extern volatile dfuUploadTypes_t userUploadType;

int main() 
{
 8000624:	b537      	push	{r0, r1, r2, r4, r5, lr}
    systemReset(); // peripherals but not PC
 8000626:	f000 f895 	bl	8000754 <systemReset>
    setupCLK();
 800062a:	f000 f8b7 	bl	800079c <setupCLK>
    setupLEDAndButton();
 800062e:	f000 f8e5 	bl	80007fc <setupLEDAndButton>
    setupUSB();
 8000632:	f7ff fe9d 	bl	8000370 <setupUSB>
    setupFLASH();
 8000636:	f000 f8f5 	bl	8000824 <setupFLASH>
	

	strobePin(LED_BANK, LED_PIN, STARTUP_BLINKS, BLINK_FAST,LED_ON_STATE);
 800063a:	2300      	movs	r3, #0
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	4824      	ldr	r0, [pc, #144]	; (80006d0 <main+0xac>)
 8000640:	210d      	movs	r1, #13
 8000642:	2205      	movs	r2, #5
 8000644:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000648:	f000 f85c 	bl	8000704 <strobePin>


	/* wait for host to upload program or halt bootloader */
	bool no_user_jump = (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000)) || readButtonState() ;
 800064c:	4821      	ldr	r0, [pc, #132]	; (80006d4 <main+0xb0>)
 800064e:	f000 f8f7 	bl	8000840 <checkUserCode>
 8000652:	b128      	cbz	r0, 8000660 <main+0x3c>
 8000654:	f000 f84e 	bl	80006f4 <readButtonState>
 8000658:	3000      	adds	r0, #0
 800065a:	bf18      	it	ne
 800065c:	2001      	movne	r0, #1
 800065e:	e005      	b.n	800066c <main+0x48>
 8000660:	481d      	ldr	r0, [pc, #116]	; (80006d8 <main+0xb4>)
 8000662:	f000 f8ed 	bl	8000840 <checkUserCode>
 8000666:	2800      	cmp	r0, #0
 8000668:	d1f4      	bne.n	8000654 <main+0x30>
 800066a:	2001      	movs	r0, #1
 800066c:	b2c5      	uxtb	r5, r0
	
	int delay_count = 0;

    while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 800066e:	2400      	movs	r4, #0
 8000670:	2c05      	cmp	r4, #5
 8000672:	dc0f      	bgt.n	8000694 <main+0x70>
	{

        strobePin(LED_BANK, LED_PIN, 1, BLINK_SLOW,LED_ON_STATE);
 8000674:	2300      	movs	r3, #0
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	4815      	ldr	r0, [pc, #84]	; (80006d0 <main+0xac>)
 800067a:	210d      	movs	r1, #13
 800067c:	2201      	movs	r2, #1
 800067e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000682:	f000 f83f 	bl	8000704 <strobePin>

        if (dfuUploadStarted()) 
 8000686:	f000 fb9b 	bl	8000dc0 <dfuUploadStarted>
 800068a:	b108      	cbz	r0, 8000690 <main+0x6c>
		{
            dfuFinishUpload(); // systemHardReset from DFU once done
 800068c:	f000 fb9e 	bl	8000dcc <dfuFinishUpload>
 8000690:	3401      	adds	r4, #1
 8000692:	e7ed      	b.n	8000670 <main+0x4c>
	/* wait for host to upload program or halt bootloader */
	bool no_user_jump = (!checkUserCode(USER_CODE_FLASH0X8005000) && !checkUserCode(USER_CODE_FLASH0X8002000)) || readButtonState() ;
	
	int delay_count = 0;

    while ((delay_count++ < BOOTLOADER_WAIT) || no_user_jump)
 8000694:	2d00      	cmp	r5, #0
 8000696:	d1ed      	bne.n	8000674 <main+0x50>
            dfuFinishUpload(); // systemHardReset from DFU once done
        }
    }


	if (checkUserCode(USER_CODE_FLASH0X8002000)) 
 8000698:	480f      	ldr	r0, [pc, #60]	; (80006d8 <main+0xb4>)
 800069a:	f000 f8d1 	bl	8000840 <checkUserCode>
 800069e:	b108      	cbz	r0, 80006a4 <main+0x80>
	{
		jumpToUser(USER_CODE_FLASH0X8002000);
 80006a0:	480d      	ldr	r0, [pc, #52]	; (80006d8 <main+0xb4>)
 80006a2:	e004      	b.n	80006ae <main+0x8a>
	} 
	else 
	{
		if (checkUserCode(USER_CODE_FLASH0X8005000))
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <main+0xb0>)
 80006a6:	f000 f8cb 	bl	8000840 <checkUserCode>
 80006aa:	b118      	cbz	r0, 80006b4 <main+0x90>
		{
			jumpToUser(USER_CODE_FLASH0X8005000);
 80006ac:	4809      	ldr	r0, [pc, #36]	; (80006d4 <main+0xb0>)
 80006ae:	f000 f919 	bl	80008e4 <jumpToUser>
 80006b2:	e009      	b.n	80006c8 <main+0xa4>
		} 
		else
		{
			// Nothing to execute in either Flash or RAM
			strobePin(LED_BANK, LED_PIN, 5, BLINK_FAST,LED_ON_STATE);
 80006b4:	4806      	ldr	r0, [pc, #24]	; (80006d0 <main+0xac>)
 80006b6:	210d      	movs	r1, #13
 80006b8:	2205      	movs	r2, #5
 80006ba:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006be:	9500      	str	r5, [sp, #0]
 80006c0:	f000 f820 	bl	8000704 <strobePin>
			systemHardReset();
 80006c4:	f000 f924 	bl	8000910 <systemHardReset>
		}
	}

	return 0;// Added to please the compiler
 80006c8:	2000      	movs	r0, #0
 80006ca:	b003      	add	sp, #12
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	bf00      	nop
 80006d0:	40011000 	andmi	r1, r1, r0
 80006d4:	08005000 	stmdaeq	r0, {ip, lr}
 80006d8:	08002000 	stmdaeq	r0, {sp}

080006dc <gpio_write_bit>:
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80006dc:	2301      	movs	r3, #1
 80006de:	fa03 f101 	lsl.w	r1, r3, r1
    u32 pinMask = 0x1 << (16 + pin);
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
 80006e2:	f1d2 0201 	rsbs	r2, r2, #1
 80006e6:	bf38      	it	cc
 80006e8:	2200      	movcc	r2, #0
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 80006ea:	0113      	lsls	r3, r2, #4
 80006ec:	4099      	lsls	r1, r3
 80006ee:	6101      	str	r1, [r0, #16]
 80006f0:	4770      	bx	lr
	...

080006f4 <readButtonState>:

bool readButtonState() {
    // todo, implement read
	bool state=FALSE;
 #if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)	
    if (GET_REG(GPIO_IDR(BUTTON_BANK)) & (0x01 << BUTTON_PIN)) 
 80006f4:	4b02      	ldr	r3, [pc, #8]	; (8000700 <readButtonState+0xc>)
 80006f6:	6818      	ldr	r0, [r3, #0]
	{
		state=!state;
	}
#endif
	return state;
}
 80006f8:	f3c0 3080 	ubfx	r0, r0, #14, #1
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40011008 	andmi	r1, r1, r8

08000704 <strobePin>:

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 8000704:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000708:	f89d a020 	ldrb.w	sl, [sp, #32]
 800070c:	4614      	mov	r4, r2
    gpio_write_bit( bank,pin,1-onState);
 800070e:	f1ca 0701 	rsb	r7, sl, #1
 8000712:	b2ff      	uxtb	r7, r7
 8000714:	463a      	mov	r2, r7
#endif
	return state;
}

void strobePin(u32 bank, u8 pin, u8 count, u32 rate,u8 onState) 
{
 8000716:	4680      	mov	r8, r0
 8000718:	4689      	mov	r9, r1
 800071a:	461e      	mov	r6, r3
    gpio_write_bit( bank,pin,1-onState);
 800071c:	f7ff ffde 	bl	80006dc <gpio_write_bit>

    u32 c;
    while (count-- > 0) 
 8000720:	b1b4      	cbz	r4, 8000750 <strobePin+0x4c>
 8000722:	4635      	mov	r5, r6
	{
        for (c = rate; c > 0; c--)
 8000724:	b115      	cbz	r5, 800072c <strobePin+0x28>
		{
            asm volatile("nop");
 8000726:	bf00      	nop
    gpio_write_bit( bank,pin,1-onState);

    u32 c;
    while (count-- > 0) 
	{
        for (c = rate; c > 0; c--)
 8000728:	3d01      	subs	r5, #1
 800072a:	e7fb      	b.n	8000724 <strobePin+0x20>
		{
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
 800072c:	4640      	mov	r0, r8
 800072e:	4649      	mov	r1, r9
 8000730:	4652      	mov	r2, sl
 8000732:	f7ff ffd3 	bl	80006dc <gpio_write_bit>
		
        for (c = rate; c > 0; c--)
 8000736:	4635      	mov	r5, r6
 8000738:	b115      	cbz	r5, 8000740 <strobePin+0x3c>
		{
            asm volatile("nop");
 800073a:	bf00      	nop
            asm volatile("nop");
        }
		
        gpio_write_bit( bank,pin,onState);
		
        for (c = rate; c > 0; c--)
 800073c:	3d01      	subs	r5, #1
 800073e:	e7fb      	b.n	8000738 <strobePin+0x34>
		{
            asm volatile("nop");
        }
        gpio_write_bit( bank,pin,1-onState);
 8000740:	4640      	mov	r0, r8
 8000742:	4649      	mov	r1, r9
 8000744:	463a      	mov	r2, r7
 8000746:	3c01      	subs	r4, #1
 8000748:	f7ff ffc8 	bl	80006dc <gpio_write_bit>
 800074c:	b2e4      	uxtb	r4, r4
 800074e:	e7e7      	b.n	8000720 <strobePin+0x1c>
 8000750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08000754 <systemReset>:
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <systemReset+0x38>)
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8000756:	490e      	ldr	r1, [pc, #56]	; (8000790 <systemReset+0x3c>)
        gpio_write_bit( bank,pin,1-onState);
    }
}

void systemReset(void) {
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x00000001);
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	f042 0201 	orr.w	r2, r2, #1
 800075e:	601a      	str	r2, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xF8FF0000);
 8000760:	4a0c      	ldr	r2, [pc, #48]	; (8000794 <systemReset+0x40>)
 8000762:	6810      	ldr	r0, [r2, #0]
 8000764:	4001      	ands	r1, r0
 8000766:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFEF6FFFF);
 8000768:	6819      	ldr	r1, [r3, #0]
 800076a:	f021 7184 	bic.w	r1, r1, #17301504	; 0x1080000
 800076e:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8000772:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     & 0xFFFBFFFF);
 8000774:	6819      	ldr	r1, [r3, #0]
 8000776:	f421 2180 	bic.w	r1, r1, #262144	; 0x40000
 800077a:	6019      	str	r1, [r3, #0]
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) & 0xFF80FFFF);
 800077c:	6813      	ldr	r3, [r2, #0]
 800077e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000782:	6013      	str	r3, [r2, #0]

    SET_REG(RCC_CIR, 0x00000000);  /* disable all RCC interrupts */
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <systemReset+0x44>)
 8000786:	2200      	movs	r2, #0
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	4770      	bx	lr
 800078c:	40021000 	andmi	r1, r2, r0
 8000790:	f8ff0000 			; <UNDEFINED> instruction: 0xf8ff0000
 8000794:	40021004 	andmi	r1, r2, r4
 8000798:	40021008 	andmi	r1, r2, r8

0800079c <setupCLK>:
}

void setupCLK(void) {
    /* enable HSE */
    SET_REG(RCC_CR, GET_REG(RCC_CR) | 0x00010001);
 800079c:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <setupCLK+0x58>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	f042 1201 	orr.w	r2, r2, #65537	; 0x10001
 80007a4:	601a      	str	r2, [r3, #0]
    while ((GET_REG(RCC_CR) & 0x00020000) == 0); /* for it to come on */
 80007a6:	681a      	ldr	r2, [r3, #0]
 80007a8:	4812      	ldr	r0, [pc, #72]	; (80007f4 <setupCLK+0x58>)
 80007aa:	0392      	lsls	r2, r2, #14
 80007ac:	d5fb      	bpl.n	80007a6 <setupCLK+0xa>

    /* enable flash prefetch buffer */
    SET_REG(FLASH_ACR, 0x00000012);
 80007ae:	4a12      	ldr	r2, [pc, #72]	; (80007f8 <setupCLK+0x5c>)
 80007b0:	2112      	movs	r1, #18
 80007b2:	6011      	str	r1, [r2, #0]

    /* Configure PLL */

    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0B100111010000010000000000);// 0x001D0400); /* pll=108Mhz,APB1=36Mhz,AHB=72Mhz */
 80007b4:	f6a2 72fc 	subw	r2, r2, #4092	; 0xffc
 80007b8:	6811      	ldr	r1, [r2, #0]
 80007ba:	f441 011d 	orr.w	r1, r1, #10289152	; 0x9d0000
 80007be:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 80007c2:	6011      	str	r1, [r2, #0]
    SET_REG(RCC_CR, GET_REG(RCC_CR)     | 0x01000000); /* enable the pll */
 80007c4:	6801      	ldr	r1, [r0, #0]
 80007c6:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 80007ca:	6001      	str	r1, [r0, #0]
    while ((GET_REG(RCC_CR) & 0x03000000) == 0);         /* wait for it to come on */
 80007cc:	6819      	ldr	r1, [r3, #0]
 80007ce:	f011 7f40 	tst.w	r1, #50331648	; 0x3000000
 80007d2:	d0fb      	beq.n	80007cc <setupCLK+0x30>

    /* Set SYSCLK as PLL */
    SET_REG(RCC_CFGR, GET_REG(RCC_CFGR) | 0x00000002);
 80007d4:	6811      	ldr	r1, [r2, #0]
 80007d6:	f041 0102 	orr.w	r1, r1, #2
 80007da:	6011      	str	r1, [r2, #0]
    while ((GET_REG(RCC_CFGR) & 0x00000008) == 0); /* wait for it to come on */
 80007dc:	6811      	ldr	r1, [r2, #0]
 80007de:	0709      	lsls	r1, r1, #28
 80007e0:	d5fc      	bpl.n	80007dc <setupCLK+0x40>
	
    pRCC->APB2ENR |= 0B111111100;// Enable All GPIO channels (A to G)
 80007e2:	699a      	ldr	r2, [r3, #24]
 80007e4:	f442 72fe 	orr.w	r2, r2, #508	; 0x1fc
 80007e8:	619a      	str	r2, [r3, #24]
	pRCC->APB1ENR |= RCC_APB1ENR_USB_CLK;
 80007ea:	69da      	ldr	r2, [r3, #28]
 80007ec:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80007f0:	61da      	str	r2, [r3, #28]
 80007f2:	4770      	bx	lr
 80007f4:	40021000 	andmi	r1, r2, r0
 80007f8:	40022000 	andmi	r2, r2, r0

080007fc <setupLEDAndButton>:

void setupLEDAndButton (void) {
 // SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
 
 #if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
  SET_REG(GPIO_CR(BUTTON_BANK,BUTTON_PIN),(GPIO_CR(BUTTON_BANK,BUTTON_PIN) & crMask(BUTTON_PIN)) | CR_INPUT_PU_PD << CR_SHITF(BUTTON_PIN));
 80007fc:	4b07      	ldr	r3, [pc, #28]	; (800081c <setupLEDAndButton+0x20>)
 80007fe:	4a08      	ldr	r2, [pc, #32]	; (8000820 <setupLEDAndButton+0x24>)
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000800:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

void setupLEDAndButton (void) {
 // SET_REG(AFIO_MAPR,(GET_REG(AFIO_MAPR) & ~AFIO_MAPR_SWJ_CFG) | AFIO_MAPR_SWJ_CFG_NO_JTAG_NO_SW);// Try to disable SWD AND JTAG so we can use those pins (not sure if this works).
 
 #if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
  SET_REG(GPIO_CR(BUTTON_BANK,BUTTON_PIN),(GPIO_CR(BUTTON_BANK,BUTTON_PIN) & crMask(BUTTON_PIN)) | CR_INPUT_PU_PD << CR_SHITF(BUTTON_PIN));
 8000804:	601a      	str	r2, [r3, #0]
    SET_REG(GPIO_BSRR(bank), pinMask);
}
*/
void gpio_write_bit(u32 bank, u8 pin, u8 val) {
    val = !val;          // "set" bits are lower than "reset" bits  
    SET_REG(GPIO_BSRR(bank), (1U << pin) << (16 * val));
 8000806:	f102 4278 	add.w	r2, r2, #4160749568	; 0xf8000000
 800080a:	320c      	adds	r2, #12
 800080c:	6011      	str	r1, [r2, #0]
 #if defined(BUTTON_BANK) && defined (BUTTON_PIN) && defined (BUTTON_PRESSED_STATE)
  SET_REG(GPIO_CR(BUTTON_BANK,BUTTON_PIN),(GPIO_CR(BUTTON_BANK,BUTTON_PIN) & crMask(BUTTON_PIN)) | CR_INPUT_PU_PD << CR_SHITF(BUTTON_PIN));
  
  gpio_write_bit(BUTTON_BANK, BUTTON_PIN,1-BUTTON_PRESSED_STATE);// set pulldown resistor in case there is no button.
 #endif
  SET_REG(GPIO_CR(LED_BANK,LED_PIN),(GET_REG(GPIO_CR(LED_BANK,LED_PIN)) & crMask(LED_PIN)) | CR_OUTPUT_PP << CR_SHITF(LED_PIN));
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000814:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000818:	601a      	str	r2, [r3, #0]
 800081a:	4770      	bx	lr
 800081c:	40011004 	andmi	r1, r1, r4
 8000820:	48011004 	stmdami	r1, {r2, ip}

08000824 <setupFLASH>:
}

void setupFLASH() {
    /* configure the HSI oscillator */
    if ((pRCC->CR & 0x01) == 0x00) {
 8000824:	4b05      	ldr	r3, [pc, #20]	; (800083c <setupFLASH+0x18>)
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	07d1      	lsls	r1, r2, #31
 800082a:	d403      	bmi.n	8000834 <setupFLASH+0x10>
        u32 rwmVal = pRCC->CR;
 800082c:	681a      	ldr	r2, [r3, #0]
        rwmVal |= 0x01;
 800082e:	f042 0201 	orr.w	r2, r2, #1
        pRCC->CR = rwmVal;
 8000832:	601a      	str	r2, [r3, #0]
    }

    /* wait for it to come on */
    while ((pRCC->CR & 0x02) == 0x00) {}
 8000834:	681a      	ldr	r2, [r3, #0]
 8000836:	0792      	lsls	r2, r2, #30
 8000838:	d5fc      	bpl.n	8000834 <setupFLASH+0x10>
}
 800083a:	4770      	bx	lr
 800083c:	40021000 	andmi	r1, r2, r0

08000840 <checkUserCode>:

bool checkUserCode(u32 usrAddr) {
    u32 sp = *(vu32 *) usrAddr;
 8000840:	6803      	ldr	r3, [r0, #0]

    if ((sp & 0x2FFE0000) == 0x20000000) {
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <checkUserCode+0x10>)
 8000844:	4018      	ands	r0, r3
        return (TRUE);
    } else {
        return (FALSE);
    }
}
 8000846:	f1b0 5300 	subs.w	r3, r0, #536870912	; 0x20000000
 800084a:	4258      	negs	r0, r3
 800084c:	4158      	adcs	r0, r3
 800084e:	4770      	bx	lr
 8000850:	2ffe0000 	svccs	0x00fe0000

08000854 <nvicInit>:
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8000854:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <nvicInit+0x64>)
    __MSR_MSP(*(vu32 *) usrAddr);             /* set the users stack ptr */

    usrMain();                                /* go! */
}

void nvicInit(NVIC_InitTypeDef *NVIC_InitStruct) {
 8000856:	b530      	push	{r4, r5, lr}
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 8000858:	68db      	ldr	r3, [r3, #12]
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800085a:	7844      	ldrb	r4, [r0, #1]
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
 800085c:	43db      	mvns	r3, r3
 800085e:	f3c3 2302 	ubfx	r3, r3, #8, #3
    tmppre = (0x4 - tmppriority);
 8000862:	f1c3 0204 	rsb	r2, r3, #4
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000866:	fa04 f202 	lsl.w	r2, r4, r2


    /* Compute the Corresponding IRQ Priority --------------------------------*/
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;
 800086a:	240f      	movs	r4, #15
 800086c:	40dc      	lsrs	r4, r3

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 800086e:	7881      	ldrb	r1, [r0, #2]

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000870:	7803      	ldrb	r3, [r0, #0]
    tmppriority = (0x700 - (rSCB->AIRCR & (u32)0x700)) >> 0x08;
    tmppre = (0x4 - tmppriority);
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000872:	400c      	ands	r4, r1
 8000874:	4314      	orrs	r4, r2

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000876:	f003 0103 	and.w	r1, r3, #3
 800087a:	00c9      	lsls	r1, r1, #3
    tmpsub = tmpsub >> tmppriority;

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
 800087c:	0124      	lsls	r4, r4, #4
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 800087e:	22ff      	movs	r2, #255	; 0xff

    tmppriority = (u32)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000880:	408c      	lsls	r4, r1

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
 8000882:	408a      	lsls	r2, r1
 8000884:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 8000888:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800088c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;

    tmppriority = tmppriority << 0x04;
    tmppriority = ((u32)tmppriority) << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);

    tmpreg = rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)];
 8000890:	f8d3 5300 	ldr.w	r5, [r3, #768]	; 0x300
    tmpmask = (u32)0xFF << ((NVIC_InitStruct->NVIC_IRQChannel & (u8)0x03) * 0x08);
    tmpreg &= ~tmpmask;
 8000894:	ea25 0102 	bic.w	r1, r5, r2
    tmppriority &= tmpmask;
 8000898:	4022      	ands	r2, r4
    tmpreg |= tmppriority;
 800089a:	430a      	orrs	r2, r1

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;
 800089c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80008a0:	7803      	ldrb	r3, [r0, #0]
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80008a2:	2201      	movs	r2, #1
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80008a4:	0959      	lsrs	r1, r3, #5
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
 80008a6:	f003 031f 	and.w	r3, r3, #31
 80008aa:	fa02 f303 	lsl.w	r3, r2, r3
    tmpreg |= tmppriority;

    rNVIC->IPR[(NVIC_InitStruct->NVIC_IRQChannel >> 0x02)] = tmpreg;

    /* Enable the Selected IRQ Channels --------------------------------------*/
    rNVIC->ISER[(NVIC_InitStruct->NVIC_IRQChannel >> 0x05)] =
 80008ae:	4a03      	ldr	r2, [pc, #12]	; (80008bc <nvicInit+0x68>)
 80008b0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80008b4:	bd30      	pop	{r4, r5, pc}
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	and	lr, r0, r0, lsl #26
 80008bc:	e000e100 	and	lr, r0, r0, lsl #2

080008c0 <nvicDisableInterrupts>:
        (u32)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (u8)0x1F);
}

void nvicDisableInterrupts() {
    NVIC_TypeDef *rNVIC = (NVIC_TypeDef *) NVIC_BASE;
    rNVIC->ICER[0] = 0xFFFFFFFF;
 80008c0:	4b07      	ldr	r3, [pc, #28]	; (80008e0 <nvicDisableInterrupts+0x20>)
 80008c2:	f04f 32ff 	mov.w	r2, #4294967295
 80008c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    rNVIC->ICER[1] = 0xFFFFFFFF;
 80008ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    rNVIC->ICPR[0] = 0xFFFFFFFF;
 80008ce:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    rNVIC->ICPR[1] = 0xFFFFFFFF;
 80008d2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

    SET_REG(STK_CTRL, 0x04); /* disable the systick, which operates separately from nvic */
 80008d6:	2204      	movs	r2, #4
 80008d8:	f843 2cf0 	str.w	r2, [r3, #-240]
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	e000e100 	and	lr, r0, r0, lsl #2

080008e4 <jumpToUser>:
    } else {
        return (FALSE);
    }
}

void jumpToUser(u32 usrAddr) {
 80008e4:	b538      	push	{r3, r4, r5, lr}

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <jumpToUser+0x28>)
 80008e8:	2280      	movs	r2, #128	; 0x80
}

void jumpToUser(u32 usrAddr) {
    typedef void (*funcPtr)(void);

    u32 jumpAddr = *(vu32 *)(usrAddr + 0x04); /* reset ptr in vector table */
 80008ea:	6845      	ldr	r5, [r0, #4]
    } else {
        return (FALSE);
    }
}

void jumpToUser(u32 usrAddr) {
 80008ec:	4604      	mov	r4, r0

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80008ee:	601a      	str	r2, [r3, #0]

    /* tear down all the dfu related setup */
    // disable usb interrupts, clear them, turn off usb, set the disc pin
    // todo pick exactly what we want to do here, now its just a conservative
    flashLock();
    usbDsbISR();
 80008f0:	f7ff fe2c 	bl	800054c <usbDsbISR>
    nvicDisableInterrupts();
 80008f4:	f7ff ffe4 	bl	80008c0 <nvicDisableInterrupts>
	
#ifndef HAS_MAPLE_HARDWARE	
	usbDsbBus();
 80008f8:	f7ff fdf4 	bl	80004e4 <usbDsbBus>
#endif
	
// Does nothing, as PC12 is not connected on teh Maple mini according to the schemmatic     setPin(GPIOC, 12); // disconnect usb from host. todo, macroize pin
    systemReset(); // resets clocks and periphs, not core regs
 80008fc:	f7ff ff2a 	bl	8000754 <systemReset>


    __MSR_MSP(*(vu32 *) usrAddr);             /* set the users stack ptr */
 8000900:	6820      	ldr	r0, [r4, #0]
 8000902:	f7ff fc17 	bl	8000134 <__MSR_MSP>

    usrMain();                                /* go! */
 8000906:	47a8      	blx	r5
 8000908:	bd38      	pop	{r3, r4, r5, pc}
 800090a:	bf00      	nop
 800090c:	40022010 	andmi	r2, r2, r0, lsl r0

08000910 <systemHardReset>:

void systemHardReset(void) {
    SCB_TypeDef *rSCB = (SCB_TypeDef *) SCB_BASE;

    /* Reset  */
    rSCB->AIRCR = (u32)AIRCR_RESET_REQ;
 8000910:	4a02      	ldr	r2, [pc, #8]	; (800091c <systemHardReset+0xc>)
 8000912:	4b03      	ldr	r3, [pc, #12]	; (8000920 <systemHardReset+0x10>)
 8000914:	60da      	str	r2, [r3, #12]

    /*  should never get here */
    while (1) {
        asm volatile("nop");
 8000916:	bf00      	nop
 8000918:	e7fd      	b.n	8000916 <systemHardReset+0x6>
 800091a:	bf00      	nop
 800091c:	05fa0004 	ldrbeq	r0, [sl, #4]!
 8000920:	e000ed00 	and	lr, r0, r0, lsl #26

08000924 <flashErasePage>:
    }
}

bool flashErasePage(u32 pageAddr) {
    u32 rwmVal = GET_REG(FLASH_CR);
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <flashErasePage+0x2c>)
    while (1) {
        asm volatile("nop");
    }
}

bool flashErasePage(u32 pageAddr) {
 8000926:	b510      	push	{r4, lr}
    u32 rwmVal = GET_REG(FLASH_CR);
 8000928:	681a      	ldr	r2, [r3, #0]
    rwmVal = FLASH_CR_PER;
    SET_REG(FLASH_CR, rwmVal);
 800092a:	2202      	movs	r2, #2
 800092c:	601a      	str	r2, [r3, #0]

    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800092e:	4a09      	ldr	r2, [pc, #36]	; (8000954 <flashErasePage+0x30>)
 8000930:	6811      	ldr	r1, [r2, #0]
 8000932:	4614      	mov	r4, r2
 8000934:	f011 0f01 	tst.w	r1, #1
 8000938:	d1f9      	bne.n	800092e <flashErasePage+0xa>
    SET_REG(FLASH_AR, pageAddr);
 800093a:	6090      	str	r0, [r2, #8]
    SET_REG(FLASH_CR, FLASH_CR_START | FLASH_CR_PER);
 800093c:	2242      	movs	r2, #66	; 0x42
 800093e:	601a      	str	r2, [r3, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8000940:	6822      	ldr	r2, [r4, #0]
 8000942:	f012 0101 	ands.w	r1, r2, #1
 8000946:	d1fb      	bne.n	8000940 <flashErasePage+0x1c>

    /* todo: verify the page was erased */

    rwmVal = 0x00;
    SET_REG(FLASH_CR, rwmVal);
 8000948:	6019      	str	r1, [r3, #0]

    return TRUE;
}
 800094a:	2001      	movs	r0, #1
 800094c:	bd10      	pop	{r4, pc}
 800094e:	bf00      	nop
 8000950:	40022010 	andmi	r2, r2, r0, lsl r0
 8000954:	4002200c 	andmi	r2, r2, ip

08000958 <flashWriteWord>:
    }

    return TRUE;
}

bool flashWriteWord(u32 addr, u32 word) {
 8000958:	b537      	push	{r0, r1, r2, r4, r5, lr}
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
 800095a:	b28b      	uxth	r3, r1
 800095c:	9300      	str	r3, [sp, #0]
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;
 800095e:	0c0b      	lsrs	r3, r1, #16
 8000960:	9301      	str	r3, [sp, #4]

    u32 rwmVal = GET_REG(FLASH_CR);
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <flashWriteWord+0x44>)
    SET_REG(FLASH_CR, FLASH_CR_PG);
 8000964:	2201      	movs	r2, #1
bool flashWriteWord(u32 addr, u32 word) {
    vu16 *flashAddr = (vu16 *)addr;
    vu32 lhWord = (vu32)word & 0x0000FFFF;
    vu32 hhWord = ((vu32)word & 0xFFFF0000) >> 16;

    u32 rwmVal = GET_REG(FLASH_CR);
 8000966:	681c      	ldr	r4, [r3, #0]
    SET_REG(FLASH_CR, FLASH_CR_PG);
 8000968:	601a      	str	r2, [r3, #0]

    /* apparently we need not write to FLASH_AR and can
       simply do a native write of a half word */
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 800096a:	4a0d      	ldr	r2, [pc, #52]	; (80009a0 <flashWriteWord+0x48>)
 800096c:	6815      	ldr	r5, [r2, #0]
 800096e:	07ed      	lsls	r5, r5, #31
 8000970:	d4fb      	bmi.n	800096a <flashWriteWord+0x12>
    *(flashAddr + 0x01) = (vu16)hhWord;
 8000972:	9d01      	ldr	r5, [sp, #4]
 8000974:	b2ad      	uxth	r5, r5
 8000976:	8045      	strh	r5, [r0, #2]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8000978:	6815      	ldr	r5, [r2, #0]
 800097a:	07ed      	lsls	r5, r5, #31
 800097c:	d4fc      	bmi.n	8000978 <flashWriteWord+0x20>
    *(flashAddr) = (vu16)lhWord;
 800097e:	9d00      	ldr	r5, [sp, #0]
 8000980:	b2ad      	uxth	r5, r5
 8000982:	8005      	strh	r5, [r0, #0]
    while (GET_REG(FLASH_SR) & FLASH_SR_BSY) {}
 8000984:	6815      	ldr	r5, [r2, #0]
 8000986:	07ed      	lsls	r5, r5, #31
 8000988:	d4fc      	bmi.n	8000984 <flashWriteWord+0x2c>

    rwmVal &= 0xFFFFFFFE;
 800098a:	f024 0201 	bic.w	r2, r4, #1
    SET_REG(FLASH_CR, rwmVal);
 800098e:	601a      	str	r2, [r3, #0]

    /* verify the write */
    if (*(vu32 *)addr != word) {
 8000990:	6800      	ldr	r0, [r0, #0]
        return FALSE;
    }

    return TRUE;
}
 8000992:	1a43      	subs	r3, r0, r1
 8000994:	4258      	negs	r0, r3
 8000996:	4158      	adcs	r0, r3
 8000998:	b003      	add	sp, #12
 800099a:	bd30      	pop	{r4, r5, pc}
 800099c:	40022010 	andmi	r2, r2, r0, lsl r0
 80009a0:	4002200c 	andmi	r2, r2, ip

080009a4 <flashLock>:

void flashLock() {
    /* take down the HSI oscillator? it may be in use elsewhere */

    /* ensure all FPEC functions disabled and lock the FPEC */
    SET_REG(FLASH_CR, 0x00000080);
 80009a4:	4b01      	ldr	r3, [pc, #4]	; (80009ac <flashLock+0x8>)
 80009a6:	2280      	movs	r2, #128	; 0x80
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	4770      	bx	lr
 80009ac:	40022010 	andmi	r2, r2, r0, lsl r0

080009b0 <flashUnlock>:
}

void flashUnlock() {
    /* unlock the flash */
    SET_REG(FLASH_KEYR, FLASH_KEY1);
 80009b0:	4b03      	ldr	r3, [pc, #12]	; (80009c0 <flashUnlock+0x10>)
 80009b2:	4a04      	ldr	r2, [pc, #16]	; (80009c4 <flashUnlock+0x14>)
 80009b4:	601a      	str	r2, [r3, #0]
    SET_REG(FLASH_KEYR, FLASH_KEY2);
 80009b6:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	40022004 	andmi	r2, r2, r4
 80009c4:	45670123 	strbmi	r0, [r7, #-291]!	; 0x123

080009c8 <crMask>:

// Used to create the control register masking pattern, when setting control register mode.
unsigned int crMask(int pin)
{
	unsigned int mask;
	if (pin>=8)
 80009c8:	2807      	cmp	r0, #7
	{
		pin-=8;
 80009ca:	bfc8      	it	gt
 80009cc:	3808      	subgt	r0, #8
	}
	mask = 0x0F << (pin<<2);
 80009ce:	230f      	movs	r3, #15
 80009d0:	0080      	lsls	r0, r0, #2
 80009d2:	fa03 f000 	lsl.w	r0, r3, r0
	return ~mask;
}	
 80009d6:	43c0      	mvns	r0, r0
 80009d8:	4770      	bx	lr
	...

080009dc <getFlashEnd>:

#define FLASH_SIZE_REG 0x1FFFF7E0
int getFlashEnd(void)
{
	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	return ((int)(*flashSize & 0xffff) * 1024) + 0x08000000;
 80009dc:	4b02      	ldr	r3, [pc, #8]	; (80009e8 <getFlashEnd+0xc>)
 80009de:	8818      	ldrh	r0, [r3, #0]
 80009e0:	f500 3000 	add.w	r0, r0, #131072	; 0x20000
}
 80009e4:	0280      	lsls	r0, r0, #10
 80009e6:	4770      	bx	lr
 80009e8:	1ffff7e0 	svcne	0x00fff7e0

080009ec <getFlashPageSize>:

int getFlashPageSize(void)
{

	unsigned short *flashSize = (unsigned short *) (FLASH_SIZE_REG);// Address register 
	if ((*flashSize & 0xffff) > 128)
 80009ec:	4b04      	ldr	r3, [pc, #16]	; (8000a00 <getFlashPageSize+0x14>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
	{
		return 0x800;
 80009f0:	2b81      	cmp	r3, #129	; 0x81
	}
	else
	{
		return 0x400;
	}
}
 80009f2:	bf34      	ite	cc
 80009f4:	f44f 6080 	movcc.w	r0, #1024	; 0x400
 80009f8:	f44f 6000 	movcs.w	r0, #2048	; 0x800
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	1ffff7e0 	svcne	0x00fff7e0

08000a04 <dfuInit>:

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8000a04:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <dfuInit+0x38>)
 8000a06:	2300      	movs	r3, #0
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
 8000a08:	2102      	movs	r1, #2

volatile PLOT code_copy_lock;

/* todo: force dfu globals to be singleton to avoid re-inits? */
void dfuInit(void) {
    dfuAppStatus.bStatus = OK;
 8000a0a:	7013      	strb	r3, [r2, #0]
    dfuAppStatus.bwPollTimeout0 = 0x00;
 8000a0c:	7053      	strb	r3, [r2, #1]
    dfuAppStatus.bwPollTimeout1 = 0x00;
 8000a0e:	7093      	strb	r3, [r2, #2]
    dfuAppStatus.bwPollTimeout2 = 0x00;
 8000a10:	70d3      	strb	r3, [r2, #3]
    dfuAppStatus.bState = dfuIDLE;
 8000a12:	7111      	strb	r1, [r2, #4]
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
 8000a14:	7153      	strb	r3, [r2, #5]
    userFirmwareLen = 0;
 8000a16:	4a0a      	ldr	r2, [pc, #40]	; (8000a40 <dfuInit+0x3c>)
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000a18:	490a      	ldr	r1, [pc, #40]	; (8000a44 <dfuInit+0x40>)
    dfuAppStatus.bwPollTimeout0 = 0x00;
    dfuAppStatus.bwPollTimeout1 = 0x00;
    dfuAppStatus.bwPollTimeout2 = 0x00;
    dfuAppStatus.bState = dfuIDLE;
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
 8000a1a:	6013      	str	r3, [r2, #0]
    thisBlockLen = 0;;
 8000a1c:	4a0a      	ldr	r2, [pc, #40]	; (8000a48 <dfuInit+0x44>)
 8000a1e:	8013      	strh	r3, [r2, #0]
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
 8000a20:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <dfuInit+0x48>)
 8000a22:	6011      	str	r1, [r2, #0]
    userAppEnd = RAM_END;
 8000a24:	4a0a      	ldr	r2, [pc, #40]	; (8000a50 <dfuInit+0x4c>)
 8000a26:	f501 4188 	add.w	r1, r1, #17408	; 0x4400
 8000a2a:	6011      	str	r1, [r2, #0]
    userUploadType=DFU_UPLOAD_NONE;
 8000a2c:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <dfuInit+0x50>)
    code_copy_lock = WAIT;
 8000a2e:	2103      	movs	r1, #3
    dfuAppStatus.iString = 0x00;          /* all strings must be 0x00 until we make them! */
    userFirmwareLen = 0;
    thisBlockLen = 0;;
    userAppAddr = USER_CODE_RAM; /* default RAM user code location */
    userAppEnd = RAM_END;
    userUploadType=DFU_UPLOAD_NONE;
 8000a30:	7013      	strb	r3, [r2, #0]
    code_copy_lock = WAIT;
 8000a32:	4a09      	ldr	r2, [pc, #36]	; (8000a58 <dfuInit+0x54>)
 8000a34:	7011      	strb	r1, [r2, #0]
    dfuBusy = FALSE;
 8000a36:	4a09      	ldr	r2, [pc, #36]	; (8000a5c <dfuInit+0x58>)
 8000a38:	7013      	strb	r3, [r2, #0]
 8000a3a:	4770      	bx	lr
 8000a3c:	20000b1d 	andcs	r0, r0, sp, lsl fp
 8000a40:	20000b18 	andcs	r0, r0, r8, lsl fp
 8000a44:	20000c00 	andcs	r0, r0, r0, lsl #24
 8000a48:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000a4c:	200002c4 	andcs	r0, r0, r4, asr #5
 8000a50:	200002c0 	andcs	r0, r0, r0, asr #5
 8000a54:	20000b1c 	andcs	r0, r0, ip, lsl fp
 8000a58:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>
 8000a5c:	20000b23 	andcs	r0, r0, r3, lsr #22

08000a60 <dfuUpdateByReset>:
    } else {
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
 8000a60:	b508      	push	{r3, lr}
    u8 startState = dfuAppStatus.bState;
 8000a62:	4b0e      	ldr	r3, [pc, #56]	; (8000a9c <dfuUpdateByReset+0x3c>)
    userFirmwareLen = 0;
 8000a64:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <dfuUpdateByReset+0x40>)
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8000a66:	7919      	ldrb	r1, [r3, #4]
    userFirmwareLen = 0;
 8000a68:	2200      	movs	r2, #0
        return FALSE;
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
 8000a6a:	b2c9      	uxtb	r1, r1
    userFirmwareLen = 0;

    if (startState == appDETACH) {
 8000a6c:	2901      	cmp	r1, #1
    }
}

void dfuUpdateByReset(void) {
    u8 startState = dfuAppStatus.bState;
    userFirmwareLen = 0;
 8000a6e:	6002      	str	r2, [r0, #0]

    if (startState == appDETACH) {
 8000a70:	d108      	bne.n	8000a84 <dfuUpdateByReset+0x24>
        dfuAppStatus.bState = dfuIDLE;
 8000a72:	2102      	movs	r1, #2
 8000a74:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 8000a76:	701a      	strb	r2, [r3, #0]

        nvicDisableInterrupts();
 8000a78:	f7ff ff22 	bl	80008c0 <nvicDisableInterrupts>
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
    }
}
 8000a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if (startState == appDETACH) {
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        nvicDisableInterrupts();
        usbEnbISR();
 8000a80:	f7ff bd32 	b.w	80004e8 <usbEnbISR>

    } else if (startState == appIDLE || startState == dfuIDLE) {
 8000a84:	f011 0ffd 	tst.w	r1, #253	; 0xfd
 8000a88:	d006      	beq.n	8000a98 <dfuUpdateByReset+0x38>
        /* do nothing...might be normal usb bus activity */
    } else {
        /* we reset from the dfu, reset everything and startover,
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
 8000a8a:	2102      	movs	r1, #2
 8000a8c:	7119      	strb	r1, [r3, #4]
        dfuAppStatus.bStatus = OK;
 8000a8e:	701a      	strb	r2, [r3, #0]

        systemHardReset();
    }
}
 8000a90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
           which is the correct operation if this is an erroneous
           event or properly following a MANIFEST */
        dfuAppStatus.bState = dfuIDLE;
        dfuAppStatus.bStatus = OK;

        systemHardReset();
 8000a94:	f7ff bf3c 	b.w	8000910 <systemHardReset>
 8000a98:	bd08      	pop	{r3, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000b1d 	andcs	r0, r0, sp, lsl fp
 8000aa0:	20000b18 	andcs	r0, r0, r8, lsl fp

08000aa4 <dfuCopyState>:

void dfuUpdateByTimeout(void) {
}

u8 *dfuCopyState(u16 length) {
    if (length == 0) {
 8000aa4:	b920      	cbnz	r0, 8000ab0 <dfuCopyState+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 1;
 8000aa6:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <dfuCopyState+0x10>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000aae:	4770      	bx	lr
    } else {
        return (&(dfuAppStatus.bState));
 8000ab0:	4801      	ldr	r0, [pc, #4]	; (8000ab8 <dfuCopyState+0x14>)
    }
}
 8000ab2:	4770      	bx	lr
 8000ab4:	20000304 	andcs	r0, r0, r4, lsl #6
 8000ab8:	20000b21 	andcs	r0, r0, r1, lsr #22

08000abc <dfuCopyStatus>:

u8 *dfuCopyStatus(u16 length) {
    if (length == 0) {
 8000abc:	b920      	cbnz	r0, 8000ac8 <dfuCopyStatus+0xc>
        pInformation->Ctrl_Info.Usb_wLength = 6;
 8000abe:	4b03      	ldr	r3, [pc, #12]	; (8000acc <dfuCopyStatus+0x10>)
 8000ac0:	2206      	movs	r2, #6
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000ac6:	4770      	bx	lr
    } else {
        return (u8*)(&dfuAppStatus);
 8000ac8:	4801      	ldr	r0, [pc, #4]	; (8000ad0 <dfuCopyStatus+0x14>)
    }
}
 8000aca:	4770      	bx	lr
 8000acc:	20000304 	andcs	r0, r0, r4, lsl #6
 8000ad0:	20000b1d 	andcs	r0, r0, sp, lsl fp

08000ad4 <dfuCopyDNLOAD>:


u8 *dfuCopyDNLOAD(u16 length) {
 8000ad4:	4b06      	ldr	r3, [pc, #24]	; (8000af0 <dfuCopyDNLOAD+0x1c>)
    if (length == 0) {
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000ad6:	681b      	ldr	r3, [r3, #0]
    }
}


u8 *dfuCopyDNLOAD(u16 length) {
    if (length == 0) {
 8000ad8:	b930      	cbnz	r0, 8000ae8 <dfuCopyDNLOAD+0x14>
        pInformation->Ctrl_Info.Usb_wLength = pInformation->USBwLengths.w - pInformation->Ctrl_Info.Usb_wOffset;
 8000ada:	88da      	ldrh	r2, [r3, #6]
 8000adc:	8a59      	ldrh	r1, [r3, #18]
 8000ade:	1a51      	subs	r1, r2, r1
 8000ae0:	8219      	strh	r1, [r3, #16]
        thisBlockLen = pInformation->USBwLengths.w;
 8000ae2:	4b04      	ldr	r3, [pc, #16]	; (8000af4 <dfuCopyDNLOAD+0x20>)
 8000ae4:	801a      	strh	r2, [r3, #0]
        return NULL;
 8000ae6:	4770      	bx	lr
    } else {
        return ((u8 *)recvBuffer + pInformation->Ctrl_Info.Usb_wOffset);
 8000ae8:	8a5b      	ldrh	r3, [r3, #18]
 8000aea:	4803      	ldr	r0, [pc, #12]	; (8000af8 <dfuCopyDNLOAD+0x24>)
 8000aec:	4418      	add	r0, r3
    }
}
 8000aee:	4770      	bx	lr
 8000af0:	20000304 	andcs	r0, r0, r4, lsl #6
 8000af4:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000af8:	20000314 	andcs	r0, r0, r4, lsl r3

08000afc <dfuCopyUPLOAD>:

u8 *dfuCopyUPLOAD(u16 length) {
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <dfuCopyUPLOAD+0x24>)
    if (length == 0) {
 8000afe:	b930      	cbnz	r0, 8000b0e <dfuCopyUPLOAD+0x12>
        pInformation->Ctrl_Info.Usb_wLength = thisBlockLen - pInformation->Ctrl_Info.Usb_wOffset;
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4a08      	ldr	r2, [pc, #32]	; (8000b24 <dfuCopyUPLOAD+0x28>)
 8000b04:	8811      	ldrh	r1, [r2, #0]
 8000b06:	8a5a      	ldrh	r2, [r3, #18]
 8000b08:	1a8a      	subs	r2, r1, r2
 8000b0a:	821a      	strh	r2, [r3, #16]
        return NULL;
 8000b0c:	4770      	bx	lr
    } else {
        return((u8*) userAppAddr + userFirmwareLen + pInformation->Ctrl_Info.Usb_wOffset);
 8000b0e:	4906      	ldr	r1, [pc, #24]	; (8000b28 <dfuCopyUPLOAD+0x2c>)
 8000b10:	4a06      	ldr	r2, [pc, #24]	; (8000b2c <dfuCopyUPLOAD+0x30>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	6812      	ldr	r2, [r2, #0]
 8000b16:	6808      	ldr	r0, [r1, #0]
 8000b18:	8a5b      	ldrh	r3, [r3, #18]
 8000b1a:	4410      	add	r0, r2
 8000b1c:	4418      	add	r0, r3
    }
}
 8000b1e:	4770      	bx	lr
 8000b20:	20000304 	andcs	r0, r0, r4, lsl #6
 8000b24:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000b28:	200002c4 	andcs	r0, r0, r4, asr #5
 8000b2c:	20000b18 	andcs	r0, r0, r8, lsl fp

08000b30 <dfuCopyBufferToExec>:

void dfuCopyBufferToExec() {
 8000b30:	b570      	push	{r4, r5, r6, lr}
        }
    } 
	else 
*/
	{
		if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000b32:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <dfuCopyBufferToExec+0x4c>)
 8000b34:	4e12      	ldr	r6, [pc, #72]	; (8000b80 <dfuCopyBufferToExec+0x50>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
		{
			userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000b38:	6834      	ldr	r4, [r6, #0]
        }
    } 
	else 
*/
	{
		if (userUploadType == DFU_UPLOAD_FLASH_0X8005000)
 8000b3a:	2b02      	cmp	r3, #2
		{
			userSpace = (u32 *)(USER_CODE_FLASH0X8005000 + userFirmwareLen);
 8000b3c:	f104 6400 	add.w	r4, r4, #134217728	; 0x8000000
 8000b40:	bf0c      	ite	eq
 8000b42:	f504 44a0 	addeq.w	r4, r4, #20480	; 0x5000
		}
		else
		{
			userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
 8000b46:	f504 5400 	addne.w	r4, r4, #8192	; 0x2000
		}

        flashErasePage((u32)(userSpace));
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff feea 	bl	8000924 <flashErasePage>

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000b50:	2500      	movs	r5, #0
 8000b52:	4b0c      	ldr	r3, [pc, #48]	; (8000b84 <dfuCopyBufferToExec+0x54>)
 8000b54:	881a      	ldrh	r2, [r3, #0]
 8000b56:	b292      	uxth	r2, r2
 8000b58:	4295      	cmp	r5, r2
 8000b5a:	da06      	bge.n	8000b6a <dfuCopyBufferToExec+0x3a>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
 8000b5c:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <dfuCopyBufferToExec+0x58>)
 8000b5e:	1960      	adds	r0, r4, r5
 8000b60:	58e9      	ldr	r1, [r5, r3]
 8000b62:	f7ff fef9 	bl	8000958 <flashWriteWord>
			userSpace = (u32 *)(USER_CODE_FLASH0X8002000 + userFirmwareLen);		
		}

        flashErasePage((u32)(userSpace));

        for (i = 0; i < thisBlockLen; i = i + 4) {
 8000b66:	3504      	adds	r5, #4
 8000b68:	e7f3      	b.n	8000b52 <dfuCopyBufferToExec+0x22>
            flashWriteWord((u32)(userSpace++), *(u32 *)(recvBuffer +i));
        }

    }
    userFirmwareLen += thisBlockLen;
 8000b6a:	6831      	ldr	r1, [r6, #0]
 8000b6c:	881a      	ldrh	r2, [r3, #0]
 8000b6e:	b292      	uxth	r2, r2
 8000b70:	440a      	add	r2, r1
 8000b72:	6032      	str	r2, [r6, #0]

    thisBlockLen = 0;
 8000b74:	2200      	movs	r2, #0
 8000b76:	801a      	strh	r2, [r3, #0]
 8000b78:	bd70      	pop	{r4, r5, r6, pc}
 8000b7a:	bf00      	nop
 8000b7c:	20000b1c 	andcs	r0, r0, ip, lsl fp
 8000b80:	20000b18 	andcs	r0, r0, r8, lsl fp
 8000b84:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000b88:	20000314 	andcs	r0, r0, r4, lsl r3

08000b8c <dfuUpdateByRequest>:
}




bool dfuUpdateByRequest(void) {
 8000b8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b90:	497f      	ldr	r1, [pc, #508]	; (8000d90 <dfuUpdateByRequest+0x204>)
	


    u8 startState = dfuAppStatus.bState;
 8000b92:	4c80      	ldr	r4, [pc, #512]	; (8000d94 <dfuUpdateByRequest+0x208>)


bool dfuUpdateByRequest(void) {
    /* were using the global pInformation struct from usb_lib here,
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
 8000b94:	2001      	movs	r0, #1
 8000b96:	7008      	strb	r0, [r1, #0]
	


    u8 startState = dfuAppStatus.bState;
 8000b98:	7923      	ldrb	r3, [r4, #4]
    dfuAppStatus.bStatus = OK;
 8000b9a:	2200      	movs	r2, #0
       see comment in maple_dfu.h around DFUEvent struct */
    dfuBusy = TRUE;
	


    u8 startState = dfuAppStatus.bState;
 8000b9c:	b2db      	uxtb	r3, r3
    dfuAppStatus.bStatus = OK;
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000b9e:	2b02      	cmp	r3, #2
    dfuBusy = TRUE;
	


    u8 startState = dfuAppStatus.bState;
    dfuAppStatus.bStatus = OK;
 8000ba0:	7022      	strb	r2, [r4, #0]
    /* often leaner to nest if's then embed a switch/case */
    if (startState == dfuIDLE)  {
 8000ba2:	d156      	bne.n	8000c52 <dfuUpdateByRequest+0xc6>
        /*  device running inside DFU mode */
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop
 8000ba4:	7008      	strb	r0, [r1, #0]

        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000ba6:	497c      	ldr	r1, [pc, #496]	; (8000d98 <dfuUpdateByRequest+0x20c>)
 8000ba8:	6809      	ldr	r1, [r1, #0]
 8000baa:	7848      	ldrb	r0, [r1, #1]
 8000bac:	2801      	cmp	r0, #1
 8000bae:	d126      	bne.n	8000bfe <dfuUpdateByRequest+0x72>

            if (pInformation->USBwLengths.w > 0) {
 8000bb0:	88c8      	ldrh	r0, [r1, #6]
 8000bb2:	2800      	cmp	r0, #0
 8000bb4:	f000 80c1 	beq.w	8000d3a <dfuUpdateByRequest+0x1ae>
                userFirmwareLen = 0;
 8000bb8:	4878      	ldr	r0, [pc, #480]	; (8000d9c <dfuUpdateByRequest+0x210>)
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
				switch(pInformation->Current_AlternateSetting)
 8000bba:	7b09      	ldrb	r1, [r1, #12]
        dfuBusy = TRUE; // signals the main loop to defer to the dfu write-loop

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
 8000bbc:	6002      	str	r2, [r0, #0]
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
				switch(pInformation->Current_AlternateSetting)
 8000bbe:	2901      	cmp	r1, #1

        if (pInformation->USBbRequest == DFU_DNLOAD) {

            if (pInformation->USBwLengths.w > 0) {
                userFirmwareLen = 0;
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000bc0:	f04f 0203 	mov.w	r2, #3
 8000bc4:	7122      	strb	r2, [r4, #4]
				switch(pInformation->Current_AlternateSetting)
 8000bc6:	d00b      	beq.n	8000be0 <dfuUpdateByRequest+0x54>
 8000bc8:	2902      	cmp	r1, #2
 8000bca:	d116      	bne.n	8000bfa <dfuUpdateByRequest+0x6e>
						flashUnlock();
						// Clear lower memory so that we can check on cold boot, whether the last upload was to 0x8002000 or 0x8005000
						flashErasePage((u32)USER_CODE_FLASH0X8002000);
						break;
					case 2:
						userUploadType = DFU_UPLOAD_FLASH_0X8002000;
 8000bcc:	4b74      	ldr	r3, [pc, #464]	; (8000da0 <dfuUpdateByRequest+0x214>)
 8000bce:	701a      	strb	r2, [r3, #0]
						userAppAddr = USER_CODE_FLASH0X8002000;
 8000bd0:	4a74      	ldr	r2, [pc, #464]	; (8000da4 <dfuUpdateByRequest+0x218>)
 8000bd2:	4b75      	ldr	r3, [pc, #468]	; (8000da8 <dfuUpdateByRequest+0x21c>)
 8000bd4:	601a      	str	r2, [r3, #0]
						/* make sure the flash is setup properly, unlock it */
						setupFLASH();
 8000bd6:	f7ff fe25 	bl	8000824 <setupFLASH>
						flashUnlock();
 8000bda:	f7ff fee9 	bl	80009b0 <flashUnlock>
						break;
 8000bde:	e0cf      	b.n	8000d80 <dfuUpdateByRequest+0x1f4>
					    userAppAddr = USER_CODE_RAM;
						userUploadType = DFU_UPLOAD_RAM;
						break;
						*/
					case 1:
					    userAppAddr = USER_CODE_FLASH0X8005000;
 8000be0:	4972      	ldr	r1, [pc, #456]	; (8000dac <dfuUpdateByRequest+0x220>)
 8000be2:	4a71      	ldr	r2, [pc, #452]	; (8000da8 <dfuUpdateByRequest+0x21c>)
 8000be4:	6011      	str	r1, [r2, #0]
						userUploadType = DFU_UPLOAD_FLASH_0X8005000;
 8000be6:	4a6e      	ldr	r2, [pc, #440]	; (8000da0 <dfuUpdateByRequest+0x214>)
 8000be8:	7013      	strb	r3, [r2, #0]
						
						/* make sure the flash is setup properly, unlock it */
						setupFLASH();
 8000bea:	f7ff fe1b 	bl	8000824 <setupFLASH>
						flashUnlock();
 8000bee:	f7ff fedf 	bl	80009b0 <flashUnlock>
						// Clear lower memory so that we can check on cold boot, whether the last upload was to 0x8002000 or 0x8005000
						flashErasePage((u32)USER_CODE_FLASH0X8002000);
 8000bf2:	486c      	ldr	r0, [pc, #432]	; (8000da4 <dfuUpdateByRequest+0x218>)
 8000bf4:	f7ff fe96 	bl	8000924 <flashErasePage>
						break;
 8000bf8:	e0c2      	b.n	8000d80 <dfuUpdateByRequest+0x1f4>
						setupFLASH();
						flashUnlock();
						break;
					default:
					// Roger Clark. Report error 
						dfuAppStatus.bState  = dfuERROR;
 8000bfa:	230a      	movs	r3, #10
 8000bfc:	e062      	b.n	8000cc4 <dfuUpdateByRequest+0x138>
				}
            } else {
                dfuAppStatus.bState  = dfuERROR;
                dfuAppStatus.bStatus = errNOTDONE;
            }
        } else if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000bfe:	2802      	cmp	r0, #2
 8000c00:	d121      	bne.n	8000c46 <dfuUpdateByRequest+0xba>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000c02:	2309      	movs	r3, #9
 8000c04:	7123      	strb	r3, [r4, #4]
            /* record length of first block for calculating target
               address from wValue in consecutive blocks */
            uploadBlockLen = pInformation->USBwLengths.w;
 8000c06:	88ca      	ldrh	r2, [r1, #6]
 8000c08:	4b69      	ldr	r3, [pc, #420]	; (8000db0 <dfuUpdateByRequest+0x224>)
 8000c0a:	801a      	strh	r2, [r3, #0]
            thisBlockLen = uploadBlockLen; /* for this first block as well */
 8000c0c:	8818      	ldrh	r0, [r3, #0]
 8000c0e:	4a69      	ldr	r2, [pc, #420]	; (8000db4 <dfuUpdateByRequest+0x228>)
 8000c10:	b280      	uxth	r0, r0
 8000c12:	8010      	strh	r0, [r2, #0]
            /* calculate where the data should be copied from */
            userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000c14:	881a      	ldrh	r2, [r3, #0]
 8000c16:	884b      	ldrh	r3, [r1, #2]
 8000c18:	b292      	uxth	r2, r2
 8000c1a:	435a      	muls	r2, r3
 8000c1c:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <dfuUpdateByRequest+0x210>)
 8000c1e:	601a      	str	r2, [r3, #0]
			switch(pInformation->Current_AlternateSetting)
 8000c20:	7b0b      	ldrb	r3, [r1, #12]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d003      	beq.n	8000c2e <dfuUpdateByRequest+0xa2>
 8000c26:	2b02      	cmp	r3, #2
 8000c28:	d109      	bne.n	8000c3e <dfuUpdateByRequest+0xb2>
				case 1:
				    userAppAddr = USER_CODE_FLASH0X8005000;
					userAppEnd = getFlashEnd();
					break;
				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 8000c2a:	4a5e      	ldr	r2, [pc, #376]	; (8000da4 <dfuUpdateByRequest+0x218>)
 8000c2c:	e000      	b.n	8000c30 <dfuUpdateByRequest+0xa4>
				case 0:
					userAppAddr = USER_CODE_RAM;
					userAppEnd = RAM_END;
					*/
				case 1:
				    userAppAddr = USER_CODE_FLASH0X8005000;
 8000c2e:	4a5f      	ldr	r2, [pc, #380]	; (8000dac <dfuUpdateByRequest+0x220>)
					userAppEnd = getFlashEnd();
					break;
				case 2: 
				    userAppAddr = USER_CODE_FLASH0X8002000;
 8000c30:	4b5d      	ldr	r3, [pc, #372]	; (8000da8 <dfuUpdateByRequest+0x21c>)
 8000c32:	601a      	str	r2, [r3, #0]
					userAppEnd = getFlashEnd();
 8000c34:	f7ff fed2 	bl	80009dc <getFlashEnd>
 8000c38:	4b5f      	ldr	r3, [pc, #380]	; (8000db8 <dfuUpdateByRequest+0x22c>)
 8000c3a:	6018      	str	r0, [r3, #0]
					break;
 8000c3c:	e0a0      	b.n	8000d80 <dfuUpdateByRequest+0x1f4>
				default:
				// Roger Clark. 
				// Changed this to report error that its unable to write to this memory
				// However the code should never get here as only AlternateSetting 1 and 2 are allowed (see above)
					dfuAppStatus.bState  = dfuERROR;
 8000c3e:	230a      	movs	r3, #10
 8000c40:	7123      	strb	r3, [r4, #4]
					dfuAppStatus.bStatus = errWRITE;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e09b      	b.n	8000d7e <dfuUpdateByRequest+0x1f2>
					break;					
			}
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000c46:	2806      	cmp	r0, #6
 8000c48:	d03c      	beq.n	8000cc4 <dfuUpdateByRequest+0x138>
            dfuAppStatus.bState  = dfuIDLE;
            dfuAppStatus.bStatus = OK;  /* are we really ok? we were just aborted */
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c4a:	2803      	cmp	r0, #3
 8000c4c:	d019      	beq.n	8000c82 <dfuUpdateByRequest+0xf6>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c4e:	2805      	cmp	r0, #5
 8000c50:	e03c      	b.n	8000ccc <dfuUpdateByRequest+0x140>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNLOAD_SYNC)         {
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d10b      	bne.n	8000c6e <dfuUpdateByRequest+0xe2>
        /* device received block, waiting for DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000c56:	4a50      	ldr	r2, [pc, #320]	; (8000d98 <dfuUpdateByRequest+0x20c>)
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	7852      	ldrb	r2, [r2, #1]
 8000c5c:	2a03      	cmp	r2, #3
 8000c5e:	d104      	bne.n	8000c6a <dfuUpdateByRequest+0xde>

            } 
			else 
			*/
			{
                dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000c60:	2305      	movs	r3, #5
 8000c62:	7123      	strb	r3, [r4, #4]
                dfuCopyBufferToExec();
 8000c64:	f7ff ff64 	bl	8000b30 <dfuCopyBufferToExec>
 8000c68:	e08a      	b.n	8000d80 <dfuUpdateByRequest+0x1f4>
            }

        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000c6a:	2a05      	cmp	r2, #5
 8000c6c:	e02e      	b.n	8000ccc <dfuUpdateByRequest+0x140>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuDNBUSY)              {
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	d109      	bne.n	8000c86 <dfuUpdateByRequest+0xfa>
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
 8000c72:	4952      	ldr	r1, [pc, #328]	; (8000dbc <dfuUpdateByRequest+0x230>)
 8000c74:	7808      	ldrb	r0, [r1, #0]
 8000c76:	2802      	cmp	r0, #2
 8000c78:	d103      	bne.n	8000c82 <dfuUpdateByRequest+0xf6>
            dfuAppStatus.bwPollTimeout0 = 0x00;
            code_copy_lock = WAIT;
 8000c7a:	2303      	movs	r3, #3
        }

    } else if (startState == dfuDNBUSY)              {
        /* if were actually done writing, goto sync, else stay busy */
        if (code_copy_lock == END) {
            dfuAppStatus.bwPollTimeout0 = 0x00;
 8000c7c:	7062      	strb	r2, [r4, #1]
            code_copy_lock = WAIT;
 8000c7e:	700b      	strb	r3, [r1, #0]
            dfuAppStatus.bState = dfuDNLOAD_IDLE;
 8000c80:	2305      	movs	r3, #5
 8000c82:	7123      	strb	r3, [r4, #4]
 8000c84:	e07c      	b.n	8000d80 <dfuUpdateByRequest+0x1f4>
        } else {
            dfuAppStatus.bState = dfuDNBUSY;
        }

    } else if (startState == dfuDNLOAD_IDLE)         {
 8000c86:	2b05      	cmp	r3, #5
 8000c88:	d114      	bne.n	8000cb4 <dfuUpdateByRequest+0x128>
        /* device is expecting dfu_dnload requests */
        if (pInformation->USBbRequest == DFU_DNLOAD) {
 8000c8a:	4b43      	ldr	r3, [pc, #268]	; (8000d98 <dfuUpdateByRequest+0x20c>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	7853      	ldrb	r3, [r2, #1]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	d108      	bne.n	8000ca6 <dfuUpdateByRequest+0x11a>
            if (pInformation->USBwLengths.w > 0) {
 8000c94:	88d3      	ldrh	r3, [r2, #6]
 8000c96:	b10b      	cbz	r3, 8000c9c <dfuUpdateByRequest+0x110>
                dfuAppStatus.bState  = dfuDNLOAD_SYNC;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	e7f2      	b.n	8000c82 <dfuUpdateByRequest+0xf6>
            } else {
                /* todo, support "disagreement" if device expects more data than this */
                dfuAppStatus.bState  = dfuMANIFEST_SYNC;
 8000c9c:	2306      	movs	r3, #6
 8000c9e:	7123      	strb	r3, [r4, #4]

                /* relock the flash */
                flashLock();
 8000ca0:	f7ff fe80 	bl	80009a4 <flashLock>
 8000ca4:	e06c      	b.n	8000d80 <dfuUpdateByRequest+0x1f4>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000ca6:	2b06      	cmp	r3, #6
 8000ca8:	d04d      	beq.n	8000d46 <dfuUpdateByRequest+0x1ba>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000caa:	2b03      	cmp	r3, #3
 8000cac:	d04b      	beq.n	8000d46 <dfuUpdateByRequest+0x1ba>
            dfuAppStatus.bState  = dfuIDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000cae:	2b05      	cmp	r3, #5
 8000cb0:	d162      	bne.n	8000d78 <dfuUpdateByRequest+0x1ec>
 8000cb2:	e048      	b.n	8000d46 <dfuUpdateByRequest+0x1ba>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST_SYNC)       {
 8000cb4:	2b06      	cmp	r3, #6
 8000cb6:	d10b      	bne.n	8000cd0 <dfuUpdateByRequest+0x144>
        /* device has received last block, waiting DFU_GETSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000cb8:	4937      	ldr	r1, [pc, #220]	; (8000d98 <dfuUpdateByRequest+0x20c>)
 8000cba:	6809      	ldr	r1, [r1, #0]
 8000cbc:	7849      	ldrb	r1, [r1, #1]
 8000cbe:	2903      	cmp	r1, #3
 8000cc0:	d103      	bne.n	8000cca <dfuUpdateByRequest+0x13e>
            dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
 8000cc2:	2308      	movs	r3, #8
 8000cc4:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000cc6:	7022      	strb	r2, [r4, #0]
 8000cc8:	e05a      	b.n	8000d80 <dfuUpdateByRequest+0x1f4>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000cca:	2905      	cmp	r1, #5
 8000ccc:	d154      	bne.n	8000d78 <dfuUpdateByRequest+0x1ec>
 8000cce:	e7d8      	b.n	8000c82 <dfuUpdateByRequest+0xf6>
        } else {
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else if (startState == dfuMANIFEST)            {
 8000cd0:	2b07      	cmp	r3, #7
 8000cd2:	d0f6      	beq.n	8000cc2 <dfuUpdateByRequest+0x136>

        /* should never receive request while in manifest! */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;
        dfuAppStatus.bStatus = OK;

    } else if (startState == dfuMANIFEST_WAIT_RESET) {
 8000cd4:	2b08      	cmp	r3, #8
 8000cd6:	d0d4      	beq.n	8000c82 <dfuUpdateByRequest+0xf6>
           usb reset or power on reset to run the new code */

        /* consider timing out and self-resetting */
        dfuAppStatus.bState  = dfuMANIFEST_WAIT_RESET;

    } else if (startState == dfuUPLOAD_IDLE)         {
 8000cd8:	2b09      	cmp	r3, #9
 8000cda:	d13c      	bne.n	8000d56 <dfuUpdateByRequest+0x1ca>
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
 8000cdc:	4b2e      	ldr	r3, [pc, #184]	; (8000d98 <dfuUpdateByRequest+0x20c>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	7853      	ldrb	r3, [r2, #1]
 8000ce2:	2b02      	cmp	r3, #2
 8000ce4:	d12d      	bne.n	8000d42 <dfuUpdateByRequest+0x1b6>
            if (pInformation->USBwLengths.w > 0) {
 8000ce6:	88d0      	ldrh	r0, [r2, #6]
 8000ce8:	b338      	cbz	r0, 8000d3a <dfuUpdateByRequest+0x1ae>
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000cea:	4931      	ldr	r1, [pc, #196]	; (8000db0 <dfuUpdateByRequest+0x224>)
 8000cec:	8852      	ldrh	r2, [r2, #2]
 8000cee:	880b      	ldrh	r3, [r1, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000cf0:	4d2d      	ldr	r5, [pc, #180]	; (8000da8 <dfuUpdateByRequest+0x21c>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	4353      	muls	r3, r2
 8000cf6:	4a29      	ldr	r2, [pc, #164]	; (8000d9c <dfuUpdateByRequest+0x210>)
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000cf8:	4e2f      	ldr	r6, [pc, #188]	; (8000db8 <dfuUpdateByRequest+0x22c>)
        /* device expecting further dfu_upload requests */

        if (pInformation->USBbRequest == DFU_UPLOAD) {
            if (pInformation->USBwLengths.w > 0) {
                /* check that this is not the last possible block */
                userFirmwareLen = uploadBlockLen * pInformation->USBwValue;
 8000cfa:	6013      	str	r3, [r2, #0]
                if (userAppAddr + userFirmwareLen + uploadBlockLen <= userAppEnd) {
 8000cfc:	682f      	ldr	r7, [r5, #0]
 8000cfe:	f8d2 8000 	ldr.w	r8, [r2]
 8000d02:	f8b1 c000 	ldrh.w	ip, [r1]
 8000d06:	4447      	add	r7, r8
 8000d08:	6833      	ldr	r3, [r6, #0]
 8000d0a:	fa1f fc8c 	uxth.w	ip, ip
 8000d0e:	4467      	add	r7, ip
 8000d10:	429f      	cmp	r7, r3
 8000d12:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <dfuUpdateByRequest+0x228>)
 8000d14:	d803      	bhi.n	8000d1e <dfuUpdateByRequest+0x192>
                    thisBlockLen = uploadBlockLen;
 8000d16:	880a      	ldrh	r2, [r1, #0]
 8000d18:	b292      	uxth	r2, r2
 8000d1a:	801a      	strh	r2, [r3, #0]
 8000d1c:	e019      	b.n	8000d52 <dfuUpdateByRequest+0x1c6>
                    dfuAppStatus.bState  = dfuUPLOAD_IDLE;
                } else {
                    /* if above comparison was just equal, thisBlockLen becomes zero
                    next time when USBWValue has been increased by one */
                    thisBlockLen = userAppEnd - userAppAddr - userFirmwareLen;
 8000d1e:	6836      	ldr	r6, [r6, #0]
 8000d20:	682d      	ldr	r5, [r5, #0]
 8000d22:	6811      	ldr	r1, [r2, #0]
 8000d24:	1b72      	subs	r2, r6, r5
 8000d26:	1a52      	subs	r2, r2, r1
 8000d28:	b292      	uxth	r2, r2
 8000d2a:	801a      	strh	r2, [r3, #0]
                    /* check for overflow due to USBwValue out of range */
                    if (thisBlockLen >= pInformation->USBwLengths.w) {
 8000d2c:	881a      	ldrh	r2, [r3, #0]
 8000d2e:	b292      	uxth	r2, r2
 8000d30:	4282      	cmp	r2, r0
 8000d32:	d308      	bcc.n	8000d46 <dfuUpdateByRequest+0x1ba>
                        thisBlockLen = 0;
 8000d34:	2200      	movs	r2, #0
 8000d36:	801a      	strh	r2, [r3, #0]
 8000d38:	e005      	b.n	8000d46 <dfuUpdateByRequest+0x1ba>
                    }
                    dfuAppStatus.bState  = dfuIDLE;
                }
            } else {
                dfuAppStatus.bState  = dfuERROR;
 8000d3a:	230a      	movs	r3, #10
 8000d3c:	7123      	strb	r3, [r4, #4]
                dfuAppStatus.bStatus = errNOTDONE;
 8000d3e:	2309      	movs	r3, #9
 8000d40:	e01d      	b.n	8000d7e <dfuUpdateByRequest+0x1f2>
            }
        } else if (pInformation->USBbRequest == DFU_ABORT) {
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d101      	bne.n	8000d4a <dfuUpdateByRequest+0x1be>
            dfuAppStatus.bState  = dfuIDLE;
 8000d46:	2302      	movs	r3, #2
 8000d48:	e79b      	b.n	8000c82 <dfuUpdateByRequest+0xf6>
        } else if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000d4a:	2b03      	cmp	r3, #3
 8000d4c:	d001      	beq.n	8000d52 <dfuUpdateByRequest+0x1c6>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d112      	bne.n	8000d78 <dfuUpdateByRequest+0x1ec>
            dfuAppStatus.bState  = dfuUPLOAD_IDLE;
 8000d52:	2309      	movs	r3, #9
 8000d54:	e795      	b.n	8000c82 <dfuUpdateByRequest+0xf6>
            dfuAppStatus.bState  = dfuERROR;
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }


    } else if (startState == dfuERROR)               {
 8000d56:	2b0a      	cmp	r3, #10
 8000d58:	d10e      	bne.n	8000d78 <dfuUpdateByRequest+0x1ec>
        /* status is in error, awaiting DFU_CLRSTATUS request */

        if (pInformation->USBbRequest == DFU_GETSTATUS) {
 8000d5a:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <dfuUpdateByRequest+0x20c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	785b      	ldrb	r3, [r3, #1]
 8000d60:	2b03      	cmp	r3, #3
 8000d62:	d101      	bne.n	8000d68 <dfuUpdateByRequest+0x1dc>
            /* todo, add routine to wait for last block write to finish */
            dfuAppStatus.bState  = dfuERROR;
 8000d64:	230a      	movs	r3, #10
 8000d66:	e78c      	b.n	8000c82 <dfuUpdateByRequest+0xf6>
        } else if (pInformation->USBbRequest == DFU_GETSTATE) {
 8000d68:	2b05      	cmp	r3, #5
 8000d6a:	d0fb      	beq.n	8000d64 <dfuUpdateByRequest+0x1d8>
            dfuAppStatus.bState  = dfuERROR;
        } else if (pInformation->USBbRequest == DFU_CLRSTATUS) {
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d103      	bne.n	8000d78 <dfuUpdateByRequest+0x1ec>
            /* todo handle any cleanup we need here */
            dfuAppStatus.bState  = dfuIDLE;
 8000d70:	2302      	movs	r3, #2
 8000d72:	7123      	strb	r3, [r4, #4]
            dfuAppStatus.bStatus = OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	e002      	b.n	8000d7e <dfuUpdateByRequest+0x1f2>
            dfuAppStatus.bStatus = errSTALLEDPKT;
        }

    } else {
        /* some kind of error... */
        dfuAppStatus.bState  = dfuERROR;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	7123      	strb	r3, [r4, #4]
        dfuAppStatus.bStatus = errSTALLEDPKT;
 8000d7c:	230f      	movs	r3, #15
 8000d7e:	7023      	strb	r3, [r4, #0]
    }

    if (dfuAppStatus.bStatus == OK) {
 8000d80:	7820      	ldrb	r0, [r4, #0]
        return TRUE;
    } else {
        return FALSE;
    }
}
 8000d82:	f1d0 0001 	rsbs	r0, r0, #1
 8000d86:	bf38      	it	cc
 8000d88:	2000      	movcc	r0, #0
 8000d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d8e:	bf00      	nop
 8000d90:	20000b23 	andcs	r0, r0, r3, lsr #22
 8000d94:	20000b1d 	andcs	r0, r0, sp, lsl fp
 8000d98:	20000304 	andcs	r0, r0, r4, lsl #6
 8000d9c:	20000b18 	andcs	r0, r0, r8, lsl fp
 8000da0:	20000b1c 	andcs	r0, r0, ip, lsl fp
 8000da4:	08002000 	stmdaeq	r0, {sp}
 8000da8:	200002c4 	andcs	r0, r0, r4, asr #5
 8000dac:	08005000 	stmdaeq	r0, {ip, lr}
 8000db0:	20000b14 	andcs	r0, r0, r4, lsl fp
 8000db4:	20000b16 	andcs	r0, r0, r6, lsl fp
 8000db8:	200002c0 	andcs	r0, r0, r0, asr #5
 8000dbc:	200002d0 	ldrdcs	r0, [r0], -r0	; <UNPREDICTABLE>

08000dc0 <dfuUploadStarted>:
void dfuSetState(u8 newState) {
    dfuAppStatus.bState = newState;
}

bool dfuUploadStarted() {
    return dfuBusy;
 8000dc0:	4b01      	ldr	r3, [pc, #4]	; (8000dc8 <dfuUploadStarted+0x8>)
 8000dc2:	7818      	ldrb	r0, [r3, #0]
}
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	20000b23 	andcs	r0, r0, r3, lsr #22

08000dcc <dfuFinishUpload>:

void dfuFinishUpload() {
    while (1)
	{
		__asm("nop");
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <dfuFinishUpload>

08000dd0 <SetEPTxStatus>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxStatus(u8 bEpNum, u16 wState)
{
  _SetEPTxStatus(bEpNum, wState);
 8000dd0:	0080      	lsls	r0, r0, #2
 8000dd2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000dd6:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000dda:	6803      	ldr	r3, [r0, #0]
 8000ddc:	06ca      	lsls	r2, r1, #27
 8000dde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000de2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000de6:	b29b      	uxth	r3, r3
 8000de8:	bf48      	it	mi
 8000dea:	f083 0310 	eormi.w	r3, r3, #16
 8000dee:	068a      	lsls	r2, r1, #26
 8000df0:	bf48      	it	mi
 8000df2:	f083 0320 	eormi.w	r3, r3, #32
 8000df6:	6003      	str	r3, [r0, #0]
 8000df8:	4770      	bx	lr

08000dfa <SetEPRxValid>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxValid(u8 bEpNum)
{
  _SetEPRxStatus(bEpNum, EP_RX_VALID);
 8000dfa:	0080      	lsls	r0, r0, #2
 8000dfc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000e00:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000e04:	6803      	ldr	r3, [r0, #0]
 8000e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e0e:	b29b      	uxth	r3, r3
 8000e10:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000e14:	6003      	str	r3, [r0, #0]
 8000e16:	4770      	bx	lr

08000e18 <Clear_Status_Out>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void Clear_Status_Out(u8 bEpNum)
{
  _ClearEP_KIND(bEpNum);
 8000e18:	0080      	lsls	r0, r0, #2
 8000e1a:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000e1e:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000e22:	6803      	ldr	r3, [r0, #0]
 8000e24:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8000e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000e2c:	041b      	lsls	r3, r3, #16
 8000e2e:	0c1b      	lsrs	r3, r3, #16
 8000e30:	6003      	str	r3, [r0, #0]
 8000e32:	4770      	bx	lr

08000e34 <ClearDTOG_RX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_RX(u8 bEpNum)
{
  _ClearDTOG_RX(bEpNum);
 8000e34:	0080      	lsls	r0, r0, #2
 8000e36:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000e3a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000e3e:	6803      	ldr	r3, [r0, #0]
 8000e40:	045b      	lsls	r3, r3, #17
 8000e42:	d506      	bpl.n	8000e52 <ClearDTOG_RX+0x1e>
 8000e44:	6802      	ldr	r2, [r0, #0]
 8000e46:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e50:	6003      	str	r3, [r0, #0]
 8000e52:	4770      	bx	lr

08000e54 <ClearDTOG_TX>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void ClearDTOG_TX(u8 bEpNum)
{
  _ClearDTOG_TX(bEpNum);
 8000e54:	0080      	lsls	r0, r0, #2
 8000e56:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
 8000e5a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 8000e5e:	6803      	ldr	r3, [r0, #0]
 8000e60:	065b      	lsls	r3, r3, #25
 8000e62:	d506      	bpl.n	8000e72 <ClearDTOG_TX+0x1e>
 8000e64:	6802      	ldr	r2, [r0, #0]
 8000e66:	f648 738f 	movw	r3, #36751	; 0x8f8f
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e70:	6003      	str	r3, [r0, #0]
 8000e72:	4770      	bx	lr

08000e74 <GetEPTxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPTxAddr(u8 bEpNum)
{
  return(_GetEPTxAddr(bEpNum));
 8000e74:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <GetEPTxAddr+0x18>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	b29b      	uxth	r3, r3
 8000e7a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e7e:	f100 5000 	add.w	r0, r0, #536870912	; 0x20000000
 8000e82:	f500 5040 	add.w	r0, r0, #12288	; 0x3000
 8000e86:	0040      	lsls	r0, r0, #1
}
 8000e88:	8800      	ldrh	r0, [r0, #0]
 8000e8a:	4770      	bx	lr
 8000e8c:	40005c50 	andmi	r5, r0, r0, asr ip

08000e90 <GetEPRxAddr>:
* Output         : None.
* Return         : Rx buffer address.
*******************************************************************************/
u16 GetEPRxAddr(u8 bEpNum)
{
  return(_GetEPRxAddr(bEpNum));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <GetEPRxAddr+0x14>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000e9a:	4b03      	ldr	r3, [pc, #12]	; (8000ea8 <GetEPRxAddr+0x18>)
 8000e9c:	4403      	add	r3, r0
 8000e9e:	005b      	lsls	r3, r3, #1
}
 8000ea0:	8818      	ldrh	r0, [r3, #0]
 8000ea2:	4770      	bx	lr
 8000ea4:	40005c50 	andmi	r5, r0, r0, asr ip
 8000ea8:	20003004 	andcs	r3, r0, r4

08000eac <SetEPTxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPTxCount(u8 bEpNum, u16 wCount)
{
  _SetEPTxCount(bEpNum, wCount);
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <SetEPTxCount+0x14>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000eb6:	4b03      	ldr	r3, [pc, #12]	; (8000ec4 <SetEPTxCount+0x18>)
 8000eb8:	4403      	add	r3, r0
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	6019      	str	r1, [r3, #0]
 8000ebe:	4770      	bx	lr
 8000ec0:	40005c50 	andmi	r5, r0, r0, asr ip
 8000ec4:	20003002 	andcs	r3, r0, r2

08000ec8 <SetEPRxCount>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPRxCount(u8 bEpNum, u16 wCount)
{
  _SetEPRxCount(bEpNum, wCount);
 8000ec8:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <SetEPRxCount+0x38>)
 8000eca:	293e      	cmp	r1, #62	; 0x3e
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	b29b      	uxth	r3, r3
 8000ed0:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <SetEPRxCount+0x3c>)
 8000ed6:	4403      	add	r3, r0
 8000ed8:	ea4f 0243 	mov.w	r2, r3, lsl #1
 8000edc:	d909      	bls.n	8000ef2 <SetEPRxCount+0x2a>
 8000ede:	094b      	lsrs	r3, r1, #5
 8000ee0:	06c8      	lsls	r0, r1, #27
 8000ee2:	bf04      	itt	eq
 8000ee4:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000ee8:	b29b      	uxtheq	r3, r3
 8000eea:	029b      	lsls	r3, r3, #10
 8000eec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ef0:	e004      	b.n	8000efc <SetEPRxCount+0x34>
 8000ef2:	084b      	lsrs	r3, r1, #1
 8000ef4:	07c9      	lsls	r1, r1, #31
 8000ef6:	bf48      	it	mi
 8000ef8:	3301      	addmi	r3, #1
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4770      	bx	lr
 8000f00:	40005c50 	andmi	r5, r0, r0, asr ip
 8000f04:	20003006 	andcs	r3, r0, r6

08000f08 <CTR_LP>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void CTR_LP(void)
{
 8000f08:	b570      	push	{r4, r5, r6, lr}
  u32 wEPVal = 0;
  /* stay in loop while pending ints */
  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
 8000f0a:	4a4c      	ldr	r2, [pc, #304]	; (800103c <CTR_LP+0x134>)
 8000f0c:	4b4c      	ldr	r3, [pc, #304]	; (8001040 <CTR_LP+0x138>)
 8000f0e:	6811      	ldr	r1, [r2, #0]
 8000f10:	b288      	uxth	r0, r1
 8000f12:	040c      	lsls	r4, r1, #16
 8000f14:	8018      	strh	r0, [r3, #0]
 8000f16:	f140 8090 	bpl.w	800103a <CTR_LP+0x132>
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
 8000f1a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8000f1e:	6011      	str	r1, [r2, #0]
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
 8000f20:	881a      	ldrh	r2, [r3, #0]
 8000f22:	4c48      	ldr	r4, [pc, #288]	; (8001044 <CTR_LP+0x13c>)
 8000f24:	f002 020f 	and.w	r2, r2, #15
 8000f28:	7022      	strb	r2, [r4, #0]
    if (EPindex == 0)
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	d15f      	bne.n	8000fee <CTR_LP+0xe6>
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000f2e:	4c46      	ldr	r4, [pc, #280]	; (8001048 <CTR_LP+0x140>)
 8000f30:	4d46      	ldr	r5, [pc, #280]	; (800104c <CTR_LP+0x144>)
 8000f32:	6822      	ldr	r2, [r4, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000f34:	4e46      	ldr	r6, [pc, #280]	; (8001050 <CTR_LP+0x148>)
      /* calling related service routine */
      /* (Setup0_Process, In0_Process, Out0_Process) */

      /* save RX & TX status */
      /* and set both to NAK */
      SaveRState = _GetEPRxStatus(ENDP0);
 8000f36:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 8000f3a:	802a      	strh	r2, [r5, #0]
      SaveTState = _GetEPTxStatus(ENDP0);
 8000f3c:	6822      	ldr	r2, [r4, #0]
 8000f3e:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8000f42:	8032      	strh	r2, [r6, #0]
      _SetEPRxStatus(ENDP0, EP_RX_NAK);
 8000f44:	6822      	ldr	r2, [r4, #0]
 8000f46:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000f4a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8000f4e:	b292      	uxth	r2, r2
 8000f50:	f482 5200 	eor.w	r2, r2, #8192	; 0x2000
 8000f54:	6022      	str	r2, [r4, #0]
      _SetEPTxStatus(ENDP0, EP_TX_NAK);
 8000f56:	6822      	ldr	r2, [r4, #0]
 8000f58:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 8000f5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000f60:	b292      	uxth	r2, r2
 8000f62:	f082 0220 	eor.w	r2, r2, #32
 8000f66:	6022      	str	r2, [r4, #0]


      /* DIR bit = origin of the interrupt */

      if ((wIstr & ISTR_DIR) == 0)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	06d8      	lsls	r0, r3, #27
 8000f6c:	d502      	bpl.n	8000f74 <CTR_LP+0x6c>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX       => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */

        wEPVal = _GetENDPOINT(ENDP0);
 8000f6e:	6823      	ldr	r3, [r4, #0]
        if ((wEPVal & EP_CTR_TX) != 0)
 8000f70:	0619      	lsls	r1, r3, #24
 8000f72:	d507      	bpl.n	8000f84 <CTR_LP+0x7c>
        {
          _ClearEP_CTR_TX(ENDP0);
 8000f74:	6822      	ldr	r2, [r4, #0]
 8000f76:	f648 730f 	movw	r3, #36623	; 0x8f0f
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	6023      	str	r3, [r4, #0]
          In0_Process();
 8000f7e:	f000 fc61 	bl	8001844 <In0_Process>
 8000f82:	e012      	b.n	8000faa <CTR_LP+0xa2>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }
        else if ((wEPVal &EP_SETUP) != 0)
 8000f84:	051a      	lsls	r2, r3, #20
 8000f86:	d507      	bpl.n	8000f98 <CTR_LP+0x90>
        {
          _ClearEP_CTR_RX(ENDP0); /* SETUP bit kept frozen while CTR_RX = 1 */
 8000f88:	6822      	ldr	r2, [r4, #0]
 8000f8a:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000f8e:	4013      	ands	r3, r2
 8000f90:	6023      	str	r3, [r4, #0]
          Setup0_Process();
 8000f92:	f000 fa69 	bl	8001468 <Setup0_Process>
 8000f96:	e008      	b.n	8000faa <CTR_LP+0xa2>
          _SetEPRxStatus(ENDP0, SaveRState);
          _SetEPTxStatus(ENDP0, SaveTState);
          return;
        }

        else if ((wEPVal & EP_CTR_RX) != 0)
 8000f98:	0418      	lsls	r0, r3, #16
 8000f9a:	d5b6      	bpl.n	8000f0a <CTR_LP+0x2>
        {
          _ClearEP_CTR_RX(ENDP0);
 8000f9c:	6822      	ldr	r2, [r4, #0]
 8000f9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	6023      	str	r3, [r4, #0]
          Out0_Process();
 8000fa6:	f000 fbcd 	bl	8001744 <Out0_Process>
          /* before terminate set Tx & Rx status */
          _SetEPRxStatus(ENDP0, SaveRState);
 8000faa:	6823      	ldr	r3, [r4, #0]
 8000fac:	882a      	ldrh	r2, [r5, #0]
 8000fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	04d1      	lsls	r1, r2, #19
 8000fba:	bf48      	it	mi
 8000fbc:	f483 5380 	eormi.w	r3, r3, #4096	; 0x1000
 8000fc0:	0495      	lsls	r5, r2, #18
 8000fc2:	4a21      	ldr	r2, [pc, #132]	; (8001048 <CTR_LP+0x140>)
 8000fc4:	bf48      	it	mi
 8000fc6:	f483 5300 	eormi.w	r3, r3, #8192	; 0x2000
 8000fca:	6013      	str	r3, [r2, #0]
          _SetEPTxStatus(ENDP0, SaveTState);
 8000fcc:	6813      	ldr	r3, [r2, #0]
 8000fce:	8831      	ldrh	r1, [r6, #0]
 8000fd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8000fd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	06cc      	lsls	r4, r1, #27
 8000fdc:	bf48      	it	mi
 8000fde:	f083 0310 	eormi.w	r3, r3, #16
 8000fe2:	0688      	lsls	r0, r1, #26
 8000fe4:	bf48      	it	mi
 8000fe6:	f083 0320 	eormi.w	r3, r3, #32
 8000fea:	6013      	str	r3, [r2, #0]
          return;
 8000fec:	bd70      	pop	{r4, r5, r6, pc}
    else
    {
      /* Decode and service non control endpoints interrupt  */

      /* process related endpoint register */
      wEPVal = _GetENDPOINT(EPindex);
 8000fee:	0093      	lsls	r3, r2, #2
 8000ff0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ff4:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8000ff8:	681d      	ldr	r5, [r3, #0]
      if ((wEPVal & EP_CTR_RX) != 0)
 8000ffa:	0429      	lsls	r1, r5, #16
 8000ffc:	d509      	bpl.n	8001012 <CTR_LP+0x10a>
      {
        /* clear int flag */
        _ClearEP_CTR_RX(EPindex);
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	f640 718f 	movw	r1, #3983	; 0xf8f
 8001004:	4001      	ands	r1, r0
 8001006:	6019      	str	r1, [r3, #0]

        /* call OUT service function */
        (*pEpInt_OUT[EPindex-1])();
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <CTR_LP+0x14c>)
 800100a:	3a01      	subs	r2, #1
 800100c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001010:	4798      	blx	r3

      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
 8001012:	062b      	lsls	r3, r5, #24
 8001014:	f57f af79 	bpl.w	8000f0a <CTR_LP+0x2>
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 8001018:	7821      	ldrb	r1, [r4, #0]
 800101a:	f648 720f 	movw	r2, #36623	; 0x8f0f
 800101e:	008b      	lsls	r3, r1, #2
 8001020:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001024:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
 8001028:	6818      	ldr	r0, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 800102a:	3901      	subs	r1, #1
      } /* if((wEPVal & EP_CTR_RX) */

      if ((wEPVal & EP_CTR_TX) != 0)
      {
        /* clear int flag */
        _ClearEP_CTR_TX(EPindex);
 800102c:	4002      	ands	r2, r0
 800102e:	601a      	str	r2, [r3, #0]

        /* call IN service function */
        (*pEpInt_IN[EPindex-1])();
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <CTR_LP+0x150>)
 8001032:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001036:	4798      	blx	r3
 8001038:	e767      	b.n	8000f0a <CTR_LP+0x2>
 800103a:	bd70      	pop	{r4, r5, r6, pc}
 800103c:	40005c44 	andmi	r5, r0, r4, asr #24
 8001040:	200002cc 	andcs	r0, r0, ip, asr #5
 8001044:	200002e0 	andcs	r0, r0, r0, ror #5
 8001048:	40005c00 	andmi	r5, r0, r0, lsl #24
 800104c:	200002d2 	ldrdcs	r0, [r0], -r2
 8001050:	200002d4 	ldrdcs	r0, [r0], -r4
 8001054:	20000050 	andcs	r0, r0, r0, asr r0
 8001058:	20000034 	andcs	r0, r0, r4, lsr r0

0800105c <USB_Init>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
 800105c:	b508      	push	{r3, lr}
  pInformation = &Device_Info;
 800105e:	4a07      	ldr	r2, [pc, #28]	; (800107c <USB_Init+0x20>)
 8001060:	4b07      	ldr	r3, [pc, #28]	; (8001080 <USB_Init+0x24>)
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8001062:	4908      	ldr	r1, [pc, #32]	; (8001084 <USB_Init+0x28>)
* Output         : None.
* Return         : None.
*******************************************************************************/
void USB_Init(void)
{
  pInformation = &Device_Info;
 8001064:	6013      	str	r3, [r2, #0]
  pInformation->ControlState = 2;
 8001066:	2202      	movs	r2, #2
 8001068:	721a      	strb	r2, [r3, #8]
  pProperty = &Device_Property;
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <USB_Init+0x2c>)
 800106c:	4a07      	ldr	r2, [pc, #28]	; (800108c <USB_Init+0x30>)
 800106e:	6013      	str	r3, [r2, #0]
  pUser_Standard_Requests = &User_Standard_Requests;
 8001070:	4a07      	ldr	r2, [pc, #28]	; (8001090 <USB_Init+0x34>)
  /* Initialize devices one by one */

  pProperty->Init();
 8001072:	681b      	ldr	r3, [r3, #0]
void USB_Init(void)
{
  pInformation = &Device_Info;
  pInformation->ControlState = 2;
  pProperty = &Device_Property;
  pUser_Standard_Requests = &User_Standard_Requests;
 8001074:	6011      	str	r1, [r2, #0]
  /* Initialize devices one by one */

  pProperty->Init();
 8001076:	4798      	blx	r3
 8001078:	bd08      	pop	{r3, pc}
 800107a:	bf00      	nop
 800107c:	20000304 	andcs	r0, r0, r4, lsl #6
 8001080:	200002e4 	andcs	r0, r0, r4, ror #5
 8001084:	2000006c 	andcs	r0, r0, ip, rrx
 8001088:	20000000 	andcs	r0, r0, r0
 800108c:	200002dc 	ldrdcs	r0, [r0], -ip
 8001090:	20000300 	andcs	r0, r0, r0, lsl #6

08001094 <Standard_GetConfiguration>:
* Output         : None.
* Return         : Return 1 , if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetConfiguration(u16 Length)
{
 8001094:	b510      	push	{r4, lr}
 8001096:	4c06      	ldr	r4, [pc, #24]	; (80010b0 <Standard_GetConfiguration+0x1c>)
  if (Length == 0)
 8001098:	b918      	cbnz	r0, 80010a2 <Standard_GetConfiguration+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 800109a:	6823      	ldr	r3, [r4, #0]
 800109c:	2201      	movs	r2, #1
 800109e:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_Configuration);
    return 0;
 80010a0:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetConfiguration();
 80010a2:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <Standard_GetConfiguration+0x20>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4798      	blx	r3
  return (u8 *)&pInformation->Current_Configuration;
 80010aa:	6820      	ldr	r0, [r4, #0]
 80010ac:	300a      	adds	r0, #10
}
 80010ae:	bd10      	pop	{r4, pc}
 80010b0:	20000304 	andcs	r0, r0, r4, lsl #6
 80010b4:	20000300 	andcs	r0, r0, r0, lsl #6

080010b8 <Standard_GetInterface>:
* Output         : None.
* Return         : Return 0, if the request is invalid when "Length" is 0.
*                  Return "Buffer" if the "Length" is not 0.
*******************************************************************************/
u8 *Standard_GetInterface(u16 Length)
{
 80010b8:	b510      	push	{r4, lr}
 80010ba:	4c06      	ldr	r4, [pc, #24]	; (80010d4 <Standard_GetInterface+0x1c>)
  if (Length == 0)
 80010bc:	b918      	cbnz	r0, 80010c6 <Standard_GetInterface+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength =
 80010be:	6823      	ldr	r3, [r4, #0]
 80010c0:	2201      	movs	r2, #1
 80010c2:	821a      	strh	r2, [r3, #16]
      sizeof(pInformation->Current_AlternateSetting);
    return 0;
 80010c4:	bd10      	pop	{r4, pc}
  }
  pUser_Standard_Requests->User_GetInterface();
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <Standard_GetInterface+0x20>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	4798      	blx	r3
  return (u8 *)&pInformation->Current_AlternateSetting;
 80010ce:	6820      	ldr	r0, [r4, #0]
 80010d0:	300c      	adds	r0, #12
}
 80010d2:	bd10      	pop	{r4, pc}
 80010d4:	20000304 	andcs	r0, r0, r4, lsl #6
 80010d8:	20000300 	andcs	r0, r0, r0, lsl #6

080010dc <Standard_GetStatus>:
* Output         : None.
* Return         : Return 0, if the request is at end of data block,
*                  or is invalid when "Length" is 0.
*******************************************************************************/
u8 *Standard_GetStatus(u16 Length)
{
 80010dc:	b510      	push	{r4, lr}
 80010de:	4b20      	ldr	r3, [pc, #128]	; (8001160 <Standard_GetStatus+0x84>)
  if (Length == 0)
 80010e0:	b918      	cbnz	r0, 80010ea <Standard_GetStatus+0xe>
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2202      	movs	r2, #2
 80010e6:	821a      	strh	r2, [r3, #16]
    return 0;
 80010e8:	bd10      	pop	{r4, pc}
  }

  StatusInfo.w = 0;
 80010ea:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <Standard_GetStatus+0x88>)
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80010ec:	6819      	ldr	r1, [r3, #0]
  {
    pInformation->Ctrl_Info.Usb_wLength = 2;
    return 0;
  }

  StatusInfo.w = 0;
 80010ee:	2000      	movs	r0, #0
 80010f0:	8010      	strh	r0, [r2, #0]
  /* Reset Status Information */

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80010f2:	780c      	ldrb	r4, [r1, #0]
 80010f4:	4613      	mov	r3, r2
 80010f6:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
 80010fa:	d10d      	bne.n	8001118 <Standard_GetStatus+0x3c>
  {
    /*Get Device Status */
    u8 Feature = pInformation->Current_Feature;
 80010fc:	7a4a      	ldrb	r2, [r1, #9]

    /* Remote Wakeup enabled */
    if (ValBit(Feature, 5))
 80010fe:	0691      	lsls	r1, r2, #26
    {
      SetBit(StatusInfo0, 1);
 8001100:	bf44      	itt	mi
 8001102:	2102      	movmi	r1, #2
 8001104:	7019      	strbmi	r1, [r3, #0]
    }

    /* Bus-powered */
    if (ValBit(Feature, 6))
 8001106:	f012 0f40 	tst.w	r2, #64	; 0x40
    {
      ClrBit(StatusInfo0, 0);
 800110a:	781a      	ldrb	r2, [r3, #0]
 800110c:	bf14      	ite	ne
 800110e:	f022 0201 	bicne.w	r2, r2, #1
    }
    else /* Self-powered */
    {
      SetBit(StatusInfo0, 0);
 8001112:	f042 0201 	orreq.w	r2, r2, #1
 8001116:	e014      	b.n	8001142 <Standard_GetStatus+0x66>
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001118:	2c01      	cmp	r4, #1
 800111a:	d01f      	beq.n	800115c <Standard_GetStatus+0x80>
  {
    return (u8 *)&StatusInfo;
  }
  /*Get EndPoint Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800111c:	2c02      	cmp	r4, #2
 800111e:	d11e      	bne.n	800115e <Standard_GetStatus+0x82>
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;
 8001120:	7909      	ldrb	r1, [r1, #4]

    Related_Endpoint = (wIndex0 & 0x0f);
 8001122:	f001 020f 	and.w	r2, r1, #15
 8001126:	0092      	lsls	r2, r2, #2
    if (ValBit(wIndex0, 7))
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001128:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800112c:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001130:	f011 0f80 	tst.w	r1, #128	; 0x80
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001134:	6812      	ldr	r2, [r2, #0]
  {
    u8 Related_Endpoint;
    u8 wIndex0 = pInformation->USBwIndex0;

    Related_Endpoint = (wIndex0 & 0x0f);
    if (ValBit(wIndex0, 7))
 8001136:	d006      	beq.n	8001146 <Standard_GetStatus+0x6a>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint))
 8001138:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800113c:	2a10      	cmp	r2, #16
 800113e:	d107      	bne.n	8001150 <Standard_GetStatus+0x74>
      {
        SetBit(StatusInfo0, 0); /* IN Endpoint stalled */
 8001140:	2201      	movs	r2, #1
 8001142:	701a      	strb	r2, [r3, #0]
 8001144:	e004      	b.n	8001150 <Standard_GetStatus+0x74>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001146:	f402 5240 	and.w	r2, r2, #12288	; 0x3000
 800114a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800114e:	e7f6      	b.n	800113e <Standard_GetStatus+0x62>
  }
  else
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
 8001150:	4b05      	ldr	r3, [pc, #20]	; (8001168 <Standard_GetStatus+0x8c>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	691b      	ldr	r3, [r3, #16]
 8001156:	4798      	blx	r3
  return (u8 *)&StatusInfo;
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <Standard_GetStatus+0x88>)
 800115a:	bd10      	pop	{r4, pc}
    }
  }
  /*Interface Status*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
  {
    return (u8 *)&StatusInfo;
 800115c:	4610      	mov	r0, r2
  {
    return NULL;
  }
  pUser_Standard_Requests->User_GetStatus();
  return (u8 *)&StatusInfo;
}
 800115e:	bd10      	pop	{r4, pc}
 8001160:	20000304 	andcs	r0, r0, r4, lsl #6
 8001164:	2000030a 	andcs	r0, r0, sl, lsl #6
 8001168:	20000300 	andcs	r0, r0, r0, lsl #6

0800116c <DataStageIn>:
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <DataStageIn+0x90>)
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void DataStageIn(void)
{
 800116e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
 8001172:	6814      	ldr	r4, [r2, #0]
 8001174:	4690      	mov	r8, r2
  u32 save_wLength = pEPinfo->Usb_wLength;
 8001176:	8a23      	ldrh	r3, [r4, #16]
  u32 ControlState = pInformation->ControlState;
 8001178:	7a26      	ldrb	r6, [r4, #8]
 800117a:	4f21      	ldr	r7, [pc, #132]	; (8001200 <DataStageIn+0x94>)

  u8 *DataBuffer;
  u32 Length;

  if ((save_wLength == 0) && (ControlState == LAST_IN_DATA))
 800117c:	b9a3      	cbnz	r3, 80011a8 <DataStageIn+0x3c>
 800117e:	2e04      	cmp	r6, #4
 8001180:	d112      	bne.n	80011a8 <DataStageIn+0x3c>
  {
    if(Data_Mul_MaxPacketSize == TRUE)
 8001182:	4920      	ldr	r1, [pc, #128]	; (8001204 <DataStageIn+0x98>)
 8001184:	780a      	ldrb	r2, [r1, #0]
 8001186:	2a01      	cmp	r2, #1
 8001188:	d10a      	bne.n	80011a0 <DataStageIn+0x34>
    {
      /* No more data to send and empty packet */
      Send0LengthData();
 800118a:	4a1f      	ldr	r2, [pc, #124]	; (8001208 <DataStageIn+0x9c>)
 800118c:	6810      	ldr	r0, [r2, #0]
 800118e:	4a1f      	ldr	r2, [pc, #124]	; (800120c <DataStageIn+0xa0>)
 8001190:	b280      	uxth	r0, r0
 8001192:	4402      	add	r2, r0
 8001194:	0052      	lsls	r2, r2, #1
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	2230      	movs	r2, #48	; 0x30
 800119a:	803a      	strh	r2, [r7, #0]
      ControlState = LAST_IN_DATA;
      Data_Mul_MaxPacketSize = FALSE;
 800119c:	700b      	strb	r3, [r1, #0]
 800119e:	e027      	b.n	80011f0 <DataStageIn+0x84>
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
      vSetEPTxStatus(EP_TX_STALL);
 80011a0:	2310      	movs	r3, #16
 80011a2:	803b      	strh	r3, [r7, #0]
      Data_Mul_MaxPacketSize = FALSE;
    }
    else
    {
      /* No more data to send so STALL the TX Status*/
      ControlState = WAIT_STATUS_OUT;
 80011a4:	2607      	movs	r6, #7
 80011a6:	e023      	b.n	80011f0 <DataStageIn+0x84>
    }

    goto Expect_Status_Out;
  }

  Length = pEPinfo->PacketSize;
 80011a8:	8aa5      	ldrh	r5, [r4, #20]
  ControlState = (save_wLength <= Length) ? LAST_IN_DATA : IN_DATA;
 80011aa:	42ab      	cmp	r3, r5
 80011ac:	bf8c      	ite	hi
 80011ae:	2602      	movhi	r6, #2
 80011b0:	2604      	movls	r6, #4
  if (Length > save_wLength)
  {
    Length = save_wLength;
  }

  DataBuffer = (*pEPinfo->CopyData)(Length);
 80011b2:	429d      	cmp	r5, r3
 80011b4:	bf28      	it	cs
 80011b6:	461d      	movcs	r5, r3
 80011b8:	4628      	mov	r0, r5
 80011ba:	69a3      	ldr	r3, [r4, #24]
 80011bc:	4798      	blx	r3
 80011be:	4681      	mov	r9, r0

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);
 80011c0:	2000      	movs	r0, #0
 80011c2:	f7ff fe57 	bl	8000e74 <GetEPTxAddr>
 80011c6:	462a      	mov	r2, r5
 80011c8:	4601      	mov	r1, r0
 80011ca:	4648      	mov	r0, r9
 80011cc:	f000 fb68 	bl	80018a0 <UserToPMABufferCopy>

  SetEPTxCount(ENDP0, Length);
 80011d0:	4629      	mov	r1, r5
 80011d2:	2000      	movs	r0, #0
 80011d4:	f7ff fe6a 	bl	8000eac <SetEPTxCount>

  pEPinfo->Usb_wLength -= Length;
 80011d8:	8a23      	ldrh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80011da:	f44f 5240 	mov.w	r2, #12288	; 0x3000

  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
 80011de:	1b5b      	subs	r3, r3, r5
 80011e0:	8223      	strh	r3, [r4, #16]
  pEPinfo->Usb_wOffset += Length;
 80011e2:	8a63      	ldrh	r3, [r4, #18]
 80011e4:	441d      	add	r5, r3
  vSetEPTxStatus(EP_TX_VALID);
 80011e6:	2330      	movs	r3, #48	; 0x30
 80011e8:	803b      	strh	r3, [r7, #0]

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <DataStageIn+0xa4>)
  UserToPMABufferCopy(DataBuffer, GetEPTxAddr(ENDP0), Length);

  SetEPTxCount(ENDP0, Length);

  pEPinfo->Usb_wLength -= Length;
  pEPinfo->Usb_wOffset += Length;
 80011ec:	8265      	strh	r5, [r4, #18]
  vSetEPTxStatus(EP_TX_VALID);

  USB_StatusOut();/* Expect the host to abort the data IN stage */
 80011ee:	801a      	strh	r2, [r3, #0]

Expect_Status_Out:
  pInformation->ControlState = ControlState;
 80011f0:	f8d8 3000 	ldr.w	r3, [r8]
 80011f4:	721e      	strb	r6, [r3, #8]
 80011f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80011fa:	bf00      	nop
 80011fc:	20000304 	andcs	r0, r0, r4, lsl #6
 8001200:	200002d4 	ldrdcs	r0, [r0], -r4
 8001204:	20000b24 	andcs	r0, r0, r4, lsr #22
 8001208:	40005c50 	andmi	r5, r0, r0, asr ip
 800120c:	20003002 	andcs	r3, r0, r2
 8001210:	200002d2 	ldrdcs	r0, [r0], -r2

08001214 <Standard_SetConfiguration>:
* Output         : None.
* Return         : Return USB_SUCCESS, if the request is performed.
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{
 8001214:	b510      	push	{r4, lr}

  if ((pInformation->USBwValue0 <=
 8001216:	4b0a      	ldr	r3, [pc, #40]	; (8001240 <Standard_SetConfiguration+0x2c>)
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001218:	490a      	ldr	r1, [pc, #40]	; (8001244 <Standard_SetConfiguration+0x30>)
*                  Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetConfiguration(void)
{

  if ((pInformation->USBwValue0 <=
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	7849      	ldrb	r1, [r1, #1]
 800121e:	789a      	ldrb	r2, [r3, #2]
 8001220:	4291      	cmp	r1, r2
 8001222:	d30a      	bcc.n	800123a <Standard_SetConfiguration+0x26>
      Device_Table.Total_Configuration) && (pInformation->USBwValue1 == 0)
 8001224:	78d9      	ldrb	r1, [r3, #3]
 8001226:	b941      	cbnz	r1, 800123a <Standard_SetConfiguration+0x26>
      && (pInformation->USBwIndex == 0)) /*call Back usb spec 2.0*/
 8001228:	889c      	ldrh	r4, [r3, #4]
 800122a:	b934      	cbnz	r4, 800123a <Standard_SetConfiguration+0x26>
  {
    pInformation->Current_Configuration = pInformation->USBwValue0;
 800122c:	729a      	strb	r2, [r3, #10]
    pUser_Standard_Requests->User_SetConfiguration();
 800122e:	4b06      	ldr	r3, [pc, #24]	; (8001248 <Standard_SetConfiguration+0x34>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4798      	blx	r3
    return USB_SUCCESS;
 8001236:	4620      	mov	r0, r4
 8001238:	bd10      	pop	{r4, pc}
  }
  else
  {
    return USB_UNSUPPORT;
 800123a:	2002      	movs	r0, #2
  }
}
 800123c:	bd10      	pop	{r4, pc}
 800123e:	bf00      	nop
 8001240:	20000304 	andcs	r0, r0, r4, lsl #6
 8001244:	20000090 	mulcs	r0, r0, r0
 8001248:	20000300 	andcs	r0, r0, r0, lsl #6

0800124c <Standard_SetInterface>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetInterface(void)
{
 800124c:	b538      	push	{r3, r4, r5, lr}
  RESULT Re;
  /*Test if the specified Interface and Alternate Setting are supported by
    the application Firmware*/
  Re = (*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, pInformation->USBwValue0);
 800124e:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <Standard_SetInterface+0x3c>)
 8001250:	4c0e      	ldr	r4, [pc, #56]	; (800128c <Standard_SetInterface+0x40>)
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	6992      	ldr	r2, [r2, #24]
 8001258:	7918      	ldrb	r0, [r3, #4]
 800125a:	7899      	ldrb	r1, [r3, #2]
 800125c:	4790      	blx	r2

  if (pInformation->Current_Configuration != 0)
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	7a9a      	ldrb	r2, [r3, #10]
 8001262:	b17a      	cbz	r2, 8001284 <Standard_SetInterface+0x38>
  {
    if ((Re != USB_SUCCESS) || (pInformation->USBwIndex1 != 0)
 8001264:	b970      	cbnz	r0, 8001284 <Standard_SetInterface+0x38>
 8001266:	795a      	ldrb	r2, [r3, #5]
 8001268:	b962      	cbnz	r2, 8001284 <Standard_SetInterface+0x38>
        || (pInformation->USBwValue1 != 0))
 800126a:	78dd      	ldrb	r5, [r3, #3]
 800126c:	b955      	cbnz	r5, 8001284 <Standard_SetInterface+0x38>
    {
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
 800126e:	4b08      	ldr	r3, [pc, #32]	; (8001290 <Standard_SetInterface+0x44>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	4798      	blx	r3
      pInformation->Current_Interface = pInformation->USBwIndex0;
 8001276:	6823      	ldr	r3, [r4, #0]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
      return USB_SUCCESS;
 8001278:	4628      	mov	r0, r5
      return  USB_UNSUPPORT;
    }
    else if (Re == USB_SUCCESS)
    {
      pUser_Standard_Requests->User_SetInterface();
      pInformation->Current_Interface = pInformation->USBwIndex0;
 800127a:	791a      	ldrb	r2, [r3, #4]
 800127c:	72da      	strb	r2, [r3, #11]
      pInformation->Current_AlternateSetting = pInformation->USBwValue0;
 800127e:	789a      	ldrb	r2, [r3, #2]
 8001280:	731a      	strb	r2, [r3, #12]
      return USB_SUCCESS;
 8001282:	bd38      	pop	{r3, r4, r5, pc}
    }

  }

  return USB_UNSUPPORT;
 8001284:	2002      	movs	r0, #2
}
 8001286:	bd38      	pop	{r3, r4, r5, pc}
 8001288:	200002dc 	ldrdcs	r0, [r0], -ip
 800128c:	20000304 	andcs	r0, r0, r4, lsl #6
 8001290:	20000300 	andcs	r0, r0, r0, lsl #6

08001294 <Standard_ClearFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_ClearFeature(void)
{
 8001294:	b538      	push	{r3, r4, r5, lr}
  u32     Type_Rec = Type_Recipient;
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <Standard_ClearFeature+0xc0>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	7818      	ldrb	r0, [r3, #0]
  u32     Status;


  if (Type_Rec == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800129c:	f010 007f 	ands.w	r0, r0, #127	; 0x7f
 80012a0:	d104      	bne.n	80012ac <Standard_ClearFeature+0x18>
  {/*Device Clear Feature*/
    ClrBit(pInformation->Current_Feature, 5);
 80012a2:	7a5a      	ldrb	r2, [r3, #9]
 80012a4:	f022 0220 	bic.w	r2, r2, #32
 80012a8:	725a      	strb	r2, [r3, #9]
    return USB_SUCCESS;
 80012aa:	bd38      	pop	{r3, r4, r5, pc}
  }
  else if (Type_Rec == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80012ac:	2802      	cmp	r0, #2
 80012ae:	d14e      	bne.n	800134e <Standard_ClearFeature+0xba>
    DEVICE* pDev;
    u32 Related_Endpoint;
    u32 wIndex0;
    u32 rEP;

    if ((pInformation->USBwValue != ENDPOINT_STALL)
 80012b0:	885a      	ldrh	r2, [r3, #2]
 80012b2:	2a00      	cmp	r2, #0
 80012b4:	d14c      	bne.n	8001350 <Standard_ClearFeature+0xbc>
        || (pInformation->USBwIndex1 != 0))
 80012b6:	795a      	ldrb	r2, [r3, #5]
 80012b8:	2a00      	cmp	r2, #0
 80012ba:	d149      	bne.n	8001350 <Standard_ClearFeature+0xbc>
    {
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
 80012bc:	791a      	ldrb	r2, [r3, #4]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80012be:	4d26      	ldr	r5, [pc, #152]	; (8001358 <Standard_ClearFeature+0xc4>)
      return USB_UNSUPPORT;
    }

    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
 80012c0:	f022 0080 	bic.w	r0, r2, #128	; 0x80
 80012c4:	0084      	lsls	r4, r0, #2

    if (ValBit(pInformation->USBwIndex0, 7))
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80012c6:	f104 4180 	add.w	r1, r4, #1073741824	; 0x40000000
 80012ca:	f501 41b8 	add.w	r1, r1, #23552	; 0x5c00
 80012ce:	6809      	ldr	r1, [r1, #0]
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80012d0:	782d      	ldrb	r5, [r5, #0]
    pDev = &Device_Table;
    wIndex0 = pInformation->USBwIndex0;
    rEP = wIndex0 & ~0x80;
    Related_Endpoint = ENDP0 + rEP;

    if (ValBit(pInformation->USBwIndex0, 7))
 80012d2:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /*Get Status of endpoint & stall the request if the related_ENdpoint
      is Disabled*/
      Status = _GetEPTxStatus(Related_Endpoint);
 80012d6:	bf14      	ite	ne
 80012d8:	f001 0130 	andne.w	r1, r1, #48	; 0x30
    }
    else
    {
      Status = _GetEPRxStatus(Related_Endpoint);
 80012dc:	f401 5140 	andeq.w	r1, r1, #12288	; 0x3000
    }

    if ((rEP >= pDev->Total_Endpoint) || (Status == 0)
 80012e0:	42a8      	cmp	r0, r5
 80012e2:	d234      	bcs.n	800134e <Standard_ClearFeature+0xba>
 80012e4:	2900      	cmp	r1, #0
 80012e6:	d032      	beq.n	800134e <Standard_ClearFeature+0xba>
        || (pInformation->Current_Configuration == 0))
 80012e8:	7a9b      	ldrb	r3, [r3, #10]
 80012ea:	b383      	cbz	r3, 800134e <Standard_ClearFeature+0xba>


    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80012ec:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80012f0:	f504 44b8 	add.w	r4, r4, #23552	; 0x5c00
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80012f4:	0612      	lsls	r2, r2, #24
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80012f6:	6823      	ldr	r3, [r4, #0]
    {
      return USB_UNSUPPORT;
    }


    if (wIndex0 & 0x80)
 80012f8:	d50c      	bpl.n	8001314 <Standard_ClearFeature+0x80>
    {
      /* IN endpoint */
      if (_GetTxStallStatus(Related_Endpoint ))
 80012fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80012fe:	2b10      	cmp	r3, #16
 8001300:	d11f      	bne.n	8001342 <Standard_ClearFeature+0xae>
      {
        ClearDTOG_TX(Related_Endpoint);
 8001302:	b2c4      	uxtb	r4, r0
 8001304:	4620      	mov	r0, r4
 8001306:	f7ff fda5 	bl	8000e54 <ClearDTOG_TX>
        SetEPTxStatus(Related_Endpoint, EP_TX_VALID);
 800130a:	4620      	mov	r0, r4
 800130c:	2130      	movs	r1, #48	; 0x30
 800130e:	f7ff fd5f 	bl	8000dd0 <SetEPTxStatus>
 8001312:	e016      	b.n	8001342 <Standard_ClearFeature+0xae>
      }
    }
    else
    {
      /* OUT endpoint */
      if (_GetRxStallStatus(Related_Endpoint))
 8001314:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800131c:	d111      	bne.n	8001342 <Standard_ClearFeature+0xae>
      {
        if (Related_Endpoint == ENDP0)
 800131e:	b928      	cbnz	r0, 800132c <Standard_ClearFeature+0x98>
        {
          /* After clear the STALL, enable the default endpoint receiver */
          SetEPRxCount(Related_Endpoint, Device_Property.MaxPacketSize);
 8001320:	4b0e      	ldr	r3, [pc, #56]	; (800135c <Standard_ClearFeature+0xc8>)
 8001322:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001326:	f7ff fdcf 	bl	8000ec8 <SetEPRxCount>
 800132a:	e001      	b.n	8001330 <Standard_ClearFeature+0x9c>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
        }
        else
        {
          ClearDTOG_RX(Related_Endpoint);
 800132c:	f7ff fd82 	bl	8000e34 <ClearDTOG_RX>
          _SetEPRxStatus(Related_Endpoint, EP_RX_VALID);
 8001330:	6823      	ldr	r3, [r4, #0]
 8001332:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001336:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800133a:	b29b      	uxth	r3, r3
 800133c:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001340:	6023      	str	r3, [r4, #0]
        }
      }
    }
    pUser_Standard_Requests->User_ClearFeature();
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <Standard_ClearFeature+0xcc>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	695b      	ldr	r3, [r3, #20]
 8001348:	4798      	blx	r3
    return USB_SUCCESS;
 800134a:	2000      	movs	r0, #0
 800134c:	bd38      	pop	{r3, r4, r5, pc}
  }

  return USB_UNSUPPORT;
 800134e:	2002      	movs	r0, #2
}
 8001350:	bd38      	pop	{r3, r4, r5, pc}
 8001352:	bf00      	nop
 8001354:	20000304 	andcs	r0, r0, r4, lsl #6
 8001358:	20000090 	mulcs	r0, r0, r0
 800135c:	20000000 	andcs	r0, r0, r0
 8001360:	20000300 	andcs	r0, r0, r0, lsl #6

08001364 <Standard_SetEndPointFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetEndPointFeature(void)
{
 8001364:	b538      	push	{r3, r4, r5, lr}
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 8001366:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <Standard_SetEndPointFeature+0x78>)
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 8001368:	4d1d      	ldr	r5, [pc, #116]	; (80013e0 <Standard_SetEndPointFeature+0x7c>)
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 800136a:	6819      	ldr	r1, [r3, #0]
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800136c:	782d      	ldrb	r5, [r5, #0]
  u32    wIndex0;
  u32    Related_Endpoint;
  u32    rEP;
  u32   Status;

  wIndex0 = pInformation->USBwIndex0;
 800136e:	790a      	ldrb	r2, [r1, #4]
  rEP = wIndex0 & ~0x80;
 8001370:	f022 0480 	bic.w	r4, r2, #128	; 0x80
 8001374:	00a3      	lsls	r3, r4, #2

  if (ValBit(pInformation->USBwIndex0, 7))
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001376:	f103 4080 	add.w	r0, r3, #1073741824	; 0x40000000
 800137a:	f500 40b8 	add.w	r0, r0, #23552	; 0x5c00
 800137e:	6800      	ldr	r0, [r0, #0]

  wIndex0 = pInformation->USBwIndex0;
  rEP = wIndex0 & ~0x80;
  Related_Endpoint = ENDP0 + rEP;

  if (ValBit(pInformation->USBwIndex0, 7))
 8001380:	f012 0f80 	tst.w	r2, #128	; 0x80
  {
    /* get Status of endpoint & stall the request if the related_ENdpoint
    is Disabled*/
    Status = _GetEPTxStatus(Related_Endpoint);
 8001384:	bf14      	ite	ne
 8001386:	f000 0030 	andne.w	r0, r0, #48	; 0x30
  }
  else
  {
    Status = _GetEPRxStatus(Related_Endpoint);
 800138a:	f400 5040 	andeq.w	r0, r0, #12288	; 0x3000
  }

  if (Related_Endpoint >= Device_Table.Total_Endpoint
 800138e:	42ac      	cmp	r4, r5
 8001390:	d222      	bcs.n	80013d8 <Standard_SetEndPointFeature+0x74>
      || pInformation->USBwValue != 0 || Status == 0
 8001392:	884c      	ldrh	r4, [r1, #2]
 8001394:	bb04      	cbnz	r4, 80013d8 <Standard_SetEndPointFeature+0x74>
 8001396:	b1f8      	cbz	r0, 80013d8 <Standard_SetEndPointFeature+0x74>
      || pInformation->Current_Configuration == 0)
 8001398:	7a89      	ldrb	r1, [r1, #10]
 800139a:	b1e9      	cbz	r1, 80013d8 <Standard_SetEndPointFeature+0x74>
  else
  {
    if (wIndex0 & 0x80)
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 800139c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80013a0:	f503 43b8 	add.w	r3, r3, #23552	; 0x5c00
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80013a4:	f012 0f80 	tst.w	r2, #128	; 0x80
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80013a8:	681a      	ldr	r2, [r3, #0]
  {
    return USB_UNSUPPORT;
  }
  else
  {
    if (wIndex0 & 0x80)
 80013aa:	d007      	beq.n	80013bc <Standard_SetEndPointFeature+0x58>
    {
      /* IN endpoint */
      _SetEPTxStatus(Related_Endpoint, EP_TX_STALL);
 80013ac:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
 80013b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80013b4:	b292      	uxth	r2, r2
 80013b6:	f082 0210 	eor.w	r2, r2, #16
 80013ba:	e006      	b.n	80013ca <Standard_SetEndPointFeature+0x66>
    }

    else
    {
      /* OUT endpoint */
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
 80013bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80013c0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80013c4:	b292      	uxth	r2, r2
 80013c6:	f482 5280 	eor.w	r2, r2, #4096	; 0x1000
 80013ca:	601a      	str	r2, [r3, #0]
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
 80013cc:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <Standard_SetEndPointFeature+0x80>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	699b      	ldr	r3, [r3, #24]
 80013d2:	4798      	blx	r3
  return USB_SUCCESS;
 80013d4:	2000      	movs	r0, #0
 80013d6:	bd38      	pop	{r3, r4, r5, pc}

  if (Related_Endpoint >= Device_Table.Total_Endpoint
      || pInformation->USBwValue != 0 || Status == 0
      || pInformation->Current_Configuration == 0)
  {
    return USB_UNSUPPORT;
 80013d8:	2002      	movs	r0, #2
      _SetEPRxStatus(Related_Endpoint, EP_RX_STALL);
    }
  }
  pUser_Standard_Requests->User_SetEndPointFeature();
  return USB_SUCCESS;
}
 80013da:	bd38      	pop	{r3, r4, r5, pc}
 80013dc:	20000304 	andcs	r0, r0, r4, lsl #6
 80013e0:	20000090 	mulcs	r0, r0, r0
 80013e4:	20000300 	andcs	r0, r0, r0, lsl #6

080013e8 <Standard_SetDeviceFeature>:
* Output         : None.
* Return         : - Return USB_SUCCESS, if the request is performed.
*                  - Return USB_UNSUPPORT, if the request is invalid.
*******************************************************************************/
RESULT Standard_SetDeviceFeature(void)
{
 80013e8:	b508      	push	{r3, lr}
  SetBit(pInformation->Current_Feature, 5);
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <Standard_SetDeviceFeature+0x1c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	7a5a      	ldrb	r2, [r3, #9]
 80013f0:	f042 0220 	orr.w	r2, r2, #32
 80013f4:	725a      	strb	r2, [r3, #9]
  pUser_Standard_Requests->User_SetDeviceFeature();
 80013f6:	4b04      	ldr	r3, [pc, #16]	; (8001408 <Standard_SetDeviceFeature+0x20>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	69db      	ldr	r3, [r3, #28]
 80013fc:	4798      	blx	r3
  return USB_SUCCESS;
}
 80013fe:	2000      	movs	r0, #0
 8001400:	bd08      	pop	{r3, pc}
 8001402:	bf00      	nop
 8001404:	20000304 	andcs	r0, r0, r4, lsl #6
 8001408:	20000300 	andcs	r0, r0, r0, lsl #6

0800140c <Standard_GetDescriptorData>:
*******************************************************************************/
u8 *Standard_GetDescriptorData(u16 Length, ONE_DESCRIPTOR *pDesc)
{
  u32  wOffset;

  wOffset = pInformation->Ctrl_Info.Usb_wOffset;
 800140c:	4b05      	ldr	r3, [pc, #20]	; (8001424 <Standard_GetDescriptorData+0x18>)
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	8a53      	ldrh	r3, [r2, #18]
  if (Length == 0)
 8001412:	b918      	cbnz	r0, 800141c <Standard_GetDescriptorData+0x10>
  {
    pInformation->Ctrl_Info.Usb_wLength = pDesc->Descriptor_Size - wOffset;
 8001414:	8889      	ldrh	r1, [r1, #4]
 8001416:	1acb      	subs	r3, r1, r3
 8001418:	8213      	strh	r3, [r2, #16]
    return 0;
 800141a:	4770      	bx	lr
  }

  return pDesc->Descriptor + wOffset;
 800141c:	6808      	ldr	r0, [r1, #0]
 800141e:	4418      	add	r0, r3
}
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	20000304 	andcs	r0, r0, r4, lsl #6

08001428 <Post0_Process>:
* Output         : None.
* Return         : - 0 if the control State is in PAUSE
*                  - 1 if not.
*******************************************************************************/
u8 Post0_Process(void)
{
 8001428:	b508      	push	{r3, lr}
  SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
 800142a:	4b0b      	ldr	r3, [pc, #44]	; (8001458 <Post0_Process+0x30>)
 800142c:	2000      	movs	r0, #0
 800142e:	f893 1030 	ldrb.w	r1, [r3, #48]	; 0x30
 8001432:	f7ff fd49 	bl	8000ec8 <SetEPRxCount>

  if (pInformation->ControlState == STALLED)
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <Post0_Process+0x34>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	7a18      	ldrb	r0, [r3, #8]
 800143c:	2808      	cmp	r0, #8
 800143e:	d106      	bne.n	800144e <Post0_Process+0x26>
  {
    vSetEPRxStatus(EP_RX_STALL);
 8001440:	4b07      	ldr	r3, [pc, #28]	; (8001460 <Post0_Process+0x38>)
 8001442:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001446:	801a      	strh	r2, [r3, #0]
    vSetEPTxStatus(EP_TX_STALL);
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <Post0_Process+0x3c>)
 800144a:	2210      	movs	r2, #16
 800144c:	801a      	strh	r2, [r3, #0]
  }

  return (pInformation->ControlState == PAUSE);
}
 800144e:	f1b0 0309 	subs.w	r3, r0, #9
 8001452:	4258      	negs	r0, r3
 8001454:	4158      	adcs	r0, r3
 8001456:	bd08      	pop	{r3, pc}
 8001458:	20000000 	andcs	r0, r0, r0
 800145c:	20000304 	andcs	r0, r0, r4, lsl #6
 8001460:	200002d2 	ldrdcs	r0, [r0], -r2
 8001464:	200002d4 	ldrdcs	r0, [r0], -r4

08001468 <Setup0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Setup0_Process(void)
{
 8001468:	b573      	push	{r0, r1, r4, r5, r6, lr}
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 800146a:	4e96      	ldr	r6, [pc, #600]	; (80016c4 <Setup0_Process+0x25c>)
 800146c:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <Setup0_Process+0x260>)
 800146e:	6832      	ldr	r2, [r6, #0]

  if (pInformation->ControlState != PAUSE)
 8001470:	4d96      	ldr	r5, [pc, #600]	; (80016cc <Setup0_Process+0x264>)
 8001472:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001474:	4413      	add	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	681a      	ldr	r2, [r3, #0]

  if (pInformation->ControlState != PAUSE)
 800147a:	682b      	ldr	r3, [r5, #0]
 800147c:	7a19      	ldrb	r1, [r3, #8]
 800147e:	2909      	cmp	r1, #9
 8001480:	d00f      	beq.n	80014a2 <Setup0_Process+0x3a>
 8001482:	b292      	uxth	r2, r2
  {
    u8* b;
    u16* w;
  } pBuf;

  pBuf.b = PMAAddr + (u8 *)(_GetEPRxAddr(ENDP0) * 2); /* *2 for 32 bits addr */
 8001484:	0052      	lsls	r2, r2, #1
 8001486:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800148a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000

  if (pInformation->ControlState != PAUSE)
  {
    pInformation->USBbmRequestType = *pBuf.b++; /* bmRequestType */
 800148e:	7811      	ldrb	r1, [r2, #0]
 8001490:	7019      	strb	r1, [r3, #0]
    pInformation->USBbRequest = *pBuf.b++; /* bRequest */
 8001492:	7851      	ldrb	r1, [r2, #1]
 8001494:	7059      	strb	r1, [r3, #1]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwValue = *pBuf.w++; /* wValue in Little Endian */
 8001496:	8891      	ldrh	r1, [r2, #4]
 8001498:	8059      	strh	r1, [r3, #2]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwIndex  = *pBuf.w++; /* wIndex in Little Endian */
 800149a:	8911      	ldrh	r1, [r2, #8]
 800149c:	8099      	strh	r1, [r3, #4]
    pBuf.w++;  /* word not accessed because of 32 bits addressing */
    pInformation->USBwLength = *pBuf.w; /* wLength in Little Endian */
 800149e:	8992      	ldrh	r2, [r2, #12]
 80014a0:	80da      	strh	r2, [r3, #6]
  }

  pInformation->ControlState = SETTING_UP;
 80014a2:	2201      	movs	r2, #1
 80014a4:	721a      	strb	r2, [r3, #8]
  if (pInformation->USBwLength == 0)
 80014a6:	88da      	ldrh	r2, [r3, #6]
 80014a8:	785c      	ldrb	r4, [r3, #1]
 80014aa:	2a00      	cmp	r2, #0
 80014ac:	d161      	bne.n	8001572 <Setup0_Process+0x10a>
{
  RESULT Result = USB_UNSUPPORT;
  u32 RequestNo = pInformation->USBbRequest;
  u32 ControlState;

  if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80014ae:	781a      	ldrb	r2, [r3, #0]
 80014b0:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80014b4:	d13a      	bne.n	800152c <Setup0_Process+0xc4>
  {
    /* Device Request*/
    /* SET_CONFIGURATION*/
    if (RequestNo == SET_CONFIGURATION)
 80014b6:	2c09      	cmp	r4, #9
 80014b8:	d102      	bne.n	80014c0 <Setup0_Process+0x58>
    {
      Result = Standard_SetConfiguration();
 80014ba:	f7ff feab 	bl	8001214 <Standard_SetConfiguration>
 80014be:	e044      	b.n	800154a <Setup0_Process+0xe2>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
 80014c0:	2c05      	cmp	r4, #5
 80014c2:	d10f      	bne.n	80014e4 <Setup0_Process+0x7c>
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80014c4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 80014c8:	2a00      	cmp	r2, #0
 80014ca:	da01      	bge.n	80014d0 <Setup0_Process+0x68>
          || (pInformation->USBwIndex != 0)
          || (pInformation->Current_Configuration != 0))
        /* Device Address should be 127 or less*/
      {
        ControlState = STALLED;
 80014cc:	2308      	movs	r3, #8
 80014ce:	e04d      	b.n	800156c <Setup0_Process+0x104>
    }

    /*SET ADDRESS*/
    else if (RequestNo == SET_ADDRESS)
    {
      if ((pInformation->USBwValue0 > 127) || (pInformation->USBwValue1 != 0)
 80014d0:	78da      	ldrb	r2, [r3, #3]
 80014d2:	2a00      	cmp	r2, #0
 80014d4:	d1fa      	bne.n	80014cc <Setup0_Process+0x64>
          || (pInformation->USBwIndex != 0)
 80014d6:	889a      	ldrh	r2, [r3, #4]
 80014d8:	2a00      	cmp	r2, #0
 80014da:	d1f7      	bne.n	80014cc <Setup0_Process+0x64>
          || (pInformation->Current_Configuration != 0))
 80014dc:	7a9b      	ldrb	r3, [r3, #10]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d037      	beq.n	8001552 <Setup0_Process+0xea>
 80014e2:	e7f3      	b.n	80014cc <Setup0_Process+0x64>
      {
        Result = USB_SUCCESS;
      }
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
 80014e4:	2c03      	cmp	r4, #3
 80014e6:	d113      	bne.n	8001510 <Setup0_Process+0xa8>
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
 80014e8:	789a      	ldrb	r2, [r3, #2]
 80014ea:	2a01      	cmp	r2, #1
 80014ec:	d007      	beq.n	80014fe <Setup0_Process+0x96>
  }


  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
 80014ee:	4b78      	ldr	r3, [pc, #480]	; (80016d0 <Setup0_Process+0x268>)
 80014f0:	4620      	mov	r0, r4
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	4798      	blx	r3
    if (Result == USB_NOT_READY)
 80014f8:	2803      	cmp	r0, #3
 80014fa:	d128      	bne.n	800154e <Setup0_Process+0xe6>
 80014fc:	e035      	b.n	800156a <Setup0_Process+0x102>
    }
    /*SET FEATURE for Device*/
    else if (RequestNo == SET_FEATURE)
    {
      if ((pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP)
          && (pInformation->USBwIndex == 0)
 80014fe:	889a      	ldrh	r2, [r3, #4]
 8001500:	2a00      	cmp	r2, #0
 8001502:	d1f4      	bne.n	80014ee <Setup0_Process+0x86>
          && (ValBit(pInformation->Current_Feature, 5)))
 8001504:	7a5b      	ldrb	r3, [r3, #9]
 8001506:	0698      	lsls	r0, r3, #26
 8001508:	d5f1      	bpl.n	80014ee <Setup0_Process+0x86>
      {
        Result = Standard_SetDeviceFeature();
 800150a:	f7ff ff6d 	bl	80013e8 <Standard_SetDeviceFeature>
 800150e:	e01c      	b.n	800154a <Setup0_Process+0xe2>
      {
        Result = USB_UNSUPPORT;
      }
    }
    /*Clear FEATURE for Device */
    else if (RequestNo == CLEAR_FEATURE)
 8001510:	2c01      	cmp	r4, #1
 8001512:	d1ec      	bne.n	80014ee <Setup0_Process+0x86>
    {
      if (pInformation->USBwValue0 == DEVICE_REMOTE_WAKEUP
 8001514:	789a      	ldrb	r2, [r3, #2]
 8001516:	2a01      	cmp	r2, #1
 8001518:	d1e9      	bne.n	80014ee <Setup0_Process+0x86>
          && pInformation->USBwIndex == 0
 800151a:	889a      	ldrh	r2, [r3, #4]
 800151c:	2a00      	cmp	r2, #0
 800151e:	d1e6      	bne.n	80014ee <Setup0_Process+0x86>
          && ValBit(pInformation->Current_Feature, 5))
 8001520:	7a5b      	ldrb	r3, [r3, #9]
 8001522:	0699      	lsls	r1, r3, #26
 8001524:	d5e3      	bpl.n	80014ee <Setup0_Process+0x86>
      {
        Result = Standard_ClearFeature();
 8001526:	f7ff feb5 	bl	8001294 <Standard_ClearFeature>
 800152a:	e00e      	b.n	800154a <Setup0_Process+0xe2>
    }

  }

  /* Interface Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 800152c:	2a01      	cmp	r2, #1
 800152e:	d104      	bne.n	800153a <Setup0_Process+0xd2>
  {
    /*SET INTERFACE*/
    if (RequestNo == SET_INTERFACE)
 8001530:	2c0b      	cmp	r4, #11
 8001532:	d1dc      	bne.n	80014ee <Setup0_Process+0x86>
    {
      Result = Standard_SetInterface();
 8001534:	f7ff fe8a 	bl	800124c <Standard_SetInterface>
 8001538:	e007      	b.n	800154a <Setup0_Process+0xe2>
    }
  }

  /* EndPoint Request*/
  else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 800153a:	2a02      	cmp	r2, #2
 800153c:	d1d7      	bne.n	80014ee <Setup0_Process+0x86>
  {
    /*CLEAR FEATURE for EndPoint*/
    if (RequestNo == CLEAR_FEATURE)
 800153e:	2c01      	cmp	r4, #1
 8001540:	d0f1      	beq.n	8001526 <Setup0_Process+0xbe>
    {
      Result = Standard_ClearFeature();
    }
    /* SET FEATURE for EndPoint*/
    else if (RequestNo == SET_FEATURE)
 8001542:	2c03      	cmp	r4, #3
 8001544:	d1d3      	bne.n	80014ee <Setup0_Process+0x86>
    {
      Result = Standard_SetEndPointFeature();
 8001546:	f7ff ff0d 	bl	8001364 <Standard_SetEndPointFeature>
  {
    Result = USB_UNSUPPORT;
  }


  if (Result != USB_SUCCESS)
 800154a:	b110      	cbz	r0, 8001552 <Setup0_Process+0xea>
 800154c:	e7cf      	b.n	80014ee <Setup0_Process+0x86>
      ControlState = PAUSE;
      goto exit_NoData_Setup0;
    }
  }

  if (Result != USB_SUCCESS)
 800154e:	2800      	cmp	r0, #0
 8001550:	d1bc      	bne.n	80014cc <Setup0_Process+0x64>
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();
 8001552:	6832      	ldr	r2, [r6, #0]
 8001554:	4b5f      	ldr	r3, [pc, #380]	; (80016d4 <Setup0_Process+0x26c>)
 8001556:	b292      	uxth	r2, r2
 8001558:	4413      	add	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	4b5d      	ldr	r3, [pc, #372]	; (80016d8 <Setup0_Process+0x270>)
 8001562:	2230      	movs	r2, #48	; 0x30
 8001564:	801a      	strh	r2, [r3, #0]
  {
    ControlState = STALLED;
    goto exit_NoData_Setup0;
  }

  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */
 8001566:	2306      	movs	r3, #6
 8001568:	e000      	b.n	800156c <Setup0_Process+0x104>
  if (Result != USB_SUCCESS)
  {
    Result = (*pProperty->Class_NoData_Setup)(RequestNo);
    if (Result == USB_NOT_READY)
    {
      ControlState = PAUSE;
 800156a:	2309      	movs	r3, #9
  ControlState = WAIT_STATUS_IN;/* After no data stage SETUP */

  USB_StatusIn();

exit_NoData_Setup0:
  pInformation->ControlState = ControlState;
 800156c:	682a      	ldr	r2, [r5, #0]
 800156e:	7213      	strb	r3, [r2, #8]
 8001570:	e0d4      	b.n	800171c <Setup0_Process+0x2b4>


  CopyRoutine = NULL;
  wOffset = 0;

  if (Request_No == GET_DESCRIPTOR)
 8001572:	2c06      	cmp	r4, #6
 8001574:	d118      	bne.n	80015a8 <Setup0_Process+0x140>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	0652      	lsls	r2, r2, #25
 800157a:	d17c      	bne.n	8001676 <Setup0_Process+0x20e>
    {
      u8 wValue1 = pInformation->USBwValue1;
 800157c:	78da      	ldrb	r2, [r3, #3]
 800157e:	4b54      	ldr	r3, [pc, #336]	; (80016d0 <Setup0_Process+0x268>)
      if (wValue1 == DEVICE_DESCRIPTOR)
 8001580:	2a01      	cmp	r2, #1
 8001582:	d102      	bne.n	800158a <Setup0_Process+0x122>
      {
        CopyRoutine = pProperty->GetDeviceDescriptor;
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	e06c      	b.n	8001664 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == CONFIG_DESCRIPTOR)
 800158a:	2a02      	cmp	r2, #2
 800158c:	d102      	bne.n	8001594 <Setup0_Process+0x12c>
      {
        CopyRoutine = pProperty->GetConfigDescriptor;
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	e067      	b.n	8001664 <Setup0_Process+0x1fc>
      }
      else if (wValue1 == STRING_DESCRIPTOR)
 8001594:	2a03      	cmp	r2, #3
 8001596:	d102      	bne.n	800159e <Setup0_Process+0x136>
      {
        CopyRoutine = pProperty->GetStringDescriptor;
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	e062      	b.n	8001664 <Setup0_Process+0x1fc>
      } else if (wValue1 == 0x21) /* added to support functional descriptors */
 800159e:	2a21      	cmp	r2, #33	; 0x21
 80015a0:	d169      	bne.n	8001676 <Setup0_Process+0x20e>
      {
	CopyRoutine = pProperty->GetFunctionalDescriptor;
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	e05d      	b.n	8001664 <Setup0_Process+0x1fc>
      } /* End of GET_DESCRIPTOR */
    }
  }

  /*GET STATUS*/
  else if ((Request_No == GET_STATUS) && (pInformation->USBwValue == 0)
 80015a8:	2c00      	cmp	r4, #0
 80015aa:	d13c      	bne.n	8001626 <Setup0_Process+0x1be>
 80015ac:	8859      	ldrh	r1, [r3, #2]
 80015ae:	2900      	cmp	r1, #0
 80015b0:	d161      	bne.n	8001676 <Setup0_Process+0x20e>
           && (pInformation->USBwLength == 0x0002)
           && (pInformation->USBwIndex1 == 0))
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80015b8:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 80015bc:	d15b      	bne.n	8001676 <Setup0_Process+0x20e>
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 80015be:	781a      	ldrb	r2, [r3, #0]
 80015c0:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
 80015c4:	d104      	bne.n	80015d0 <Setup0_Process+0x168>
        && (pInformation->USBwIndex == 0))
 80015c6:	889b      	ldrh	r3, [r3, #4]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80ab 	beq.w	8001724 <Setup0_Process+0x2bc>
 80015ce:	e052      	b.n	8001676 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetStatus;
    }

    /* GET STATUS for Interface*/
    else if (Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 80015d0:	2a01      	cmp	r2, #1
 80015d2:	d10c      	bne.n	80015ee <Setup0_Process+0x186>
    {
      if (((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS)
 80015d4:	4a3e      	ldr	r2, [pc, #248]	; (80016d0 <Setup0_Process+0x268>)
 80015d6:	7918      	ldrb	r0, [r3, #4]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	6992      	ldr	r2, [r2, #24]
 80015dc:	4790      	blx	r2
 80015de:	2800      	cmp	r0, #0
 80015e0:	d149      	bne.n	8001676 <Setup0_Process+0x20e>
          && (pInformation->Current_Configuration != 0))
 80015e2:	682b      	ldr	r3, [r5, #0]
 80015e4:	7a9b      	ldrb	r3, [r3, #10]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f040 809c 	bne.w	8001724 <Setup0_Process+0x2bc>
 80015ec:	e043      	b.n	8001676 <Setup0_Process+0x20e>
        CopyRoutine = Standard_GetStatus;
      }
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
 80015ee:	2a02      	cmp	r2, #2
 80015f0:	d141      	bne.n	8001676 <Setup0_Process+0x20e>
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80015f2:	791b      	ldrb	r3, [r3, #4]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 80015f4:	4839      	ldr	r0, [pc, #228]	; (80016dc <Setup0_Process+0x274>)
    }

    /* GET STATUS for EndPoint*/
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
 80015f6:	f003 010f 	and.w	r1, r3, #15
 80015fa:	008a      	lsls	r2, r1, #2

      if (ValBit(pInformation->USBwIndex0, 7))
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 80015fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8001600:	f502 42b8 	add.w	r2, r2, #23552	; 0x5c00
 8001604:	6812      	ldr	r2, [r2, #0]
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001606:	7800      	ldrb	r0, [r0, #0]
    else if (Type_Recipient == (STANDARD_REQUEST | ENDPOINT_RECIPIENT))
    {
      Related_Endpoint = (pInformation->USBwIndex0 & 0x0f);
      Reserved = pInformation->USBwIndex0 & 0x70;

      if (ValBit(pInformation->USBwIndex0, 7))
 8001608:	f013 0f80 	tst.w	r3, #128	; 0x80
      {
        /*Get Status of endpoint & stall the request if the related_ENdpoint
        is Disabled*/
        Status = _GetEPTxStatus(Related_Endpoint);
 800160c:	bf14      	ite	ne
 800160e:	f002 0230 	andne.w	r2, r2, #48	; 0x30
      }
      else
      {
        Status = _GetEPRxStatus(Related_Endpoint);
 8001612:	f402 5240 	andeq.w	r2, r2, #12288	; 0x3000
      }

      if ((Related_Endpoint < Device_Table.Total_Endpoint) && (Reserved == 0)
 8001616:	4281      	cmp	r1, r0
 8001618:	d22d      	bcs.n	8001676 <Setup0_Process+0x20e>
 800161a:	f013 0f70 	tst.w	r3, #112	; 0x70
 800161e:	d12a      	bne.n	8001676 <Setup0_Process+0x20e>
          && (Status != 0))
 8001620:	2a00      	cmp	r2, #0
 8001622:	d17f      	bne.n	8001724 <Setup0_Process+0x2bc>
 8001624:	e027      	b.n	8001676 <Setup0_Process+0x20e>
    }

  }

  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
 8001626:	2c08      	cmp	r4, #8
 8001628:	d103      	bne.n	8001632 <Setup0_Process+0x1ca>
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	065b      	lsls	r3, r3, #25
 800162e:	d07b      	beq.n	8001728 <Setup0_Process+0x2c0>
 8001630:	e021      	b.n	8001676 <Setup0_Process+0x20e>
    {
      CopyRoutine = Standard_GetConfiguration;
    }
  }
  /*GET INTERFACE*/
  else if (Request_No == GET_INTERFACE)
 8001632:	2c0a      	cmp	r4, #10
 8001634:	d11f      	bne.n	8001676 <Setup0_Process+0x20e>
  {
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
 8001636:	781a      	ldrb	r2, [r3, #0]
 8001638:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800163c:	2a01      	cmp	r2, #1
 800163e:	d11a      	bne.n	8001676 <Setup0_Process+0x20e>
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
 8001640:	7a9a      	ldrb	r2, [r3, #10]
 8001642:	b1c2      	cbz	r2, 8001676 <Setup0_Process+0x20e>
 8001644:	8859      	ldrh	r1, [r3, #2]
 8001646:	b9b1      	cbnz	r1, 8001676 <Setup0_Process+0x20e>
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800164e:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8001652:	d110      	bne.n	8001676 <Setup0_Process+0x20e>
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
 8001654:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <Setup0_Process+0x268>)
 8001656:	7918      	ldrb	r0, [r3, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	6992      	ldr	r2, [r2, #24]
 800165c:	4790      	blx	r2
 800165e:	2800      	cmp	r0, #0
 8001660:	d064      	beq.n	800172c <Setup0_Process+0x2c4>
 8001662:	e008      	b.n	8001676 <Setup0_Process+0x20e>
      CopyRoutine = Standard_GetInterface;
    }

  }

  if (CopyRoutine)
 8001664:	b13b      	cbz	r3, 8001676 <Setup0_Process+0x20e>
  {
    pInformation->Ctrl_Info.Usb_wOffset = wOffset;
 8001666:	682a      	ldr	r2, [r5, #0]
 8001668:	2400      	movs	r4, #0
 800166a:	8254      	strh	r4, [r2, #18]
    pInformation->Ctrl_Info.CopyData = CopyRoutine;
 800166c:	6193      	str	r3, [r2, #24]
    /* sb in the original the cast to word was directly */
    /* now the cast is made step by step */
    (*CopyRoutine)(0);
 800166e:	4620      	mov	r0, r4
 8001670:	4798      	blx	r3
    Result = USB_SUCCESS;
 8001672:	4620      	mov	r0, r4
 8001674:	e00a      	b.n	800168c <Setup0_Process+0x224>
  }
  else
  {
    Result = (*pProperty->Class_Data_Setup)(pInformation->USBbRequest);
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <Setup0_Process+0x268>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	682b      	ldr	r3, [r5, #0]
 800167c:	6912      	ldr	r2, [r2, #16]
 800167e:	7858      	ldrb	r0, [r3, #1]
 8001680:	4790      	blx	r2
    if (Result == USB_NOT_READY)
 8001682:	2803      	cmp	r0, #3
 8001684:	d102      	bne.n	800168c <Setup0_Process+0x224>
    {
      pInformation->ControlState = PAUSE;
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <Setup0_Process+0x264>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	e005      	b.n	8001698 <Setup0_Process+0x230>
      return;
    }
  }

  if (pInformation->Ctrl_Info.Usb_wLength == 0xFFFF)
 800168c:	682b      	ldr	r3, [r5, #0]
 800168e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001692:	8a1a      	ldrh	r2, [r3, #16]
 8001694:	428a      	cmp	r2, r1
 8001696:	d101      	bne.n	800169c <Setup0_Process+0x234>
  {
    /* Data is not ready, wait it */
    pInformation->ControlState = PAUSE;
 8001698:	2209      	movs	r2, #9
 800169a:	e003      	b.n	80016a4 <Setup0_Process+0x23c>
    return;
  }
  if ((Result == USB_UNSUPPORT) || (pInformation->Ctrl_Info.Usb_wLength == 0))
 800169c:	2802      	cmp	r0, #2
 800169e:	d000      	beq.n	80016a2 <Setup0_Process+0x23a>
 80016a0:	b912      	cbnz	r2, 80016a8 <Setup0_Process+0x240>
  {
    /* Unsupported request */
    pInformation->ControlState = STALLED;
 80016a2:	2208      	movs	r2, #8
 80016a4:	721a      	strb	r2, [r3, #8]
 80016a6:	e039      	b.n	800171c <Setup0_Process+0x2b4>
    return;
  }


  if (ValBit(pInformation->USBbmRequestType, 7))
 80016a8:	f993 1000 	ldrsb.w	r1, [r3]
 80016ac:	2900      	cmp	r1, #0
 80016ae:	da2f      	bge.n	8001710 <Setup0_Process+0x2a8>
  {
    /* Device ==> Host */
    vu32 wLength = pInformation->USBwLength;
 80016b0:	88d9      	ldrh	r1, [r3, #6]
 80016b2:	9101      	str	r1, [sp, #4]

    /* Restrict the data length to be the one host asks */
    if (pInformation->Ctrl_Info.Usb_wLength > wLength)
 80016b4:	9801      	ldr	r0, [sp, #4]
 80016b6:	4282      	cmp	r2, r0
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <Setup0_Process+0x268>)
 80016ba:	d911      	bls.n	80016e0 <Setup0_Process+0x278>
    {
      pInformation->Ctrl_Info.Usb_wLength = wLength;
 80016bc:	9a01      	ldr	r2, [sp, #4]
 80016be:	821a      	strh	r2, [r3, #16]
 80016c0:	e01f      	b.n	8001702 <Setup0_Process+0x29a>
 80016c2:	bf00      	nop
 80016c4:	40005c50 	andmi	r5, r0, r0, asr ip
 80016c8:	20003004 	andcs	r3, r0, r4
 80016cc:	20000304 	andcs	r0, r0, r4, lsl #6
 80016d0:	200002dc 	ldrdcs	r0, [r0], -ip
 80016d4:	20003002 	andcs	r3, r0, r2
 80016d8:	200002d4 	ldrdcs	r0, [r0], -r4
 80016dc:	20000090 	mulcs	r0, r0, r0
    }

    else if (pInformation->Ctrl_Info.Usb_wLength < pInformation->USBwLength)
 80016e0:	428a      	cmp	r2, r1
 80016e2:	d20e      	bcs.n	8001702 <Setup0_Process+0x29a>
    {
      if (pInformation->Ctrl_Info.Usb_wLength < pProperty->MaxPacketSize)
 80016e4:	6801      	ldr	r1, [r0, #0]
 80016e6:	f891 1030 	ldrb.w	r1, [r1, #48]	; 0x30
 80016ea:	428a      	cmp	r2, r1
 80016ec:	d201      	bcs.n	80016f2 <Setup0_Process+0x28a>
      {
        Data_Mul_MaxPacketSize = FALSE;
 80016ee:	2100      	movs	r1, #0
 80016f0:	e005      	b.n	80016fe <Setup0_Process+0x296>
      }
      else if ((pInformation->Ctrl_Info.Usb_wLength % pProperty->MaxPacketSize) == 0)
 80016f2:	fb92 f4f1 	sdiv	r4, r2, r1
 80016f6:	fb01 2214 	mls	r2, r1, r4, r2
 80016fa:	b912      	cbnz	r2, 8001702 <Setup0_Process+0x29a>
      {
        Data_Mul_MaxPacketSize = TRUE;
 80016fc:	2101      	movs	r1, #1
 80016fe:	4a0c      	ldr	r2, [pc, #48]	; (8001730 <Setup0_Process+0x2c8>)
 8001700:	7011      	strb	r1, [r2, #0]
      }
    }

    pInformation->Ctrl_Info.PacketSize = pProperty->MaxPacketSize;
 8001702:	6802      	ldr	r2, [r0, #0]
 8001704:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
 8001708:	829a      	strh	r2, [r3, #20]
    DataStageIn();
 800170a:	f7ff fd2f 	bl	800116c <DataStageIn>
 800170e:	e005      	b.n	800171c <Setup0_Process+0x2b4>
  }
  else
  {
    pInformation->ControlState = OUT_DATA;
 8001710:	2203      	movs	r2, #3
 8001712:	721a      	strb	r2, [r3, #8]
    vSetEPRxStatus(EP_RX_VALID); /* enable for next data reception */
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <Setup0_Process+0x2cc>)
 8001716:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 800171a:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Setup with data stage */
    Data_Setup0();
  }
  return Post0_Process();
 800171c:	f7ff fe84 	bl	8001428 <Post0_Process>
}
 8001720:	b002      	add	sp, #8
 8001722:	bd70      	pop	{r4, r5, r6, pc}
  {
    /* GET STATUS for Device*/
    if ((Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
        && (pInformation->USBwIndex == 0))
    {
      CopyRoutine = Standard_GetStatus;
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <Setup0_Process+0x2d0>)
 8001726:	e79e      	b.n	8001666 <Setup0_Process+0x1fe>
  /*GET CONFIGURATION*/
  else if (Request_No == GET_CONFIGURATION)
  {
    if (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT))
    {
      CopyRoutine = Standard_GetConfiguration;
 8001728:	4b04      	ldr	r3, [pc, #16]	; (800173c <Setup0_Process+0x2d4>)
 800172a:	e79c      	b.n	8001666 <Setup0_Process+0x1fe>
    if ((Type_Recipient == (STANDARD_REQUEST | INTERFACE_RECIPIENT))
        && (pInformation->Current_Configuration != 0) && (pInformation->USBwValue == 0)
        && (pInformation->USBwIndex1 == 0) && (pInformation->USBwLength == 0x0001)
        && ((*pProperty->Class_Get_Interface_Setting)(pInformation->USBwIndex0, 0) == USB_SUCCESS))
    {
      CopyRoutine = Standard_GetInterface;
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <Setup0_Process+0x2d8>)
 800172e:	e79a      	b.n	8001666 <Setup0_Process+0x1fe>
 8001730:	20000b24 	andcs	r0, r0, r4, lsr #22
 8001734:	200002d2 	ldrdcs	r0, [r0], -r2
 8001738:	080010dd 	stmdaeq	r0, {r0, r2, r3, r4, r6, r7, ip}
 800173c:	08001095 	stmdaeq	r0, {r0, r2, r4, r7, ip}
 8001740:	080010b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, ip}

08001744 <Out0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 Out0_Process(void)
{
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  u32 ControlState = pInformation->ControlState;
 8001746:	4d2b      	ldr	r5, [pc, #172]	; (80017f4 <Out0_Process+0xb0>)
 8001748:	682c      	ldr	r4, [r5, #0]
 800174a:	7a23      	ldrb	r3, [r4, #8]

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
 800174c:	2b03      	cmp	r3, #3
 800174e:	d001      	beq.n	8001754 <Out0_Process+0x10>
 8001750:	2b05      	cmp	r3, #5
 8001752:	d141      	bne.n	80017d8 <Out0_Process+0x94>
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;

  if (pEPinfo->CopyData && save_rLength)
 8001754:	69a3      	ldr	r3, [r4, #24]
void DataStageOut(void)
{
  ENDPOINT_INFO *pEPinfo = &pInformation->Ctrl_Info;
  u32 save_rLength;

  save_rLength = pEPinfo->Usb_rLength;
 8001756:	8a22      	ldrh	r2, [r4, #16]

  if (pEPinfo->CopyData && save_rLength)
 8001758:	b1ab      	cbz	r3, 8001786 <Out0_Process+0x42>
 800175a:	b1a2      	cbz	r2, 8001786 <Out0_Process+0x42>
  {
    u8 *Buffer;
    u32 Length;

    Length = pEPinfo->PacketSize;
 800175c:	8aa6      	ldrh	r6, [r4, #20]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800175e:	4296      	cmp	r6, r2
 8001760:	bf28      	it	cs
 8001762:	4616      	movcs	r6, r2
 8001764:	4630      	mov	r0, r6
 8001766:	4798      	blx	r3
    pEPinfo->Usb_rLength -= Length;
 8001768:	8a23      	ldrh	r3, [r4, #16]
    if (Length > save_rLength)
    {
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
 800176a:	4607      	mov	r7, r0
    pEPinfo->Usb_rLength -= Length;
 800176c:	1b9b      	subs	r3, r3, r6
 800176e:	8223      	strh	r3, [r4, #16]
    pEPinfo->Usb_rOffset += Length;
 8001770:	8a63      	ldrh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8001772:	2000      	movs	r0, #0
      Length = save_rLength;
    }

    Buffer = (*pEPinfo->CopyData)(Length);
    pEPinfo->Usb_rLength -= Length;
    pEPinfo->Usb_rOffset += Length;
 8001774:	4433      	add	r3, r6
 8001776:	8263      	strh	r3, [r4, #18]

    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
 8001778:	f7ff fb8a 	bl	8000e90 <GetEPRxAddr>
 800177c:	4632      	mov	r2, r6
 800177e:	4601      	mov	r1, r0
 8001780:	4638      	mov	r0, r7
 8001782:	f000 f8a5 	bl	80018d0 <PMAToUserBufferCopy>
  }

  if (pEPinfo->Usb_rLength != 0)
 8001786:	8a23      	ldrh	r3, [r4, #16]
 8001788:	b153      	cbz	r3, 80017a0 <Out0_Process+0x5c>
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <Out0_Process+0xb4>)
    SetEPTxCount(ENDP0, 0);
 800178c:	2000      	movs	r0, #0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 800178e:	f44f 5240 	mov.w	r2, #12288	; 0x3000
    SetEPTxCount(ENDP0, 0);
 8001792:	4601      	mov	r1, r0
    PMAToUserBufferCopy(Buffer, GetEPRxAddr(ENDP0), Length);
  }

  if (pEPinfo->Usb_rLength != 0)
  {
    vSetEPRxStatus(EP_RX_VALID);/* re-enable for next data reception */
 8001794:	801a      	strh	r2, [r3, #0]
    SetEPTxCount(ENDP0, 0);
 8001796:	f7ff fb89 	bl	8000eac <SetEPTxCount>
    vSetEPTxStatus(EP_TX_VALID);/* Expect the host to abort the data OUT stage */
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <Out0_Process+0xb8>)
 800179c:	2230      	movs	r2, #48	; 0x30
 800179e:	801a      	strh	r2, [r3, #0]
  }
  /* Set the next State*/
  if (pEPinfo->Usb_rLength >= pEPinfo->PacketSize)
 80017a0:	8a23      	ldrh	r3, [r4, #16]
 80017a2:	8aa2      	ldrh	r2, [r4, #20]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d802      	bhi.n	80017ae <Out0_Process+0x6a>
  {
    pInformation->ControlState = OUT_DATA;
 80017a8:	682b      	ldr	r3, [r5, #0]
 80017aa:	2203      	movs	r2, #3
 80017ac:	e002      	b.n	80017b4 <Out0_Process+0x70>
  }
  else
  {
    if (pEPinfo->Usb_rLength > 0)
 80017ae:	b11b      	cbz	r3, 80017b8 <Out0_Process+0x74>
    {
      pInformation->ControlState = LAST_OUT_DATA;
 80017b0:	682b      	ldr	r3, [r5, #0]
 80017b2:	2205      	movs	r2, #5
 80017b4:	721a      	strb	r2, [r3, #8]
 80017b6:	e00c      	b.n	80017d2 <Out0_Process+0x8e>
    }
    else if (pEPinfo->Usb_rLength == 0)
    {
      pInformation->ControlState = WAIT_STATUS_IN;
 80017b8:	682a      	ldr	r2, [r5, #0]
 80017ba:	2106      	movs	r1, #6
 80017bc:	7211      	strb	r1, [r2, #8]
      USB_StatusIn();
 80017be:	4a10      	ldr	r2, [pc, #64]	; (8001800 <Out0_Process+0xbc>)
 80017c0:	6811      	ldr	r1, [r2, #0]
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <Out0_Process+0xc0>)
 80017c4:	b289      	uxth	r1, r1
 80017c6:	440a      	add	r2, r1
 80017c8:	0052      	lsls	r2, r2, #1
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <Out0_Process+0xb8>)
 80017ce:	2230      	movs	r2, #48	; 0x30
 80017d0:	801a      	strh	r2, [r3, #0]
  u32 ControlState = pInformation->ControlState;

  if ((ControlState == OUT_DATA) || (ControlState == LAST_OUT_DATA))
  {
    DataStageOut();
    ControlState = pInformation->ControlState; /* may be changed outside the function */
 80017d2:	682b      	ldr	r3, [r5, #0]
 80017d4:	7a1b      	ldrb	r3, [r3, #8]
 80017d6:	e006      	b.n	80017e6 <Out0_Process+0xa2>
  }

  else if (ControlState == WAIT_STATUS_OUT)
 80017d8:	2b07      	cmp	r3, #7
 80017da:	d103      	bne.n	80017e4 <Out0_Process+0xa0>
  {
    (*pProperty->Process_Status_OUT)();
 80017dc:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <Out0_Process+0xc4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4798      	blx	r3
  }

  else if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
  {
    /* host aborts the transfer before finish */
    ControlState = STALLED;
 80017e4:	2308      	movs	r3, #8
  else
  {
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;
 80017e6:	682a      	ldr	r2, [r5, #0]
 80017e8:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 80017ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 80017ee:	f7ff be1b 	b.w	8001428 <Post0_Process>
 80017f2:	bf00      	nop
 80017f4:	20000304 	andcs	r0, r0, r4, lsl #6
 80017f8:	200002d2 	ldrdcs	r0, [r0], -r2
 80017fc:	200002d4 	ldrdcs	r0, [r0], -r4
 8001800:	40005c50 	andmi	r5, r0, r0, asr ip
 8001804:	20003002 	andcs	r3, r0, r2
 8001808:	200002dc 	ldrdcs	r0, [r0], -ip

0800180c <SetDeviceAddress>:
* Input          : - Val: device adress.
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetDeviceAddress(u8 Val)
{
 800180c:	b530      	push	{r4, r5, lr}
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <SetDeviceAddress+0x30>)
 8001810:	781c      	ldrb	r4, [r3, #0]

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 8001812:	2300      	movs	r3, #0
 8001814:	42a3      	cmp	r3, r4
 8001816:	d20c      	bcs.n	8001832 <SetDeviceAddress+0x26>
 8001818:	f103 5280 	add.w	r2, r3, #268435456	; 0x10000000
 800181c:	f502 52b8 	add.w	r2, r2, #5888	; 0x1700
 8001820:	0091      	lsls	r1, r2, #2
  {
    _SetEPAddress((u8)i, (u8)i);
 8001822:	680d      	ldr	r5, [r1, #0]
 8001824:	f648 728f 	movw	r2, #36751	; 0x8f8f
 8001828:	402a      	ands	r2, r5
 800182a:	431a      	orrs	r2, r3
 800182c:	600a      	str	r2, [r1, #0]
{
  u32 i;
  u32 nEP = Device_Table.Total_Endpoint;

  /* set address in every used endpoint */
  for (i = 0; i < nEP; i++)
 800182e:	3301      	adds	r3, #1
 8001830:	e7f0      	b.n	8001814 <SetDeviceAddress+0x8>
  {
    _SetEPAddress((u8)i, (u8)i);
  } /* for */
  _SetDADDR(Val | DADDR_EF); /* set device address and enable function */
 8001832:	4b03      	ldr	r3, [pc, #12]	; (8001840 <SetDeviceAddress+0x34>)
 8001834:	f040 0080 	orr.w	r0, r0, #128	; 0x80
 8001838:	6018      	str	r0, [r3, #0]
 800183a:	bd30      	pop	{r4, r5, pc}
 800183c:	20000090 	mulcs	r0, r0, r0
 8001840:	40005c4c 	andmi	r5, r0, ip, asr #24

08001844 <In0_Process>:
* Input          : None.
* Output         : None.
* Return         : Post0_Process.
*******************************************************************************/
u8 In0_Process(void)
{
 8001844:	b510      	push	{r4, lr}
  u32 ControlState = pInformation->ControlState;
 8001846:	4c13      	ldr	r4, [pc, #76]	; (8001894 <In0_Process+0x50>)
 8001848:	6823      	ldr	r3, [r4, #0]
 800184a:	7a1a      	ldrb	r2, [r3, #8]

  if ((ControlState == IN_DATA) || (ControlState == LAST_IN_DATA))
 800184c:	2a02      	cmp	r2, #2
 800184e:	d001      	beq.n	8001854 <In0_Process+0x10>
 8001850:	2a04      	cmp	r2, #4
 8001852:	d104      	bne.n	800185e <In0_Process+0x1a>
  {
    DataStageIn();
 8001854:	f7ff fc8a 	bl	800116c <DataStageIn>
    /* ControlState may be changed outside the function */
    ControlState = pInformation->ControlState;
 8001858:	6823      	ldr	r3, [r4, #0]
 800185a:	7a1b      	ldrb	r3, [r3, #8]
 800185c:	e013      	b.n	8001886 <In0_Process+0x42>
  }

  else if (ControlState == WAIT_STATUS_IN)
 800185e:	2a06      	cmp	r2, #6
 8001860:	d110      	bne.n	8001884 <In0_Process+0x40>
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 8001862:	785a      	ldrb	r2, [r3, #1]
 8001864:	2a05      	cmp	r2, #5
 8001866:	d109      	bne.n	800187c <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
 8001868:	781a      	ldrb	r2, [r3, #0]
    ControlState = pInformation->ControlState;
  }

  else if (ControlState == WAIT_STATUS_IN)
  {
    if ((pInformation->USBbRequest == SET_ADDRESS) &&
 800186a:	0652      	lsls	r2, r2, #25
 800186c:	d106      	bne.n	800187c <In0_Process+0x38>
        (Type_Recipient == (STANDARD_REQUEST | DEVICE_RECIPIENT)))
    {
      SetDeviceAddress(pInformation->USBwValue0);
 800186e:	7898      	ldrb	r0, [r3, #2]
 8001870:	f7ff ffcc 	bl	800180c <SetDeviceAddress>
      pUser_Standard_Requests->User_SetDeviceAddress();
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <In0_Process+0x54>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	4798      	blx	r3
    }
    (*pProperty->Process_Status_IN)();
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <In0_Process+0x58>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	4798      	blx	r3
    ControlState = STALLED;
  }

  else
  {
    ControlState = STALLED;
 8001884:	2308      	movs	r3, #8
  }

  pInformation->ControlState = ControlState;
 8001886:	6822      	ldr	r2, [r4, #0]
 8001888:	7213      	strb	r3, [r2, #8]

  return Post0_Process();
}
 800188a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ControlState = STALLED;
  }

  pInformation->ControlState = ControlState;

  return Post0_Process();
 800188e:	f7ff bdcb 	b.w	8001428 <Post0_Process>
 8001892:	bf00      	nop
 8001894:	20000304 	andcs	r0, r0, r4, lsl #6
 8001898:	20000300 	andcs	r0, r0, r0, lsl #6
 800189c:	200002dc 	ldrdcs	r0, [r0], -ip

080018a0 <UserToPMABufferCopy>:
*                  - wNBytes: no. of bytes to be copied.
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80018a0:	b530      	push	{r4, r5, lr}
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80018a2:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80018a6:	3201      	adds	r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80018a8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None	.
*******************************************************************************/
void UserToPMABufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;   /* n = (wNBytes + 1) / 2 */
 80018ac:	1052      	asrs	r2, r2, #1
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
 80018ae:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80018b0:	2300      	movs	r3, #0
 80018b2:	4293      	cmp	r3, r2
 80018b4:	f100 0002 	add.w	r0, r0, #2
 80018b8:	d009      	beq.n	80018ce <UserToPMABufferCopy+0x2e>
  {
    temp1 = (u16) * pbUsrBuf;
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 80018ba:	f810 5c01 	ldrb.w	r5, [r0, #-1]
  u32 i, temp1, temp2;
  u16 *pdwVal;
  pdwVal = (u16 *)(wPMABufAddr * 2 + PMAAddr);
  for (i = n; i != 0; i--)
  {
    temp1 = (u16) * pbUsrBuf;
 80018be:	f810 4c02 	ldrb.w	r4, [r0, #-2]
    pbUsrBuf++;
    temp2 = temp1 | (u16) * pbUsrBuf << 8;
 80018c2:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
    *pdwVal++ = temp2;
 80018c6:	f821 4023 	strh.w	r4, [r1, r3, lsl #2]
 80018ca:	3301      	adds	r3, #1
 80018cc:	e7f1      	b.n	80018b2 <UserToPMABufferCopy+0x12>
    pdwVal++;
    pbUsrBuf++;
  }
}
 80018ce:	bd30      	pop	{r4, r5, pc}

080018d0 <PMAToUserBufferCopy>:
*                  - wNBytes     = no. of bytes to be copied.
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
 80018d0:	b510      	push	{r4, lr}
  u32 n = (wNBytes + 1) >> 1;/* /2*/
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80018d2:	f101 5100 	add.w	r1, r1, #536870912	; 0x20000000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 80018d6:	3201      	adds	r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80018d8:	f501 5140 	add.w	r1, r1, #12288	; 0x3000
* Output         : None.
* Return         : None.
*******************************************************************************/
void PMAToUserBufferCopy(u8 *pbUsrBuf, u16 wPMABufAddr, u16 wNBytes)
{
  u32 n = (wNBytes + 1) >> 1;/* /2*/
 80018dc:	1052      	asrs	r2, r2, #1
  u32 i;
  u32 *pdwVal;
  pdwVal = (u32 *)(wPMABufAddr * 2 + PMAAddr);
 80018de:	0049      	lsls	r1, r1, #1
  for (i = n; i != 0; i--)
 80018e0:	2300      	movs	r3, #0
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d005      	beq.n	80018f2 <PMAToUserBufferCopy+0x22>
  {
    *(u16*)pbUsrBuf++ = *pdwVal++;
 80018e6:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 80018ea:	f820 4013 	strh.w	r4, [r0, r3, lsl #1]
 80018ee:	3301      	adds	r3, #1
 80018f0:	e7f7      	b.n	80018e2 <PMAToUserBufferCopy+0x12>
    pbUsrBuf++;
  }
}
 80018f2:	bd10      	pop	{r4, pc}

Disassembly of section .data:

20000000 <Device_Property>:
20000000:	0800050d 	stmdaeq	r0, {r0, r2, r3, r8, sl}
20000004:	080001fd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r6, r7, r8}
20000008:	080001bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r8}
2000000c:	080001bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8}
20000010:	080002a5 	stmdaeq	r0, {r0, r2, r5, r7, r9}
20000014:	08000349 	stmdaeq	r0, {r0, r3, r6, r8, r9}
20000018:	080001bf 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, r7, r8}
2000001c:	08000305 	stmdaeq	r0, {r0, r2, r8, r9}
20000020:	08000311 	stmdaeq	r0, {r0, r4, r8, r9}
20000024:	0800031d 	stmdaeq	r0, {r0, r2, r3, r4, r8, r9}
20000028:	0800033d 	stmdaeq	r0, {r0, r2, r3, r4, r5, r8, r9}
2000002c:	00000000 	andeq	r0, r0, r0
20000030:	00000040 	andeq	r0, r0, r0, asr #32

20000034 <pEpInt_IN>:
20000034:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000038:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
2000003c:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000040:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000044:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000048:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
2000004c:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}

20000050 <pEpInt_OUT>:
20000050:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000054:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000058:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
2000005c:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000060:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000064:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}
20000068:	080001b9 	stmdaeq	r0, {r0, r3, r4, r5, r7, r8}

2000006c <User_Standard_Requests>:
2000006c:	080001c9 	stmdaeq	r0, {r0, r3, r6, r7, r8}
20000070:	080001cd 	stmdaeq	r0, {r0, r2, r3, r6, r7, r8}
20000074:	080001e5 	stmdaeq	r0, {r0, r2, r5, r6, r7, r8}
20000078:	080001e7 	stmdaeq	r0, {r0, r1, r2, r5, r6, r7, r8}
2000007c:	080001e9 	stmdaeq	r0, {r0, r3, r5, r6, r7, r8}
20000080:	080001eb 	stmdaeq	r0, {r0, r1, r3, r5, r6, r7, r8}
20000084:	080001ed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8}
20000088:	080001ef 	stmdaeq	r0, {r0, r1, r2, r3, r5, r6, r7, r8}
2000008c:	080001f1 	stmdaeq	r0, {r0, r4, r5, r6, r7, r8}

20000090 <Device_Table>:
20000090:	00000101 	andeq	r0, r0, r1, lsl #2

20000094 <usbStringDescriptor>:
20000094:	200000e8 	andcs	r0, r0, r8, ror #1
20000098:	00000004 	andeq	r0, r0, r4
2000009c:	20000132 	andcs	r0, r0, r2, lsr r1
200000a0:	00000012 	andeq	r0, r0, r2, lsl r0
200000a4:	2000014c 	andcs	r0, r0, ip, asr #2
200000a8:	00000014 	andeq	r0, r0, r4, lsl r0
200000ac:	20000119 	andcs	r0, r0, r9, lsl r1
200000b0:	00000010 	andeq	r0, r0, r0, lsl r0
200000b4:	20000160 	andcs	r0, r0, r0, ror #2
200000b8:	00000080 	andeq	r0, r0, r0, lsl #1
200000bc:	200001e0 	andcs	r0, r0, r0, ror #3
200000c0:	0000006c 	andeq	r0, r0, ip, rrx
200000c4:	2000024c 	andcs	r0, r0, ip, asr #4
200000c8:	0000006c 	andeq	r0, r0, ip, rrx

200000cc <u8_usbDeviceDescriptorDFU>:
200000cc:	01000112 	tsteq	r0, r2, lsl r1
200000d0:	40000000 	andmi	r0, r0, r0
200000d4:	00031eaf 	andeq	r1, r3, pc, lsr #29
200000d8:	02010201 	andeq	r0, r1, #268435456	; 0x10000000
200000dc:	00000103 	andeq	r0, r0, r3, lsl #2

200000e0 <usbFunctionalDescriptor>:
200000e0:	20000129 	andcs	r0, r0, r9, lsr #2
200000e4:	00000009 	andeq	r0, r0, r9

200000e8 <u8_usbStringLangId>:
200000e8:	04090304 	streq	r0, [r9], #-772	; 0x304

200000ec <u8_usbConfigDescriptorDFU>:
200000ec:	002d0209 	eoreq	r0, sp, r9, lsl #4
200000f0:	80000101 	andhi	r0, r0, r1, lsl #2
200000f4:	00040932 	andeq	r0, r4, r2, lsr r9
200000f8:	01fe0000 	mvnseq	r0, r0
200000fc:	04090402 	streq	r0, [r9], #-1026	; 0x402
20000100:	fe000100 	cdp2	1, 0, cr0, cr0, cr0, {0}
20000104:	09050201 	stmdbeq	r5, {r0, r9}
20000108:	00020004 	andeq	r0, r2, r4
2000010c:	060201fe 			; <UNDEFINED> instruction: 0x060201fe
20000110:	ff032109 			; <UNDEFINED> instruction: 0xff032109
20000114:	10080000 	andne	r0, r8, r0
20000118:	4c031001 	stcmi	0, cr1, [r3], {1}

20000119 <u8_usbStringSerial>:
20000119:	004c0310 	subeq	r0, ip, r0, lsl r3
2000011d:	004d004c 	subeq	r0, sp, ip, asr #32
20000121:	00300020 	eorseq	r0, r0, r0, lsr #32
20000125:	00330030 	eorseq	r0, r3, r0, lsr r0

20000129 <u8_usbFunctionalDescriptor>:
20000129:	ff032109 			; <UNDEFINED> instruction: 0xff032109
2000012d:	10080000 	andne	r0, r8, r0
20000131:	4c031201 	sfmmi	f1, 4, [r3], {1}

20000132 <u8_usbStringVendor>:
20000132:	004c0312 	subeq	r0, ip, r2, lsl r3
20000136:	00610065 	rsbeq	r0, r1, r5, rrx
2000013a:	004c0066 	subeq	r0, ip, r6, rrx
2000013e:	00620061 	rsbeq	r0, r2, r1, rrx
20000142:	00cc0073 	sbceq	r0, ip, r3, ror r0

20000144 <usbDeviceDescriptorDFU>:
20000144:	200000cc 	andcs	r0, r0, ip, asr #1
20000148:	00000012 	andeq	r0, r0, r2, lsl r0

2000014c <u8_usbStringProduct>:
2000014c:	004d0314 	subeq	r0, sp, r4, lsl r3
20000150:	00700061 	rsbseq	r0, r0, r1, rrx
20000154:	0065006c 	rsbeq	r0, r5, ip, rrx
20000158:	00300020 	eorseq	r0, r0, r0, lsr #32
2000015c:	00330030 	eorseq	r0, r3, r0, lsr r0

20000160 <u8_usbStringAlt0>:
20000160:	00530380 	subseq	r0, r3, r0, lsl #7
20000164:	004d0054 	subeq	r0, sp, r4, asr r0
20000168:	00320033 	eorseq	r0, r2, r3, lsr r0
2000016c:	00750064 	rsbseq	r0, r5, r4, rrx
20000170:	006e0069 	rsbeq	r0, lr, r9, rrx
20000174:	0020006f 	eoreq	r0, r0, pc, rrx
20000178:	006f0062 	rsbeq	r0, pc, r2, rrx
2000017c:	0074006f 	rsbseq	r0, r4, pc, rrx
20000180:	006f006c 	rsbeq	r0, pc, ip, rrx
20000184:	00640061 	rsbeq	r0, r4, r1, rrx
20000188:	00720065 	rsbseq	r0, r2, r5, rrx
2000018c:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000190:	002e0031 	eoreq	r0, lr, r1, lsr r0
20000194:	00200030 	eoreq	r0, r0, r0, lsr r0
20000198:	00450020 	subeq	r0, r5, r0, lsr #32
2000019c:	00520052 	subseq	r0, r2, r2, asr r0
200001a0:	0052004f 	subseq	r0, r2, pc, asr #32
200001a4:	0020002e 	eoreq	r0, r0, lr, lsr #32
200001a8:	00700055 	rsbseq	r0, r0, r5, asr r0
200001ac:	006f006c 	rsbeq	r0, pc, ip, rrx
200001b0:	00640061 	rsbeq	r0, r4, r1, rrx
200001b4:	00740020 	rsbseq	r0, r4, r0, lsr #32
200001b8:	0020006f 	eoreq	r0, r0, pc, rrx
200001bc:	00410052 	subeq	r0, r1, r2, asr r0
200001c0:	0020004d 	eoreq	r0, r0, sp, asr #32
200001c4:	006f006e 	rsbeq	r0, pc, lr, rrx
200001c8:	00200074 	eoreq	r0, r0, r4, ror r0
200001cc:	00750073 	rsbseq	r0, r5, r3, ror r0
200001d0:	00700070 	rsbseq	r0, r0, r0, ror r0
200001d4:	0072006f 	rsbseq	r0, r2, pc, rrx
200001d8:	00650074 	rsbeq	r0, r5, r4, ror r0
200001dc:	002e0064 	eoreq	r0, lr, r4, rrx

200001e0 <u8_usbStringAlt1>:
200001e0:	0053036c 	subseq	r0, r3, ip, ror #6
200001e4:	004d0054 	subeq	r0, sp, r4, asr r0
200001e8:	00320033 	eorseq	r0, r2, r3, lsr r0
200001ec:	00750064 	rsbseq	r0, r5, r4, rrx
200001f0:	006e0069 	rsbeq	r0, lr, r9, rrx
200001f4:	0020006f 	eoreq	r0, r0, pc, rrx
200001f8:	006f0062 	rsbeq	r0, pc, r2, rrx
200001fc:	0074006f 	rsbseq	r0, r4, pc, rrx
20000200:	006f006c 	rsbeq	r0, pc, ip, rrx
20000204:	00640061 	rsbeq	r0, r4, r1, rrx
20000208:	00720065 	rsbseq	r0, r2, r5, rrx
2000020c:	00760020 	rsbseq	r0, r6, r0, lsr #32
20000210:	002e0031 	eoreq	r0, lr, r1, lsr r0
20000214:	00200030 	eoreq	r0, r0, r0, lsr r0
20000218:	00550020 	subseq	r0, r5, r0, lsr #32
2000021c:	006c0070 	rsbeq	r0, ip, r0, ror r0
20000220:	0061006f 	rsbeq	r0, r1, pc, rrx
20000224:	00200064 	eoreq	r0, r0, r4, rrx
20000228:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
2000022c:	00460020 	subeq	r0, r6, r0, lsr #32
20000230:	0061006c 	rsbeq	r0, r1, ip, rrx
20000234:	00680073 	rsbeq	r0, r8, r3, ror r0
20000238:	00300020 	eorseq	r0, r0, r0, lsr #32
2000023c:	00380078 	eorseq	r0, r8, r8, ror r0
20000240:	00300030 	eorseq	r0, r0, r0, lsr r0
20000244:	00300035 	eorseq	r0, r0, r5, lsr r0
20000248:	00300030 	eorseq	r0, r0, r0, lsr r0

2000024c <u8_usbStringAlt2>:
2000024c:	0053036c 	subseq	r0, r3, ip, ror #6
20000250:	004d0054 	subeq	r0, sp, r4, asr r0
20000254:	00320033 	eorseq	r0, r2, r3, lsr r0
20000258:	00750064 	rsbseq	r0, r5, r4, rrx
2000025c:	006e0069 	rsbeq	r0, lr, r9, rrx
20000260:	0020006f 	eoreq	r0, r0, pc, rrx
20000264:	006f0062 	rsbeq	r0, pc, r2, rrx
20000268:	0074006f 	rsbseq	r0, r4, pc, rrx
2000026c:	006f006c 	rsbeq	r0, pc, ip, rrx
20000270:	00640061 	rsbeq	r0, r4, r1, rrx
20000274:	00720065 	rsbseq	r0, r2, r5, rrx
20000278:	00760020 	rsbseq	r0, r6, r0, lsr #32
2000027c:	002e0031 	eoreq	r0, lr, r1, lsr r0
20000280:	00200030 	eoreq	r0, r0, r0, lsr r0
20000284:	00550020 	subseq	r0, r5, r0, lsr #32
20000288:	006c0070 	rsbeq	r0, ip, r0, ror r0
2000028c:	0061006f 	rsbeq	r0, r1, pc, rrx
20000290:	00200064 	eoreq	r0, r0, r4, rrx
20000294:	006f0074 	rsbeq	r0, pc, r4, ror r0	; <UNPREDICTABLE>
20000298:	00460020 	subeq	r0, r6, r0, lsr #32
2000029c:	0061006c 	rsbeq	r0, r1, ip, rrx
200002a0:	00680073 	rsbeq	r0, r8, r3, ror r0
200002a4:	00300020 	eorseq	r0, r0, r0, lsr #32
200002a8:	00380078 	eorseq	r0, r8, r8, ror r0
200002ac:	00300030 	eorseq	r0, r0, r0, lsr r0
200002b0:	00300032 	eorseq	r0, r0, r2, lsr r0
200002b4:	00300030 	eorseq	r0, r0, r0, lsr r0

200002b8 <usbConfigDescriptorDFU>:
200002b8:	200000ec 	andcs	r0, r0, ip, ror #1
200002bc:	0000002d 	andeq	r0, r0, sp, lsr #32

200002c0 <userAppEnd>:
200002c0:	20005000 	andcs	r5, r0, r0

200002c4 <userAppAddr>:
200002c4:	20000c00 	andcs	r0, r0, r0, lsl #24

Disassembly of section .bss:

200002c8 <_sbss>:
200002c8:	00000000 	andeq	r0, r0, r0

200002cc <wIstr>:
	...

200002ce <ResumeS>:
	...

200002d0 <code_copy_lock>:
	...

200002d2 <SaveRState>:
	...

200002d4 <SaveTState>:
200002d4:	00000000 	andeq	r0, r0, r0

200002d8 <SaveState>:
200002d8:	00000000 	andeq	r0, r0, r0

200002dc <pProperty>:
200002dc:	00000000 	andeq	r0, r0, r0

200002e0 <EPindex>:
200002e0:	00000000 	andeq	r0, r0, r0

200002e4 <Device_Info>:
	...

20000300 <pUser_Standard_Requests>:
20000300:	00000000 	andeq	r0, r0, r0

20000304 <pInformation>:
20000304:	00000000 	andeq	r0, r0, r0

20000308 <wInterrupt_Mask>:
	...

2000030a <StatusInfo>:
	...

Disassembly of section .bss.bIntPackSOF:

2000030c <bIntPackSOF>:
	...

Disassembly of section .bss.bDeviceState:

20000310 <bDeviceState>:
20000310:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.recvBuffer:

20000314 <recvBuffer>:
	...

Disassembly of section .bss.uploadBlockLen:

20000b14 <uploadBlockLen>:
	...

Disassembly of section .bss.thisBlockLen:

20000b16 <thisBlockLen>:
	...

Disassembly of section .bss.userFirmwareLen:

20000b18 <userFirmwareLen>:
20000b18:	00000000 	andeq	r0, r0, r0

Disassembly of section .bss.userUploadType:

20000b1c <userUploadType>:
	...

Disassembly of section .bss.dfuAppStatus:

20000b1d <dfuAppStatus>:
20000b1d:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .bss.dfuBusy:

20000b23 <dfuBusy>:
	...

Disassembly of section .bss.Data_Mul_MaxPacketSize:

20000b24 <Data_Mul_MaxPacketSize>:
	...

Disassembly of section ._usrstack:

20000b25 <_susrstack-0x3>:
20000b25:	00000000 	andeq	r0, r0, r0

20000b28 <_susrstack>:
	...

Disassembly of section .comment:

00000000 <.comment>:
* Input          : None.
* Output         : None.
* Return         : None.
*******************************************************************************/
void NOP_Process(void)
{
   0:	3a434347 	bcc	10d0d24 <__Stack_Size+0x10d0924>
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	4e472820 	cdpmi	8, 4, cr2, cr7, cr0, {1}
   8:	6f542055 	svcvs	0x00542055
   c:	20736c6f 	rsbscs	r6, r3, pc, ror #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	20726f66 	rsbscs	r6, r2, r6, ror #30
  14:	204d5241 	subcs	r5, sp, r1, asr #4
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	65626d45 	strbvs	r6, [r2, #-3397]!	; 0xd45
  1c:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	6f725020 	svcvs	0x00725020
  24:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
  28:	2973726f 	ldmdbcs	r3!, {r0, r1, r2, r3, r5, r6, r9, ip, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	382e3420 	stmdacc	lr!, {r5, sl, ip, sp}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	3220332e 	eorcc	r3, r0, #-1207959552	; 0xb8000000
  34:	30343130 	eorscc	r3, r4, r0, lsr r1
  38:	20383232 	eorscs	r3, r8, r2, lsr r2

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	6c657228 	sfmvs	f7, 2, [r5], #-160	; 0xffffff60

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	65736165 	ldrbvs	r6, [r3, #-357]!	; 0x165
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	415b2029 	cmpmi	fp, r9, lsr #32
  48:	652f4d52 	strvs	r4, [pc, #-3410]!	; fffff2fe <BootRAM+0xef6fa9f>
  4c:	6465626d 	strbtvs	r6, [r5], #-621	; 0x26d

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	2d646564 	cfstr64cs	mvdx6, [r4, #-400]!	; 0xfffffe70
  54:	2d385f34 	ldccs	15, cr5, [r8, #-208]!	; 0xffffff30
  58:	6e617262 	cdpvs	2, 6, cr7, cr1, cr2, {3}
  5c:	72206863 	eorvc	r6, r0, #6488064	; 0x630000
  60:	73697665 	cmnvc	r9, #105906176	; 0x6500000
  64:	206e6f69 	rsbcs	r6, lr, r9, ror #30
  68:	33383032 	teqcc	r8, #50	; 0x32
  6c:	005d3232 	subseq	r3, sp, r2, lsr r2

Disassembly of section .ARM.attributes:

00000000 <.ARM.attributes>:
   0:	00002e41 	andeq	r2, r0, r1, asr #28
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	61656100 	cmnvs	r5, r0, lsl #2
   8:	01006962 	tsteq	r0, r2, ror #18
   c:	00000024 	andeq	r0, r0, r4, lsr #32
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	726f4305 	rsbvc	r4, pc, #335544320	; 0x14000000
  14:	2d786574 	cfldr64cs	mvdx6, [r8, #-464]!	; 0xfffffe30
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	0600334d 	streq	r3, [r0], -sp, asr #6
  1c:	094d070a 	stmdbeq	sp, {r1, r3, r8, r9, sl}^
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	14041202 	strne	r1, [r4], #-514	; 0x202
  24:	17011501 	strne	r1, [r1, -r1, lsl #10]
  28:	1a011803 	bne	4603c <__Stack_Size+0x45c3c>
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	Address 0x0000002c is out of bounds.


Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	00000024 	andeq	r0, r0, r4, lsr #32
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000002 	andeq	r0, r0, r2
   8:	00040000 	andeq	r0, r4, r0
   c:	00000000 	andeq	r0, r0, r0
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
  14:	00000048 	andeq	r0, r0, r8, asr #32
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	080001b4 	stmdaeq	r0, {r2, r4, r5, r7, r8}
  1c:	00000004 	andeq	r0, r0, r4
	...
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  28:	0000001c 	andeq	r0, r0, ip, lsl r0
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	007e0002 	rsbseq	r0, lr, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	00040000 	andeq	r0, r4, r0
  34:	00000000 	andeq	r0, r0, r0
  38:	080000f0 	stmdaeq	r0, {r4, r5, r6, r7}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	0000007a 	andeq	r0, r0, sl, ror r0
	...

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  48:	00000114 	andeq	r0, r0, r4, lsl r1
  4c:	01020002 	tsteq	r2, r2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	00040000 	andeq	r0, r4, r0
  54:	00000000 	andeq	r0, r0, r0
  58:	080001b8 	stmdaeq	r0, {r3, r4, r5, r7, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	080001ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8}
  64:	00000002 	andeq	r0, r0, r2
  68:	080001bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8}
  6c:	00000002 	andeq	r0, r0, r2
* Output         : None.
* Return         : None.
*******************************************************************************/
void SetEPDblBuffCount(u8 bEpNum, u8 bDir, u16 wCount)
{
  _SetEPDblBuffCount(bEpNum, bDir, wCount);
  70:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}
  74:	0000000a 	andeq	r0, r0, sl
  78:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
  84:	00000018 	andeq	r0, r0, r8, lsl r0
  88:	080001e4 	stmdaeq	r0, {r2, r5, r6, r7, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
  94:	00000002 	andeq	r0, r0, r2
  98:	080001e8 	stmdaeq	r0, {r3, r5, r6, r7, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
  a4:	00000002 	andeq	r0, r0, r2
  a8:	080001ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
  b4:	00000002 	andeq	r0, r0, r2
  b8:	080001f0 	stmdaeq	r0, {r4, r5, r6, r7, r8}
  bc:	0000000c 	andeq	r0, r0, ip
  c0:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
  c4:	000000a8 	andeq	r0, r0, r8, lsr #1
  c8:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
  cc:	00000060 	andeq	r0, r0, r0, rrx
  d0:	08000304 	stmdaeq	r0, {r2, r8, r9}
  d4:	0000000c 	andeq	r0, r0, ip
  d8:	08000310 	stmdaeq	r0, {r4, r8, r9}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
  e4:	00000020 	andeq	r0, r0, r0, lsr #32
  e8:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
  ec:	0000000c 	andeq	r0, r0, ip
  f0:	08000348 	stmdaeq	r0, {r3, r6, r8, r9}
  f4:	00000028 	andeq	r0, r0, r8, lsr #32
  f8:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  fc:	00000078 	andeq	r0, r0, r8, ror r0
 100:	00000000 	andeq	r0, r0, r0
 104:	00000004 	andeq	r0, r0, r4
 108:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
 10c:	0000001c 	andeq	r0, r0, ip, lsl r0
 110:	08000404 	stmdaeq	r0, {r2, sl}
 114:	00000018 	andeq	r0, r0, r8, lsl r0
 118:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
 11c:	00000084 	andeq	r0, r0, r4, lsl #1
 120:	080004a0 	stmdaeq	r0, {r5, r7, sl}
 124:	00000028 	andeq	r0, r0, r8, lsr #32
 128:	080004c8 	stmdaeq	r0, {r3, r6, r7, sl}
 12c:	0000001c 	andeq	r0, r0, ip, lsl r0
 130:	080004e4 	stmdaeq	r0, {r2, r5, r6, r7, sl}
 134:	00000004 	andeq	r0, r0, r4
 138:	080004e8 	stmdaeq	r0, {r3, r5, r6, r7, sl}
 13c:	00000024 	andeq	r0, r0, r4, lsr #32
 140:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
 144:	00000040 	andeq	r0, r0, r0, asr #32
 148:	0800054c 	stmdaeq	r0, {r2, r3, r6, r8, sl}
 14c:	00000022 	andeq	r0, r0, r2, lsr #32
 150:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
 154:	000000b4 	strheq	r0, [r0], -r4
	...
 160:	00000014 	andeq	r0, r0, r4, lsl r0
 164:	0e120002 	cdpeq	0, 1, cr0, cr2, cr2, {0}
 168:	00040000 	andeq	r0, r4, r0
	...
 178:	0000001c 	andeq	r0, r0, ip, lsl r0
 17c:	10530002 	subsne	r0, r3, r2
 180:	00040000 	andeq	r0, r4, r0
 184:	00000000 	andeq	r0, r0, r0
 188:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 18c:	000000b8 	strheq	r0, [r0], -r8
	...
 198:	000000bc 	strheq	r0, [r0], -ip
 19c:	13250002 	teqne	r5, #2
 1a0:	00040000 	andeq	r0, r4, r0
 1a4:	00000000 	andeq	r0, r0, r0
 1a8:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
 1ac:	00000016 	andeq	r0, r0, r6, lsl r0
 1b0:	00000000 	andeq	r0, r0, r0
 1b4:	00000012 	andeq	r0, r0, r2, lsl r0
 1b8:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 1bc:	00000010 	andeq	r0, r0, r0, lsl r0
 1c0:	08000704 	stmdaeq	r0, {r2, r8, r9, sl}
 1c4:	00000050 	andeq	r0, r0, r0, asr r0
 1c8:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 1cc:	00000048 	andeq	r0, r0, r8, asr #32
 1d0:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
 1d4:	00000060 	andeq	r0, r0, r0, rrx
 1d8:	080007fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 1dc:	00000028 	andeq	r0, r0, r8, lsr #32
 1e0:	08000824 	stmdaeq	r0, {r2, r5, fp}
 1e4:	0000001c 	andeq	r0, r0, ip, lsl r0
 1e8:	08000840 	stmdaeq	r0, {r6, fp}
 1ec:	00000014 	andeq	r0, r0, r4, lsl r0
 1f0:	08000854 	stmdaeq	r0, {r2, r4, r6, fp}
 1f4:	0000006c 	andeq	r0, r0, ip, rrx
 1f8:	080008c0 	stmdaeq	r0, {r6, r7, fp}
 1fc:	00000024 	andeq	r0, r0, r4, lsr #32
 200:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
 204:	0000002c 	andeq	r0, r0, ip, lsr #32
 208:	08000910 	stmdaeq	r0, {r4, r8, fp}
 20c:	00000014 	andeq	r0, r0, r4, lsl r0
 210:	08000924 	stmdaeq	r0, {r2, r5, r8, fp}
 214:	00000034 	andeq	r0, r0, r4, lsr r0
 218:	00000000 	andeq	r0, r0, r0
 21c:	00000030 	andeq	r0, r0, r0, lsr r0
 220:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
 224:	0000004c 	andeq	r0, r0, ip, asr #32
 228:	080009a4 	stmdaeq	r0, {r2, r5, r7, r8, fp}
 22c:	0000000c 	andeq	r0, r0, ip
 230:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
 234:	00000018 	andeq	r0, r0, r8, lsl r0
 238:	080009c8 	stmdaeq	r0, {r3, r6, r7, r8, fp}
 23c:	00000012 	andeq	r0, r0, r2, lsl r0
 240:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
 244:	00000010 	andeq	r0, r0, r0, lsl r0
 248:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
 24c:	00000018 	andeq	r0, r0, r8, lsl r0
	...
 258:	0000007c 	andeq	r0, r0, ip, ror r0
 25c:	1c5e0002 	mrrcne	0, 0, r0, lr, cr2
 260:	00040000 	andeq	r0, r4, r0
 264:	00000000 	andeq	r0, r0, r0
 268:	08000a04 	stmdaeq	r0, {r2, r9, fp}
 26c:	0000005c 	andeq	r0, r0, ip, asr r0
 270:	08000a60 	stmdaeq	r0, {r5, r6, r9, fp}
 274:	00000044 	andeq	r0, r0, r4, asr #32
 278:	00000000 	andeq	r0, r0, r0
 27c:	00000002 	andeq	r0, r0, r2
 280:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 284:	00000018 	andeq	r0, r0, r8, lsl r0
 288:	08000abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp}
 28c:	00000018 	andeq	r0, r0, r8, lsl r0
 290:	08000ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp}
 294:	00000028 	andeq	r0, r0, r8, lsr #32
 298:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 29c:	00000034 	andeq	r0, r0, r4, lsr r0
 2a0:	08000b30 	stmdaeq	r0, {r4, r5, r8, r9, fp}
 2a4:	0000005c 	andeq	r0, r0, ip, asr r0
 2a8:	08000b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp}
 2ac:	00000234 	andeq	r0, r0, r4, lsr r2
 2b0:	00000000 	andeq	r0, r0, r0
 2b4:	0000000c 	andeq	r0, r0, ip
 2b8:	00000000 	andeq	r0, r0, r0
 2bc:	0000000c 	andeq	r0, r0, ip
 2c0:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 2c4:	0000000c 	andeq	r0, r0, ip
 2c8:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 2cc:	00000004 	andeq	r0, r0, r4
	...
 2d8:	000001ec 	andeq	r0, r0, ip, ror #3
 2dc:	22b70002 	adcscs	r0, r7, #2
 2e0:	00040000 	andeq	r0, r4, r0
	...
 2ec:	0000000c 	andeq	r0, r0, ip
 2f0:	00000000 	andeq	r0, r0, r0
 2f4:	0000000c 	andeq	r0, r0, ip
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	0000000c 	andeq	r0, r0, ip
 300:	00000000 	andeq	r0, r0, r0
 304:	0000000c 	andeq	r0, r0, ip
 308:	00000000 	andeq	r0, r0, r0
 30c:	0000000c 	andeq	r0, r0, ip
 310:	00000000 	andeq	r0, r0, r0
 314:	0000000c 	andeq	r0, r0, ip
 318:	00000000 	andeq	r0, r0, r0
 31c:	0000000c 	andeq	r0, r0, ip
 320:	00000000 	andeq	r0, r0, r0
 324:	00000010 	andeq	r0, r0, r0, lsl r0
 328:	00000000 	andeq	r0, r0, r0
 32c:	0000000c 	andeq	r0, r0, ip
 330:	00000000 	andeq	r0, r0, r0
 334:	0000000e 	andeq	r0, r0, lr
 338:	00000000 	andeq	r0, r0, r0
 33c:	00000010 	andeq	r0, r0, r0, lsl r0
 340:	00000000 	andeq	r0, r0, r0
 344:	0000001c 	andeq	r0, r0, ip, lsl r0
 348:	00000000 	andeq	r0, r0, r0
 34c:	00000012 	andeq	r0, r0, r2, lsl r0
 350:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
 354:	0000002a 	andeq	r0, r0, sl, lsr #32
 358:	00000000 	andeq	r0, r0, r0
 35c:	0000002a 	andeq	r0, r0, sl, lsr #32
 360:	00000000 	andeq	r0, r0, r0
 364:	00000024 	andeq	r0, r0, r4, lsr #32
 368:	00000000 	andeq	r0, r0, r0
 36c:	00000012 	andeq	r0, r0, r2, lsl r0
 370:	00000000 	andeq	r0, r0, r0
 374:	00000012 	andeq	r0, r0, r2, lsl r0
 378:	00000000 	andeq	r0, r0, r0
 37c:	0000001e 	andeq	r0, r0, lr, lsl r0
 380:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
 384:	0000001e 	andeq	r0, r0, lr, lsl r0
 388:	00000000 	andeq	r0, r0, r0
 38c:	0000001e 	andeq	r0, r0, lr, lsl r0
 390:	00000000 	andeq	r0, r0, r0
 394:	0000001c 	andeq	r0, r0, ip, lsl r0
 398:	08000e18 	stmdaeq	r0, {r3, r4, r9, sl, fp}
 39c:	0000001c 	andeq	r0, r0, ip, lsl r0
 3a0:	00000000 	andeq	r0, r0, r0
 3a4:	0000001e 	andeq	r0, r0, lr, lsl r0
 3a8:	00000000 	andeq	r0, r0, r0
 3ac:	0000001e 	andeq	r0, r0, lr, lsl r0
 3b0:	00000000 	andeq	r0, r0, r0
 3b4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3b8:	00000000 	andeq	r0, r0, r0
 3bc:	0000001a 	andeq	r0, r0, sl, lsl r0
 3c0:	00000000 	andeq	r0, r0, r0
 3c4:	0000001a 	andeq	r0, r0, sl, lsl r0
 3c8:	00000000 	andeq	r0, r0, r0
 3cc:	00000018 	andeq	r0, r0, r8, lsl r0
 3d0:	00000000 	andeq	r0, r0, r0
 3d4:	0000001c 	andeq	r0, r0, ip, lsl r0
 3d8:	00000000 	andeq	r0, r0, r0
 3dc:	00000020 	andeq	r0, r0, r0, lsr #32
 3e0:	00000000 	andeq	r0, r0, r0
 3e4:	00000020 	andeq	r0, r0, r0, lsr #32
 3e8:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 3ec:	00000020 	andeq	r0, r0, r0, lsr #32
 3f0:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 3f4:	00000020 	andeq	r0, r0, r0, lsr #32
 3f8:	00000000 	andeq	r0, r0, r0
 3fc:	0000001e 	andeq	r0, r0, lr, lsl r0
 400:	00000000 	andeq	r0, r0, r0
 404:	00000012 	andeq	r0, r0, r2, lsl r0
 408:	00000000 	andeq	r0, r0, r0
 40c:	00000020 	andeq	r0, r0, r0, lsr #32
 410:	00000000 	andeq	r0, r0, r0
 414:	00000020 	andeq	r0, r0, r0, lsr #32
 418:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
 41c:	0000001c 	andeq	r0, r0, ip, lsl r0
 420:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
 424:	0000001c 	andeq	r0, r0, ip, lsl r0
 428:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
 42c:	0000001c 	andeq	r0, r0, ip, lsl r0
 430:	00000000 	andeq	r0, r0, r0
 434:	00000026 	andeq	r0, r0, r6, lsr #32
 438:	08000ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp}
 43c:	00000040 	andeq	r0, r0, r0, asr #32
 440:	00000000 	andeq	r0, r0, r0
 444:	00000020 	andeq	r0, r0, r0, lsr #32
 448:	00000000 	andeq	r0, r0, r0
 44c:	00000020 	andeq	r0, r0, r0, lsr #32
 450:	00000000 	andeq	r0, r0, r0
 454:	00000038 	andeq	r0, r0, r8, lsr r0
 458:	00000000 	andeq	r0, r0, r0
 45c:	00000020 	andeq	r0, r0, r0, lsr #32
 460:	00000000 	andeq	r0, r0, r0
 464:	00000020 	andeq	r0, r0, r0, lsr #32
 468:	00000000 	andeq	r0, r0, r0
 46c:	0000001c 	andeq	r0, r0, ip, lsl r0
 470:	00000000 	andeq	r0, r0, r0
 474:	0000001c 	andeq	r0, r0, ip, lsl r0
 478:	00000000 	andeq	r0, r0, r0
 47c:	000000a8 	andeq	r0, r0, r8, lsr #1
 480:	00000000 	andeq	r0, r0, r0
 484:	0000005c 	andeq	r0, r0, ip, asr r0
 488:	00000000 	andeq	r0, r0, r0
 48c:	0000005c 	andeq	r0, r0, ip, asr r0
 490:	00000000 	andeq	r0, r0, r0
 494:	00000020 	andeq	r0, r0, r0, lsr #32
 498:	00000000 	andeq	r0, r0, r0
 49c:	00000020 	andeq	r0, r0, r0, lsr #32
 4a0:	00000000 	andeq	r0, r0, r0
 4a4:	00000044 	andeq	r0, r0, r4, asr #32
 4a8:	00000000 	andeq	r0, r0, r0
 4ac:	0000003a 	andeq	r0, r0, sl, lsr r0
 4b0:	00000000 	andeq	r0, r0, r0
 4b4:	00000006 	andeq	r0, r0, r6
 4b8:	00000000 	andeq	r0, r0, r0
 4bc:	0000000a 	andeq	r0, r0, sl
	...
 4c8:	00000024 	andeq	r0, r0, r4, lsr #32
 4cc:	2f430002 	svccs	0x00430002
 4d0:	00040000 	andeq	r0, r4, r0
 4d4:	00000000 	andeq	r0, r0, r0
 4d8:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
 4dc:	00000154 	andeq	r0, r0, r4, asr r1
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000070 	andeq	r0, r0, r0, ror r0
	...
 4f0:	0000001c 	andeq	r0, r0, ip, lsl r0
 4f4:	311f0002 	tstcc	pc, r2
 4f8:	00040000 	andeq	r0, r4, r0
 4fc:	00000000 	andeq	r0, r0, r0
 500:	0800105c 	stmdaeq	r0, {r2, r3, r4, r6, ip}
 504:	00000038 	andeq	r0, r0, r8, lsr r0
	...
 510:	00000094 	muleq	r0, r4, r0
 514:	351c0002 	ldrcc	r0, [ip, #-2]
 518:	00040000 	andeq	r0, r4, r0
 51c:	00000000 	andeq	r0, r0, r0
 520:	08001094 	stmdaeq	r0, {r2, r4, r7, ip}
 524:	00000024 	andeq	r0, r0, r4, lsr #32
 528:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 52c:	00000024 	andeq	r0, r0, r4, lsr #32
 530:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
 534:	00000090 	muleq	r0, r0, r0
 538:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 53c:	000000a8 	andeq	r0, r0, r8, lsr #1
 540:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
 544:	00000038 	andeq	r0, r0, r8, lsr r0
 548:	0800124c 	stmdaeq	r0, {r2, r3, r6, r9, ip}
 54c:	00000048 	andeq	r0, r0, r8, asr #32
 550:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
 554:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 558:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 55c:	00000084 	andeq	r0, r0, r4, lsl #1
 560:	080013e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip}
 564:	00000024 	andeq	r0, r0, r4, lsr #32
 568:	0800140c 	stmdaeq	r0, {r2, r3, sl, ip}
 56c:	0000001c 	andeq	r0, r0, ip, lsl r0
 570:	08001428 	stmdaeq	r0, {r3, r5, sl, ip}
 574:	00000040 	andeq	r0, r0, r0, asr #32
 578:	08001468 	stmdaeq	r0, {r3, r5, r6, sl, ip}
 57c:	000002dc 	ldrdeq	r0, [r0], -ip
 580:	08001744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip}
 584:	000000c8 	andeq	r0, r0, r8, asr #1
 588:	0800180c 	stmdaeq	r0, {r2, r3, fp, ip}
 58c:	00000038 	andeq	r0, r0, r8, lsr r0
 590:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
 594:	0000005c 	andeq	r0, r0, ip, asr r0
 598:	00000000 	andeq	r0, r0, r0
 59c:	00000002 	andeq	r0, r0, r2
	...
 5a8:	00000024 	andeq	r0, r0, r4, lsr #32
 5ac:	43000002 	movwmi	r0, #2
 5b0:	00040000 	andeq	r0, r4, r0
 5b4:	00000000 	andeq	r0, r0, r0
 5b8:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
 5bc:	00000030 	andeq	r0, r0, r0, lsr r0
 5c0:	080018d0 	stmdaeq	r0, {r4, r6, r7, fp, ip}
 5c4:	00000024 	andeq	r0, r0, r4, lsr #32
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	0000007a 	andeq	r0, r0, sl, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00000002 	andeq	r0, r0, r2
       8:	01040000 	mrseq	r0, (UNDEF: 4)
	...
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      14:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      1c:	5f632f62 	svcpl	0x00632f62
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
      24:	6174735f 	cmnvs	r4, pc, asr r3
      28:	70757472 	rsbsvc	r7, r5, r2, ror r4
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	4300732e 	movwmi	r7, #814	; 0x32e
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      34:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
      38:	616c6372 	smcvs	50738	; 0xc632

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	445c6b72 	ldrbmi	r6, [ip], #-2930	; 0xb72

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	73746e65 	cmnvc	r4, #1616	; 0x650
      48:	6472415c 	ldrbtvs	r4, [r2], #-348	; 0x15c
      4c:	6f6e6975 	svcvs	0x006e6975

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	6d74735c 	ldclvs	3, cr7, [r4, #-368]!	; 0xfffffe90
      54:	75643233 	strbvc	r3, [r4, #-563]!	; 0x233
      58:	2d6f6e69 	stclcs	14, cr6, [pc, #-420]!	; fffffebc <BootRAM+0xef7065d>
      5c:	746f6f62 	strbtvc	r6, [pc], #-3938	; 64 <_Minimum_Stack_Size-0x9c>
      60:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
      64:	475c7265 	ldrbmi	r7, [ip, -r5, ror #4]
      68:	46323344 	ldrtmi	r3, [r2], -r4, asr #6
      6c:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
      70:	53412055 	movtpl	r2, #4181	; 0x1055
      74:	322e3220 	eorcc	r3, lr, #32, 4
      78:	00322e33 	eorseq	r2, r2, r3, lsr lr
      7c:	00808001 	addeq	r8, r0, r1
      80:	00020000 	andeq	r0, r2, r0
      84:	00000012 	andeq	r0, r0, r2, lsl r0
      88:	00750104 	rsbseq	r0, r5, r4, lsl #2
      8c:	00f00000 	rscseq	r0, r0, r0
      90:	016a0800 	cmneq	sl, r0, lsl #16
      94:	2f2e0800 	svccs	0x002e0800
      98:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
      9c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
      a0:	6f632f62 	svcvs	0x00632f62
      a4:	78657472 	stmdavc	r5!, {r1, r4, r5, r6, sl, ip, sp, lr}^
      a8:	6d5f336d 	ldclvs	3, cr3, [pc, #-436]	; fffffefc <BootRAM+0xef7069d>
      ac:	6f726361 	svcvs	0x00726361
      b0:	4300532e 	movwmi	r5, #814	; 0x32e
      b4:	73555c3a 	cmpvc	r5, #14848	; 0x3a00
      b8:	5c737265 	lfmpl	f7, 2, [r3], #-404	; 0xfffffe6c
      bc:	616c6372 	smcvs	50738	; 0xc632
      c0:	445c6b72 	ldrbmi	r6, [ip], #-2930	; 0xb72
      c4:	6d75636f 	ldclvs	3, cr6, [r5, #-444]!	; 0xfffffe44
      c8:	73746e65 	cmnvc	r4, #1616	; 0x650
      cc:	6472415c 	ldrbtvs	r4, [r2], #-348	; 0x15c
      d0:	6f6e6975 	svcvs	0x006e6975
      d4:	6d74735c 	ldclvs	3, cr7, [r4, #-368]!	; 0xfffffe90
      d8:	75643233 	strbvc	r3, [r4, #-563]!	; 0x233
      dc:	2d6f6e69 	stclcs	14, cr6, [pc, #-420]!	; ffffff40 <BootRAM+0xef706e1>
      e0:	746f6f62 	strbtvc	r6, [pc], #-3938	; e8 <_Minimum_Stack_Size-0x18>
      e4:	64616f6c 	strbtvs	r6, [r1], #-3948	; 0xf6c
      e8:	475c7265 	ldrbmi	r7, [ip, -r5, ror #4]
      ec:	46323344 	ldrtmi	r3, [r2], -r4, asr #6
      f0:	4e470031 	mcrmi	0, 2, r0, cr7, cr1, {1}
      f4:	53412055 	movtpl	r2, #4181	; 0x1055
      f8:	322e3220 	eorcc	r3, lr, #32, 4
      fc:	00322e33 	eorseq	r2, r2, r3, lsr lr
     100:	0d0c8001 	stceq	0, cr8, [ip, #-4]
     104:	00040000 	andeq	r0, r4, r0
     108:	00000026 	andeq	r0, r0, r6, lsr #32
     10c:	01580104 	cmpeq	r8, r4, lsl #2
     110:	17010000 	strne	r0, [r1, -r0]
     114:	26000001 	strcs	r0, [r0], -r1
     118:	20000009 	andcs	r0, r0, r9
     11c:	00000000 	andeq	r0, r0, r0
     120:	1b000000 	blne	128 <_Minimum_Stack_Size+0x28>
     124:	02000001 	andeq	r0, r0, #1
     128:	01f60504 	mvnseq	r0, r4, lsl #10
     12c:	02020000 	andeq	r0, r2, #0
     130:	0006a505 	andeq	sl, r6, r5, lsl #10
     134:	06010200 	streq	r0, [r1], -r0, lsl #4
     138:	00000651 	andeq	r0, r0, r1, asr r6
     13c:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
     140:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
     144:	02000000 	andeq	r0, r0, #0
     148:	037b0704 	cmneq	fp, #4, 14	; 0x100000
     14c:	75030000 	strvc	r0, [r3, #-0]
     150:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
     154:	00005728 	andeq	r5, r0, r8, lsr #14
     158:	07020200 	streq	r0, [r2, -r0, lsl #4]
     15c:	000003d7 	ldrdeq	r0, [r0], -r7
     160:	00387503 	eorseq	r7, r8, r3, lsl #10
     164:	00682902 	rsbeq	r2, r8, r2, lsl #18
     168:	01020000 	mrseq	r0, (UNDEF: 2)
     16c:	00064f08 	andeq	r4, r6, r8, lsl #30
     170:	04460400 	strbeq	r0, [r6], #-1024	; 0x400
     174:	2f020000 	svccs	0x00020000
     178:	0000007a 	andeq	r0, r0, sl, ror r0
     17c:	00004505 	andeq	r4, r0, r5, lsl #10
     180:	01530400 	cmpeq	r3, r0, lsl #8
     184:	30020000 	andcc	r0, r2, r0
     188:	0000008a 	andeq	r0, r0, sl, lsl #1
     18c:	00005705 	andeq	r5, r0, r5, lsl #14
     190:	75760300 	ldrbvc	r0, [r6, #-768]!	; 0x300
     194:	31020038 	tstcc	r2, r8, lsr r0
     198:	0000009a 	muleq	r0, sl, r0
     19c:	00006805 	andeq	r6, r0, r5, lsl #16
     1a0:	02010600 	andeq	r0, r1, #0, 12
     1a4:	0000b437 	andeq	fp, r0, r7, lsr r4
     1a8:	05dc0700 	ldrbeq	r0, [ip, #1792]	; 0x700
     1ac:	07000000 	streq	r0, [r0, -r0]
     1b0:	0000074a 	andeq	r0, r0, sl, asr #14
     1b4:	33040001 	movwcc	r0, #16385	; 0x4001
     1b8:	02000004 	andeq	r0, r0, #4
     1bc:	00009f37 	andeq	r9, r0, r7, lsr pc
     1c0:	07040200 	streq	r0, [r4, -r0, lsl #4]
     1c4:	00000515 	andeq	r0, r0, r5, lsl r5
     1c8:	a9030408 	stmdbge	r3, {r3, sl}
     1cc:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     1d0:	00044b09 	andeq	r4, r4, r9, lsl #22
     1d4:	5eaa0300 	cdppl	3, 10, cr0, cr10, cr0, {0}
     1d8:	00000000 	andeq	r0, r0, r0
     1dc:	00046e09 	andeq	r6, r4, r9, lsl #28
     1e0:	5eab0300 	cdppl	3, 10, cr0, cr11, cr0, {0}
     1e4:	01000000 	mrseq	r0, (UNDEF: 0)
     1e8:	00035009 	andeq	r5, r3, r9
     1ec:	5eac0300 	cdppl	3, 10, cr0, cr12, cr0, {0}
     1f0:	02000000 	andeq	r0, r0, #0
     1f4:	00000009 	andeq	r0, r0, r9
     1f8:	b4ad0300 	strtlt	r0, [sp], #768	; 0x300
     1fc:	03000000 	movweq	r0, #0
     200:	04900400 	ldreq	r0, [r0], #1024	; 0x400
     204:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
     208:	000000c6 	andeq	r0, r0, r6, asr #1
     20c:	0110040a 	tsteq	r0, sl, lsl #8
     210:	0c0b0000 	stceq	0, cr0, [fp], {-0}
     214:	0000036b 	andeq	r0, r0, fp, ror #6
     218:	36160501 	ldrcc	r0, [r6], -r1, lsl #10
     21c:	07000001 	streq	r0, [r0, -r1]
     220:	000000fe 	strdeq	r0, [r0], -lr
     224:	02aa0700 	adceq	r0, sl, #0, 14
     228:	07010000 	streq	r0, [r1, -r0]
     22c:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     230:	04230702 	strteq	r0, [r3], #-1794	; 0x702
     234:	00030000 	andeq	r0, r3, r0
     238:	00008c0d 	andeq	r8, r0, sp, lsl #24
     23c:	24040800 	strcs	r0, [r4], #-2048	; 0x800
     240:	0000015b 	andeq	r0, r0, fp, asr r1
     244:	00013d09 	andeq	r3, r1, r9, lsl #26
     248:	5b260400 	blpl	981250 <__Stack_Size+0x980e50>
     24c:	00000001 	andeq	r0, r0, r1
     250:	00059309 	andeq	r9, r5, r9, lsl #6
     254:	4c270400 	cfstrsmi	mvf0, [r7], #-0
     258:	04000000 	streq	r0, [r0], #-0
     25c:	5e040a00 	vmlapl.f32	s0, s8, s0
     260:	04000000 	streq	r0, [r0], #-0
     264:	000002d6 	ldrdeq	r0, [r0], -r6
     268:	01362904 	teqeq	r6, r4, lsl #18
     26c:	d5040000 	strle	r0, [r4, #-0]
     270:	04000002 	streq	r0, [r0], #-2
     274:	00017729 	andeq	r7, r1, r9, lsr #14
     278:	36040a00 	strcc	r0, [r4], -r0, lsl #20
     27c:	0c000001 	stceq	0, cr0, [r0], {1}
     280:	00000742 	andeq	r0, r0, r2, asr #14
     284:	a22d0401 	eorge	r0, sp, #16777216	; 0x1000000
     288:	07000001 	streq	r0, [r0, -r1]
     28c:	000008d3 	ldrdeq	r0, [r0], -r3
     290:	03ea0700 	mvneq	r0, #0, 14
     294:	07010000 	streq	r0, [r1, -r0]
     298:	00000781 	andeq	r0, r0, r1, lsl #15
     29c:	02220702 	eoreq	r0, r2, #524288	; 0x80000
     2a0:	00030000 	andeq	r0, r3, r0
     2a4:	00074304 	andeq	r4, r7, r4, lsl #6
     2a8:	7d340400 	cfldrsvc	mvf0, [r4, #-0]
     2ac:	0d000001 	stceq	0, cr0, [r0, #-4]
     2b0:	000008f8 	strdeq	r0, [r0], -r8
     2b4:	ea38040c 	b	e012ec <__Stack_Size+0xe00eec>
     2b8:	09000001 	stmdbeq	r0, {r0}
     2bc:	00000290 	muleq	r0, r0, r2
     2c0:	004c5004 	subeq	r5, ip, r4
     2c4:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     2c8:	00000319 	andeq	r0, r0, r9, lsl r3
     2cc:	004c5104 	subeq	r5, ip, r4, lsl #2
     2d0:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     2d4:	000014f9 	strdeq	r1, [r0], -r9
     2d8:	004c5204 	subeq	r5, ip, r4, lsl #4
     2dc:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     2e0:	000000e3 	andeq	r0, r0, r3, ror #1
     2e4:	01f95304 	mvnseq	r5, r4, lsl #6
     2e8:	00080000 	andeq	r0, r8, r0
     2ec:	00015b0e 	andeq	r5, r1, lr, lsl #22
     2f0:	0001f900 	andeq	pc, r1, r0, lsl #18
     2f4:	004c0f00 	subeq	r0, ip, r0, lsl #30
     2f8:	0a000000 	beq	300 <_Minimum_Stack_Size+0x200>
     2fc:	0001ea04 	andeq	lr, r1, r4, lsl #20
     300:	08f90400 	ldmeq	r9!, {sl}^
     304:	54040000 	strpl	r0, [r4], #-0
     308:	000001ad 	andeq	r0, r0, sp, lsr #3
     30c:	0007da0d 	andeq	sp, r7, sp, lsl #20
     310:	58040200 	stmdapl	r4, {r9}
     314:	0000022f 	andeq	r0, r0, pc, lsr #4
     318:	00091709 	andeq	r1, r9, r9, lsl #14
     31c:	5e5a0400 	cdppl	4, 5, cr0, cr10, cr0, {0}
     320:	00000000 	andeq	r0, r0, r0
     324:	0003b009 	andeq	fp, r3, r9
     328:	5e5b0400 	cdppl	4, 5, cr0, cr11, cr0, {0}
     32c:	01000000 	mrseq	r0, (UNDEF: 0)
     330:	07db0400 	ldrbeq	r0, [fp, r0, lsl #8]
     334:	5d040000 	stcpl	0, cr0, [r4, #-0]
     338:	0000020a 	andeq	r0, r0, sl, lsl #4
     33c:	00574210 	subseq	r4, r7, r0, lsl r2
     340:	5e620402 	cdppl	4, 6, cr0, cr2, cr2, {0}
     344:	11000002 	tstne	r0, r2
     348:	00306262 	eorseq	r6, r0, r2, ror #4
     34c:	005e6504 	subseq	r6, lr, r4, lsl #10
     350:	11000000 	mrsne	r0, (UNDEF: 0)
     354:	00316262 	eorseq	r6, r1, r2, ror #4
     358:	005e6604 	subseq	r6, lr, r4, lsl #12
     35c:	00010000 	andeq	r0, r1, r0
     360:	5f040212 	svcpl	0x00040212
     364:	0000027a 	andeq	r0, r0, sl, ror r2
     368:	04007713 	streq	r7, [r0], #-1811	; 0x713
     36c:	00004c61 	andeq	r4, r0, r1, ror #24
     370:	77621300 	strbvc	r1, [r2, -r0, lsl #6]!
     374:	3a680400 	bcc	1a0137c <__Stack_Size+0x1a00f7c>
     378:	00000002 	andeq	r0, r0, r2
     37c:	0003ff04 	andeq	pc, r3, r4, lsl #30
     380:	5e690400 	cdppl	4, 6, cr0, cr9, cr0, {0}
     384:	0d000002 	stceq	0, cr0, [r0, #-8]
     388:	0000003c 	andeq	r0, r0, ip, lsr r0
     38c:	166b041c 			; <UNDEFINED> instruction: 0x166b041c
     390:	09000003 	stmdbeq	r0, {r0, r1}
     394:	00000550 	andeq	r0, r0, r0, asr r5
     398:	005e6d04 	subseq	r6, lr, r4, lsl #26
     39c:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     3a0:	00000216 	andeq	r0, r0, r6, lsl r2
     3a4:	005e6e04 	subseq	r6, lr, r4, lsl #28
     3a8:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
     3ac:	00000418 	andeq	r0, r0, r8, lsl r4
     3b0:	027a6f04 	rsbseq	r6, sl, #4, 30
     3b4:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
     3b8:	00000148 	andeq	r0, r0, r8, asr #2
     3bc:	027a7004 	rsbseq	r7, sl, #4
     3c0:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     3c4:	0000081a 	andeq	r0, r0, sl, lsl r8
     3c8:	027a7104 	rsbseq	r7, sl, #4, 2
     3cc:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
     3d0:	000005cf 	andeq	r0, r0, pc, asr #11
     3d4:	005e7304 	subseq	r7, lr, r4, lsl #6
     3d8:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     3dc:	000003a0 	andeq	r0, r0, r0, lsr #7
     3e0:	005e7404 	subseq	r7, lr, r4, lsl #8
     3e4:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
     3e8:	000004a1 	andeq	r0, r0, r1, lsr #9
     3ec:	005e7504 	subseq	r7, lr, r4, lsl #10
     3f0:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
     3f4:	0000086f 	andeq	r0, r0, pc, ror #16
     3f8:	005e7604 	subseq	r7, lr, r4, lsl #12
     3fc:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
     400:	00000629 	andeq	r0, r0, r9, lsr #12
     404:	005e7704 	subseq	r7, lr, r4, lsl #14
     408:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     40c:	00000720 	andeq	r0, r0, r0, lsr #14
     410:	01ff7a04 	mvnseq	r7, r4, lsl #20
     414:	00100000 	andseq	r0, r0, r0
     418:	00003d04 	andeq	r3, r0, r4, lsl #26
     41c:	857b0400 	ldrbhi	r0, [fp, #-1024]!	; 0x400
     420:	0d000002 	stceq	0, cr0, [r0, #-8]
     424:	0000074f 	andeq	r0, r0, pc, asr #14
     428:	ca7d0434 	bgt	1f41500 <__Stack_Size+0x1f41100>
     42c:	09000003 	stmdbeq	r0, {r0, r1}
     430:	0000053d 	andeq	r0, r0, sp, lsr r5
     434:	010a7f04 	tsteq	sl, r4, lsl #30
     438:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     43c:	000003c7 	andeq	r0, r0, r7, asr #7
     440:	010a8004 	tsteq	sl, r4
     444:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
     448:	000007a7 	andeq	r0, r0, r7, lsr #15
     44c:	010a8304 	tsteq	sl, r4, lsl #6
     450:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
     454:	000007b9 			; <UNDEFINED> instruction: 0x000007b9
     458:	010a8404 	tsteq	sl, r4, lsl #8
     45c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
     460:	0000051e 	andeq	r0, r0, lr, lsl r5
     464:	03d99604 	bicseq	r9, r9, #4, 12	; 0x400000
     468:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
     46c:	00000704 	andeq	r0, r0, r4, lsl #14
     470:	03d9a104 	bicseq	sl, r9, #4, 2
     474:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
     478:	000004e8 	andeq	r0, r0, r8, ror #9
     47c:	03f3ab04 	mvnseq	sl, #4, 22	; 0x1000
     480:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
     484:	00000134 	andeq	r0, r0, r4, lsr r1
     488:	01f9ad04 	mvnseq	sl, r4, lsl #26
     48c:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
     490:	00000202 	andeq	r0, r0, r2, lsl #4
     494:	01f9ae04 	mvnseq	sl, r4, lsl #28
     498:	09200000 	stmdbeq	r0!, {}	; <UNPREDICTABLE>
     49c:	00000829 	andeq	r0, r0, r9, lsr #16
     4a0:	01f9af04 	mvnseq	sl, r4, lsl #30
     4a4:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
     4a8:	00000611 	andeq	r0, r0, r1, lsl r6
     4ac:	01f9b004 	mvnseq	fp, r4
     4b0:	09280000 	stmdbeq	r8!, {}	; <UNPREDICTABLE>
     4b4:	0000057b 	andeq	r0, r0, fp, ror r5
     4b8:	015bb204 	cmpeq	fp, r4, lsl #4
     4bc:	092c0000 	stmdbeq	ip!, {}	; <UNPREDICTABLE>
     4c0:	000014f6 	strdeq	r1, [r0], -r6
     4c4:	005eb304 	subseq	fp, lr, r4, lsl #6
     4c8:	00300000 	eorseq	r0, r0, r0
     4cc:	0001a20e 	andeq	sl, r1, lr, lsl #4
     4d0:	0003d900 	andeq	sp, r3, r0, lsl #18
     4d4:	005e0f00 	subseq	r0, lr, r0, lsl #30
     4d8:	0a000000 	beq	4e0 <__Stack_Size+0xe0>
     4dc:	0003ca04 	andeq	ip, r3, r4, lsl #20
     4e0:	01a20e00 			; <UNDEFINED> instruction: 0x01a20e00
     4e4:	03f30000 	mvnseq	r0, #0
     4e8:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     4ec:	0f000000 	svceq	0x00000000
     4f0:	0000005e 	andeq	r0, r0, lr, asr r0
     4f4:	df040a00 	svcle	0x00040a00
     4f8:	04000003 	streq	r0, [r0], #-3
     4fc:	00000750 	andeq	r0, r0, r0, asr r7
     500:	0321b504 	teqeq	r1, #4, 10	; 0x1000000
     504:	5d0d0000 	stcpl	0, cr0, [sp, #-0]
     508:	24000006 	strcs	r0, [r0], #-6
     50c:	047db704 	ldrbteq	fp, [sp], #-1796	; 0x704
     510:	ca090000 	bgt	240518 <__Stack_Size+0x240118>
     514:	04000006 	streq	r0, [r0], #-6
     518:	00010ab9 			; <UNDEFINED> instruction: 0x00010ab9
     51c:	b9090000 	stmdblt	r9, {}	; <UNPREDICTABLE>
     520:	04000005 	streq	r0, [r0], #-5
     524:	00010aba 			; <UNDEFINED> instruction: 0x00010aba
     528:	e2090400 	and	r0, r9, #0, 8
     52c:	04000005 	streq	r0, [r0], #-5
     530:	00010abb 			; <UNDEFINED> instruction: 0x00010abb
     534:	ec090800 	stc	8, cr0, [r9], {-0}
     538:	04000000 	streq	r0, [r0], #-0
     53c:	00010abc 			; <UNDEFINED> instruction: 0x00010abc
     540:	96090c00 	strls	r0, [r9], -r0, lsl #24
     544:	04000006 	streq	r0, [r0], #-6
     548:	00010abd 			; <UNDEFINED> instruction: 0x00010abd
     54c:	06091000 	streq	r1, [r9], -r0
     550:	04000004 	streq	r0, [r0], #-4
     554:	00010abe 			; <UNDEFINED> instruction: 0x00010abe
     558:	6c091400 	cfstrsvs	mvf1, [r9], {-0}
     55c:	04000000 	streq	r0, [r0], #-0
     560:	00010abf 			; <UNDEFINED> instruction: 0x00010abf
     564:	a3091800 	movwge	r1, #38912	; 0x9800
     568:	04000005 	streq	r0, [r0], #-5
     56c:	00010ac0 	andeq	r0, r1, r0, asr #21
     570:	1c091c00 	stcne	12, cr1, [r9], {-0}
     574:	04000000 	streq	r0, [r0], #-0
     578:	00010ac1 	andeq	r0, r1, r1, asr #21
     57c:	04002000 	streq	r2, [r0], #-0
     580:	0000065e 	andeq	r0, r0, lr, asr r6
     584:	0404c304 	streq	ip, [r4], #-772	; 0x304
     588:	c50c0000 	strgt	r0, [ip, #-0]
     58c:	01000008 	tsteq	r0, r8
     590:	04c53d06 	strbeq	r3, [r5], #3334	; 0xd06
     594:	36070000 	strcc	r0, [r7], -r0
     598:	00000002 	andeq	r0, r0, r2
     59c:	0008b507 	andeq	fp, r8, r7, lsl #10
     5a0:	e0070100 	and	r0, r7, r0, lsl #2
     5a4:	02000006 	andeq	r0, r0, #6
     5a8:	00006007 	andeq	r6, r0, r7
     5ac:	c2070300 	andgt	r0, r7, #0, 6
     5b0:	04000000 	streq	r0, [r0], #-0
     5b4:	00060407 	andeq	r0, r6, r7, lsl #8
     5b8:	f4070500 	vst3.8	{d0,d2,d4}, [r7], r0
     5bc:	06000003 	streq	r0, [r0], -r3
     5c0:	00058707 	andeq	r8, r5, r7, lsl #14
     5c4:	04000700 	streq	r0, [r0], #-1792	; 0x700
     5c8:	000008c6 	andeq	r0, r0, r6, asr #17
     5cc:	04884606 	streq	r4, [r8], #1542	; 0x606
     5d0:	420c0000 	andmi	r0, ip, #0
     5d4:	01000005 	tsteq	r0, r5
     5d8:	05014806 	streq	r4, [r1, #-2054]	; 0x806
     5dc:	df070000 	svcle	0x00070000
     5e0:	00000008 	andeq	r0, r0, r8
     5e4:	00033807 	andeq	r3, r3, r7, lsl #16
     5e8:	0f070100 	svceq	0x00070100
     5ec:	02000001 	andeq	r0, r0, #1
     5f0:	0000b807 	andeq	fp, r0, r7, lsl #16
     5f4:	ab070300 	blge	1c11fc <__Stack_Size+0x1c0dfc>
     5f8:	04000008 	streq	r0, [r0], #-8
     5fc:	00085807 	andeq	r5, r8, r7, lsl #16
     600:	08000500 	stmdaeq	r0, {r8, sl}
     604:	229d0102 	addscs	r0, sp, #-2147483648	; 0x80000000
     608:	09000005 	stmdbeq	r0, {r0, r2}
     60c:	0000004f 	andeq	r0, r0, pc, asr #32
     610:	05229e01 	streq	r9, [r2, #-3585]!	; 0xe01
     614:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
     618:	000000a5 	andeq	r0, r0, r5, lsr #1
     61c:	05279f01 	streq	r9, [r7, #-3841]!	; 0xf01
     620:	00010000 	andeq	r0, r1, r0
     624:	0004c505 	andeq	ip, r4, r5, lsl #10
     628:	005e0500 	subseq	r0, lr, r0, lsl #10
     62c:	41140000 	tstmi	r4, r0
     630:	01000003 	tsteq	r0, r3
     634:	01a20165 			; <UNDEFINED> instruction: 0x01a20165
     638:	4a010000 	bmi	40640 <__Stack_Size+0x40240>
     63c:	15000005 	strne	r0, [r0, #-5]
     640:	000007f7 	strdeq	r0, [r0], -r7
     644:	5e016501 	cfsh32pl	mvfx6, mvfx1, #1
     648:	00000000 	andeq	r0, r0, r0
     64c:	0004b716 	andeq	fp, r4, r6, lsl r7
     650:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
     654:	00097e17 	andeq	r7, r9, r7, lsl lr
     658:	b8a30100 	stmialt	r3!, {r8}
     65c:	02080001 	andeq	r0, r8, #1
     660:	01000000 	mrseq	r0, (UNDEF: 0)
     664:	0394189c 	orrseq	r1, r4, #156, 16	; 0x9c0000
     668:	38010000 	stmdacc	r1, {}	; <UNPREDICTABLE>
     66c:	0001ba01 	andeq	fp, r1, r1, lsl #20
     670:	00000208 	andeq	r0, r0, r8, lsl #4
     674:	189c0100 	ldmne	ip, {r8}
     678:	0000030c 	andeq	r0, r0, ip, lsl #6
     67c:	bc013b01 	stclt	11, cr3, [r1], {1}
     680:	02080001 	andeq	r0, r8, #1
     684:	01000000 	mrseq	r0, (UNDEF: 0)
     688:	06ed199c 	usateq	r1, #13, ip, lsl #19
     68c:	6f010000 	svcvs	0x00010000
     690:	0001a201 	andeq	sl, r1, r1, lsl #4
     694:	0001be00 	andeq	fp, r1, r0, lsl #28
     698:	00000a08 	andeq	r0, r0, r8, lsl #20
     69c:	c09c0100 	addsgt	r0, ip, r0, lsl #2
     6a0:	1a000005 	bne	6bc <__Stack_Size+0x2bc>
     6a4:	00000464 	andeq	r0, r0, r4, ror #8
     6a8:	5e016f01 	cdppl	15, 0, cr6, cr1, cr1, {0}
     6ac:	00000000 	andeq	r0, r0, r0
     6b0:	1b000000 	blne	6b8 <__Stack_Size+0x2b8>
     6b4:	0000078f 	andeq	r0, r0, pc, lsl #15
     6b8:	5e016f01 	cdppl	15, 0, cr6, cr1, cr1, {0}
     6bc:	01000000 	mrseq	r0, (UNDEF: 0)
     6c0:	5c180051 	ldcpl	0, cr0, [r8], {81}	; 0x51
     6c4:	01000002 	tsteq	r0, r2
     6c8:	01c80196 			; <UNDEFINED> instruction: 0x01c80196
     6cc:	00020800 	andeq	r0, r2, r0, lsl #16
     6d0:	9c010000 	stcls	0, cr0, [r1], {-0}
     6d4:	00075c18 	andeq	r5, r7, r8, lsl ip
     6d8:	019a0100 	orrseq	r0, sl, r0, lsl #2
     6dc:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
     6e0:	00000018 	andeq	r0, r0, r8, lsl r0
     6e4:	81189c01 	tsthi	r8, r1, lsl #24
     6e8:	01000008 	tsteq	r0, r8
     6ec:	01e401a0 	mvneq	r0, r0, lsr #3
     6f0:	00020800 	andeq	r0, r2, r0, lsl #16
     6f4:	9c010000 	stcls	0, cr0, [r1], {-0}
     6f8:	00073218 	andeq	r3, r7, r8, lsl r2
     6fc:	01a40100 			; <UNDEFINED> instruction: 0x01a40100
     700:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
     704:	00000002 	andeq	r0, r0, r2
     708:	eb189c01 	bl	627714 <__Stack_Size+0x627314>
     70c:	01000008 	tsteq	r0, r8
     710:	01e801a8 	mvneq	r0, r8, lsr #3
     714:	00020800 	andeq	r0, r2, r0, lsl #16
     718:	9c010000 	stcls	0, cr0, [r1], {-0}
     71c:	00090718 	andeq	r0, r9, r8, lsl r7
     720:	01ac0100 			; <UNDEFINED> instruction: 0x01ac0100
     724:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
     728:	00000002 	andeq	r0, r0, r2
     72c:	d2189c01 	andsle	r9, r8, #256	; 0x100
     730:	01000004 	tsteq	r0, r4
     734:	01ec01b0 	strheq	r0, [ip, #16]!
     738:	00020800 	andeq	r0, r2, r0, lsl #16
     73c:	9c010000 	stcls	0, cr0, [r1], {-0}
     740:	0000cf18 	andeq	ip, r0, r8, lsl pc
     744:	01b40100 			; <UNDEFINED> instruction: 0x01b40100
     748:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
     74c:	00000002 	andeq	r0, r0, r2
     750:	e5189c01 	ldr	r9, [r8, #-3073]	; 0xc01
     754:	01000002 	tsteq	r0, r2
     758:	01f001b8 	ldrheq	r0, [r0, #24]!
     75c:	000c0800 	andeq	r0, ip, r0, lsl #16
     760:	9c010000 	stcls	0, cr0, [r1], {-0}
     764:	0003c41c 	andeq	ip, r3, ip, lsl r4
     768:	011f0100 	tsteq	pc, r0, lsl #2
     76c:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
     770:	000000a8 	andeq	r0, r0, r8, lsr #1
     774:	06eb9c01 	strbteq	r9, [fp], r1, lsl #24
     778:	2c1d0000 	ldccs	0, cr0, [sp], {-0}
     77c:	12080002 	andne	r0, r8, #2
     780:	96000000 	strls	r0, [r0], -r0
     784:	1e000006 	cdpne	0, 0, cr0, cr0, cr6, {0}
     788:	0000045b 	andeq	r0, r0, fp, asr r4
     78c:	4c012901 	stcmi	9, cr2, [r1], {1}
     790:	21000000 	mrscs	r0, (UNDEF: 0)
     794:	00000000 	andeq	r0, r0, r0
     798:	0002021f 	andeq	r0, r2, pc, lsl r2
     79c:	000c3008 	andeq	r3, ip, r8
     7a0:	02622000 	rsbeq	r2, r2, #0
     7a4:	0c370800 	ldceq	8, cr0, [r7], #-0
     7a8:	06b30000 	ldrteq	r0, [r3], r0
     7ac:	01210000 	teqeq	r1, r0
     7b0:	00740250 	rsbseq	r0, r4, r0, asr r2
     7b4:	02702000 	rsbseq	r2, r0, #0
     7b8:	0c490800 	mcrreq	8, 0, r0, r9, cr0
     7bc:	06c70000 	strbeq	r0, [r7], r0
     7c0:	01210000 	teqeq	r1, r0
     7c4:	00740250 	rsbseq	r0, r4, r0, asr r2
     7c8:	02762000 	rsbseq	r2, r6, #0
     7cc:	0c600800 	stcleq	8, cr0, [r0], #-0
     7d0:	06db0000 	ldrbeq	r0, [fp], r0
     7d4:	01210000 	teqeq	r1, r0
     7d8:	00740250 	rsbseq	r0, r4, r0, asr r2
     7dc:	02862200 	addeq	r2, r6, #0, 4
     7e0:	0c720800 	ldcleq	8, cr0, [r2], #-0
     7e4:	01210000 	teqeq	r1, r0
     7e8:	00300150 	eorseq	r0, r0, r0, asr r1
     7ec:	06421900 	strbeq	r1, [r2], -r0, lsl #18
     7f0:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
     7f4:	0001a201 	andeq	sl, r1, r1, lsl #4
     7f8:	0002a400 	andeq	sl, r2, r0, lsl #8
     7fc:	00006008 	andeq	r6, r0, r8
     800:	3b9c0100 	blcc	fe700c08 <BootRAM+0xd6713a9>
     804:	1a000007 	bne	828 <__Stack_Size+0x428>
     808:	000007f7 	strdeq	r0, [r0], -r7
     80c:	5e013e01 	cdppl	14, 0, cr3, cr1, cr1, {0}
     810:	70000000 	andvc	r0, r0, r0
     814:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
     818:	00000965 	andeq	r0, r0, r5, ror #18
     81c:	f9013f01 			; <UNDEFINED> instruction: 0xf9013f01
     820:	91000001 	tstls	r0, r1
     824:	1f000000 	svcne	0x00000000
     828:	080002bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9}
     82c:	00000c83 	andeq	r0, r0, r3, lsl #25
     830:	0002e823 	andeq	lr, r2, r3, lsr #16
     834:	50012108 	andpl	r2, r1, r8, lsl #2
     838:	00007402 	andeq	r7, r0, r2, lsl #8
     83c:	01311900 	teqeq	r1, r0, lsl #18
     840:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
     844:	00015b01 	andeq	r5, r1, r1, lsl #22
     848:	00030400 	andeq	r0, r3, r0, lsl #8
     84c:	00000c08 	andeq	r0, r0, r8, lsl #24
     850:	6f9c0100 	svcvs	0x009c0100
     854:	24000007 	strcs	r0, [r0], #-7
     858:	006e656c 	rsbeq	r6, lr, ip, ror #10
     85c:	4c017801 	stcmi	8, cr7, [r1], {1}
     860:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     864:	25000000 	strcs	r0, [r0, #-0]
     868:	0800030a 	stmdaeq	r0, {r1, r3, r8, r9}
     86c:	00000c8e 	andeq	r0, r0, lr, lsl #25
     870:	01ff1900 	mvnseq	r1, r0, lsl #18
     874:	7c010000 	stcvc	0, cr0, [r1], {-0}
     878:	00015b01 	andeq	r5, r1, r1, lsl #22
     87c:	00031000 	andeq	r1, r3, r0
     880:	00000c08 	andeq	r0, r0, r8, lsl #24
     884:	a39c0100 	orrsge	r0, ip, #0, 2
     888:	24000007 	strcs	r0, [r0], #-7
     88c:	006e656c 	rsbeq	r6, lr, ip, ror #10
     890:	4c017c01 	stcmi	12, cr7, [r1], {1}
     894:	e9000000 	stmdb	r0, {}	; <UNPREDICTABLE>
     898:	25000000 	strcs	r0, [r0, #-0]
     89c:	08000316 	stmdaeq	r0, {r1, r2, r4, r8, r9}
     8a0:	00000c8e 	andeq	r0, r0, lr, lsl #25
     8a4:	08261900 	stmdaeq	r6!, {r8, fp, ip}
     8a8:	80010000 	andhi	r0, r1, r0
     8ac:	00015b01 	andeq	r5, r1, r1, lsl #22
     8b0:	00031c00 	andeq	r1, r3, r0, lsl #24
     8b4:	00002008 	andeq	r2, r0, r8
     8b8:	e39c0100 	orrs	r0, ip, #0, 2
     8bc:	24000007 	strcs	r0, [r0], #-7
     8c0:	006e656c 	rsbeq	r6, lr, ip, ror #10
     8c4:	4c018001 	stcmi	0, cr8, [r1], {1}
     8c8:	0a000000 	beq	8d0 <__Stack_Size+0x4d0>
     8cc:	26000001 	strcs	r0, [r0], -r1
     8d0:	00000013 	andeq	r0, r0, r3, lsl r0
     8d4:	5e018101 	mvfpls	f0, f1
     8d8:	25000000 	strcs	r0, [r0, #-0]
     8dc:	08000330 	stmdaeq	r0, {r4, r5, r8, r9}
     8e0:	00000c8e 	andeq	r0, r0, lr, lsl #25
     8e4:	060e1900 	streq	r1, [lr], -r0, lsl #18
     8e8:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
     8ec:	00015b01 	andeq	r5, r1, r1, lsl #22
     8f0:	00033c00 	andeq	r3, r3, r0, lsl #24
     8f4:	00000c08 	andeq	r0, r0, r8, lsl #24
     8f8:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
     8fc:	24000008 	strcs	r0, [r0], #-8
     900:	006e656c 	rsbeq	r6, lr, ip, ror #10
     904:	4c018901 	stcmi	9, cr8, [r1], {1}
     908:	44000000 	strmi	r0, [r0], #-0
     90c:	25000001 	strcs	r0, [r0, #-1]
     910:	08000342 	stmdaeq	r0, {r1, r6, r8, r9}
     914:	00000c8e 	andeq	r0, r0, lr, lsl #25
     918:	052c2700 	streq	r2, [ip, #-1792]!	; 0x700
     91c:	03480000 	movteq	r0, #32768	; 0x8000
     920:	00280800 	eoreq	r0, r8, r0, lsl #16
     924:	9c010000 	stcls	0, cr0, [r1], {-0}
     928:	00000850 	andeq	r0, r0, r0, asr r8
     92c:	00053d28 	andeq	r3, r5, r8, lsr #26
     930:	00016500 	andeq	r6, r1, r0, lsl #10
     934:	03582900 	cmpeq	r8, #0, 18
     938:	000e0800 	andeq	r0, lr, r0, lsl #16
     93c:	3d280000 	stccc	0, cr0, [r8, #-0]
     940:	9f000005 	svcls	0x00000005
     944:	1f000001 	svcne	0x00000001
     948:	0800035c 	stmdaeq	r0, {r2, r3, r4, r6, r8, r9}
     94c:	00000c83 	andeq	r0, r0, r3, lsl #25
     950:	532a0000 	teqpl	sl, #0
     954:	01000002 	tsteq	r0, r2
     958:	00037028 	andeq	r7, r3, r8, lsr #32
     95c:	00007808 	andeq	r7, r0, r8, lsl #16
     960:	e19c0100 	orrs	r0, ip, r0, lsl #2
     964:	2b000008 	blcs	98c <__Stack_Size+0x58c>
     968:	00000690 	muleq	r0, r0, r6
     96c:	08e13e01 	stmiaeq	r1!, {r0, r9, sl, fp, ip, sp}^
     970:	91020000 	mrsls	r0, (UNDEF: 2)
     974:	054a2c6c 	strbeq	r2, [sl, #-3180]	; 0xc6c
     978:	03cc0000 	biceq	r0, ip, #0
     97c:	00040800 	andeq	r0, r4, r0, lsl #16
     980:	50010000 	andpl	r0, r1, r0
     984:	00000890 	muleq	r0, r0, r8
     988:	0003d01f 	andeq	sp, r3, pc, lsl r0
     98c:	000ca808 	andeq	sl, ip, r8, lsl #16
     990:	7c200000 	stcvc	0, cr0, [r0], #-0
     994:	af080003 	svcge	0x00080003
     998:	a300000c 	movwge	r0, #12
     99c:	21000008 	tstcs	r0, r8
     9a0:	3c015001 	stccc	0, cr5, [r1], {1}
     9a4:	038e2000 	orreq	r2, lr, #0
     9a8:	0cc40800 	stcleq	8, cr0, [r4], {0}
     9ac:	08c40000 	stmiaeq	r4, {}^	; <UNPREDICTABLE>
     9b0:	01210000 	teqeq	r1, r0
     9b4:	21300152 	teqcs	r0, r2, asr r1
     9b8:	3c015101 	stfccs	f5, [r1], {1}
     9bc:	05500121 	ldrbeq	r0, [r0, #-289]	; 0x121
     9c0:	0108000c 	tsteq	r8, ip
     9c4:	a6200040 	strtge	r0, [r0], -r0, asr #32
     9c8:	af080003 	svcge	0x00080003
     9cc:	d700000c 	strle	r0, [r0, -ip]
     9d0:	21000008 	tstcs	r0, r8
     9d4:	3c015001 	stccc	0, cr5, [r1], {1}
     9d8:	03b21f00 			; <UNDEFINED> instruction: 0x03b21f00
     9dc:	0cdf0800 	ldcleq	8, cr0, [pc], {0}
     9e0:	05000000 	streq	r0, [r0, #-0]
     9e4:	000008e6 	andeq	r0, r0, r6, ror #17
     9e8:	80070402 	andhi	r0, r7, r2, lsl #8
     9ec:	27000003 	strcs	r0, [r0, -r3]
     9f0:	0000054a 	andeq	r0, r0, sl, asr #10
     9f4:	00000000 	andeq	r0, r0, r0
     9f8:	00000004 	andeq	r0, r0, r4
     9fc:	090a9c01 	stmdbeq	sl, {r0, sl, fp, ip, pc}
     a00:	00250000 	eoreq	r0, r5, r0
     a04:	a8000000 	stmdage	r0, {}	; <UNPREDICTABLE>
     a08:	0000000c 	andeq	r0, r0, ip
     a0c:	00009a2a 	andeq	r9, r0, sl, lsr #20
     a10:	e8ad0100 	stmia	sp!, {r8}
     a14:	1c080003 	stcne	0, cr0, [r8], {3}
     a18:	01000000 	mrseq	r0, (UNDEF: 0)
     a1c:	00092f9c 	muleq	r9, ip, pc	; <UNPREDICTABLE>
     a20:	02be2d00 	adcseq	r2, lr, #0, 26
     a24:	ae010000 	cdpge	0, 0, cr0, cr1, cr0, {0}
     a28:	0000004c 	andeq	r0, r0, ip, asr #32
     a2c:	000001b5 			; <UNDEFINED> instruction: 0x000001b5
     a30:	07cc2a00 	strbeq	r2, [ip, r0, lsl #20]
     a34:	b7010000 	strlt	r0, [r1, -r0]
     a38:	08000404 	stmdaeq	r0, {r2, sl}
     a3c:	00000018 	andeq	r0, r0, r8, lsl r0
     a40:	09579c01 	ldmdbeq	r7, {r0, sl, fp, ip, pc}^
     a44:	be2b0000 	cdplt	0, 2, cr0, cr11, cr0, {0}
     a48:	01000002 	tsteq	r0, r2
     a4c:	00004cb8 			; <UNDEFINED> instruction: 0x00004cb8
     a50:	00710600 	rsbseq	r0, r1, r0, lsl #12
     a54:	9f1afb09 	svcls	0x001afb09
     a58:	00ae2a00 	adceq	r2, lr, r0, lsl #20
     a5c:	c5010000 	strgt	r0, [r1, #-0]
     a60:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
     a64:	00000084 	andeq	r0, r0, r4, lsl #1
     a68:	099d9c01 	ldmibeq	sp, {r0, sl, fp, ip, pc}
     a6c:	9c2e0000 	stcls	0, cr0, [lr], #-0
     a70:	01000002 	tsteq	r0, r2
     a74:	0004c5c5 	andeq	ip, r4, r5, asr #11
     a78:	0001cc00 	andeq	ip, r1, r0, lsl #24
     a7c:	02be2d00 	adcseq	r2, lr, #0, 26
     a80:	c6010000 	strgt	r0, [r1], -r0
     a84:	0000004c 	andeq	r0, r0, ip, asr #32
     a88:	0000021f 	andeq	r0, r0, pc, lsl r2
     a8c:	00043a1f 	andeq	r3, r4, pc, lsl sl
     a90:	00092f08 	andeq	r2, r9, r8, lsl #30
     a94:	04401f00 	strbeq	r1, [r0], #-3840	; 0xf00
     a98:	092f0800 	stmdbeq	pc!, {fp}	; <UNPREDICTABLE>
     a9c:	2f000000 	svccs	0x00000000
     aa0:	00000561 	andeq	r0, r0, r1, ror #10
     aa4:	01a2f501 			; <UNDEFINED> instruction: 0x01a2f501
     aa8:	04a00000 	strteq	r0, [r0], #0
     aac:	00280800 	eoreq	r0, r8, r0, lsl #16
     ab0:	9c010000 	stcls	0, cr0, [r1], {-0}
     ab4:	000009c3 	andeq	r0, r0, r3, asr #19
     ab8:	00045c30 	andeq	r5, r4, r0, lsr ip
     abc:	4cf60100 	ldfmie	f0, [r6]
     ac0:	01000000 	mrseq	r0, (UNDEF: 0)
     ac4:	08633100 	stmdaeq	r3!, {r8, ip, sp}^
     ac8:	04010000 	streq	r0, [r1], #-0
     acc:	0001a201 	andeq	sl, r1, r1, lsl #4
     ad0:	0004c800 	andeq	ip, r4, r0, lsl #16
     ad4:	00001c08 	andeq	r1, r0, r8, lsl #24
     ad8:	2a9c0100 	bcs	fe700ee0 <BootRAM+0xd671681>
     adc:	000007e2 	andeq	r0, r0, r2, ror #15
     ae0:	04e45701 	strbteq	r5, [r4], #1793	; 0x701
     ae4:	00040800 	andeq	r0, r4, r0, lsl #16
     ae8:	9c010000 	stcls	0, cr0, [r1], {-0}
     aec:	000009f8 	strdeq	r0, [r0], -r8
     af0:	0004e825 	andeq	lr, r4, r5, lsr #16
     af4:	0009c308 	andeq	ip, r9, r8, lsl #6
     af8:	561c0000 	ldrpl	r0, [ip], -r0
     afc:	01000000 	mrseq	r0, (UNDEF: 0)
     b00:	04e801be 	strbteq	r0, [r8], #446	; 0x1be
     b04:	00240800 	eoreq	r0, r4, r0, lsl #16
     b08:	9c010000 	stcls	0, cr0, [r1], {-0}
     b0c:	00000a2e 	andeq	r0, r0, lr, lsr #20
     b10:	0002f932 	andeq	pc, r2, r2, lsr r9	; <UNPREDICTABLE>
     b14:	01bf0100 			; <UNDEFINED> instruction: 0x01bf0100
     b18:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b1c:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
     b20:	08000506 	stmdaeq	r0, {r1, r2, r8, sl}
     b24:	00000cea 	andeq	r0, r0, sl, ror #25
     b28:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     b2c:	0000047d 	andeq	r0, r0, sp, ror r4
     b30:	0008121c 	andeq	r1, r8, ip, lsl r2
     b34:	01110100 	tsteq	r1, r0, lsl #2
     b38:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
     b3c:	00000040 	andeq	r0, r0, r0, asr #32
     b40:	0a609c01 	beq	1827b4c <__Stack_Size+0x182774c>
     b44:	121f0000 	andsne	r0, pc, #0
     b48:	01080005 	tsteq	r8, r5
     b4c:	1f00000d 	svcne	0x0000000d
     b50:	0800051e 	stmdaeq	r0, {r1, r2, r3, r4, r8, sl}
     b54:	0000099d 	muleq	r0, sp, r9
     b58:	0005321f 	andeq	r3, r5, pc, lsl r2
     b5c:	0009f808 	andeq	pc, r9, r8, lsl #16
     b60:	cd1c0000 	ldcgt	0, cr0, [ip, #-0]
     b64:	01000003 	tsteq	r0, r3
     b68:	054c01c9 	strbeq	r0, [ip, #-457]	; 0x1c9
     b6c:	00220800 	eoreq	r0, r2, r0, lsl #16
     b70:	9c010000 	stcls	0, cr0, [r1], {-0}
     b74:	00000a96 	muleq	r0, r6, sl
     b78:	0002f932 	andeq	pc, r2, r2, lsr r9	; <UNPREDICTABLE>
     b7c:	01ca0100 	biceq	r0, sl, r0, lsl #2
     b80:	000000ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
     b84:	33749102 	cmncc	r4, #-2147483648	; 0x80000000
     b88:	08000568 	stmdaeq	r0, {r3, r5, r6, r8, sl}
     b8c:	00000cea 	andeq	r0, r0, sl, ror #25
     b90:	02500121 	subseq	r0, r0, #1073741832	; 0x40000008
     b94:	0000047d 	andeq	r0, r0, sp, ror r4
     b98:	00067534 	andeq	r7, r6, r4, lsr r5
     b9c:	01d20100 	bicseq	r0, r2, r0, lsl #2
     ba0:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
     ba4:	000000b4 	strheq	r0, [r0], -r4
     ba8:	0ae59c01 	beq	ff967bb4 <BootRAM+0xe8d8355>
     bac:	b8200000 	stmdalt	r0!, {}	; <UNPREDICTABLE>
     bb0:	57080005 	strpl	r0, [r8, -r5]
     bb4:	bf000009 	svclt	0x00000009
     bb8:	2100000a 	tstcs	r0, sl
     bbc:	30015001 	andcc	r5, r1, r1
     bc0:	05c61f00 	strbeq	r1, [r6, #3840]	; 0xf00
     bc4:	090a0800 	stmdbeq	sl, {fp}
     bc8:	fa200000 	blx	800bd0 <__Stack_Size+0x8007d0>
     bcc:	57080005 	strpl	r0, [r8, -r5]
     bd0:	db000009 	blle	bfc <__Stack_Size+0x7fc>
     bd4:	2100000a 	tstcs	r0, sl
     bd8:	37015001 	strcc	r5, [r1, -r1]
     bdc:	060c2500 	streq	r2, [ip], -r0, lsl #10
     be0:	0d080800 	stceq	8, cr0, [r8, #-0]
     be4:	35000000 	strcc	r0, [r0, #-0]
     be8:	00000230 	andeq	r0, r0, r0, lsr r2
     bec:	007f6501 	rsbseq	r6, pc, r1, lsl #10
     bf0:	03050000 	movweq	r0, #20480	; 0x5000
     bf4:	200002cc 	andcs	r0, r0, ip, asr #5
     bf8:	0005f435 	andeq	pc, r5, r5, lsr r4	; <UNPREDICTABLE>
     bfc:	f96d0100 			; <UNDEFINED> instruction: 0xf96d0100
     c00:	05000003 	streq	r0, [r0, #-3]
     c04:	00000003 	andeq	r0, r0, r3
     c08:	13413520 	movtne	r3, #5408	; 0x1520
     c0c:	7d010000 	stcvc	0, cr0, [r1, #-0]
     c10:	0000047d 	andeq	r0, r0, sp, ror r4
     c14:	006c0305 	rsbeq	r0, ip, r5, lsl #6
     c18:	46352000 	ldrtmi	r2, [r5], -r0
     c1c:	01000002 	tsteq	r0, r2
     c20:	00022f68 	andeq	r2, r2, r8, ror #30
     c24:	90030500 	andls	r0, r3, r0, lsl #10
     c28:	36200000 	strtcc	r0, [r0], -r0
     c2c:	0000027c 	andeq	r0, r0, ip, ror r2
     c30:	0b342207 	bleq	d09454 <__Stack_Size+0xd09054>
     c34:	040a0000 	streq	r0, [sl], #-0
     c38:	00000316 	andeq	r0, r0, r6, lsl r3
     c3c:	00052f36 	andeq	r2, r5, r6, lsr pc
     c40:	45250700 	strmi	r0, [r5, #-1792]!	; 0x700
     c44:	0a00000b 	beq	c78 <__Stack_Size+0x878>
     c48:	0003f904 	andeq	pc, r3, r4, lsl #18
     c4c:	04c23600 	strbeq	r3, [r2], #1536	; 0x600
     c50:	2d070000 	stccs	0, cr0, [r7, #-0]
     c54:	0000004c 	andeq	r0, r0, ip, asr #32
     c58:	0009b636 	andeq	fp, r9, r6, lsr r6
     c5c:	61230800 	teqvs	r3, r0, lsl #16
     c60:	36000001 	strcc	r0, [r0], -r1
     c64:	00000894 	muleq	r0, r4, r8
     c68:	01612408 	cmneq	r1, r8, lsl #8
     c6c:	61370000 	teqvs	r7, r0
     c70:	7c000001 	stcvc	0, cr0, [r0], {1}
     c74:	3800000b 	stmdacc	r0, {r0, r1, r3}
     c78:	000000bf 	strheq	r0, [r0], -pc	; <UNPREDICTABLE>
     c7c:	1d360006 	ldcne	0, cr0, [r6, #-24]!	; 0xffffffe8
     c80:	08000001 	stmdaeq	r0, {r0}
     c84:	000b6c25 	andeq	r6, fp, r5, lsr #24
     c88:	06b23600 	ldrteq	r3, [r2], r0, lsl #12
     c8c:	26080000 	strcs	r0, [r8], -r0
     c90:	00000161 	andeq	r0, r0, r1, ror #2
     c94:	00043835 	andeq	r3, r4, r5, lsr r8
     c98:	a32c0600 	teqge	ip, #0, 12
     c9c:	0500000b 	streq	r0, [r0, #-11]
     ca0:	0002c803 	andeq	ip, r2, r3, lsl #16
     ca4:	05043920 	streq	r3, [r4, #-2336]	; 0x920
     ca8:	00746e69 	rsbseq	r6, r4, r9, ror #28
     cac:	00005e37 	andeq	r5, r0, r7, lsr lr
     cb0:	000bb500 	andeq	fp, fp, r0, lsl #10
     cb4:	36003a00 	strcc	r3, [r0], -r0, lsl #20
     cb8:	00000891 	muleq	r0, r1, r8
     cbc:	0baa2501 	bleq	fea8a0c8 <BootRAM+0xd9fa869>
     cc0:	af360000 	svcge	0x00360000
     cc4:	01000006 	tsteq	r0, r6
     cc8:	000baa26 	andeq	sl, fp, r6, lsr #20
     ccc:	00493500 	subeq	r3, r9, r0, lsl #10
     cd0:	62010000 	andvs	r0, r1, #0
     cd4:	0000006f 	andeq	r0, r0, pc, rrx
     cd8:	03100305 	tsteq	r0, #335544320	; 0x14000000
     cdc:	70352000 	eorsvc	r2, r5, r0
     ce0:	01000002 	tsteq	r0, r2
     ce4:	00008f66 	andeq	r8, r0, r6, ror #30
     ce8:	0c030500 	cfstr32eq	mvfx0, [r3], {-0}
     cec:	37200003 	strcc	r0, [r0, -r3]!
     cf0:	0000010a 	andeq	r0, r0, sl, lsl #2
     cf4:	00000bfd 	strdeq	r0, [r0], -sp
     cf8:	0000bf38 	andeq	fp, r0, r8, lsr pc
     cfc:	35000600 	strcc	r0, [r0, #-1536]	; 0x600
     d00:	00000032 	andeq	r0, r0, r2, lsr r0
     d04:	0bed8901 	bleq	ffb63110 <BootRAM+0xead38b1>
     d08:	03050000 	movweq	r0, #20480	; 0x5000
     d0c:	20000034 	andcs	r0, r0, r4, lsr r0
     d10:	0007ec35 	andeq	lr, r7, r5, lsr ip
     d14:	ed930100 	ldfs	f0, [r3]
     d18:	0500000b 	streq	r0, [r0, #-11]
     d1c:	00005003 	andeq	r5, r0, r3
     d20:	072a3520 	streq	r3, [sl, -r0, lsr #10]!
     d24:	a0010000 	andge	r0, r1, r0
     d28:	00000501 	andeq	r0, r0, r1, lsl #10
     d2c:	02ce0305 	sbceq	r0, lr, #335544320	; 0x14000000
     d30:	043b2000 	ldrteq	r2, [fp], #-0
     d34:	09000005 	stmdbeq	r0, {r0, r2}
     d38:	07703c6e 	ldrbeq	r3, [r0, -lr, ror #24]!
     d3c:	460a0000 	strmi	r0, [sl], -r0
     d40:	000c4902 	andeq	r4, ip, r2, lsl #18
     d44:	005e0f00 	subseq	r0, lr, r0, lsl #30
     d48:	3c000000 	stccc	0, cr0, [r0], {-0}
     d4c:	0000079a 	muleq	r0, sl, r7
     d50:	6002570a 	andvs	r5, r2, sl, lsl #14
     d54:	0f00000c 	svceq	0x0000000c
     d58:	0000005e 	andeq	r0, r0, lr, asr r0
     d5c:	00004c0f 	andeq	r4, r0, pc, lsl #24
     d60:	713c0000 	teqvc	ip, r0
     d64:	0a000009 	beq	d90 <__Stack_Size+0x990>
     d68:	0c720240 	lfmeq	f0, 2, [r2], #-256	; 0xffffff00
     d6c:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     d70:	00000000 	andeq	r0, r0, r0
     d74:	0000213d 	andeq	r2, r0, sp, lsr r1
     d78:	83e90400 	mvnhi	r0, #0, 8
     d7c:	0f00000c 	svceq	0x0000000c
     d80:	0000005e 	andeq	r0, r0, lr, asr r0
     d84:	03253e00 	teqeq	r5, #0, 28
     d88:	6d090000 	stcvs	0, cr0, [r9, #-0]
     d8c:	000000b4 	strheq	r0, [r0], -r4
     d90:	00083d3f 	andeq	r3, r8, pc, lsr sp
     d94:	5be50400 	blpl	ff941d9c <BootRAM+0xe8b253d>
     d98:	a8000001 	stmdage	r0, {r0}
     d9c:	0f00000c 	svceq	0x0000000c
     da0:	0000004c 	andeq	r0, r0, ip, asr #32
     da4:	00016c0f 	andeq	r6, r1, pc, lsl #24
     da8:	393b0000 	ldmdbcc	fp!, {}	; <UNPREDICTABLE>
     dac:	07000005 	streq	r0, [r0, -r5]
     db0:	02893f19 	addeq	r3, r9, #25, 30	; 0x64
     db4:	c5030000 	strgt	r0, [r3, #-0]
     db8:	000008e6 	andeq	r0, r0, r6, ror #17
     dbc:	00000cc4 	andeq	r0, r0, r4, asr #25
     dc0:	000ba30f 	andeq	sl, fp, pc, lsl #6
     dc4:	6c3d0000 	ldcvs	0, cr0, [sp], #-0
     dc8:	03000005 	movweq	r0, #5
     dcc:	000cdfc4 	andeq	sp, ip, r4, asr #31
     dd0:	003a0f00 	eorseq	r0, sl, r0, lsl #30
     dd4:	5e0f0000 	cdppl	0, 0, cr0, cr15, cr0, {0}
     dd8:	0f000000 	svceq	0x00000000
     ddc:	0000005e 	andeq	r0, r0, lr, asr r0
     de0:	02c43e00 	sbceq	r3, r4, #0, 28
     de4:	db030000 	blle	c0dec <__Stack_Size+0xc09ec>
     de8:	00000ba3 	andeq	r0, r0, r3, lsr #23
     dec:	0007173d 	andeq	r1, r7, sp, lsr r7
     df0:	fbd70300 	blx	ff5c19fa <BootRAM+0xe53219b>
     df4:	0f00000c 	svceq	0x0000000c
     df8:	00000cfb 	strdeq	r0, [r0], -fp
     dfc:	ff040a00 			; <UNDEFINED> instruction: 0xff040a00
     e00:	3b000000 	blcc	e08 <__Stack_Size+0xa08>
     e04:	00000084 	andeq	r0, r0, r4, lsl #1
     e08:	8d3b6a09 	vldmdbhi	fp!, {s12-s20}
     e0c:	0b000003 	bleq	e20 <__Stack_Size+0xa20>
     e10:	023d001a 	eorseq	r0, sp, #26
     e14:	00040000 	andeq	r0, r4, r0
     e18:	000003de 	ldrdeq	r0, [r0], -lr
     e1c:	01580104 	cmpeq	r8, r4, lsl #2
     e20:	3a010000 	bcc	40e28 <__Stack_Size+0x40a28>
     e24:	2600000a 	strcs	r0, [r0], -sl
     e28:	a4000009 	strge	r0, [r0], #-9
     e2c:	02000004 	andeq	r0, r0, #4
     e30:	01f60504 	mvnseq	r0, r4, lsl #10
     e34:	02020000 	andeq	r0, r2, #0
     e38:	0006a505 	andeq	sl, r6, r5, lsl #10
     e3c:	06010200 	streq	r0, [r1], -r0, lsl #4
     e40:	00000651 	andeq	r0, r0, r1, asr r6
     e44:	7b070402 	blvc	1c1e54 <__Stack_Size+0x1c1a54>
     e48:	03000003 	movweq	r0, #3
     e4c:	00363175 	eorseq	r3, r6, r5, ror r1
     e50:	00442801 	subeq	r2, r4, r1, lsl #16
     e54:	02020000 	andeq	r0, r2, #0
     e58:	0003d707 	andeq	sp, r3, r7, lsl #14
     e5c:	38750300 	ldmdacc	r5!, {r8, r9}^
     e60:	55290100 	strpl	r0, [r9, #-256]!	; 0x100
     e64:	02000000 	andeq	r0, r0, #0
     e68:	064f0801 	strbeq	r0, [pc], -r1, lsl #16
     e6c:	04020000 	streq	r0, [r2], #-0
     e70:	00051507 	andeq	r1, r5, r7, lsl #10
     e74:	008c0400 	addeq	r0, ip, r0, lsl #8
     e78:	02080000 	andeq	r0, r8, #0
     e7c:	00008824 	andeq	r8, r0, r4, lsr #16
     e80:	013d0500 	teqeq	sp, r0, lsl #10
     e84:	26020000 	strcs	r0, [r2], -r0
     e88:	00000088 	andeq	r0, r0, r8, lsl #1
     e8c:	05930500 	ldreq	r0, [r3, #1280]	; 0x500
     e90:	27020000 	strcs	r0, [r2, -r0]
     e94:	00000039 	andeq	r0, r0, r9, lsr r0
     e98:	04060004 	streq	r0, [r6], #-4
     e9c:	0000004b 	andeq	r0, r0, fp, asr #32
     ea0:	0002d607 	andeq	sp, r2, r7, lsl #12
     ea4:	63290200 	teqvs	r9, #0, 4
     ea8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
     eac:	00000438 	andeq	r0, r0, r8, lsr r4
     eb0:	00aa2c03 	adceq	r2, sl, r3, lsl #24
     eb4:	03050000 	movweq	r0, #20480	; 0x5000
     eb8:	200002c8 	andcs	r0, r0, r8, asr #5
     ebc:	69050409 	stmdbvs	r5, {r0, r3, sl}
     ec0:	0800746e 	stmdaeq	r0, {r1, r2, r3, r5, r6, sl, ip, sp, lr}
     ec4:	000009b6 			; <UNDEFINED> instruction: 0x000009b6
     ec8:	008e3c04 	addeq	r3, lr, r4, lsl #24
     ecc:	03050000 	movweq	r0, #20480	; 0x5000
     ed0:	20000144 	andcs	r0, r0, r4, asr #2
     ed4:	00089408 	andeq	r9, r8, r8, lsl #8
     ed8:	8e960400 	cdphi	4, 9, cr0, cr6, cr0, {0}
     edc:	05000000 	streq	r0, [r0, #-0]
     ee0:	0002b803 	andeq	fp, r2, r3, lsl #16
     ee4:	008e0a20 	addeq	r0, lr, r0, lsr #20
     ee8:	00e30000 	rsceq	r0, r3, r0
     eec:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     ef0:	06000000 	streq	r0, [r0], -r0
     ef4:	011d0800 	tsteq	sp, r0, lsl #16
     ef8:	cb040000 	blgt	100f00 <__Stack_Size+0x100b00>
     efc:	000000d3 	ldrdeq	r0, [r0], -r3
     f00:	00940305 	addseq	r0, r4, r5, lsl #6
     f04:	b2082000 	andlt	r2, r8, #0
     f08:	04000006 	streq	r0, [r0], #-6
     f0c:	00008e4e 	andeq	r8, r0, lr, asr #28
     f10:	e0030500 	and	r0, r3, r0, lsl #10
     f14:	0a200000 	beq	800f1c <__Stack_Size+0x800b1c>
     f18:	0000004b 	andeq	r0, r0, fp, asr #32
     f1c:	00000115 	andeq	r0, r0, r5, lsl r1
     f20:	00005c0b 	andeq	r5, r0, fp, lsl #24
     f24:	08001100 	stmdaeq	r0, {r8, ip}
     f28:	000009b3 			; <UNDEFINED> instruction: 0x000009b3
     f2c:	01052504 	tsteq	r5, r4, lsl #10
     f30:	03050000 	movweq	r0, #20480	; 0x5000
     f34:	200000cc 	andcs	r0, r0, ip, asr #1
     f38:	00004b0a 	andeq	r4, r0, sl, lsl #22
     f3c:	00013600 	andeq	r3, r1, r0, lsl #12
     f40:	005c0b00 	subseq	r0, ip, r0, lsl #22
     f44:	00080000 	andeq	r0, r8, r0
     f48:	0006af08 	andeq	sl, r6, r8, lsl #30
     f4c:	26410400 	strbcs	r0, [r1], -r0, lsl #8
     f50:	05000001 	streq	r0, [r0, #-1]
     f54:	00012903 	andeq	r2, r1, r3, lsl #18
     f58:	004b0a20 	subeq	r0, fp, r0, lsr #20
     f5c:	01570000 	cmpeq	r7, r0
     f60:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     f64:	2c000000 	stccs	0, cr0, [r0], {-0}
     f68:	08910800 	ldmeq	r1, {fp}
     f6c:	54040000 	strpl	r0, [r4], #-0
     f70:	00000147 	andeq	r0, r0, r7, asr #2
     f74:	00ec0305 	rsceq	r0, ip, r5, lsl #6
     f78:	4b0a2000 	blmi	288f80 <__Stack_Size+0x288b80>
     f7c:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
     f80:	0b000001 	bleq	f8c <__Stack_Size+0xb8c>
     f84:	0000005c 	andeq	r0, r0, ip, asr r0
     f88:	27080003 	strcs	r0, [r8, -r3]
     f8c:	0400000a 	streq	r0, [r0], #-10
     f90:	0001689c 	muleq	r1, ip, r8
     f94:	e8030500 	stmda	r3, {r8, sl}
     f98:	08200000 	stmdaeq	r0!, {}	; <UNPREDICTABLE>
     f9c:	0000098a 	andeq	r0, r0, sl, lsl #19
     fa0:	0105a304 	tsteq	r5, r4, lsl #6
     fa4:	03050000 	movweq	r0, #20480	; 0x5000
     fa8:	20000132 	andcs	r0, r0, r2, lsr r1
     fac:	00004b0a 	andeq	r4, r0, sl, lsl #22
     fb0:	0001aa00 	andeq	sl, r1, r0, lsl #20
     fb4:	005c0b00 	subseq	r0, ip, r0, lsl #22
     fb8:	00130000 	andseq	r0, r3, r0
     fbc:	000a1308 	andeq	r1, sl, r8, lsl #6
     fc0:	9aa90400 	bls	fea41fc8 <BootRAM+0xd9b2769>
     fc4:	05000001 	streq	r0, [r0, #-1]
     fc8:	00014c03 	andeq	r4, r1, r3, lsl #24
     fcc:	004b0a20 	subeq	r0, fp, r0, lsr #20
     fd0:	01cb0000 	biceq	r0, fp, r0
     fd4:	5c0b0000 	stcpl	0, cr0, [fp], {-0}
     fd8:	0f000000 	svceq	0x00000000
     fdc:	09cd0800 	stmibeq	sp, {fp}^
     fe0:	af040000 	svcge	0x00040000
     fe4:	000001bb 			; <UNDEFINED> instruction: 0x000001bb
     fe8:	01190305 	tsteq	r9, r5, lsl #6
     fec:	4b0a2000 	blmi	288ff4 <__Stack_Size+0x288bf4>
     ff0:	ec000000 	stc	0, cr0, [r0], {-0}
     ff4:	0b000001 	bleq	1000 <__Stack_Size+0xc00>
     ff8:	0000005c 	andeq	r0, r0, ip, asr r0
     ffc:	e008007f 	and	r0, r8, pc, ror r0
    1000:	04000009 	streq	r0, [r0], #-9
    1004:	0001dcb5 			; <UNDEFINED> instruction: 0x0001dcb5
    1008:	60030500 	andvs	r0, r3, r0, lsl #10
    100c:	0a200001 	beq	801018 <__Stack_Size+0x800c18>
    1010:	0000004b 	andeq	r0, r0, fp, asr #32
    1014:	0000020d 	andeq	r0, r0, sp, lsl #4
    1018:	00005c0b 	andeq	r5, r0, fp, lsl #24
    101c:	08006b00 	stmdaeq	r0, {r8, r9, fp, sp, lr}
    1020:	000009f1 	strdeq	r0, [r0], -r1
    1024:	01fdbc04 	mvnseq	fp, r4, lsl #24
    1028:	03050000 	movweq	r0, #20480	; 0x5000
    102c:	200001e0 	andcs	r0, r0, r0, ror #3
    1030:	000a0208 	andeq	r0, sl, r8, lsl #4
    1034:	fdc30400 	stc2l	4, cr0, [r3]
    1038:	05000001 	streq	r0, [r0, #-1]
    103c:	00024c03 	andeq	r4, r2, r3, lsl #24
    1040:	099d0820 	ldmibeq	sp, {r5, fp}
    1044:	c9040000 	stmdbgt	r4, {}	; <UNPREDICTABLE>
    1048:	0000004b 	andeq	r0, r0, fp, asr #32
    104c:	00000305 	andeq	r0, r0, r5, lsl #6
    1050:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
    1054:	04000002 	streq	r0, [r0], #-2
    1058:	00046800 	andeq	r6, r4, r0, lsl #16
    105c:	58010400 	stmdapl	r1, {sl}
    1060:	01000001 	tsteq	r0, r1
    1064:	00000ac8 	andeq	r0, r0, r8, asr #21
    1068:	00000926 	andeq	r0, r0, r6, lsr #18
    106c:	00000128 	andeq	r0, r0, r8, lsr #2
    1070:	00000000 	andeq	r0, r0, r0
    1074:	00000516 	andeq	r0, r0, r6, lsl r5
    1078:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    107c:	02000001 	andeq	r0, r0, #1
    1080:	06a50502 	strteq	r0, [r5], r2, lsl #10
    1084:	01020000 	mrseq	r0, (UNDEF: 2)
    1088:	00065106 	andeq	r5, r6, r6, lsl #2
    108c:	33750300 	cmncc	r5, #0, 6
    1090:	27020032 	smladxcs	r2, r2, r0, r0
    1094:	00000045 	andeq	r0, r0, r5, asr #32
    1098:	7b070402 	blvc	1c20a8 <__Stack_Size+0x1c1ca8>
    109c:	02000003 	andeq	r0, r0, #3
    10a0:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    10a4:	75030000 	strvc	r0, [r3, #-0]
    10a8:	29020038 	stmdbcs	r2, {r3, r4, r5}
    10ac:	0000005d 	andeq	r0, r0, sp, asr r0
    10b0:	4f080102 	svcmi	0x00080102
    10b4:	04000006 	streq	r0, [r0], #-6
    10b8:	79370201 	ldmdbvc	r7!, {r0, r9}
    10bc:	05000000 	streq	r0, [r0, #-0]
    10c0:	000005dc 	ldrdeq	r0, [r0], -ip
    10c4:	074a0500 	strbeq	r0, [sl, -r0, lsl #10]
    10c8:	00010000 	andeq	r0, r1, r0
    10cc:	00043306 	andeq	r3, r4, r6, lsl #6
    10d0:	64370200 	ldrtvs	r0, [r7], #-512	; 0x200
    10d4:	02000000 	andeq	r0, r0, #0
    10d8:	05150704 	ldreq	r0, [r5, #-1796]	; 0x704
    10dc:	a4070000 	strge	r0, [r7], #-0
    10e0:	0100000a 	tsteq	r0, sl
    10e4:	00021526 	andeq	r1, r2, r6, lsr #10
    10e8:	00062400 	andeq	r2, r6, r0, lsl #8
    10ec:	0000b808 	andeq	fp, r0, r8, lsl #16
    10f0:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    10f4:	08000002 	stmdaeq	r0, {r1}
    10f8:	00000abb 			; <UNDEFINED> instruction: 0x00000abb
    10fc:	00793301 	rsbseq	r3, r9, r1, lsl #6
    1100:	02460000 	subeq	r0, r6, #0
    1104:	80090000 	andhi	r0, r9, r0
    1108:	0100000a 	tsteq	r0, sl
    110c:	00021533 	andeq	r1, r2, r3, lsr r5
    1110:	0000c400 	andeq	ip, r0, r0, lsl #8
    1114:	08000a00 	stmdaeq	r0, {r9, fp}
    1118:	00000adf 	ldrdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    111c:	02153501 	andseq	r3, r5, #4194304	; 0x400000
    1120:	02640000 	rsbeq	r0, r4, #0
    1124:	2a0b0000 	bcs	2c112c <__Stack_Size+0x2c0d2c>
    1128:	2d080006 	stccs	0, cr0, [r8, #-24]	; 0xffffffe8
    112c:	0b000002 	bleq	113c <__Stack_Size+0xd3c>
    1130:	0800062e 	stmdaeq	r0, {r1, r2, r3, r5, r9, sl}
    1134:	00000234 	andeq	r0, r0, r4, lsr r2
    1138:	0006320b 	andeq	r3, r6, fp, lsl #4
    113c:	00023b08 	andeq	r3, r2, r8, lsl #22
    1140:	06360b00 	ldrteq	r0, [r6], -r0, lsl #22
    1144:	02420800 	subeq	r0, r2, #0, 16
    1148:	3a0b0000 	bcc	2c1150 <__Stack_Size+0x2c0d50>
    114c:	49080006 	stmdbmi	r8, {r1, r2}
    1150:	0c000002 	stceq	0, cr0, [r0], {2}
    1154:	0800064c 	stmdaeq	r0, {r2, r3, r6, r9, sl}
    1158:	00000250 	andeq	r0, r0, r0, asr r2
    115c:	0000012e 	andeq	r0, r0, lr, lsr #2
    1160:	0353010d 	cmpeq	r3, #1073741827	; 0x40000003
    1164:	0d243e44 	stceq	14, cr3, [r4, #-272]!	; 0xfffffef0
    1168:	35015201 	strcc	r5, [r1, #-513]	; 0x201
    116c:	0151010d 	cmpeq	r1, sp, lsl #2
    1170:	50010d3d 	andpl	r0, r1, sp, lsr sp
    1174:	10000c05 	andne	r0, r0, r5, lsl #24
    1178:	020d4001 	andeq	r4, sp, #1
    117c:	3001007d 	andcc	r0, r1, sp, ror r0
    1180:	06520c00 	ldrbeq	r0, [r2], -r0, lsl #24
    1184:	02750800 	rsbseq	r0, r5, #0, 16
    1188:	01450000 	mrseq	r0, (UNDEF: 69)
    118c:	010d0000 	mrseq	r0, (UNDEF: 13)
    1190:	000c0550 	andeq	r0, ip, r0, asr r5
    1194:	00080050 	andeq	r0, r8, r0, asr r0
    1198:	0006580b 	andeq	r5, r6, fp, lsl #16
    119c:	00028a08 	andeq	r8, r2, r8, lsl #20
    11a0:	06660c00 	strbteq	r0, [r6], -r0, lsl #24
    11a4:	02750800 	rsbseq	r0, r5, #0, 16
    11a8:	01650000 	cmneq	r5, r0
    11ac:	010d0000 	mrseq	r0, (UNDEF: 13)
    11b0:	000c0550 	andeq	r0, ip, r0, asr r5
    11b4:	00080020 	andeq	r0, r8, r0, lsr #32
    11b8:	0006860c 	andeq	r8, r6, ip, lsl #12
    11bc:	00025008 	andeq	r5, r2, r8
    11c0:	00019300 	andeq	r9, r1, r0, lsl #6
    11c4:	53010d00 	movwpl	r0, #7424	; 0x1d00
    11c8:	24404003 	strbcs	r4, [r0], #-3
    11cc:	0152010d 	cmpeq	r2, sp, lsl #2
    11d0:	51010d31 	tstpl	r1, r1, lsr sp
    11d4:	010d3d01 	tsteq	sp, r1, lsl #26
    11d8:	000c0550 	andeq	r0, ip, r0, asr r5
    11dc:	0d400110 	stfeqe	f0, [r0, #-64]	; 0xffffffc0
    11e0:	01007d02 	tsteq	r0, r2, lsl #26
    11e4:	8a0b0030 	bhi	2c12ac <__Stack_Size+0x2c0eac>
    11e8:	9b080006 	blls	201208 <__Stack_Size+0x200e08>
    11ec:	0b000002 	bleq	11fc <__Stack_Size+0xdfc>
    11f0:	08000690 	stmdaeq	r0, {r4, r7, r9, sl}
    11f4:	000002ac 	andeq	r0, r0, ip, lsr #5
    11f8:	00069e0c 	andeq	r9, r6, ip, lsl #28
    11fc:	00027508 	andeq	r7, r2, r8, lsl #10
    1200:	0001bc00 	andeq	fp, r1, r0, lsl #24
    1204:	50010d00 	andpl	r0, r1, r0, lsl #26
    1208:	20000c05 	andcs	r0, r0, r5, lsl #24
    120c:	0c000800 	stceq	8, cr0, [r0], {-0}
    1210:	080006aa 	stmdaeq	r0, {r1, r3, r5, r7, r9, sl}
    1214:	00000275 	andeq	r0, r0, r5, ror r2
    1218:	000001d3 	ldrdeq	r0, [r0], -r3
    121c:	0550010d 	ldrbeq	r0, [r0, #-269]	; 0x10d
    1220:	0050000c 	subseq	r0, r0, ip
    1224:	b20b0008 	andlt	r0, fp, #8
    1228:	b9080006 	stmdblt	r8, {r1, r2}
    122c:	0c000002 	stceq	0, cr0, [r0], {2}
    1230:	080006c4 	stmdaeq	r0, {r2, r6, r7, r9, sl}
    1234:	00000250 	andeq	r0, r0, r0, asr r2
    1238:	0000020b 	andeq	r0, r0, fp, lsl #4
    123c:	0353010d 	cmpeq	r3, #1073741827	; 0x40000003
    1240:	0d243e44 	stceq	14, cr3, [r4, #-272]!	; 0xfffffef0
    1244:	35015201 	strcc	r5, [r1, #-513]	; 0x201
    1248:	0151010d 	cmpeq	r1, sp, lsl #2
    124c:	50010d3d 	andpl	r0, r1, sp, lsr sp
    1250:	10000c05 	andne	r0, r0, r5, lsl #24
    1254:	020d4001 	andeq	r4, sp, #1
    1258:	7502007d 	strvc	r0, [r2, #-125]	; 0x7d
    125c:	c80b0000 	stmdagt	fp, {}	; <UNPREDICTABLE>
    1260:	ca080006 	bgt	201280 <__Stack_Size+0x200e80>
    1264:	00000002 	andeq	r0, r0, r2
    1268:	6905040e 	stmdbvs	r5, {r1, r2, r3, sl}
    126c:	0f00746e 	svceq	0x0000746e
    1270:	00000438 	andeq	r0, r0, r8, lsr r4
    1274:	02152c04 	andseq	r2, r5, #4, 24	; 0x400
    1278:	03050000 	movweq	r0, #20480	; 0x5000
    127c:	200002c8 	andcs	r0, r0, r8, asr #5
    1280:	000a7410 	andeq	r7, sl, r0, lsl r4
    1284:	10cb0300 	sbcne	r0, fp, r0, lsl #6
    1288:	00000a9b 	muleq	r0, fp, sl
    128c:	a910cc03 	ldmdbge	r0, {r0, r1, sl, fp, lr, pc}
    1290:	0300000a 	movweq	r0, #10
    1294:	025310cd 	subseq	r1, r3, #205	; 0xcd
    1298:	51040000 	mrspl	r0, (UNDEF: 4)
    129c:	000a9010 	andeq	r9, sl, r0, lsl r0
    12a0:	11ce0300 	bicne	r0, lr, r0, lsl #6
    12a4:	00000aeb 	andeq	r0, r0, fp, ror #21
    12a8:	0275c803 	rsbseq	ip, r5, #196608	; 0x30000
    12ac:	3a120000 	bcc	4812b4 <__Stack_Size+0x480eb4>
    12b0:	12000000 	andne	r0, r0, #0
    12b4:	00000053 	andeq	r0, r0, r3, asr r0
    12b8:	00005312 	andeq	r5, r0, r2, lsl r3
    12bc:	003a1200 	eorseq	r1, sl, r0, lsl #4
    12c0:	53120000 	tstpl	r2, #0
    12c4:	00000000 	andeq	r0, r0, r0
    12c8:	000a6613 	andeq	r6, sl, r3, lsl r6
    12cc:	79cf0300 	stmibvc	pc, {r8, r9}^	; <UNPREDICTABLE>
    12d0:	8a000000 	bhi	12d8 <__Stack_Size+0xed8>
    12d4:	12000002 	andne	r0, r0, #2
    12d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    12dc:	0a800900 	beq	fe0036e4 <BootRAM+0xcf73e85>
    12e0:	33010000 	movwcc	r0, #4096	; 0x1000
    12e4:	00000215 	andeq	r0, r0, r5, lsl r2
    12e8:	0000029b 	muleq	r0, fp, r2
    12ec:	f509000a 			; <UNDEFINED> instruction: 0xf509000a
    12f0:	0500000a 	streq	r0, [r0, #-10]
    12f4:	0000797c 	andeq	r7, r0, ip, ror r9
    12f8:	0002ac00 	andeq	sl, r2, r0, lsl #24
    12fc:	14000a00 	strne	r0, [r0], #-2560	; 0xa00
    1300:	00000a4b 	andeq	r0, r0, fp, asr #20
    1304:	02b97d05 	adcseq	r7, r9, #320	; 0x140
    1308:	000a0000 	andeq	r0, sl, r0
    130c:	000a5b11 	andeq	r5, sl, r1, lsl fp
    1310:	cad00300 	bgt	ff401f18 <BootRAM+0xe3726b9>
    1314:	12000002 	andne	r0, r0, #2
    1318:	0000003a 	andeq	r0, r0, sl, lsr r0
    131c:	0acf1000 	beq	ff3c5324 <BootRAM+0xe335ac5>
    1320:	ca030000 	bgt	c1328 <__Stack_Size+0xc0f28>
    1324:	00093500 	andeq	r3, r9, r0, lsl #10
    1328:	89000400 	stmdbhi	r0, {sl}
    132c:	04000005 	streq	r0, [r0], #-5
    1330:	00015801 	andeq	r5, r1, r1, lsl #16
    1334:	0c7b0100 	ldfeqe	f0, [fp], #-0
    1338:	09260000 	stmdbeq	r6!, {}	; <UNPREDICTABLE>
    133c:	01680000 	cmneq	r8, r0
    1340:	00000000 	andeq	r0, r0, r0
    1344:	05bf0000 	ldreq	r0, [pc, #0]!	; 134c <__Stack_Size+0xf4c>
    1348:	04020000 	streq	r0, [r2], #-0
    134c:	0001f605 	andeq	pc, r1, r5, lsl #12
    1350:	05020200 	streq	r0, [r2, #-512]	; 0x200
    1354:	000006a5 	andeq	r0, r0, r5, lsr #13
    1358:	51060102 	tstpl	r6, r2, lsl #2
    135c:	03000006 	movweq	r0, #6
    1360:	00323375 	eorseq	r3, r2, r5, ror r3
    1364:	00452702 	subeq	r2, r5, r2, lsl #14
    1368:	04020000 	streq	r0, [r2], #-0
    136c:	00037b07 	andeq	r7, r3, r7, lsl #22
    1370:	31750300 	cmncc	r5, r0, lsl #6
    1374:	28020036 	stmdacs	r2, {r1, r2, r4, r5}
    1378:	00000057 	andeq	r0, r0, r7, asr r0
    137c:	d7070202 	strle	r0, [r7, -r2, lsl #4]
    1380:	03000003 	movweq	r0, #3
    1384:	02003875 	andeq	r3, r0, #7667712	; 0x750000
    1388:	00006829 	andeq	r6, r0, r9, lsr #16
    138c:	08010200 	stmdaeq	r1, {r9}
    1390:	0000064f 	andeq	r0, r0, pc, asr #12
    1394:	00044604 	andeq	r4, r4, r4, lsl #12
    1398:	7a2f0200 	bvc	bc1ba0 <__Stack_Size+0xbc17a0>
    139c:	05000000 	streq	r0, [r0, #-0]
    13a0:	00000045 	andeq	r0, r0, r5, asr #32
    13a4:	00015304 	andeq	r5, r1, r4, lsl #6
    13a8:	8a300200 	bhi	c01bb0 <__Stack_Size+0xc017b0>
    13ac:	05000000 	streq	r0, [r0, #-0]
    13b0:	00000057 	andeq	r0, r0, r7, asr r0
    13b4:	000d0d04 	andeq	r0, sp, r4, lsl #26
    13b8:	9a330200 	bls	cc1bc0 <__Stack_Size+0xcc17c0>
    13bc:	06000000 	streq	r0, [r0], -r0
    13c0:	0000007a 	andeq	r0, r0, sl, ror r0
    13c4:	37020107 	strcc	r0, [r2, -r7, lsl #2]
    13c8:	000000b4 	strheq	r0, [r0], -r4
    13cc:	0005dc08 	andeq	sp, r5, r8, lsl #24
    13d0:	4a080000 	bmi	2013d8 <__Stack_Size+0x200fd8>
    13d4:	01000007 	tsteq	r0, r7
    13d8:	04330400 	ldrteq	r0, [r3], #-1024	; 0x400
    13dc:	37020000 	strcc	r0, [r2, -r0]
    13e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    13e4:	bf040a09 	svclt	0x00040a09
    13e8:	0b000000 	bleq	13f0 <__Stack_Size+0xff0>
    13ec:	468d0328 	strmi	r0, [sp], r8, lsr #6
    13f0:	0c000001 	stceq	0, cr0, [r0], {1}
    13f4:	03005243 	movweq	r5, #579	; 0x243
    13f8:	00006f8e 	andeq	r6, r0, lr, lsl #31
    13fc:	080d0000 	stmdaeq	sp, {}	; <UNPREDICTABLE>
    1400:	0300000d 	movweq	r0, #13
    1404:	00006f8f 	andeq	r6, r0, pc, lsl #31
    1408:	430c0400 	movwmi	r0, #50176	; 0xc400
    140c:	03005249 	movweq	r5, #585	; 0x249
    1410:	00006f90 	muleq	r0, r0, pc	; <UNPREDICTABLE>
    1414:	4d0d0800 	stcmi	8, cr0, [sp, #-0]
    1418:	0300000b 	movweq	r0, #11
    141c:	00006f91 	muleq	r0, r1, pc	; <UNPREDICTABLE>
    1420:	0b0d0c00 	bleq	344428 <__Stack_Size+0x344028>
    1424:	0300000c 	movweq	r0, #12
    1428:	00006f92 	muleq	r0, r2, pc	; <UNPREDICTABLE>
    142c:	d30d1000 	movwle	r1, #53248	; 0xd000
    1430:	0300000b 	movweq	r0, #11
    1434:	00006f93 	muleq	r0, r3, pc	; <UNPREDICTABLE>
    1438:	5d0d1400 	cfstrspl	mvf1, [sp, #-0]
    143c:	0300000c 	movweq	r0, #12
    1440:	00006f94 	muleq	r0, r4, pc	; <UNPREDICTABLE>
    1444:	930d1800 	movwls	r1, #55296	; 0xd800
    1448:	0300000c 	movweq	r0, #12
    144c:	00006f95 	muleq	r0, r5, pc	; <UNPREDICTABLE>
    1450:	e70d1c00 	str	r1, [sp, -r0, lsl #24]
    1454:	0300000c 	movweq	r0, #12
    1458:	00006f96 	muleq	r0, r6, pc	; <UNPREDICTABLE>
    145c:	430c2000 	movwmi	r2, #49152	; 0xc000
    1460:	03005253 	movweq	r5, #595	; 0x253
    1464:	00006f97 	muleq	r0, r7, pc	; <UNPREDICTABLE>
    1468:	04002400 	streq	r2, [r0], #-1024	; 0x400
    146c:	00000ba8 	andeq	r0, r0, r8, lsr #23
    1470:	00c69803 	sbceq	r9, r6, r3, lsl #16
    1474:	3c0e0000 	stccc	0, cr0, [lr], {-0}
    1478:	e69b0303 	ldr	r0, [fp], r3, lsl #6
    147c:	0d000001 	stceq	0, cr0, [r0, #-4]
    1480:	00000c58 	andeq	r0, r0, r8, asr ip
    1484:	01fd9c03 	mvnseq	r9, r3, lsl #24
    1488:	0d000000 	stceq	0, cr0, [r0, #-0]
    148c:	00000c1a 	andeq	r0, r0, sl, lsl ip
    1490:	02029d03 	andeq	r9, r2, #3, 26	; 0xc0
    1494:	0d080000 	stceq	0, cr0, [r8, #-0]
    1498:	00000c06 	andeq	r0, r0, r6, lsl #24
    149c:	02129e03 	andseq	r9, r2, #3, 28	; 0x30
    14a0:	0d800000 	stceq	0, cr0, [r0]
    14a4:	00000cff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    14a8:	02029f03 	andeq	r9, r2, #3, 30
    14ac:	0f880000 	svceq	0x00880000
    14b0:	00000b19 	andeq	r0, r0, r9, lsl fp
    14b4:	0217a003 	andseq	sl, r7, #3
    14b8:	01000000 	mrseq	r0, (UNDEF: 0)
    14bc:	000c290f 	andeq	r2, ip, pc, lsl #18
    14c0:	02a10300 	adceq	r0, r1, #0, 6
    14c4:	08000002 	stmdaeq	r0, {r1}
    14c8:	0b060f01 	bleq	1850d4 <__Stack_Size+0x184cd4>
    14cc:	a2030000 	andge	r0, r3, #0
    14d0:	0000021c 	andeq	r0, r0, ip, lsl r2
    14d4:	330f0180 	movwcc	r0, #61824	; 0xf180
    14d8:	0300000c 	movweq	r0, #12
    14dc:	000202a3 	andeq	r0, r2, r3, lsr #5
    14e0:	0f018800 	svceq	0x00018800
    14e4:	00000bfc 	strdeq	r0, [r0], -ip
    14e8:	0221a403 	eoreq	sl, r1, #50331648	; 0x3000000
    14ec:	02000000 	andeq	r0, r0, #0
    14f0:	000c3d0f 	andeq	r3, ip, pc, lsl #26
    14f4:	26a50300 	strtcs	r0, [r5], r0, lsl #6
    14f8:	08000002 	stmdaeq	r0, {r1}
    14fc:	50491002 	subpl	r1, r9, r2
    1500:	a6030052 			; <UNDEFINED> instruction: 0xa6030052
    1504:	00000246 	andeq	r0, r0, r6, asr #4
    1508:	11000300 	mrsne	r0, LR_irq
    150c:	0000006f 	andeq	r0, r0, pc, rrx
    1510:	000001f6 	strdeq	r0, [r0], -r6
    1514:	0001f612 	andeq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
    1518:	02000100 	andeq	r0, r0, #0, 2
    151c:	05150704 	ldreq	r0, [r5, #-1796]	; 0x704
    1520:	e6050000 	str	r0, [r5], -r0
    1524:	11000001 	tstne	r0, r1
    1528:	0000003a 	andeq	r0, r0, sl, lsr r0
    152c:	00000212 	andeq	r0, r0, r2, lsl r2
    1530:	0001f612 	andeq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
    1534:	05001d00 	streq	r1, [r0, #-3328]	; 0xd00
    1538:	000001e6 	andeq	r0, r0, r6, ror #3
    153c:	0001e605 	andeq	lr, r1, r5, lsl #12
    1540:	01e60500 	mvneq	r0, r0, lsl #10
    1544:	e6050000 	str	r0, [r5], -r0
    1548:	11000001 	tstne	r0, r1
    154c:	0000003a 	andeq	r0, r0, sl, lsr r0
    1550:	00000236 	andeq	r0, r0, r6, lsr r2
    1554:	0001f612 	andeq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
    1558:	11003d00 	tstne	r0, r0, lsl #26
    155c:	0000006f 	andeq	r0, r0, pc, rrx
    1560:	00000246 	andeq	r0, r0, r6, asr #4
    1564:	0001f612 	andeq	pc, r1, r2, lsl r6	; <UNPREDICTABLE>
    1568:	05000e00 	streq	r0, [r0, #-3584]	; 0xe00
    156c:	00000236 	andeq	r0, r0, r6, lsr r2
    1570:	000c8604 	andeq	r8, ip, r4, lsl #12
    1574:	51a70300 			; <UNDEFINED> instruction: 0x51a70300
    1578:	0b000001 	bleq	1584 <__Stack_Size+0x1184>
    157c:	8fa90304 	svchi	0x00a90304
    1580:	0d000002 	stceq	0, cr0, [r0, #-8]
    1584:	0000044b 	andeq	r0, r0, fp, asr #8
    1588:	005eaa03 	subseq	sl, lr, r3, lsl #20
    158c:	0d000000 	stceq	0, cr0, [r0, #-0]
    1590:	0000046e 	andeq	r0, r0, lr, ror #8
    1594:	005eab03 	subseq	sl, lr, r3, lsl #22
    1598:	0d010000 	stceq	0, cr0, [r1, #-0]
    159c:	00000350 	andeq	r0, r0, r0, asr r3
    15a0:	005eac03 	subseq	sl, lr, r3, lsl #24
    15a4:	0d020000 	stceq	0, cr0, [r2, #-0]
    15a8:	00000000 	andeq	r0, r0, r0
    15ac:	00b4ad03 	adcseq	sl, r4, r3, lsl #26
    15b0:	00030000 	andeq	r0, r3, r0
    15b4:	00049004 	andeq	r9, r4, r4
    15b8:	56ae0300 	strtpl	r0, [lr], r0, lsl #6
    15bc:	0b000002 	bleq	15cc <__Stack_Size+0x11cc>
    15c0:	4bb00340 	blmi	fec022c8 <BootRAM+0xdb72a69>
    15c4:	0d000003 	stceq	0, cr0, [r0, #-12]
    15c8:	00000c14 	andeq	r0, r0, r4, lsl ip
    15cc:	008fb103 	addeq	fp, pc, r3, lsl #2
    15d0:	0d000000 	stceq	0, cr0, [r0, #-0]
    15d4:	00000bc6 	andeq	r0, r0, r6, asr #23
    15d8:	006fb203 	rsbeq	fp, pc, r3, lsl #4
    15dc:	0d040000 	stceq	0, cr0, [r4, #-0]
    15e0:	00000b9a 	muleq	r0, sl, fp
    15e4:	006fb303 	rsbeq	fp, pc, r3, lsl #6
    15e8:	0d080000 	stceq	0, cr0, [r8, #-0]
    15ec:	00000bda 	ldrdeq	r0, [r0], -sl
    15f0:	006fb403 	rsbeq	fp, pc, r3, lsl #8
    15f4:	0c0c0000 	stceq	0, cr0, [ip], {-0}
    15f8:	00524353 	subseq	r4, r2, r3, asr r3
    15fc:	006fb503 	rsbeq	fp, pc, r3, lsl #10
    1600:	0c100000 	ldceq	0, cr0, [r0], {-0}
    1604:	00524343 	subseq	r4, r2, r3, asr #6
    1608:	006fb603 	rsbeq	fp, pc, r3, lsl #12
    160c:	0d140000 	ldceq	0, cr0, [r4, #-0]
    1610:	00000cb4 			; <UNDEFINED> instruction: 0x00000cb4
    1614:	035bb703 	cmpeq	fp, #786432	; 0xc0000
    1618:	0d180000 	ldceq	0, cr0, [r8, #-0]
    161c:	00000c52 	andeq	r0, r0, r2, asr ip
    1620:	006fb803 	rsbeq	fp, pc, r3, lsl #16
    1624:	0d240000 	stceq	0, cr0, [r4, #-0]
    1628:	00000bf7 	strdeq	r0, [r0], -r7
    162c:	006fb903 	rsbeq	fp, pc, r3, lsl #18
    1630:	0d280000 	stceq	0, cr0, [r8, #-0]
    1634:	00000d1f 	andeq	r0, r0, pc, lsl sp
    1638:	006fba03 	rsbeq	fp, pc, r3, lsl #20
    163c:	0d2c0000 	stceq	0, cr0, [ip, #-0]
    1640:	00000c24 	andeq	r0, r0, r4, lsr #24
    1644:	006fbb03 	rsbeq	fp, pc, r3, lsl #22
    1648:	0d300000 	ldceq	0, cr0, [r0, #-0]
    164c:	00000be0 	andeq	r0, r0, r0, ror #23
    1650:	006fbc03 	rsbeq	fp, pc, r3, lsl #24
    1654:	0d340000 	ldceq	0, cr0, [r4, #-0]
    1658:	00000b75 	andeq	r0, r0, r5, ror fp
    165c:	006fbd03 	rsbeq	fp, pc, r3, lsl #26
    1660:	0d380000 	ldceq	0, cr0, [r8, #-0]
    1664:	00000c76 	andeq	r0, r0, r6, ror ip
    1668:	006fbe03 	rsbeq	fp, pc, r3, lsl #28
    166c:	003c0000 	eorseq	r0, ip, r0
    1670:	00006f11 	andeq	r6, r0, r1, lsl pc
    1674:	00035b00 	andeq	r5, r3, r0, lsl #22
    1678:	01f61200 	mvnseq	r1, r0, lsl #4
    167c:	00020000 	andeq	r0, r2, r0
    1680:	00034b05 	andeq	r4, r3, r5, lsl #22
    1684:	0d130400 	cfldrseq	mvf0, [r3, #-0]
    1688:	bf030000 	svclt	0x00030000
    168c:	0000029a 	muleq	r0, sl, r2
    1690:	000bed13 	andeq	lr, fp, r3, lsl sp
    1694:	012d0100 	teqeq	sp, r0, lsl #2
    1698:	056c1401 	strbeq	r1, [ip, #-1025]!	; 0x401
    169c:	2d010000 	stccs	0, cr0, [r1, #-0]
    16a0:	0003a201 	andeq	sl, r3, r1, lsl #4
    16a4:	0cb91500 	cfldr32eq	mvfx1, [r9]
    16a8:	2d010000 	stccs	0, cr0, [r1, #-0]
    16ac:	0000003a 	andeq	r0, r0, sl, lsr r0
    16b0:	6e697016 	mcrvs	0, 3, r7, cr9, cr6, {0}
    16b4:	5e2d0100 	sufple	f0, f5, f0
    16b8:	16000000 	strne	r0, [r0], -r0
    16bc:	006c6176 	rsbeq	r6, ip, r6, ror r1
    16c0:	005e2d01 	subseq	r2, lr, r1, lsl #26
    16c4:	17000000 	strne	r0, [r0, -r0]
    16c8:	00000374 	andeq	r0, r0, r4, ror r3
    16cc:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
    16d0:	00000016 	andeq	r0, r0, r6, lsl r0
    16d4:	03cf9c01 	biceq	r9, pc, #256	; 0x100
    16d8:	80180000 	andshi	r0, r8, r0
    16dc:	01000003 	tsteq	r0, r3
    16e0:	038b1950 	orreq	r1, fp, #80, 18	; 0x140000
    16e4:	029d0000 	addseq	r0, sp, #0
    16e8:	96190000 	ldrls	r0, [r9], -r0
    16ec:	be000003 	cdplt	0, 0, cr0, cr0, cr3, {0}
    16f0:	00000002 	andeq	r0, r0, r2
    16f4:	000b1e1a 	andeq	r1, fp, sl, lsl lr
    16f8:	b4320100 	ldrtlt	r0, [r2], #-256	; 0x100
    16fc:	00000000 	andeq	r0, r0, r0
    1700:	12000000 	andne	r0, r0, #0
    1704:	01000000 	mrseq	r0, (UNDEF: 0)
    1708:	0004079c 	muleq	r4, ip, r7
    170c:	0cb91b00 	vldmiaeq	r9!, {d1-d0}
    1710:	32010000 	andcc	r0, r1, #0
    1714:	0000003a 	andeq	r0, r0, sl, lsr r0
    1718:	000002f4 	strdeq	r0, [r0], -r4
    171c:	6e69701c 	mcrvs	0, 3, r7, cr9, cr12, {0}
    1720:	5e320100 	rsfpls	f0, f2, f0
    1724:	15000000 	strne	r0, [r0, #-0]
    1728:	00000003 	andeq	r0, r0, r3
    172c:	000a801d 	andeq	r8, sl, sp, lsl r0
    1730:	b43b0100 	ldrtlt	r0, [fp], #-256	; 0x100
    1734:	f4000000 	vst4.8	{d0-d3}, [r0], r0
    1738:	10080006 	andne	r0, r8, r6
    173c:	01000000 	mrseq	r0, (UNDEF: 0)
    1740:	0004309c 	muleq	r4, ip, r0
    1744:	0b471e00 	bleq	11c8f4c <__Stack_Size+0x11c8b4c>
    1748:	3d010000 	stccc	0, cr0, [r1, #-0]
    174c:	000000b4 	strheq	r0, [r0], -r4
    1750:	00000336 	andeq	r0, r0, r6, lsr r3
    1754:	0aeb1f00 	beq	ffac935c <BootRAM+0xea39afd>
    1758:	4c010000 	stcmi	0, cr0, [r1], {-0}
    175c:	08000704 	stmdaeq	r0, {r2, r8, r9, sl}
    1760:	00000050 	andeq	r0, r0, r0, asr r0
    1764:	04f99c01 	ldrbteq	r9, [r9], #3073	; 0xc01
    1768:	b91b0000 	ldmdblt	fp, {}	; <UNPREDICTABLE>
    176c:	0100000c 	tsteq	r0, ip
    1770:	00003a4c 	andeq	r3, r0, ip, asr #20
    1774:	00035d00 	andeq	r5, r3, r0, lsl #26
    1778:	69701c00 	ldmdbvs	r0!, {sl, fp, ip}^
    177c:	4c01006e 	stcmi	0, cr0, [r1], {110}	; 0x6e
    1780:	0000005e 	andeq	r0, r0, lr, asr r0
    1784:	0000037b 	andeq	r0, r0, fp, ror r3
    1788:	000ae51b 	andeq	lr, sl, fp, lsl r5
    178c:	5e4c0100 	dvfple	f0, f4, f0
    1790:	9c000000 	stcls	0, cr0, [r0], {-0}
    1794:	1b000003 	blne	17a8 <__Stack_Size+0x13a8>
    1798:	00000b36 	andeq	r0, r0, r6, lsr fp
    179c:	003a4c01 	eorseq	r4, sl, r1, lsl #24
    17a0:	03e40000 	mvneq	r0, #0
    17a4:	88200000 	stmdahi	r0!, {}	; <UNPREDICTABLE>
    17a8:	0100000a 	tsteq	r0, sl
    17ac:	00005e4c 	andeq	r5, r0, ip, asr #28
    17b0:	00910200 	addseq	r0, r1, r0, lsl #4
    17b4:	01006321 	tsteq	r0, r1, lsr #6
    17b8:	00003a50 	andeq	r3, r0, r0, asr sl
    17bc:	00040200 	andeq	r0, r4, r0, lsl #4
    17c0:	07202200 	streq	r2, [r0, -r0, lsl #4]!
    17c4:	03740800 	cmneq	r4, #0, 16
    17c8:	04bc0000 	ldrteq	r0, [ip], #0
    17cc:	01230000 	teqeq	r3, r0
    17d0:	00770252 	rsbseq	r0, r7, r2, asr r2
    17d4:	02510123 	subseq	r0, r1, #-1073741816	; 0xc0000008
    17d8:	01230079 	teqeq	r3, r9, ror r0
    17dc:	00780250 	rsbseq	r0, r8, r0, asr r2
    17e0:	07362200 	ldreq	r2, [r6, -r0, lsl #4]!
    17e4:	03740800 	cmneq	r4, #0, 16
    17e8:	04dc0000 	ldrbeq	r0, [ip], #0
    17ec:	01230000 	teqeq	r3, r0
    17f0:	007a0252 	rsbseq	r0, sl, r2, asr r2
    17f4:	02510123 	subseq	r0, r1, #-1073741816	; 0xc0000008
    17f8:	01230079 	teqeq	r3, r9, ror r0
    17fc:	00780250 	rsbseq	r0, r8, r0, asr r2
    1800:	074c2400 	strbeq	r2, [ip, -r0, lsl #8]
    1804:	03740800 	cmneq	r4, #0, 16
    1808:	01230000 	teqeq	r3, r0
    180c:	00770252 	rsbseq	r0, r7, r2, asr r2
    1810:	02510123 	subseq	r0, r1, #-1073741816	; 0xc0000008
    1814:	01230079 	teqeq	r3, r9, ror r0
    1818:	00780250 	rsbseq	r0, r8, r0, asr r2
    181c:	74250000 	strtvc	r0, [r5], #-0
    1820:	0100000a 	tsteq	r0, sl
    1824:	00075462 	andeq	r5, r7, r2, ror #8
    1828:	00004808 	andeq	r4, r0, r8, lsl #16
    182c:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    1830:	00000a9b 	muleq	r0, fp, sl
    1834:	079c6c01 	ldreq	r6, [ip, r1, lsl #24]
    1838:	00600800 	rsbeq	r0, r0, r0, lsl #16
    183c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1840:	00028926 	andeq	r8, r2, r6, lsr #18
    1844:	013c0100 	teqeq	ip, r0, lsl #2
    1848:	00000545 	andeq	r0, r0, r5, asr #10
    184c:	00054501 	andeq	r4, r5, r1, lsl #10
    1850:	69702700 	ldmdbvs	r0!, {r8, r9, sl, sp}^
    1854:	3c01006e 	stccc	0, cr0, [r1], {110}	; 0x6e
    1858:	00054c01 	andeq	r4, r5, r1, lsl #24
    185c:	0bce2800 	bleq	ff38b864 <BootRAM+0xe2fc005>
    1860:	3e010000 	cdpcc	0, 0, cr0, cr1, cr0, {0}
    1864:	00054501 	andeq	r4, r5, r1, lsl #10
    1868:	04020000 	streq	r0, [r2], #-0
    186c:	00038007 	andeq	r8, r3, r7
    1870:	05042900 	streq	r2, [r4, #-2304]	; 0x900
    1874:	00746e69 	rsbseq	r6, r4, r9, ror #28
    1878:	000aa91f 	andeq	sl, sl, pc, lsl r9
    187c:	fc830100 	stc2	1, cr0, [r3], {0}
    1880:	28080007 	stmdacs	r8, {r0, r1, r2}
    1884:	01000000 	mrseq	r0, (UNDEF: 0)
    1888:	00058e9c 	muleq	r5, ip, lr
    188c:	03742a00 	cmneq	r4, #0, 20
    1890:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1894:	01380800 	teqeq	r8, r0, lsl #16
    1898:	89010000 	stmdbhi	r1, {}	; <UNPREDICTABLE>
    189c:	0003962b 	andeq	r9, r3, fp, lsr #12
    18a0:	8b2b0100 	blhi	ac1ca8 <__Stack_Size+0xac18a8>
    18a4:	0e000003 	cdpeq	0, 0, cr0, cr0, cr3, {0}
    18a8:	0003802c 	andeq	r8, r3, ip, lsr #32
    18ac:	01100000 	tsteq	r0, r0
    18b0:	1f000040 	svcne	0x00000040
    18b4:	00000a90 	muleq	r0, r0, sl
    18b8:	08248e01 	stmdaeq	r4!, {r0, r9, sl, fp, pc}
    18bc:	001c0800 	andseq	r0, ip, r0, lsl #16
    18c0:	9c010000 	stcls	0, cr0, [r1], {-0}
    18c4:	000005bd 			; <UNDEFINED> instruction: 0x000005bd
    18c8:	00082c2d 	andeq	r2, r8, sp, lsr #24
    18cc:	00000808 	andeq	r0, r0, r8, lsl #16
    18d0:	0b121e00 	bleq	4890d8 <__Stack_Size+0x488cd8>
    18d4:	91010000 	mrsls	r0, (UNDEF: 1)
    18d8:	0000003a 	andeq	r0, r0, sl, lsr r0
    18dc:	0000042b 	andeq	r0, r0, fp, lsr #8
    18e0:	661a0000 	ldrvs	r0, [sl], -r0
    18e4:	0100000a 	tsteq	r0, sl
    18e8:	0000b49a 	muleq	r0, sl, r4
    18ec:	00084000 	andeq	r4, r8, r0
    18f0:	00001408 	andeq	r1, r0, r8, lsl #8
    18f4:	f49c0100 			; <UNDEFINED> instruction: 0xf49c0100
    18f8:	1b000005 	blne	1914 <__Stack_Size+0x1514>
    18fc:	00000cd0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    1900:	003a9a01 	eorseq	r9, sl, r1, lsl #20
    1904:	043e0000 	ldrteq	r0, [lr], #-0
    1908:	73210000 	teqvc	r1, #0
    190c:	9b010070 	blls	41ad4 <__Stack_Size+0x416d4>
    1910:	0000003a 	andeq	r0, r0, sl, lsr r0
    1914:	0000045f 	andeq	r0, r0, pc, asr r4
    1918:	07171f00 	ldreq	r1, [r7, -r0, lsl #30]
    191c:	be010000 	cdplt	0, 0, cr0, cr1, cr0, {0}
    1920:	08000854 	stmdaeq	r0, {r2, r4, r6, fp}
    1924:	0000006c 	andeq	r0, r0, ip, rrx
    1928:	06829c01 	streq	r9, [r2], r1, lsl #24
    192c:	b6200000 	strtlt	r0, [r0], -r0
    1930:	0100000b 	tsteq	r0, fp
    1934:	000682be 			; <UNDEFINED> instruction: 0x000682be
    1938:	1e500100 	rdfnes	f0, f0, f0
    193c:	00000cec 	andeq	r0, r0, ip, ror #25
    1940:	003abf01 	eorseq	fp, sl, r1, lsl #30
    1944:	04720000 	ldrbteq	r0, [r2], #-0
    1948:	401e0000 	andsmi	r0, lr, r0
    194c:	0100000b 	tsteq	r0, fp
    1950:	00003ac0 	andeq	r3, r0, r0, asr #21
    1954:	0004de00 	andeq	sp, r4, r0, lsl #28
    1958:	0bcb1e00 	bleq	ff2c9160 <BootRAM+0xe239901>
    195c:	c1010000 	mrsgt	r0, (UNDEF: 1)
    1960:	0000003a 	andeq	r0, r0, sl, lsr r0
    1964:	00000513 	andeq	r0, r0, r3, lsl r5
    1968:	000b561e 	andeq	r5, fp, lr, lsl r6
    196c:	3ac20100 	bcc	ff081d74 <BootRAM+0xdff2515>
    1970:	4b000000 	blmi	1978 <__Stack_Size+0x1578>
    1974:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1978:	00000b0b 	andeq	r0, r0, fp, lsl #22
    197c:	003ac301 	eorseq	ip, sl, r1, lsl #6
    1980:	05880000 	streq	r0, [r8]
    1984:	3b2e0000 	blcc	b8198c <__Stack_Size+0xb8158c>
    1988:	0100000b 	tsteq	r0, fp
    198c:	000688c5 	andeq	r8, r6, r5, asr #17
    1990:	83da8000 	bicshi	r8, sl, #0
    1994:	4c2e7e80 	stcmi	14, cr7, [lr], #-512	; 0xfffffe00
    1998:	0100000c 	tsteq	r0, ip
    199c:	00068ec6 	andeq	r8, r6, r6, asr #29
    19a0:	83c28000 	bichi	r8, r2, #0
    19a4:	0a007e80 	beq	213ac <__Stack_Size+0x20fac>
    19a8:	00028f04 	andeq	r8, r2, r4, lsl #30
    19ac:	60040a00 	andvs	r0, r4, r0, lsl #20
    19b0:	0a000003 	beq	19c4 <__Stack_Size+0x15c4>
    19b4:	00024b04 	andeq	r4, r2, r4, lsl #22
    19b8:	0b7a1f00 	bleq	1e895c0 <__Stack_Size+0x1e891c0>
    19bc:	e1010000 	mrs	r0, (UNDEF: 1)
    19c0:	080008c0 	stmdaeq	r0, {r6, r7, fp}
    19c4:	00000024 	andeq	r0, r0, r4, lsr #32
    19c8:	06ba9c01 	ldrteq	r9, [sl], r1, lsl #24
    19cc:	4c2e0000 	stcmi	0, cr0, [lr], #-0
    19d0:	0100000c 	tsteq	r0, ip
    19d4:	00068ee2 	andeq	r8, r6, r2, ror #29
    19d8:	83c28000 	bichi	r8, r2, #0
    19dc:	1f007e80 	svcne	0x00007e80
    19e0:	00000a5b 	andeq	r0, r0, fp, asr sl
    19e4:	08e4a401 	stmiaeq	r4!, {r0, sl, sp, pc}^
    19e8:	002c0800 	eoreq	r0, ip, r0, lsl #16
    19ec:	9c010000 	stcls	0, cr0, [r1], {-0}
    19f0:	0000074c 	andeq	r0, r0, ip, asr #14
    19f4:	000cd01b 	andeq	sp, ip, fp, lsl r0
    19f8:	3aa40100 	bcc	fe901e00 <BootRAM+0xd8725a1>
    19fc:	b6000000 	strlt	r0, [r0], -r0
    1a00:	04000005 	streq	r0, [r0], #-5
    1a04:	00000cc8 	andeq	r0, r0, r8, asr #25
    1a08:	00c0a501 	sbceq	sl, r0, r1, lsl #10
    1a0c:	9f1e0000 	svcls	0x001e0000
    1a10:	0100000b 	tsteq	r0, fp
    1a14:	00003aa7 	andeq	r3, r0, r7, lsr #21
    1a18:	0005e200 	andeq	lr, r5, r0, lsl #4
    1a1c:	0c6e1e00 	stcleq	14, cr1, [lr], #-0
    1a20:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    1a24:	000006de 	ldrdeq	r0, [r0], -lr
    1a28:	000005e2 	andeq	r0, r0, r2, ror #11
    1a2c:	00036b2f 	andeq	r6, r3, pc, lsr #22
    1a30:	0008e600 	andeq	lr, r8, r0, lsl #12
    1a34:	00015008 	andeq	r5, r1, r8
    1a38:	30ad0100 	adccc	r0, sp, r0, lsl #2
    1a3c:	080008f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp}
    1a40:	0000091d 	andeq	r0, r0, sp, lsl r9
    1a44:	0008f830 	andeq	pc, r8, r0, lsr r8	; <UNPREDICTABLE>
    1a48:	00069408 	andeq	r9, r6, r8, lsl #8
    1a4c:	08fc3000 	ldmeq	ip!, {ip, sp}^
    1a50:	09240800 	stmdbeq	r4!, {fp}
    1a54:	00300000 	eorseq	r0, r0, r0
    1a58:	f9080009 			; <UNDEFINED> instruction: 0xf9080009
    1a5c:	30000004 	andcc	r0, r0, r4
    1a60:	08000906 	stmdaeq	r0, {r1, r2, r8, fp}
    1a64:	0000092b 	andeq	r0, r0, fp, lsr #18
    1a68:	00090831 	andeq	r0, r9, r1, lsr r8
    1a6c:	00750208 	rsbseq	r0, r5, r8, lsl #4
    1a70:	0acf1f00 	beq	ff3c9678 <BootRAM+0xe339e19>
    1a74:	eb010000 	bl	41a7c <__Stack_Size+0x4167c>
    1a78:	08000910 	stmdaeq	r0, {r4, r8, fp}
    1a7c:	00000014 	andeq	r0, r0, r4, lsl r0
    1a80:	07729c01 	ldrbeq	r9, [r2, -r1, lsl #24]!
    1a84:	3b2e0000 	blcc	b81a8c <__Stack_Size+0xb8168c>
    1a88:	0100000b 	tsteq	r0, fp
    1a8c:	000688ec 	andeq	r8, r6, ip, ror #17
    1a90:	83da8000 	bicshi	r8, sl, #0
    1a94:	1a007e80 	bne	2149c <__Stack_Size+0x2109c>
    1a98:	00000cd8 	ldrdeq	r0, [r0], -r8
    1a9c:	00b4f701 	adcseq	pc, r4, r1, lsl #14
    1aa0:	09240000 	stmdbeq	r4!, {}	; <UNPREDICTABLE>
    1aa4:	00340800 	eorseq	r0, r4, r0, lsl #16
    1aa8:	9c010000 	stcls	0, cr0, [r1], {-0}
    1aac:	000007aa 	andeq	r0, r0, sl, lsr #15
    1ab0:	000c651b 	andeq	r6, ip, fp, lsl r5
    1ab4:	3af70100 	bcc	ffdc1ebc <BootRAM+0xed3265d>
    1ab8:	f5000000 			; <UNDEFINED> instruction: 0xf5000000
    1abc:	1e000005 	cdpne	0, 0, cr0, cr0, cr5, {0}
    1ac0:	00000b12 	andeq	r0, r0, r2, lsl fp
    1ac4:	003af801 	eorseq	pc, sl, r1, lsl #16
    1ac8:	06160000 	ldreq	r0, [r6], -r0
    1acc:	32000000 	andcc	r0, r0, #0
    1ad0:	00000b26 	andeq	r0, r0, r6, lsr #22
    1ad4:	b4010801 	strlt	r0, [r1], #-2049	; 0x801
    1ad8:	00000000 	andeq	r0, r0, r0
    1adc:	30000000 	andcc	r0, r0, r0
    1ae0:	01000000 	mrseq	r0, (UNDEF: 0)
    1ae4:	0007ec9c 	muleq	r7, ip, ip
    1ae8:	0c653300 	stcleq	3, cr3, [r5], #-0
    1aec:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    1af0:	00003a01 	andeq	r3, r0, r1, lsl #20
    1af4:	00063600 	andeq	r3, r6, r0, lsl #12
    1af8:	006e3400 	rsbeq	r3, lr, r0, lsl #8
    1afc:	4c010801 	stcmi	8, cr0, [r1], {1}
    1b00:	62000000 	andvs	r0, r0, #0
    1b04:	30000006 	andcc	r0, r0, r6
    1b08:	00000000 	andeq	r0, r0, r0
    1b0c:	00000772 	andeq	r0, r0, r2, ror r7
    1b10:	0c9b3200 	lfmeq	f3, 4, [fp], {0}
    1b14:	12010000 	andne	r0, r1, #0
    1b18:	0000b401 	andeq	fp, r0, r1, lsl #8
    1b1c:	00095800 	andeq	r5, r9, r0, lsl #16
    1b20:	00004c08 	andeq	r4, r0, r8, lsl #24
    1b24:	639c0100 	orrsvs	r0, ip, #0, 2
    1b28:	33000008 	movwcc	r0, #8
    1b2c:	00000c47 	andeq	r0, r0, r7, asr #24
    1b30:	3a011201 	bcc	4633c <__Stack_Size+0x45f3c>
    1b34:	a6000000 	strge	r0, [r0], -r0
    1b38:	35000006 	strcc	r0, [r0, #-6]
    1b3c:	00000c01 	andeq	r0, r0, r1, lsl #24
    1b40:	3a011201 	bcc	4634c <__Stack_Size+0x45f4c>
    1b44:	01000000 	mrseq	r0, (UNDEF: 0)
    1b48:	0cbe3651 	ldceq	6, cr3, [lr], #324	; 0x144
    1b4c:	13010000 	movwne	r0, #4096	; 0x1000
    1b50:	00086301 	andeq	r6, r8, r1, lsl #6
    1b54:	0006a600 	andeq	sl, r6, r0, lsl #12
    1b58:	0be63700 	bleq	ff98f760 <BootRAM+0xe8fff01>
    1b5c:	14010000 	strne	r0, [r1], #-0
    1b60:	00006f01 	andeq	r6, r0, r1, lsl #30
    1b64:	68910200 	ldmvs	r1, {r9}
    1b68:	000cf837 	andeq	pc, ip, r7, lsr r8	; <UNPREDICTABLE>
    1b6c:	01150100 	tsteq	r5, r0, lsl #2
    1b70:	0000006f 	andeq	r0, r0, pc, rrx
    1b74:	366c9102 	strbtcc	r9, [ip], -r2, lsl #2
    1b78:	00000b12 	andeq	r0, r0, r2, lsl fp
    1b7c:	3a011701 	bcc	47788 <__Stack_Size+0x47388>
    1b80:	c7000000 	strgt	r0, [r0, -r0]
    1b84:	00000006 	andeq	r0, r0, r6
    1b88:	007f040a 	rsbseq	r0, pc, sl, lsl #8
    1b8c:	6b380000 	blvs	e01b94 <__Stack_Size+0xe01794>
    1b90:	a4000003 	strge	r0, [r0], #-3
    1b94:	0c080009 	stceq	0, cr0, [r8], {9}
    1b98:	01000000 	mrseq	r0, (UNDEF: 0)
    1b9c:	0b5d399c 	bleq	1750214 <__Stack_Size+0x174fe14>
    1ba0:	34010000 	strcc	r0, [r1], #-0
    1ba4:	0009b001 	andeq	fp, r9, r1
    1ba8:	00001808 	andeq	r1, r0, r8, lsl #16
    1bac:	179c0100 	ldrne	r0, [ip, r0, lsl #2]
    1bb0:	0000051b 	andeq	r0, r0, fp, lsl r5
    1bb4:	080009c8 	stmdaeq	r0, {r3, r6, r7, r8, fp}
    1bb8:	00000012 	andeq	r0, r0, r2, lsl r0
    1bbc:	08b09c01 	ldmeq	r0!, {r0, sl, fp, ip, pc}
    1bc0:	2c190000 	ldccs	0, cr0, [r9], {-0}
    1bc4:	e5000005 	str	r0, [r0, #-5]
    1bc8:	3a000006 	bcc	1be8 <__Stack_Size+0x17e8>
    1bcc:	00000538 	andeq	r0, r0, r8, lsr r5
    1bd0:	00000703 	andeq	r0, r0, r3, lsl #14
    1bd4:	0b693200 	bleq	1a4e3dc <__Stack_Size+0x1a4dfdc>
    1bd8:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    1bdc:	00054c01 	andeq	r4, r5, r1, lsl #24
    1be0:	0009dc00 	andeq	sp, r9, r0, lsl #24
    1be4:	00001008 	andeq	r1, r0, r8
    1be8:	db9c0100 	blle	fe701ff0 <BootRAM+0xd672791>
    1bec:	3b000008 	blcc	1c14 <__Stack_Size+0x1814>
    1bf0:	00000caa 	andeq	r0, r0, sl, lsr #25
    1bf4:	db014a01 	blle	54400 <__Stack_Size+0x54000>
    1bf8:	e0000008 	and	r0, r0, r8
    1bfc:	001ffff7 			; <UNDEFINED> instruction: 0x001ffff7
    1c00:	0057040a 	subseq	r0, r7, sl, lsl #8
    1c04:	c4320000 	ldrtgt	r0, [r2], #-0
    1c08:	01000002 	tsteq	r0, r2
    1c0c:	054c014e 	strbeq	r0, [ip, #-334]	; 0x14e
    1c10:	09ec0000 	stmibeq	ip!, {}^	; <UNPREDICTABLE>
    1c14:	00180800 	andseq	r0, r8, r0, lsl #16
    1c18:	9c010000 	stcls	0, cr0, [r1], {-0}
    1c1c:	0000090c 	andeq	r0, r0, ip, lsl #18
    1c20:	000caa3b 	andeq	sl, ip, fp, lsr sl
    1c24:	01510100 	cmpeq	r1, r0, lsl #2
    1c28:	000008db 	ldrdeq	r0, [r0], -fp
    1c2c:	1ffff7e0 	svcne	0x00fff7e0
    1c30:	04383c00 	ldrteq	r3, [r8], #-3072	; 0xc00
    1c34:	2c040000 	stccs	0, cr0, [r4], {-0}
    1c38:	0000054c 	andeq	r0, r0, ip, asr #10
    1c3c:	02c80305 	sbceq	r0, r8, #335544320	; 0x14000000
    1c40:	cd3d2000 	ldcgt	0, cr2, [sp, #-0]
    1c44:	04000003 	streq	r0, [r0], #-3
    1c48:	07e23d80 	strbeq	r3, [r2, r0, lsl #27]!
    1c4c:	52040000 	andpl	r0, r4, #0
    1c50:	000b903e 	andeq	r9, fp, lr, lsr r0
    1c54:	3f270500 	svccc	0x00270500
    1c58:	0000003a 	andeq	r0, r0, sl, lsr r0
    1c5c:	06550000 	ldrbeq	r0, [r5], -r0
    1c60:	00040000 	andeq	r0, r4, r0
    1c64:	00000911 	andeq	r0, r0, r1, lsl r9
    1c68:	01580104 	cmpeq	r8, r4, lsl #2
    1c6c:	37010000 	strcc	r0, [r1, -r0]
    1c70:	2600000d 	strcs	r0, [r0], -sp
    1c74:	18000009 	stmdane	r0, {r0, r3}
    1c78:	00000002 	andeq	r0, r0, r2
    1c7c:	79000000 	stmdbvc	r0, {}	; <UNPREDICTABLE>
    1c80:	02000008 	andeq	r0, r0, #8
    1c84:	01f60504 	mvnseq	r0, r4, lsl #10
    1c88:	02020000 	andeq	r0, r2, #0
    1c8c:	0006a505 	andeq	sl, r6, r5, lsl #10
    1c90:	06010200 	streq	r0, [r1], -r0, lsl #4
    1c94:	00000651 	andeq	r0, r0, r1, asr r6
    1c98:	32337503 	eorscc	r7, r3, #12582912	; 0xc00000
    1c9c:	45270200 	strmi	r0, [r7, #-512]!	; 0x200
    1ca0:	02000000 	andeq	r0, r0, #0
    1ca4:	037b0704 	cmneq	fp, #4, 14	; 0x100000
    1ca8:	75030000 	strvc	r0, [r3, #-0]
    1cac:	02003631 	andeq	r3, r0, #51380224	; 0x3100000
    1cb0:	00005728 	andeq	r5, r0, r8, lsr #14
    1cb4:	07020200 	streq	r0, [r2, -r0, lsl #4]
    1cb8:	000003d7 	ldrdeq	r0, [r0], -r7
    1cbc:	00387503 	eorseq	r7, r8, r3, lsl #10
    1cc0:	00682902 	rsbeq	r2, r8, r2, lsl #18
    1cc4:	01020000 	mrseq	r0, (UNDEF: 2)
    1cc8:	00064f08 	andeq	r4, r6, r8, lsl #30
    1ccc:	02010400 	andeq	r0, r1, #0, 8
    1cd0:	00008437 	andeq	r8, r0, r7, lsr r4
    1cd4:	05dc0500 	ldrbeq	r0, [ip, #1280]	; 0x500
    1cd8:	05000000 	streq	r0, [r0, #-0]
    1cdc:	0000074a 	andeq	r0, r0, sl, asr #14
    1ce0:	33060001 	movwcc	r0, #24577	; 0x6001
    1ce4:	02000004 	andeq	r0, r0, #4
    1ce8:	00006f37 	andeq	r6, r0, r7, lsr pc
    1cec:	5e040700 	cdppl	7, 0, cr0, cr4, cr0, {0}
    1cf0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    1cf4:	000008f8 	strdeq	r0, [r0], -r8
    1cf8:	d238030c 	eorsle	r0, r8, #12, 6	; 0x30000000
    1cfc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d00:	00000290 	muleq	r0, r0, r2
    1d04:	004c5003 	subeq	r5, ip, r3
    1d08:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1d0c:	00000319 	andeq	r0, r0, r9, lsl r3
    1d10:	004c5103 	subeq	r5, ip, r3, lsl #2
    1d14:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1d18:	000014f9 	strdeq	r1, [r0], -r9
    1d1c:	004c5203 	subeq	r5, ip, r3, lsl #4
    1d20:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1d24:	000000e3 	andeq	r0, r0, r3, ror #1
    1d28:	00e15303 	rsceq	r5, r1, r3, lsl #6
    1d2c:	00080000 	andeq	r0, r8, r0
    1d30:	00008f0a 	andeq	r8, r0, sl, lsl #30
    1d34:	0000e100 	andeq	lr, r0, r0, lsl #2
    1d38:	004c0b00 	subeq	r0, ip, r0, lsl #22
    1d3c:	07000000 	streq	r0, [r0, -r0]
    1d40:	0000d204 	andeq	sp, r0, r4, lsl #4
    1d44:	08f90600 	ldmeq	r9!, {r9, sl}^
    1d48:	54030000 	strpl	r0, [r3], #-0
    1d4c:	00000095 	muleq	r0, r5, r0
    1d50:	0057420c 	subseq	r4, r7, ip, lsl #4
    1d54:	16620302 	strbtne	r0, [r2], -r2, lsl #6
    1d58:	0d000001 	stceq	0, cr0, [r0, #-4]
    1d5c:	00306262 	eorseq	r6, r0, r2, ror #4
    1d60:	005e6503 	subseq	r6, lr, r3, lsl #10
    1d64:	0d000000 	stceq	0, cr0, [r0, #-0]
    1d68:	00316262 	eorseq	r6, r1, r2, ror #4
    1d6c:	005e6603 	subseq	r6, lr, r3, lsl #12
    1d70:	00010000 	andeq	r0, r1, r0
    1d74:	5f03020e 	svcpl	0x0003020e
    1d78:	00000132 	andeq	r0, r0, r2, lsr r1
    1d7c:	0300770f 	movweq	r7, #1807	; 0x70f
    1d80:	00004c61 	andeq	r4, r0, r1, ror #24
    1d84:	77620f00 	strbvc	r0, [r2, -r0, lsl #30]!
    1d88:	f2680300 	vcgt.s32	d16, d8, d0
    1d8c:	00000000 	andeq	r0, r0, r0
    1d90:	0003ff06 	andeq	pc, r3, r6, lsl #30
    1d94:	16690300 	strbtne	r0, [r9], -r0, lsl #6
    1d98:	08000001 	stmdaeq	r0, {r0}
    1d9c:	0000003c 	andeq	r0, r0, ip, lsr r0
    1da0:	ce6b031c 	mcrgt	3, 3, r0, cr11, cr12, {0}
    1da4:	09000001 	stmdbeq	r0, {r0}
    1da8:	00000550 	andeq	r0, r0, r0, asr r5
    1dac:	005e6d03 	subseq	r6, lr, r3, lsl #26
    1db0:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    1db4:	00000216 	andeq	r0, r0, r6, lsl r2
    1db8:	005e6e03 	subseq	r6, lr, r3, lsl #28
    1dbc:	09010000 	stmdbeq	r1, {}	; <UNPREDICTABLE>
    1dc0:	00000418 	andeq	r0, r0, r8, lsl r4
    1dc4:	01326f03 	teqeq	r2, r3, lsl #30
    1dc8:	09020000 	stmdbeq	r2, {}	; <UNPREDICTABLE>
    1dcc:	00000148 	andeq	r0, r0, r8, asr #2
    1dd0:	01327003 	teqeq	r2, r3
    1dd4:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    1dd8:	0000081a 	andeq	r0, r0, sl, lsl r8
    1ddc:	01327103 	teqeq	r2, r3, lsl #2
    1de0:	09060000 	stmdbeq	r6, {}	; <UNPREDICTABLE>
    1de4:	000005cf 	andeq	r0, r0, pc, asr #11
    1de8:	005e7303 	subseq	r7, lr, r3, lsl #6
    1dec:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    1df0:	000003a0 	andeq	r0, r0, r0, lsr #7
    1df4:	005e7403 	subseq	r7, lr, r3, lsl #8
    1df8:	09090000 	stmdbeq	r9, {}	; <UNPREDICTABLE>
    1dfc:	000004a1 	andeq	r0, r0, r1, lsr #9
    1e00:	005e7503 	subseq	r7, lr, r3, lsl #10
    1e04:	090a0000 	stmdbeq	sl, {}	; <UNPREDICTABLE>
    1e08:	0000086f 	andeq	r0, r0, pc, ror #16
    1e0c:	005e7603 	subseq	r7, lr, r3, lsl #12
    1e10:	090b0000 	stmdbeq	fp, {}	; <UNPREDICTABLE>
    1e14:	00000629 	andeq	r0, r0, r9, lsr #12
    1e18:	005e7703 	subseq	r7, lr, r3, lsl #14
    1e1c:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    1e20:	00000720 	andeq	r0, r0, r0, lsr #14
    1e24:	00e77a03 	rsceq	r7, r7, r3, lsl #20
    1e28:	00100000 	andseq	r0, r0, r0
    1e2c:	00003d06 	andeq	r3, r0, r6, lsl #26
    1e30:	3d7b0300 	ldclcc	3, cr0, [fp, #-0]
    1e34:	02000001 	andeq	r0, r0, #1
    1e38:	05150704 	ldreq	r0, [r5, #-1796]	; 0x704
    1e3c:	01040000 	mrseq	r0, (UNDEF: 4)
    1e40:	02012304 	andeq	r2, r1, #4, 6	; 0x10000000
    1e44:	a2050000 	andge	r0, r5, #0
    1e48:	0000000d 	andeq	r0, r0, sp
    1e4c:	000ebd05 	andeq	fp, lr, r5, lsl #26
    1e50:	43050100 	movwmi	r0, #20736	; 0x5100
    1e54:	0200000d 	andeq	r0, r0, #13
    1e58:	000e2e05 	andeq	r2, lr, r5, lsl #28
    1e5c:	06000300 	streq	r0, [r0], -r0, lsl #6
    1e60:	00000e52 	andeq	r0, r0, r2, asr lr
    1e64:	01e02304 	mvneq	r2, r4, lsl #6
    1e68:	5e080000 	cdppl	0, 0, cr0, cr8, cr0, {0}
    1e6c:	0600000d 	streq	r0, [r0], -sp
    1e70:	02612904 	rsbeq	r2, r1, #4, 18	; 0x10000
    1e74:	eb090000 	bl	241e7c <__Stack_Size+0x241a7c>
    1e78:	0400000e 	streq	r0, [r0], #-14
    1e7c:	00005e2a 	andeq	r5, r0, sl, lsr #28
    1e80:	75090000 	strvc	r0, [r9, #-0]
    1e84:	0400000d 	streq	r0, [r0], #-13
    1e88:	00005e2b 	andeq	r5, r0, fp, lsr #28
    1e8c:	84090100 	strhi	r0, [r9], #-256	; 0x100
    1e90:	0400000d 	streq	r0, [r0], #-13
    1e94:	00005e2c 	andeq	r5, r0, ip, lsr #28
    1e98:	93090200 	movwls	r0, #37376	; 0x9200
    1e9c:	0400000d 	streq	r0, [r0], #-13
    1ea0:	00005e2d 	andeq	r5, r0, sp, lsr #28
    1ea4:	a4090300 	strge	r0, [r9], #-768	; 0x300
    1ea8:	0400000e 	streq	r0, [r0], #-14
    1eac:	00005e2e 	andeq	r5, r0, lr, lsr #28
    1eb0:	24090400 	strcs	r0, [r9], #-1024	; 0x400
    1eb4:	0400000d 	streq	r0, [r0], #-13
    1eb8:	00005e2f 	andeq	r5, r0, pc, lsr #28
    1ebc:	06000500 	streq	r0, [r0], -r0, lsl #10
    1ec0:	00000d5f 	andeq	r0, r0, pc, asr sp
    1ec4:	020c3004 	andeq	r3, ip, #4
    1ec8:	3d100000 	ldccc	0, cr0, [r0, #-0]
    1ecc:	0100000d 	tsteq	r0, sp
    1ed0:	02913204 	addseq	r3, r1, #4, 4	; 0x40000000
    1ed4:	cc050000 	stcgt	0, cr0, [r5], {-0}
    1ed8:	0000000e 	andeq	r0, r0, lr
    1edc:	000eff05 	andeq	pc, lr, r5, lsl #30
    1ee0:	45110100 	ldrmi	r0, [r1, #-256]	; 0x100
    1ee4:	0200444e 	andeq	r4, r0, #1308622848	; 0x4e000000
    1ee8:	00006705 	andeq	r6, r0, r5, lsl #14
    1eec:	06000300 	streq	r0, [r0], -r0, lsl #6
    1ef0:	00000d3e 	andeq	r0, r0, lr, lsr sp
    1ef4:	026c3704 	rsbeq	r3, ip, #4, 14	; 0x100000
    1ef8:	84120000 	ldrhi	r0, [r2], #-0
    1efc:	01000000 	mrseq	r0, (UNDEF: 0)
    1f00:	000a0438 	andeq	r0, sl, r8, lsr r4
    1f04:	00005c08 	andeq	r5, r0, r8, lsl #24
    1f08:	139c0100 	orrsne	r0, ip, #0, 2
    1f0c:	00000504 	andeq	r0, r0, r4, lsl #10
    1f10:	60015601 	andvs	r5, r1, r1, lsl #12
    1f14:	4408000a 	strmi	r0, [r8], #-10
    1f18:	01000000 	mrseq	r0, (UNDEF: 0)
    1f1c:	0002ef9c 	muleq	r2, ip, pc	; <UNPREDICTABLE>
    1f20:	0eb21400 	cdpeq	4, 11, cr1, cr2, cr0, {0}
    1f24:	57010000 	strpl	r0, [r1, -r0]
    1f28:	00005e01 	andeq	r5, r0, r1, lsl #28
    1f2c:	00073500 	andeq	r3, r7, r0, lsl #10
    1f30:	0a7c1500 	beq	1f07338 <__Stack_Size+0x1f06f38>
    1f34:	05f40800 	ldrbeq	r0, [r4, #2048]!	; 0x800
    1f38:	84160000 	ldrhi	r0, [r6], #-0
    1f3c:	fb08000a 	blx	201f6e <__Stack_Size+0x201b6e>
    1f40:	16000005 	strne	r0, [r0], -r5
    1f44:	08000a98 	stmdaeq	r0, {r3, r4, r7, r9, fp}
    1f48:	00000602 	andeq	r0, r0, r2, lsl #12
    1f4c:	0e1b1700 	cdpeq	7, 1, cr1, cr11, cr0, {0}
    1f50:	6e010000 	cdpvs	0, 0, cr0, cr1, cr0, {0}
    1f54:	00000001 	andeq	r0, r0, r1
    1f58:	00000200 	andeq	r0, r0, r0, lsl #4
    1f5c:	189c0100 	ldmne	ip, {r8}
    1f60:	00000e00 	andeq	r0, r0, r0, lsl #28
    1f64:	8f017101 	svchi	0x00017101
    1f68:	a4000000 	strge	r0, [r0], #-0
    1f6c:	1808000a 	stmdane	r8, {r1, r3}
    1f70:	01000000 	mrseq	r0, (UNDEF: 0)
    1f74:	00032c9c 	muleq	r3, ip, ip
    1f78:	0eab1900 	cdpeq	9, 10, cr1, cr11, cr0, {0}
    1f7c:	71010000 	mrsvc	r0, (UNDEF: 1)
    1f80:	00004c01 	andeq	r4, r0, r1, lsl #24
    1f84:	00075e00 	andeq	r5, r7, r0, lsl #28
    1f88:	e3180000 	tst	r8, #0
    1f8c:	0100000d 	tsteq	r0, sp
    1f90:	008f017a 	addeq	r0, pc, sl, ror r1	; <UNPREDICTABLE>
    1f94:	0abc0000 	beq	fef01f9c <BootRAM+0xde7273d>
    1f98:	00180800 	andseq	r0, r8, r0, lsl #16
    1f9c:	9c010000 	stcls	0, cr0, [r1], {-0}
    1fa0:	00000357 	andeq	r0, r0, r7, asr r3
    1fa4:	000eab19 	andeq	sl, lr, r9, lsl fp
    1fa8:	017a0100 	cmneq	sl, r0, lsl #2
    1fac:	0000004c 	andeq	r0, r0, ip, asr #32
    1fb0:	0000077f 	andeq	r0, r0, pc, ror r7
    1fb4:	0e0d1800 	cdpeq	8, 0, cr1, cr13, cr0, {0}
    1fb8:	84010000 	strhi	r0, [r1], #-0
    1fbc:	00008f01 	andeq	r8, r0, r1, lsl #30
    1fc0:	000ad400 	andeq	sp, sl, r0, lsl #8
    1fc4:	00002808 	andeq	r2, r0, r8, lsl #16
    1fc8:	829c0100 	addshi	r0, ip, #0, 2
    1fcc:	19000003 	stmdbne	r0, {r0, r1}
    1fd0:	00000eab 	andeq	r0, r0, fp, lsr #29
    1fd4:	4c018401 	cfstrsmi	mvf8, [r1], {1}
    1fd8:	a0000000 	andge	r0, r0, r0
    1fdc:	00000007 	andeq	r0, r0, r7
    1fe0:	000db218 	andeq	fp, sp, r8, lsl r2
    1fe4:	018e0100 	orreq	r0, lr, r0, lsl #2
    1fe8:	0000008f 	andeq	r0, r0, pc, lsl #1
    1fec:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
    1ff0:	00000034 	andeq	r0, r0, r4, lsr r0
    1ff4:	03ad9c01 			; <UNDEFINED> instruction: 0x03ad9c01
    1ff8:	ab190000 	blge	642000 <__Stack_Size+0x641c00>
    1ffc:	0100000e 	tsteq	r0, lr
    2000:	004c018e 	subeq	r0, ip, lr, lsl #3
    2004:	07c10000 	strbeq	r0, [r1, r0]
    2008:	13000000 	movwne	r0, #0
    200c:	00000dcf 	andeq	r0, r0, pc, asr #27
    2010:	30019701 	andcc	r9, r1, r1, lsl #14
    2014:	5c08000b 	stcpl	0, cr0, [r8], {11}
    2018:	01000000 	mrseq	r0, (UNDEF: 0)
    201c:	0004059c 	muleq	r4, ip, r5
    2020:	00691a00 	rsbeq	r1, r9, r0, lsl #20
    2024:	05019801 	streq	r9, [r1, #-2049]	; 0x801
    2028:	e2000004 	and	r0, r0, #4
    202c:	1b000007 	blne	2050 <__Stack_Size+0x1c50>
    2030:	00000ed6 	ldrdeq	r0, [r0], -r6
    2034:	0c019901 	stceq	9, cr9, [r1], {1}
    2038:	1c000004 	stcne	0, cr0, [r0], {4}
    203c:	08000b50 	stmdaeq	r0, {r4, r6, r8, r9, fp}
    2040:	00000609 	andeq	r0, r0, r9, lsl #12
    2044:	000003f1 	strdeq	r0, [r0], -r1
    2048:	0250011d 	subseq	r0, r0, #1073741831	; 0x40000007
    204c:	1e000074 	mcrne	0, 0, r0, cr0, cr4, {3}
    2050:	08000b66 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9, fp}
    2054:	0000061e 	andeq	r0, r0, lr, lsl r6
    2058:	0550011d 	ldrbeq	r0, [r0, #-285]	; 0x11d
    205c:	00750074 	rsbseq	r0, r5, r4, ror r0
    2060:	1f000022 	svcne	0x00000022
    2064:	6e690504 	cdpvs	5, 6, cr0, cr9, cr4, {0}
    2068:	04070074 	streq	r0, [r7], #-116	; 0x74
    206c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2070:	00032520 	andeq	r2, r3, r0, lsr #10
    2074:	844b0100 	strbhi	r0, [fp], #-256	; 0x100
    2078:	8c000000 	stchi	0, cr0, [r0], {-0}
    207c:	3408000b 	strcc	r0, [r8], #-11
    2080:	01000002 	tsteq	r0, r2
    2084:	0004919c 	muleq	r4, ip, r1
    2088:	0eb22100 	frdeqs	f2, f2, f0
    208c:	52010000 	andpl	r0, r1, #0
    2090:	0000005e 	andeq	r0, r0, lr, asr r0
    2094:	00000801 	andeq	r0, r0, r1, lsl #16
    2098:	000bda15 	andeq	sp, fp, r5, lsl sl
    209c:	00063808 	andeq	r3, r6, r8, lsl #16
    20a0:	0bde1500 	bleq	ff7874a8 <BootRAM+0xe6f7c49>
    20a4:	063f0800 	ldrteq	r0, [pc], -r0, lsl #16
    20a8:	ee150000 	cdp	0, 1, cr0, cr5, cr0, {0}
    20ac:	3808000b 	stmdacc	r8, {r0, r1, r3}
    20b0:	15000006 	strne	r0, [r0, #-6]
    20b4:	08000bf2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r8, r9, fp}
    20b8:	0000063f 	andeq	r0, r0, pc, lsr r6
    20bc:	000bf81c 	andeq	pc, fp, ip, lsl r8	; <UNPREDICTABLE>
    20c0:	00060908 	andeq	r0, r6, r8, lsl #18
    20c4:	00047500 	andeq	r7, r4, r0, lsl #10
    20c8:	50011d00 	andpl	r1, r1, r0, lsl #26
    20cc:	20000c05 	andcs	r0, r0, r5, lsl #24
    20d0:	15000800 	strne	r0, [r0, #-2048]	; 0x800
    20d4:	08000c38 	stmdaeq	r0, {r3, r4, r5, sl, fp}
    20d8:	00000646 	andeq	r0, r0, r6, asr #12
    20dc:	000c6815 	andeq	r6, ip, r5, lsl r8
    20e0:	0003ad08 	andeq	sl, r3, r8, lsl #26
    20e4:	0ca41500 	cfstr32eq	mvfx1, [r4]
    20e8:	06510800 	ldrbeq	r0, [r1], -r0, lsl #16
    20ec:	22000000 	andcs	r0, r0, #0
    20f0:	00000f06 	andeq	r0, r0, r6, lsl #30
    20f4:	5e01bf01 	cdppl	15, 0, cr11, cr1, cr1, {0}
    20f8:	00000000 	andeq	r0, r0, r0
    20fc:	0c000000 	stceq	0, cr0, [r0], {-0}
    2100:	01000000 	mrseq	r0, (UNDEF: 0)
    2104:	0ef3139c 	mrceq	3, 7, r1, cr3, cr12, {4}
    2108:	c3010000 	movwgt	r0, #4096	; 0x1000
    210c:	00000001 	andeq	r0, r0, r1
    2110:	00000c00 	andeq	r0, r0, r0, lsl #24
    2114:	cc9c0100 	ldfgts	f0, [ip], {0}
    2118:	23000004 	movwcs	r0, #4
    211c:	00000e49 	andeq	r0, r0, r9, asr #28
    2120:	5e01c301 	cdppl	3, 0, cr12, cr1, cr1, {0}
    2124:	01000000 	mrseq	r0, (UNDEF: 0)
    2128:	f5240050 			; <UNDEFINED> instruction: 0xf5240050
    212c:	0100000a 	tsteq	r0, sl
    2130:	008401c7 	addeq	r0, r4, r7, asr #3
    2134:	0dc00000 	stcleq	0, cr0, [r0]
    2138:	000c0800 	andeq	r0, ip, r0, lsl #16
    213c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2140:	000a4b25 	andeq	r4, sl, r5, lsr #22
    2144:	01cb0100 	biceq	r0, fp, r0, lsl #2
    2148:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
    214c:	00000004 	andeq	r0, r0, r4
    2150:	69269c01 	stmdbvs	r6!, {r0, sl, fp, ip, pc}
    2154:	0100000d 	tsteq	r0, sp
    2158:	00050526 	andeq	r0, r5, r6, lsr #10
    215c:	c4030500 	strgt	r0, [r3], #-1280	; 0x500
    2160:	27200002 	strcs	r0, [r0, -r2]!
    2164:	0000003a 	andeq	r0, r0, sl, lsr r0
    2168:	000ee026 	andeq	lr, lr, r6, lsr #32
    216c:	05270100 	streq	r0, [r7, #-256]!	; 0x100
    2170:	05000005 	streq	r0, [r0, #-5]
    2174:	0002c003 	andeq	ip, r2, r3
    2178:	0e632620 	cdpeq	6, 6, cr2, cr3, cr0, {1}
    217c:	28010000 	stmdacs	r1, {}	; <UNPREDICTABLE>
    2180:	0000052c 	andeq	r0, r0, ip, lsr #10
    2184:	0b1d0305 	bleq	742da0 <__Stack_Size+0x7429a0>
    2188:	61272000 	teqvs	r7, r0
    218c:	28000002 	stmdacs	r0, {r1}
    2190:	0000005e 	andeq	r0, r0, lr, asr r0
    2194:	00000542 	andeq	r0, r0, r2, asr #10
    2198:	0001d929 	andeq	sp, r1, r9, lsr #18
    219c:	0007ff00 	andeq	pc, r7, r0, lsl #30
    21a0:	000d2c26 	andeq	r2, sp, r6, lsr #24
    21a4:	532e0100 	teqpl	lr, #0, 2
    21a8:	05000005 	streq	r0, [r0, #-5]
    21ac:	00031403 	andeq	r1, r3, r3, lsl #8
    21b0:	05312720 	ldreq	r2, [r1, #-1824]!	; 0x720
    21b4:	8c260000 	stchi	0, cr0, [r6], #-0
    21b8:	0100000e 	tsteq	r0, lr
    21bc:	00050530 	andeq	r0, r5, r0, lsr r5
    21c0:	18030500 	stmdane	r3, {r8, sl}
    21c4:	2620000b 	strtcs	r0, [r0], -fp
    21c8:	00000e7f 	andeq	r0, r0, pc, ror lr
    21cc:	057a3101 	ldrbeq	r3, [sl, #-257]!	; 0x101
    21d0:	03050000 	movweq	r0, #20480	; 0x5000
    21d4:	20000b16 	andcs	r0, r0, r6, lsl fp
    21d8:	00004c27 	andeq	r4, r0, r7, lsr #24
    21dc:	0e702600 	cdpeq	6, 7, cr2, cr0, cr0, {0}
    21e0:	32010000 	andcc	r0, r1, #0
    21e4:	0000057a 	andeq	r0, r0, sl, ror r5
    21e8:	0b140305 	bleq	502e04 <__Stack_Size+0x502a04>
    21ec:	7c2a2000 	stcvc	0, cr2, [sl], #-0
    21f0:	05000002 	streq	r0, [r0, #-2]
    21f4:	00059b22 	andeq	r9, r5, r2, lsr #22
    21f8:	ce040700 	cdpgt	7, 0, cr0, cr4, cr0, {0}
    21fc:	2b000001 	blcs	2208 <__Stack_Size+0x1e08>
    2200:	00000438 	andeq	r0, r0, r8, lsr r4
    2204:	04052c06 	streq	r2, [r5], #-3078	; 0xc06
    2208:	03050000 	movweq	r0, #20480	; 0x5000
    220c:	200002c8 	andcs	r0, r0, r8, asr #5
    2210:	000e9c2b 	andeq	r9, lr, fp, lsr #24
    2214:	c32a0100 	teqgt	sl, #0, 2
    2218:	05000005 	streq	r0, [r0, #-5]
    221c:	000b2303 	andeq	r2, fp, r3, lsl #6
    2220:	00842720 	addeq	r2, r4, r0, lsr #14
    2224:	c02b0000 	eorgt	r0, fp, r0
    2228:	0100000d 	tsteq	r0, sp
    222c:	0005d929 	andeq	sp, r5, r9, lsr #18
    2230:	1c030500 	cfstr32ne	mvfx0, [r3], {-0}
    2234:	2720000b 	strcs	r0, [r0, -fp]!
    2238:	00000201 	andeq	r0, r0, r1, lsl #4
    223c:	000df12b 	andeq	pc, sp, fp, lsr #2
    2240:	ef350100 	svc	0x00350100
    2244:	05000005 	streq	r0, [r0, #-5]
    2248:	0002d003 	andeq	sp, r2, r3
    224c:	02912720 	addseq	r2, r1, #32, 14	; 0x800000
    2250:	7a2c0000 	bvc	b02258 <__Stack_Size+0xb01e58>
    2254:	0700000b 	streq	r0, [r0, -fp]
    2258:	00562cd8 	ldrsbeq	r2, [r6], #-200	; 0xffffff38
    225c:	81060000 	mrshi	r0, (UNDEF: 6)
    2260:	000acf2c 	andeq	ip, sl, ip, lsr #30
    2264:	2dca0700 	stclcs	7, cr0, [sl]
    2268:	00000cd8 	ldrdeq	r0, [r0], -r8
    226c:	0084d307 	addeq	sp, r4, r7, lsl #6
    2270:	061e0000 	ldreq	r0, [lr], -r0
    2274:	3a0b0000 	bcc	2c227c <__Stack_Size+0x2c1e7c>
    2278:	00000000 	andeq	r0, r0, r0
    227c:	000c9b2d 	andeq	r9, ip, sp, lsr #22
    2280:	84d20700 	ldrbhi	r0, [r2], #1792	; 0x700
    2284:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2288:	0b000006 	bleq	22a8 <__Stack_Size+0x1ea8>
    228c:	0000003a 	andeq	r0, r0, sl, lsr r0
    2290:	00003a0b 	andeq	r3, r0, fp, lsl #20
    2294:	902c0000 	eorls	r0, ip, r0
    2298:	0700000a 	streq	r0, [r0, -sl]
    229c:	0b5d2cce 	bleq	174d5dc <__Stack_Size+0x174d1dc>
    22a0:	d6070000 	strle	r0, [r7], -r0
    22a4:	000b692e 	andeq	r6, fp, lr, lsr #18
    22a8:	05da0700 	ldrbeq	r0, [sl, #1792]	; 0x700
    22ac:	2c000004 	stccs	0, cr0, [r0], {4}
    22b0:	00000bed 	andeq	r0, r0, sp, ror #23
    22b4:	8800d507 	stmdahi	r0, {r0, r1, r2, r8, sl, ip, lr, pc}
    22b8:	0400000c 	streq	r0, [r0], #-12
    22bc:	000bd600 	andeq	sp, fp, r0, lsl #12
    22c0:	58010400 	stmdapl	r1, {sl}
    22c4:	01000001 	tsteq	r0, r1
    22c8:	0000107e 	andeq	r1, r0, lr, ror r0
    22cc:	00000926 	andeq	r0, r0, r6, lsr #18
    22d0:	00000338 	andeq	r0, r0, r8, lsr r3
    22d4:	00000000 	andeq	r0, r0, r0
    22d8:	00000aab 	andeq	r0, r0, fp, lsr #21
    22dc:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    22e0:	02000001 	andeq	r0, r0, #1
    22e4:	06a50502 	strteq	r0, [r5], r2, lsl #10
    22e8:	01020000 	mrseq	r0, (UNDEF: 2)
    22ec:	00065106 	andeq	r5, r6, r6, lsl #2
    22f0:	33750300 	cmncc	r5, #0, 6
    22f4:	24020032 	strcs	r0, [r2], #-50	; 0x32
    22f8:	00000045 	andeq	r0, r0, r5, asr #32
    22fc:	7b070402 	blvc	1c330c <__Stack_Size+0x1c2f0c>
    2300:	03000003 	movweq	r0, #3
    2304:	00363175 	eorseq	r3, r6, r5, ror r1
    2308:	00572502 	subseq	r2, r7, r2, lsl #10
    230c:	02020000 	andeq	r0, r2, #0
    2310:	0003d707 	andeq	sp, r3, r7, lsl #14
    2314:	38750300 	ldmdacc	r5!, {r8, r9}^
    2318:	68260200 	stmdavs	r6!, {r9}
    231c:	02000000 	andeq	r0, r0, #0
    2320:	064f0801 	strbeq	r0, [pc], -r1, lsl #16
    2324:	9a040000 	bls	10232c <__Stack_Size+0x101f2c>
    2328:	0100000f 	tsteq	r0, pc
    232c:	008e1603 	addeq	r1, lr, r3, lsl #12
    2330:	91050000 	mrsls	r0, (UNDEF: 5)
    2334:	00000010 	andeq	r0, r0, r0, lsl r0
    2338:	000f6505 	andeq	r6, pc, r5, lsl #10
    233c:	38050100 	stmdacc	r5, {r8}
    2340:	02000010 	andeq	r0, r0, #16
    2344:	0f9b0600 	svceq	0x009b0600
    2348:	1c030000 	stcne	0, cr0, [r3], {-0}
    234c:	0000006f 	andeq	r0, r0, pc, rrx
    2350:	00117f07 	andseq	r7, r1, r7, lsl #30
    2354:	4c9b0100 	ldfmis	f0, [fp], {0}
    2358:	01000000 	mrseq	r0, (UNDEF: 0)
    235c:	000000b5 	strheq	r0, [r0], -r5
    2360:	00129e08 	andseq	r9, r2, r8, lsl #28
    2364:	5e9b0100 	fmlple	f0, f3, f0
    2368:	00000000 	andeq	r0, r0, r0
    236c:	0011df09 	andseq	sp, r1, r9, lsl #30
    2370:	00220100 	eoreq	r0, r2, r0, lsl #2
    2374:	0c000000 	stceq	0, cr0, [r0], {-0}
    2378:	01000000 	mrseq	r0, (UNDEF: 0)
    237c:	0000d89c 	muleq	r0, ip, r8
    2380:	11750a00 	cmnne	r5, r0, lsl #20
    2384:	22010000 	andcs	r0, r1, #0
    2388:	0000004c 	andeq	r0, r0, ip, asr #32
    238c:	0b005001 	bleq	16398 <__Stack_Size+0x15f98>
    2390:	00000fcb 	andeq	r0, r0, fp, asr #31
    2394:	004c2e01 	subeq	r2, ip, r1, lsl #28
    2398:	00000000 	andeq	r0, r0, r0
    239c:	000c0000 	andeq	r0, ip, r0
    23a0:	9c010000 	stcls	0, cr0, [r1], {-0}
    23a4:	000fad09 	andeq	sl, pc, r9, lsl #26
    23a8:	003a0100 	eorseq	r0, sl, r0, lsl #2
    23ac:	0c000000 	stceq	0, cr0, [r0], {-0}
    23b0:	01000000 	mrseq	r0, (UNDEF: 0)
    23b4:	0001109c 	muleq	r1, ip, r0
    23b8:	11750a00 	cmnne	r5, r0, lsl #20
    23bc:	3a010000 	bcc	423c4 <__Stack_Size+0x41fc4>
    23c0:	0000004c 	andeq	r0, r0, ip, asr #32
    23c4:	0b005001 	bleq	163d0 <__Stack_Size+0x15fd0>
    23c8:	0000116d 	andeq	r1, r0, sp, ror #2
    23cc:	004c4601 	subeq	r4, ip, r1, lsl #12
    23d0:	00000000 	andeq	r0, r0, r0
    23d4:	000c0000 	andeq	r0, ip, r0
    23d8:	9c010000 	stcls	0, cr0, [r1], {-0}
    23dc:	00124a0b 	andseq	r4, r2, fp, lsl #20
    23e0:	4c520100 	ldfmie	f0, [r2], {-0}
    23e4:	00000000 	andeq	r0, r0, r0
    23e8:	0c000000 	stceq	0, cr0, [r0], {-0}
    23ec:	01000000 	mrseq	r0, (UNDEF: 0)
    23f0:	11a3099c 			; <UNDEFINED> instruction: 0x11a3099c
    23f4:	5e010000 	cdppl	0, 0, cr0, cr1, cr0, {0}
    23f8:	00000000 	andeq	r0, r0, r0
    23fc:	0000000c 	andeq	r0, r0, ip
    2400:	015d9c01 	cmpeq	sp, r1, lsl #24
    2404:	750a0000 	strvc	r0, [sl, #-0]
    2408:	01000011 	tsteq	r0, r1, lsl r0
    240c:	00004c5e 	andeq	r4, r0, lr, asr ip
    2410:	00500100 	subseq	r0, r0, r0, lsl #2
    2414:	000fe40b 	andeq	lr, pc, fp, lsl #8
    2418:	4c6a0100 	stfmie	f0, [sl], #-0
    241c:	00000000 	andeq	r0, r0, r0
    2420:	0c000000 	stceq	0, cr0, [r0], {-0}
    2424:	01000000 	mrseq	r0, (UNDEF: 0)
    2428:	11e7099c 			; <UNDEFINED> instruction: 0x11e7099c
    242c:	76010000 	strvc	r0, [r1], -r0
    2430:	00000000 	andeq	r0, r0, r0
    2434:	00000010 	andeq	r0, r0, r0, lsl r0
    2438:	01959c01 	orrseq	r9, r5, r1, lsl #24
    243c:	750a0000 	strvc	r0, [sl, #-0]
    2440:	01000011 	tsteq	r0, r1, lsl r0
    2444:	00004c76 	andeq	r4, r0, r6, ror ip
    2448:	00500100 	subseq	r0, r0, r0, lsl #2
    244c:	0011630b 	andseq	r6, r1, fp, lsl #6
    2450:	4c820100 	stfmis	f0, [r2], {0}
    2454:	00000000 	andeq	r0, r0, r0
    2458:	0c000000 	stceq	0, cr0, [r0], {-0}
    245c:	01000000 	mrseq	r0, (UNDEF: 0)
    2460:	12a5099c 	adcne	r0, r5, #156, 18	; 0x270000
    2464:	8f010000 	svchi	0x00010000
    2468:	00000000 	andeq	r0, r0, r0
    246c:	0000000e 	andeq	r0, r0, lr
    2470:	01dc9c01 	bicseq	r9, ip, r1, lsl #24
    2474:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    2478:	01000012 	tsteq	r0, r2, lsl r0
    247c:	00005e8f 	andeq	r5, r0, pc, lsl #29
    2480:	00087700 	andeq	r7, r8, r0, lsl #14
    2484:	11750a00 	cmnne	r5, r0, lsl #20
    2488:	8f010000 	svchi	0x00010000
    248c:	0000004c 	andeq	r0, r0, ip, asr #32
    2490:	0d005101 	stfeqs	f5, [r0, #-4]
    2494:	00000099 	muleq	r0, r9, r0
    2498:	00000000 	andeq	r0, r0, r0
    249c:	00000010 	andeq	r0, r0, r0, lsl r0
    24a0:	01f99c01 	mvnseq	r9, r1, lsl #24
    24a4:	a90e0000 	stmdbge	lr, {}	; <UNPREDICTABLE>
    24a8:	98000000 	stmdals	r0, {}	; <UNPREDICTABLE>
    24ac:	00000008 	andeq	r0, r0, r8
    24b0:	00102e09 	andseq	r2, r0, r9, lsl #28
    24b4:	00a80100 	adceq	r0, r8, r0, lsl #2
    24b8:	1c000000 	stcne	0, cr0, [r0], {-0}
    24bc:	01000000 	mrseq	r0, (UNDEF: 0)
    24c0:	00022d9c 	muleq	r2, ip, sp
    24c4:	129e0c00 	addsne	r0, lr, #0, 24
    24c8:	a8010000 	stmdage	r1, {}	; <UNPREDICTABLE>
    24cc:	0000005e 	andeq	r0, r0, lr, asr r0
    24d0:	000008b9 			; <UNDEFINED> instruction: 0x000008b9
    24d4:	0010780c 	andseq	r7, r0, ip, lsl #16
    24d8:	4ca80100 	stfmis	f0, [r8]
    24dc:	da000000 	ble	24e4 <__Stack_Size+0x20e4>
    24e0:	00000008 	andeq	r0, r0, r8
    24e4:	0011130f 	andseq	r1, r1, pc, lsl #6
    24e8:	4cb40100 	ldfmis	f0, [r4]
    24ec:	00000000 	andeq	r0, r0, r0
    24f0:	12000000 	andne	r0, r0, #0
    24f4:	01000000 	mrseq	r0, (UNDEF: 0)
    24f8:	0002569c 	muleq	r2, ip, r6
    24fc:	129e0c00 	addsne	r0, lr, #0, 24
    2500:	b4010000 	strlt	r0, [r1], #-0
    2504:	0000005e 	andeq	r0, r0, lr, asr r0
    2508:	000008fb 	strdeq	r0, [r0], -fp
    250c:	12900900 	addsne	r0, r0, #0, 18
    2510:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2514:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
    2518:	0000002a 	andeq	r0, r0, sl, lsr #32
    251c:	029f9c01 	addseq	r9, pc, #256	; 0x100
    2520:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    2524:	01000012 	tsteq	r0, r2, lsl r0
    2528:	00005ec1 	andeq	r5, r0, r1, asr #29
    252c:	00091c00 	andeq	r1, r9, r0, lsl #24
    2530:	0e4b0a00 	vmlaeq.f32	s1, s22, s0
    2534:	c1010000 	mrsgt	r0, (UNDEF: 1)
    2538:	0000004c 	andeq	r0, r0, ip, asr #32
    253c:	d0105101 	andsle	r5, r0, r1, lsl #2
    2540:	2a08000d 	bcs	20257c <__Stack_Size+0x20217c>
    2544:	11000000 	mrsne	r0, (UNDEF: 0)
    2548:	0000045b 	andeq	r0, r0, fp, asr r4
    254c:	004cc301 	subeq	ip, ip, r1, lsl #6
    2550:	53010000 	movwpl	r0, #4096	; 0x1000
    2554:	01090000 	mrseq	r0, (UNDEF: 9)
    2558:	01000010 	tsteq	r0, r0, lsl r0
    255c:	000000ce 	andeq	r0, r0, lr, asr #1
    2560:	00002a00 	andeq	r2, r0, r0, lsl #20
    2564:	e89c0100 	ldm	ip, {r8}
    2568:	0c000002 	stceq	0, cr0, [r0], {2}
    256c:	0000129e 	muleq	r0, lr, r2
    2570:	005ece01 	subseq	ip, lr, r1, lsl #28
    2574:	093d0000 	ldmdbeq	sp!, {}	; <UNPREDICTABLE>
    2578:	4b0a0000 	blmi	282580 <__Stack_Size+0x282180>
    257c:	0100000e 	tsteq	r0, lr
    2580:	00004cce 	andeq	r4, r0, lr, asr #25
    2584:	10510100 	subsne	r0, r1, r0, lsl #2
    2588:	00000000 	andeq	r0, r0, r0
    258c:	0000002a 	andeq	r0, r0, sl, lsr #32
    2590:	00045b11 	andeq	r5, r4, r1, lsl fp
    2594:	4cd00100 	ldfmie	f0, [r0], {0}
    2598:	01000000 	mrseq	r0, (UNDEF: 0)
    259c:	09000053 	stmdbeq	r0, {r0, r1, r4, r6}
    25a0:	00000f50 	andeq	r0, r0, r0, asr pc
    25a4:	0000db01 	andeq	sp, r0, r1, lsl #22
    25a8:	00240000 	eoreq	r0, r4, r0
    25ac:	9c010000 	stcls	0, cr0, [r1], {-0}
    25b0:	0000033e 	andeq	r0, r0, lr, lsr r3
    25b4:	00129e0c 	andseq	r9, r2, ip, lsl #28
    25b8:	5edb0100 	cdppl	1, 13, cr0, cr11, cr0, {0}
    25bc:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    25c0:	0a000009 	beq	25ec <__Stack_Size+0x21ec>
    25c4:	00001073 	andeq	r1, r0, r3, ror r0
    25c8:	005edb01 	subseq	sp, lr, r1, lsl #22
    25cc:	51010000 	mrspl	r0, (UNDEF: 1)
    25d0:	00126212 	andseq	r6, r2, r2, lsl r2
    25d4:	4cdd0100 	ldfmie	f0, [sp], {0}
    25d8:	13000000 	movwne	r0, #0
    25dc:	00000099 	muleq	r0, r9, r0
    25e0:	00000000 	andeq	r0, r0, r0
    25e4:	00000288 	andeq	r0, r0, r8, lsl #5
    25e8:	a90ede01 	stmdbge	lr, {r0, r9, sl, fp, ip, lr, pc}
    25ec:	5e000000 	cdppl	0, 0, cr0, cr0, cr0, {0}
    25f0:	00000009 	andeq	r0, r0, r9
    25f4:	10650f00 	rsbne	r0, r5, r0, lsl #30
    25f8:	f0010000 			; <UNDEFINED> instruction: 0xf0010000
    25fc:	0000004c 	andeq	r0, r0, ip, asr #32
    2600:	00000000 	andeq	r0, r0, r0
    2604:	00000012 	andeq	r0, r0, r2, lsl r0
    2608:	03679c01 	cmneq	r7, #256	; 0x100
    260c:	9e0c0000 	cdpls	0, 0, cr0, cr12, cr0, {0}
    2610:	01000012 	tsteq	r0, r2, lsl r0
    2614:	00005ef0 	strdeq	r5, [r0], -r0
    2618:	00097f00 	andeq	r7, r9, r0, lsl #30
    261c:	710f0000 	mrsvc	r0, CPSR
    2620:	0100000f 	tsteq	r0, pc
    2624:	00004cfc 	strdeq	r4, [r0], -ip
    2628:	00000000 	andeq	r0, r0, r0
    262c:	00001200 	andeq	r1, r0, r0, lsl #4
    2630:	909c0100 	addsls	r0, ip, r0, lsl #2
    2634:	0c000003 	stceq	0, cr0, [r0], {3}
    2638:	0000129e 	muleq	r0, lr, r2
    263c:	005efc01 	subseq	pc, lr, r1, lsl #24
    2640:	09a00000 	stmibeq	r0!, {}	; <UNPREDICTABLE>
    2644:	14000000 	strne	r0, [r0], #-0
    2648:	00000f43 	andeq	r0, r0, r3, asr #30
    264c:	00010801 	andeq	r0, r1, r1, lsl #16
    2650:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2654:	01000000 	mrseq	r0, (UNDEF: 0)
    2658:	0003d19c 	muleq	r3, ip, r1
    265c:	129e1500 	addsne	r1, lr, #0, 10
    2660:	08010000 	stmdaeq	r1, {}	; <UNPREDICTABLE>
    2664:	00005e01 	andeq	r5, r0, r1, lsl #28
    2668:	0009c100 	andeq	ip, r9, r0, lsl #2
    266c:	00001000 	andeq	r1, r0, r0
    2670:	001e0000 	andseq	r0, lr, r0
    2674:	5b160000 	blpl	58267c <__Stack_Size+0x58227c>
    2678:	01000004 	tsteq	r0, r4
    267c:	004c010a 	subeq	r0, ip, sl, lsl #2
    2680:	09e20000 	stmibeq	r2!, {}^	; <UNPREDICTABLE>
    2684:	00000000 	andeq	r0, r0, r0
    2688:	00097114 	andeq	r7, r9, r4, lsl r1
    268c:	01140100 	tsteq	r4, r0, lsl #2
    2690:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
    2694:	0000001e 	andeq	r0, r0, lr, lsl r0
    2698:	04129c01 	ldreq	r9, [r2], #-3073	; 0xc01
    269c:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    26a0:	01000012 	tsteq	r0, r2, lsl r0
    26a4:	005e0114 	subseq	r0, lr, r4, lsl r1
    26a8:	0a0d0000 	beq	3426b0 <__Stack_Size+0x3422b0>
    26ac:	fa100000 	blx	4026b4 <__Stack_Size+0x4022b4>
    26b0:	1e08000d 	cdpne	0, 0, cr0, cr8, cr13, {0}
    26b4:	16000000 	strne	r0, [r0], -r0
    26b8:	0000045b 	andeq	r0, r0, fp, asr r4
    26bc:	4c011601 	stcmi	6, cr1, [r1], {1}
    26c0:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    26c4:	0000000a 	andeq	r0, r0, sl
    26c8:	113e1400 	teqne	lr, r0, lsl #8
    26cc:	20010000 	andcs	r0, r1, r0
    26d0:	00000001 	andeq	r0, r0, r1
    26d4:	00001e00 	andeq	r1, r0, r0, lsl #28
    26d8:	399c0100 	ldmibcc	ip, {r8}
    26dc:	15000004 	strne	r0, [r0, #-4]
    26e0:	0000129e 	muleq	r0, lr, r2
    26e4:	5e012001 	cdppl	0, 0, cr2, cr1, cr1, {0}
    26e8:	5c000000 	stcpl	0, cr0, [r0], {-0}
    26ec:	0000000a 	andeq	r0, r0, sl
    26f0:	00115614 	andseq	r5, r1, r4, lsl r6
    26f4:	012c0100 	teqeq	ip, r0, lsl #2
    26f8:	00000000 	andeq	r0, r0, r0
    26fc:	0000001c 	andeq	r0, r0, ip, lsl r0
    2700:	04609c01 	strbteq	r9, [r0], #-3073	; 0xc01
    2704:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2708:	01000012 	tsteq	r0, r2, lsl r0
    270c:	005e012c 	subseq	r0, lr, ip, lsr #2
    2710:	0a7d0000 	beq	1f42718 <__Stack_Size+0x1f42318>
    2714:	14000000 	strne	r0, [r0], #-0
    2718:	00000770 	andeq	r0, r0, r0, ror r7
    271c:	18013701 	stmdane	r1, {r0, r8, r9, sl, ip, sp}
    2720:	1c08000e 	stcne	0, cr0, [r8], {14}
    2724:	01000000 	mrseq	r0, (UNDEF: 0)
    2728:	0004879c 	muleq	r4, ip, r7
    272c:	129e1500 	addsne	r1, lr, #0, 10
    2730:	37010000 	strcc	r0, [r1, -r0]
    2734:	00005e01 	andeq	r5, r0, r1, lsl #28
    2738:	000a9e00 	andeq	r9, sl, r0, lsl #28
    273c:	3b140000 	blcc	502744 <__Stack_Size+0x502344>
    2740:	01000012 	tsteq	r0, r2, lsl r0
    2744:	00000142 	andeq	r0, r0, r2, asr #2
    2748:	001e0000 	andseq	r0, lr, r0
    274c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2750:	000004ae 	andeq	r0, r0, lr, lsr #9
    2754:	00129e15 	andseq	r9, r2, r5, lsl lr
    2758:	01420100 	mrseq	r0, (UNDEF: 82)
    275c:	0000005e 	andeq	r0, r0, lr, asr r0
    2760:	00000abf 			; <UNDEFINED> instruction: 0x00000abf
    2764:	10bb1400 	adcsne	r1, fp, r0, lsl #8
    2768:	4d010000 	stcmi	0, cr0, [r1, #-0]
    276c:	00000001 	andeq	r0, r0, r1
    2770:	00001e00 	andeq	r1, r0, r0, lsl #28
    2774:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    2778:	15000004 	strne	r0, [r0, #-4]
    277c:	0000129e 	muleq	r0, lr, r2
    2780:	5e014d01 	cdppl	13, 0, cr4, cr1, cr1, {0}
    2784:	e0000000 	and	r0, r0, r0
    2788:	0000000a 	andeq	r0, r0, sl
    278c:	0010e914 	andseq	lr, r0, r4, lsl r9
    2790:	01580100 	cmpeq	r8, r0, lsl #2
    2794:	00000000 	andeq	r0, r0, r0
    2798:	0000001c 	andeq	r0, r0, ip, lsl r0
    279c:	04fc9c01 	ldrbteq	r9, [ip], #3073	; 0xc01
    27a0:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    27a4:	01000012 	tsteq	r0, r2, lsl r0
    27a8:	005e0158 	subseq	r0, lr, r8, asr r1
    27ac:	0b010000 	bleq	427b4 <__Stack_Size+0x423b4>
    27b0:	17000000 	strne	r0, [r0, -r0]
    27b4:	00000f21 	andeq	r0, r0, r1, lsr #30
    27b8:	4c016301 	stcmi	3, cr6, [r1], {1}
    27bc:	00000000 	andeq	r0, r0, r0
    27c0:	1a000000 	bne	27c8 <__Stack_Size+0x23c8>
    27c4:	01000000 	mrseq	r0, (UNDEF: 0)
    27c8:	0005279c 	muleq	r5, ip, r7
    27cc:	129e1500 	addsne	r1, lr, #0, 10
    27d0:	63010000 	movwvs	r0, #4096	; 0x1000
    27d4:	00005e01 	andeq	r5, r0, r1, lsl #28
    27d8:	000b2200 	andeq	r2, fp, r0, lsl #4
    27dc:	d3170000 	tstle	r7, #0
    27e0:	0100000f 	tsteq	r0, pc
    27e4:	004c016e 	subeq	r0, ip, lr, ror #2
    27e8:	00000000 	andeq	r0, r0, r0
    27ec:	001a0000 	andseq	r0, sl, r0
    27f0:	9c010000 	stcls	0, cr0, [r1], {-0}
    27f4:	00000552 	andeq	r0, r0, r2, asr r5
    27f8:	00129e15 	andseq	r9, r2, r5, lsl lr
    27fc:	016e0100 	cmneq	lr, r0, lsl #2
    2800:	0000005e 	andeq	r0, r0, lr, asr r0
    2804:	00000b43 	andeq	r0, r0, r3, asr #22
    2808:	111d1400 	tstne	sp, r0, lsl #8
    280c:	79010000 	stmdbvc	r1, {}	; <UNPREDICTABLE>
    2810:	00000001 	andeq	r0, r0, r1
    2814:	00001800 	andeq	r1, r0, r0, lsl #16
    2818:	799c0100 	ldmibvc	ip, {r8}
    281c:	15000005 	strne	r0, [r0, #-5]
    2820:	0000129e 	muleq	r0, lr, r2
    2824:	5e017901 	cdppl	9, 0, cr7, cr1, cr1, {0}
    2828:	64000000 	strvs	r0, [r0], #-0
    282c:	0000000b 	andeq	r0, r0, fp
    2830:	0011fe14 	andseq	pc, r1, r4, lsl lr	; <UNPREDICTABLE>
    2834:	01840100 	orreq	r0, r4, r0, lsl #2
    2838:	00000000 	andeq	r0, r0, r0
    283c:	0000001c 	andeq	r0, r0, ip, lsl r0
    2840:	05a09c01 	streq	r9, [r0, #3073]!	; 0xc01
    2844:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2848:	01000012 	tsteq	r0, r2, lsl r0
    284c:	005e0184 	subseq	r0, lr, r4, lsl #3
    2850:	0b850000 	bleq	fe142858 <BootRAM+0xd0b2ff9>
    2854:	14000000 	strne	r0, [r0], #-0
    2858:	0000100f 	andeq	r1, r0, pc
    285c:	00018f01 	andeq	r8, r1, r1, lsl #30
    2860:	20000000 	andcs	r0, r0, r0
    2864:	01000000 	mrseq	r0, (UNDEF: 0)
    2868:	0005c79c 	muleq	r5, ip, r7
    286c:	129e1500 	addsne	r1, lr, #0, 10
    2870:	8f010000 	svchi	0x00010000
    2874:	00005e01 	andeq	r5, r0, r1, lsl #28
    2878:	000ba600 	andeq	sl, fp, r0, lsl #12
    287c:	7f140000 	svcvc	0x00140000
    2880:	0100000f 	tsteq	r0, pc
    2884:	0000019a 	muleq	r0, sl, r1
    2888:	00200000 	eoreq	r0, r0, r0
    288c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2890:	000005ee 	andeq	r0, r0, lr, ror #11
    2894:	00129e15 	andseq	r9, r2, r5, lsl lr
    2898:	019a0100 	orrseq	r0, sl, r0, lsl #2
    289c:	0000005e 	andeq	r0, r0, lr, asr r0
    28a0:	00000bc7 	andeq	r0, r0, r7, asr #23
    28a4:	0fbe1400 	svceq	0x00be1400
    28a8:	a5010000 	strge	r0, [r1, #-0]
    28ac:	000e3401 	andeq	r3, lr, r1, lsl #8
    28b0:	00002008 	andeq	r2, r0, r8
    28b4:	159c0100 	ldrne	r0, [ip, #256]	; 0x100
    28b8:	15000006 	strne	r0, [r0, #-6]
    28bc:	0000129e 	muleq	r0, lr, r2
    28c0:	5e01a501 	cfsh32pl	mvfx10, mvfx1, #1
    28c4:	e8000000 	stmda	r0, {}	; <UNPREDICTABLE>
    28c8:	0000000b 	andeq	r0, r0, fp
    28cc:	00128314 	andseq	r8, r2, r4, lsl r3
    28d0:	01b00100 	lslseq	r0, r0, #2
    28d4:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
    28d8:	00000020 	andeq	r0, r0, r0, lsr #32
    28dc:	063c9c01 	ldrteq	r9, [ip], -r1, lsl #24
    28e0:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    28e4:	01000012 	tsteq	r0, r2, lsl r0
    28e8:	005e01b0 	ldrheq	r0, [lr], #-16
    28ec:	0c090000 	stceq	0, cr0, [r9], {-0}
    28f0:	14000000 	strne	r0, [r0], #-0
    28f4:	00000ff4 	strdeq	r0, [r0], -r4
    28f8:	0001bc01 	andeq	fp, r1, r1, lsl #24
    28fc:	1e000000 	cdpne	0, 0, cr0, cr0, cr0, {0}
    2900:	01000000 	mrseq	r0, (UNDEF: 0)
    2904:	0006739c 	muleq	r6, ip, r3
    2908:	129e1500 	addsne	r1, lr, #0, 10
    290c:	bc010000 	stclt	0, cr0, [r1], {-0}
    2910:	00005e01 	andeq	r5, r0, r1, lsl #28
    2914:	000c2a00 	andeq	r2, ip, r0, lsl #20
    2918:	0fa71500 	svceq	0x00a71500
    291c:	bc010000 	stclt	0, cr0, [r1], {-0}
    2920:	00005e01 	andeq	r5, r0, r1, lsl #28
    2924:	000c4b00 	andeq	r4, ip, r0, lsl #22
    2928:	8d170000 	ldchi	0, cr0, [r7, #-0]
    292c:	0100000f 	tsteq	r0, pc
    2930:	005e01c7 	subseq	r0, lr, r7, asr #3
    2934:	00000000 	andeq	r0, r0, r0
    2938:	00120000 	andseq	r0, r2, r0
    293c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2940:	0000069e 	muleq	r0, lr, r6
    2944:	00129e15 	andseq	r9, r2, r5, lsl lr
    2948:	01c70100 	biceq	r0, r7, r0, lsl #2
    294c:	0000005e 	andeq	r0, r0, lr, asr r0
    2950:	00000c6c 	andeq	r0, r0, ip, ror #24
    2954:	10dd1400 	sbcsne	r1, sp, r0, lsl #8
    2958:	d3010000 	movwle	r0, #4096	; 0x1000
    295c:	00000001 	andeq	r0, r0, r1
    2960:	00002000 	andeq	r2, r0, r0
    2964:	d59c0100 	ldrle	r0, [ip, #256]	; 0x100
    2968:	15000006 	strne	r0, [r0, #-6]
    296c:	0000129e 	muleq	r0, lr, r2
    2970:	5e01d301 	cdppl	3, 0, cr13, cr1, cr1, {0}
    2974:	8d000000 	stchi	0, cr0, [r0, #-0]
    2978:	1500000c 	strne	r0, [r0, #-12]
    297c:	0000118b 	andeq	r1, r0, fp, lsl #3
    2980:	4c01d301 	stcmi	3, cr13, [r1], {1}
    2984:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    2988:	0000000c 	andeq	r0, r0, ip
    298c:	0012b114 	andseq	fp, r2, r4, lsl r1
    2990:	01df0100 	bicseq	r0, pc, r0, lsl #2
    2994:	00000000 	andeq	r0, r0, r0
    2998:	00000020 	andeq	r0, r0, r0, lsr #32
    299c:	070c9c01 	streq	r9, [ip, -r1, lsl #24]
    29a0:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    29a4:	01000012 	tsteq	r0, r2, lsl r0
    29a8:	005e01df 	ldrsbeq	r0, [lr], #-31	; 0xffffffe1
    29ac:	0ccf0000 	stcleq	0, cr0, [pc], {0}
    29b0:	8b150000 	blhi	5429b8 <__Stack_Size+0x5425b8>
    29b4:	01000011 	tsteq	r0, r1, lsl r0
    29b8:	004c01df 	ldrdeq	r0, [ip], #-31	; 0xffffffe1
    29bc:	0cf00000 	ldcleq	0, cr0, [r0]
    29c0:	17000000 	strne	r0, [r0, -r0]
    29c4:	00001277 	andeq	r1, r0, r7, ror r2
    29c8:	4c01ea01 	stcmi	10, cr14, [r1], {1}
    29cc:	74000000 	strvc	r0, [r0], #-0
    29d0:	1c08000e 	stcne	0, cr0, [r8], {14}
    29d4:	01000000 	mrseq	r0, (UNDEF: 0)
    29d8:	0007379c 	muleq	r7, ip, r7
    29dc:	129e1500 	addsne	r1, lr, #0, 10
    29e0:	ea010000 	b	429e8 <__Stack_Size+0x425e8>
    29e4:	00005e01 	andeq	r5, r0, r1, lsl #28
    29e8:	000d1100 	andeq	r1, sp, r0, lsl #2
    29ec:	48170000 	ldmdami	r7, {}	; <UNPREDICTABLE>
    29f0:	01000010 	tsteq	r0, r0, lsl r0
    29f4:	004c01f5 	strdeq	r0, [ip], #-21	; 0xffffffeb
    29f8:	0e900000 	cdpeq	0, 9, cr0, cr0, cr0, {0}
    29fc:	001c0800 	andseq	r0, ip, r0, lsl #16
    2a00:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a04:	00000762 	andeq	r0, r0, r2, ror #14
    2a08:	00129e15 	andseq	r9, r2, r5, lsl lr
    2a0c:	01f50100 	mvnseq	r0, r0, lsl #2
    2a10:	0000005e 	andeq	r0, r0, lr, asr r0
    2a14:	00000d32 	andeq	r0, r0, r2, lsr sp
    2a18:	11491400 	cmpne	r9, r0, lsl #8
    2a1c:	01010000 	mrseq	r0, (UNDEF: 1)
    2a20:	000eac02 	andeq	sl, lr, r2, lsl #24
    2a24:	00001c08 	andeq	r1, r0, r8, lsl #24
    2a28:	979c0100 	ldrls	r0, [ip, r0, lsl #2]
    2a2c:	15000007 	strne	r0, [r0, #-7]
    2a30:	0000129e 	muleq	r0, lr, r2
    2a34:	5e020101 	adfpls	f0, f2, f1
    2a38:	53000000 	movwpl	r0, #0
    2a3c:	1800000d 	stmdane	r0, {r0, r2, r3}
    2a40:	00000fed 	andeq	r0, r0, sp, ror #31
    2a44:	4c020101 	stfmis	f0, [r2], {1}
    2a48:	01000000 	mrseq	r0, (UNDEF: 0)
    2a4c:	bc140051 	ldclt	0, cr0, [r4], {81}	; 0x51
    2a50:	01000011 	tsteq	r0, r1, lsl r0
    2a54:	0000020d 	andeq	r0, r0, sp, lsl #4
    2a58:	00260000 	eoreq	r0, r6, r0
    2a5c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2a60:	000007e6 	andeq	r0, r0, r6, ror #15
    2a64:	0011ac18 	andseq	sl, r1, r8, lsl ip
    2a68:	020d0100 	andeq	r0, sp, #0, 2
    2a6c:	000007e6 	andeq	r0, r0, r6, ror #15
    2a70:	ed155001 	ldc	0, cr5, [r5, #-4]
    2a74:	0100000f 	tsteq	r0, pc
    2a78:	004c020d 	subeq	r0, ip, sp, lsl #4
    2a7c:	0d740000 	ldcleq	0, cr0, [r4, #-0]
    2a80:	00100000 	andseq	r0, r0, r0
    2a84:	26000000 	strcs	r0, [r0], -r0
    2a88:	16000000 	strne	r0, [r0], -r0
    2a8c:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
    2a90:	4c020f01 	stcmi	15, cr0, [r2], {1}
    2a94:	ae000000 	cdpge	0, 0, cr0, cr0, cr0, {0}
    2a98:	0000000d 	andeq	r0, r0, sp
    2a9c:	3a041900 	bcc	108ea4 <__Stack_Size+0x108aa4>
    2aa0:	14000000 	strne	r0, [r0], #-0
    2aa4:	0000079a 	muleq	r0, sl, r7
    2aa8:	c8021901 	stmdagt	r2, {r0, r8, fp, ip}
    2aac:	4008000e 	andmi	r0, r8, lr
    2ab0:	01000000 	mrseq	r0, (UNDEF: 0)
    2ab4:	0008519c 	muleq	r8, ip, r1
    2ab8:	129e1500 	addsne	r1, lr, #0, 10
    2abc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2ac0:	00005e02 	andeq	r5, r0, r2, lsl #28
    2ac4:	000dd700 	andeq	sp, sp, r0, lsl #14
    2ac8:	0fed1500 	svceq	0x00ed1500
    2acc:	19010000 	stmdbne	r1, {}	; <UNPREDICTABLE>
    2ad0:	00004c02 	andeq	r4, r0, r2, lsl #24
    2ad4:	000df800 	andeq	pc, sp, r0, lsl #16
    2ad8:	0ec81000 	cdpeq	0, 12, cr1, cr8, cr0, {0}
    2adc:	00400800 	subeq	r0, r0, r0, lsl #16
    2ae0:	ac1a0000 	ldcge	0, cr0, [sl], {-0}
    2ae4:	01000011 	tsteq	r0, r1, lsl r0
    2ae8:	07e6021b 			; <UNDEFINED> instruction: 0x07e6021b
    2aec:	52010000 	andpl	r0, r1, #0
    2af0:	0002a01b 	andeq	sl, r2, fp, lsl r0
    2af4:	0fb51600 	svceq	0x00b51600
    2af8:	1b010000 	blne	42b00 <__Stack_Size+0x42700>
    2afc:	00004c02 	andeq	r4, r0, r2, lsl #24
    2b00:	000e1900 	andeq	r1, lr, r0, lsl #18
    2b04:	00000000 	andeq	r0, r0, r0
    2b08:	0011f117 	andseq	pc, r1, r7, lsl r1	; <UNPREDICTABLE>
    2b0c:	02240100 	eoreq	r0, r4, #0, 2
    2b10:	0000004c 	andeq	r0, r0, ip, asr #32
    2b14:	00000000 	andeq	r0, r0, r0
    2b18:	00000020 	andeq	r0, r0, r0, lsr #32
    2b1c:	087c9c01 	ldmdaeq	ip!, {r0, sl, fp, ip, pc}^
    2b20:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2b24:	01000012 	tsteq	r0, r2, lsl r0
    2b28:	005e0224 	subseq	r0, lr, r4, lsr #4
    2b2c:	0e510000 	cdpeq	0, 5, cr0, cr1, cr0, {0}
    2b30:	17000000 	strne	r0, [r0, -r0]
    2b34:	000011cc 	andeq	r1, r0, ip, asr #3
    2b38:	4c022f01 	stcmi	15, cr2, [r2], {1}
    2b3c:	00000000 	andeq	r0, r0, r0
    2b40:	20000000 	andcs	r0, r0, r0
    2b44:	01000000 	mrseq	r0, (UNDEF: 0)
    2b48:	0008a79c 	muleq	r8, ip, r7
    2b4c:	129e1500 	addsne	r1, lr, #0, 10
    2b50:	2f010000 	svccs	0x00010000
    2b54:	00005e02 	andeq	r5, r0, r2, lsl #28
    2b58:	000e7200 	andeq	r7, lr, r0, lsl #4
    2b5c:	1d140000 	ldcne	0, cr0, [r4, #-0]
    2b60:	01000010 	tsteq	r0, r0, lsl r0
    2b64:	0000023c 	andeq	r0, r0, ip, lsr r2
    2b68:	00380000 	eorseq	r0, r8, r0
    2b6c:	9c010000 	stcls	0, cr0, [r1], {-0}
    2b70:	000008ee 	andeq	r0, r0, lr, ror #17
    2b74:	00129e15 	andseq	r9, r2, r5, lsl lr
    2b78:	023c0100 	eorseq	r0, ip, #0, 2
    2b7c:	0000005e 	andeq	r0, r0, lr, asr r0
    2b80:	00000e93 	muleq	r0, r3, lr
    2b84:	00123115 	andseq	r3, r2, r5, lsl r1
    2b88:	023c0100 	eorseq	r0, ip, #0, 2
    2b8c:	0000004c 	andeq	r0, r0, ip, asr #32
    2b90:	00000eb4 			; <UNDEFINED> instruction: 0x00000eb4
    2b94:	0010ac15 	andseq	sl, r0, r5, lsl ip
    2b98:	023c0100 	eorseq	r0, ip, #0, 2
    2b9c:	0000004c 	andeq	r0, r0, ip, asr #32
    2ba0:	00000ed5 	ldrdeq	r0, [r0], -r5
    2ba4:	10541400 	subsne	r1, r4, r0, lsl #8
    2ba8:	48010000 	stmdami	r1, {}	; <UNPREDICTABLE>
    2bac:	00000002 	andeq	r0, r0, r2
    2bb0:	00002000 	andeq	r2, r0, r0
    2bb4:	259c0100 	ldrcs	r0, [ip, #256]	; 0x100
    2bb8:	15000009 	strne	r0, [r0, #-9]
    2bbc:	0000129e 	muleq	r0, lr, r2
    2bc0:	5e024801 	cdppl	8, 0, cr4, cr2, cr1, {0}
    2bc4:	f6000000 			; <UNDEFINED> instruction: 0xf6000000
    2bc8:	1500000e 	strne	r0, [r0, #-14]
    2bcc:	00001231 	andeq	r1, r0, r1, lsr r2
    2bd0:	4c024801 	stcmi	8, cr4, [r2], {1}
    2bd4:	17000000 	strne	r0, [r0, -r0]
    2bd8:	0000000f 	andeq	r0, r0, pc
    2bdc:	000f3214 	andeq	r3, pc, r4, lsl r2	; <UNPREDICTABLE>
    2be0:	02540100 	subseq	r0, r4, #0, 2
    2be4:	00000000 	andeq	r0, r0, r0
    2be8:	00000020 	andeq	r0, r0, r0, lsr #32
    2bec:	095c9c01 	ldmdbeq	ip, {r0, sl, fp, ip, pc}^
    2bf0:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2bf4:	01000012 	tsteq	r0, r2, lsl r0
    2bf8:	005e0254 	subseq	r0, lr, r4, asr r2
    2bfc:	0f380000 	svceq	0x00380000
    2c00:	ac150000 	ldcge	0, cr0, [r5], {-0}
    2c04:	01000010 	tsteq	r0, r0, lsl r0
    2c08:	004c0254 	subeq	r0, ip, r4, asr r2
    2c0c:	0f590000 	svceq	0x00590000
    2c10:	17000000 	strne	r0, [r0, -r0]
    2c14:	00001251 	andeq	r1, r0, r1, asr r2
    2c18:	4c025f01 	stcmi	15, cr5, [r2], {1}
    2c1c:	00000000 	andeq	r0, r0, r0
    2c20:	1c000000 	stcne	0, cr0, [r0], {-0}
    2c24:	01000000 	mrseq	r0, (UNDEF: 0)
    2c28:	0009879c 	muleq	r9, ip, r7
    2c2c:	129e1500 	addsne	r1, lr, #0, 10
    2c30:	5f010000 	svcpl	0x00010000
    2c34:	00005e02 	andeq	r5, r0, r2, lsl #28
    2c38:	000f7a00 	andeq	r7, pc, r0, lsl #20
    2c3c:	02170000 	andseq	r0, r7, #0
    2c40:	01000011 	tsteq	r0, r1, lsl r0
    2c44:	004c026a 	subeq	r0, ip, sl, ror #4
    2c48:	00000000 	andeq	r0, r0, r0
    2c4c:	001c0000 	andseq	r0, ip, r0
    2c50:	9c010000 	stcls	0, cr0, [r1], {-0}
    2c54:	000009b2 			; <UNDEFINED> instruction: 0x000009b2
    2c58:	00129e15 	andseq	r9, r2, r5, lsl lr
    2c5c:	026a0100 	rsbeq	r0, sl, #0, 2
    2c60:	0000005e 	andeq	r0, r0, lr, asr r0
    2c64:	00000f9b 	muleq	r0, fp, pc	; <UNPREDICTABLE>
    2c68:	112c1400 	teqne	ip, r0, lsl #8
    2c6c:	76010000 	strvc	r0, [r1], -r0
    2c70:	00000002 	andeq	r0, r0, r2
    2c74:	0000a800 	andeq	sl, r0, r0, lsl #16
    2c78:	599c0100 	ldmibpl	ip, {r8}
    2c7c:	1500000a 	strne	r0, [r0, #-10]
    2c80:	0000129e 	muleq	r0, lr, r2
    2c84:	5e027601 	cfmadd32pl	mvax0, mvfx7, mvfx2, mvfx1
    2c88:	bc000000 	stclt	0, cr0, [r0], {-0}
    2c8c:	1500000f 	strne	r0, [r0, #-15]
    2c90:	00001073 	andeq	r1, r0, r3, ror r0
    2c94:	5e027601 	cfmadd32pl	mvax0, mvfx7, mvfx2, mvfx1
    2c98:	01000000 	mrseq	r0, (UNDEF: 0)
    2c9c:	15000010 	strne	r0, [r0, #-16]
    2ca0:	00000fed 	andeq	r0, r0, sp, ror #31
    2ca4:	4c027601 	stcmi	6, cr7, [r2], {1}
    2ca8:	46000000 	strmi	r0, [r0], -r0
    2cac:	1c000010 	stcne	0, cr0, [r0], {16}
    2cb0:	00000000 	andeq	r0, r0, r0
    2cb4:	0000003a 	andeq	r0, r0, sl, lsr r0
    2cb8:	00000a2c 	andeq	r0, r0, ip, lsr #20
    2cbc:	0011ac16 	andseq	sl, r1, r6, lsl ip
    2cc0:	02780100 	rsbseq	r0, r8, #0, 2
    2cc4:	000007e6 	andeq	r0, r0, r6, ror #15
    2cc8:	00001072 	andeq	r1, r0, r2, ror r0
    2ccc:	0002b81b 	andeq	fp, r2, fp, lsl r8
    2cd0:	0fb51600 	svceq	0x00b51600
    2cd4:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2cd8:	00004c02 	andeq	r4, r0, r2, lsl #24
    2cdc:	00109000 	andseq	r9, r0, r0
    2ce0:	1b000000 	blne	2ce8 <__Stack_Size+0x28e8>
    2ce4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    2ce8:	0011ac16 	andseq	sl, r1, r6, lsl ip
    2cec:	02780100 	rsbseq	r0, r8, #0, 2
    2cf0:	000007e6 	andeq	r0, r0, r6, ror #15
    2cf4:	000010c8 	andeq	r1, r0, r8, asr #1
    2cf8:	0002e81b 	andeq	lr, r2, fp, lsl r8
    2cfc:	0fb51600 	svceq	0x00b51600
    2d00:	78010000 	stmdavc	r1, {}	; <UNPREDICTABLE>
    2d04:	00004c02 	andeq	r4, r0, r2, lsl #24
    2d08:	0010e600 	andseq	lr, r0, r0, lsl #12
    2d0c:	00000000 	andeq	r0, r0, r0
    2d10:	00121f14 	andseq	r1, r2, r4, lsl pc
    2d14:	02820100 	addeq	r0, r2, #0, 2
    2d18:	00000000 	andeq	r0, r0, r0
    2d1c:	0000005c 	andeq	r0, r0, ip, asr r0
    2d20:	0ad09c01 	beq	ff429d2c <BootRAM+0xe39a4cd>
    2d24:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2d28:	01000012 	tsteq	r0, r2, lsl r0
    2d2c:	005e0282 	subseq	r0, lr, r2, lsl #5
    2d30:	111e0000 	tstne	lr, r0
    2d34:	73150000 	tstvc	r5, #0
    2d38:	01000010 	tsteq	r0, r0, lsl r0
    2d3c:	005e0282 	subseq	r0, lr, r2, lsl #5
    2d40:	11580000 	cmpne	r8, r0
    2d44:	ed150000 	ldc	0, cr0, [r5, #-0]
    2d48:	0100000f 	tsteq	r0, pc
    2d4c:	004c0282 	subeq	r0, ip, r2, lsl #5
    2d50:	11840000 	orrne	r0, r4, r0
    2d54:	00100000 	andseq	r0, r0, r0
    2d58:	38000000 	stmdacc	r0, {}	; <UNPREDICTABLE>
    2d5c:	16000000 	strne	r0, [r0], -r0
    2d60:	000011ac 	andeq	r1, r0, ip, lsr #3
    2d64:	e6028401 	str	r8, [r2], -r1, lsl #8
    2d68:	b0000007 	andlt	r0, r0, r7
    2d6c:	1b000011 	blne	2db8 <__Stack_Size+0x29b8>
    2d70:	00000308 	andeq	r0, r0, r8, lsl #6
    2d74:	000fb516 	andeq	fp, pc, r6, lsl r5	; <UNPREDICTABLE>
    2d78:	02840100 	addeq	r0, r4, #0, 2
    2d7c:	0000004c 	andeq	r0, r0, ip, asr #32
    2d80:	000011c3 	andeq	r1, r0, r3, asr #3
    2d84:	14000000 	strne	r0, [r0], #-0
    2d88:	000010cb 	andeq	r1, r0, fp, asr #1
    2d8c:	00028e01 	andeq	r8, r2, r1, lsl #28
    2d90:	5c000000 	stcpl	0, cr0, [r0], {-0}
    2d94:	01000000 	mrseq	r0, (UNDEF: 0)
    2d98:	000b479c 	muleq	fp, ip, r7
    2d9c:	129e1500 	addsne	r1, lr, #0, 10
    2da0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2da4:	00005e02 	andeq	r5, r0, r2, lsl #28
    2da8:	0011fb00 	andseq	pc, r1, r0, lsl #22
    2dac:	10731500 	rsbsne	r1, r3, r0, lsl #10
    2db0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2db4:	00005e02 	andeq	r5, r0, r2, lsl #28
    2db8:	00123500 	andseq	r3, r2, r0, lsl #10
    2dbc:	0fed1500 	svceq	0x00ed1500
    2dc0:	8e010000 	cdphi	0, 0, cr0, cr1, cr0, {0}
    2dc4:	00004c02 	andeq	r4, r0, r2, lsl #24
    2dc8:	00126100 	andseq	r6, r2, r0, lsl #2
    2dcc:	00001000 	andeq	r1, r0, r0
    2dd0:	00380000 	eorseq	r0, r8, r0
    2dd4:	ac160000 	ldcge	0, cr0, [r6], {-0}
    2dd8:	01000011 	tsteq	r0, r1, lsl r0
    2ddc:	07e60290 			; <UNDEFINED> instruction: 0x07e60290
    2de0:	128d0000 	addne	r0, sp, #0
    2de4:	201b0000 	andscs	r0, fp, r0
    2de8:	16000003 	strne	r0, [r0], -r3
    2dec:	00000fb5 			; <UNDEFINED> instruction: 0x00000fb5
    2df0:	4c029001 	stcmi	0, cr9, [r2], {1}
    2df4:	a0000000 	andge	r0, r0, r0
    2df8:	00000012 	andeq	r0, r0, r2, lsl r0
    2dfc:	91170000 	tstls	r7, r0
    2e00:	01000011 	tsteq	r0, r1, lsl r0
    2e04:	004c029a 	umaaleq	r0, ip, sl, r2
    2e08:	00000000 	andeq	r0, r0, r0
    2e0c:	00200000 	eoreq	r0, r0, r0
    2e10:	9c010000 	stcls	0, cr0, [r1], {-0}
    2e14:	00000b72 	andeq	r0, r0, r2, ror fp
    2e18:	00129e15 	andseq	r9, r2, r5, lsl lr
    2e1c:	029a0100 	addseq	r0, sl, #0, 2
    2e20:	0000005e 	andeq	r0, r0, lr, asr r0
    2e24:	000012d8 	ldrdeq	r1, [r0], -r8
    2e28:	120d1700 	andne	r1, sp, #0, 14
    2e2c:	a6010000 	strge	r0, [r1], -r0
    2e30:	00004c02 	andeq	r4, r0, r2, lsl #24
    2e34:	00000000 	andeq	r0, r0, r0
    2e38:	00002000 	andeq	r2, r0, r0
    2e3c:	9d9c0100 	ldflss	f0, [ip]
    2e40:	1500000b 	strne	r0, [r0, #-11]
    2e44:	0000129e 	muleq	r0, lr, r2
    2e48:	5e02a601 	cfmadd32pl	mvax0, mvfx10, mvfx2, mvfx1
    2e4c:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    2e50:	00000012 	andeq	r0, r0, r2, lsl r0
    2e54:	00109d17 	andseq	r9, r0, r7, lsl sp
    2e58:	02b20100 	adcseq	r0, r2, #0, 2
    2e5c:	0000008e 	andeq	r0, r0, lr, lsl #1
    2e60:	00000000 	andeq	r0, r0, r0
    2e64:	00000044 	andeq	r0, r0, r4, asr #32
    2e68:	0bc89c01 	bleq	ff229e74 <BootRAM+0xe19a615>
    2e6c:	9e150000 	cdpls	0, 1, cr0, cr5, cr0, {0}
    2e70:	01000012 	tsteq	r0, r2, lsl r0
    2e74:	005e02b2 	ldrheq	r0, [lr], #-34	; 0xffffffde
    2e78:	131a0000 	tstne	sl, #0
    2e7c:	14000000 	strne	r0, [r0], #-0
    2e80:	00000f12 	andeq	r0, r0, r2, lsl pc
    2e84:	0002c301 	andeq	ip, r2, r1, lsl #6
    2e88:	3a000000 	bcc	2e90 <__Stack_Size+0x2a90>
    2e8c:	01000000 	mrseq	r0, (UNDEF: 0)
    2e90:	000bfd9c 	muleq	fp, ip, sp
    2e94:	129e1500 	addsne	r1, lr, #0, 10
    2e98:	c3010000 	movwgt	r0, #4096	; 0x1000
    2e9c:	00005e02 	andeq	r5, r0, r2, lsl #28
    2ea0:	00133b00 	andseq	r3, r3, r0, lsl #22
    2ea4:	10731800 	rsbsne	r1, r3, r0, lsl #16
    2ea8:	c3010000 	movwgt	r0, #4096	; 0x1000
    2eac:	00005e02 	andeq	r5, r0, r2, lsl #28
    2eb0:	00510100 	subseq	r0, r1, r0, lsl #2
    2eb4:	0010fb17 	andseq	pc, r0, r7, lsl fp	; <UNPREDICTABLE>
    2eb8:	02d60100 	sbcseq	r0, r6, #0, 2
    2ebc:	0000004c 	andeq	r0, r0, ip, asr #32
    2ec0:	00000000 	andeq	r0, r0, r0
    2ec4:	00000006 	andeq	r0, r0, r6
    2ec8:	0c449c01 	mcrreq	12, 0, r9, r4, cr1
    2ecc:	621d0000 	andsvs	r0, sp, #0
    2ed0:	d6010068 	strle	r0, [r1], -r8, rrx
    2ed4:	00005e02 	andeq	r5, r0, r2, lsl #28
    2ed8:	00137500 	andseq	r7, r3, r0, lsl #10
    2edc:	6c621e00 	stclvs	14, cr1, [r2], #-0
    2ee0:	02d60100 	sbcseq	r0, r6, #0, 2
    2ee4:	0000005e 	andeq	r0, r0, lr, asr r0
    2ee8:	43165101 	tstmi	r6, #1073741824	; 0x40000000
    2eec:	01000010 	tsteq	r0, r0, lsl r0
    2ef0:	004c02d8 	ldrdeq	r0, [ip], #-40	; 0xffffffd8
    2ef4:	13960000 	orrsne	r0, r6, #0
    2ef8:	1f000000 	svcne	0x00000000
    2efc:	000011b3 			; <UNDEFINED> instruction: 0x000011b3
    2f00:	4c02e301 	stcmi	3, cr14, [r2], {1}
    2f04:	00000000 	andeq	r0, r0, r0
    2f08:	0a000000 	beq	2f10 <__Stack_Size+0x2b10>
    2f0c:	01000000 	mrseq	r0, (UNDEF: 0)
    2f10:	10b6159c 	umlalsne	r1, r6, ip, r5
    2f14:	e3010000 	movw	r0, #4096	; 0x1000
    2f18:	00004c02 	andeq	r4, r0, r2, lsl #24
    2f1c:	0013cf00 	andseq	ip, r3, r0, lsl #30
    2f20:	11d91600 	bicsne	r1, r9, r0, lsl #12
    2f24:	e5010000 	str	r0, [r1, #-0]
    2f28:	00005e02 	andeq	r5, r0, r2, lsl #28
    2f2c:	0013f000 	andseq	pc, r3, r0
    2f30:	10431600 	subne	r1, r3, r0, lsl #12
    2f34:	e6010000 	str	r0, [r1], -r0
    2f38:	00004c02 	andeq	r4, r0, r2, lsl #24
    2f3c:	00140300 	andseq	r0, r4, r0, lsl #6
    2f40:	d8000000 	stmdale	r0, {}	; <UNPREDICTABLE>
    2f44:	04000001 	streq	r0, [r0], #-1
    2f48:	000dcb00 	andeq	ip, sp, r0, lsl #22
    2f4c:	58010400 	stmdapl	r1, {sl}
    2f50:	01000001 	tsteq	r0, r1
    2f54:	000012f0 	strdeq	r1, [r0], -r0
    2f58:	00000926 	andeq	r0, r0, r6, lsr #18
    2f5c:	00000518 	andeq	r0, r0, r8, lsl r5
    2f60:	00000000 	andeq	r0, r0, r0
    2f64:	00000f76 	andeq	r0, r0, r6, ror pc
    2f68:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    2f6c:	02000001 	andeq	r0, r0, #1
    2f70:	06a50502 	strteq	r0, [r5], r2, lsl #10
    2f74:	01020000 	mrseq	r0, (UNDEF: 2)
    2f78:	00065106 	andeq	r5, r6, r6, lsl #2
    2f7c:	33750300 	cmncc	r5, #0, 6
    2f80:	24020032 	strcs	r0, [r2], #-50	; 0x32
    2f84:	00000045 	andeq	r0, r0, r5, asr #32
    2f88:	7b070402 	blvc	1c3f98 <__Stack_Size+0x1c3b98>
    2f8c:	03000003 	movweq	r0, #3
    2f90:	00363175 	eorseq	r3, r6, r5, ror r1
    2f94:	00572502 	subseq	r2, r7, r2, lsl #10
    2f98:	02020000 	andeq	r0, r2, #0
    2f9c:	0003d707 	andeq	sp, r3, r7, lsl #14
    2fa0:	38750300 	ldmdacc	r5!, {r8, r9}^
    2fa4:	68260200 	stmdavs	r6!, {r9}
    2fa8:	02000000 	andeq	r0, r0, #0
    2fac:	064f0801 	strbeq	r0, [pc], -r1, lsl #16
    2fb0:	05040000 	streq	r0, [r4, #-0]
    2fb4:	00006f04 	andeq	r6, r0, r4, lsl #30
    2fb8:	038d0600 	orreq	r0, sp, #0, 12
    2fbc:	29010000 	stmdbcs	r1, {}	; <UNPREDICTABLE>
    2fc0:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
    2fc4:	00000154 	andeq	r0, r0, r4, asr r1
    2fc8:	012a9c01 	teqeq	sl, r1, lsl #24
    2fcc:	e9070000 	stmdb	r7, {}	; <UNPREDICTABLE>
    2fd0:	01000012 	tsteq	r0, r2, lsl r0
    2fd4:	00003a2b 	andeq	r3, r0, fp, lsr #20
    2fd8:	00142200 	andseq	r2, r4, r0, lsl #4
    2fdc:	0f440800 	svceq	0x00440800
    2fe0:	00120800 	andseq	r0, r2, r0, lsl #16
    2fe4:	00b70000 	adcseq	r0, r7, r0
    2fe8:	5b070000 	blpl	1c2ff0 <__Stack_Size+0x1c2bf0>
    2fec:	01000004 	tsteq	r0, r4
    2ff0:	00004c3c 	andeq	r4, r0, ip, lsr ip
    2ff4:	00149200 	andseq	r9, r4, r0, lsl #4
    2ff8:	56080000 	strpl	r0, [r8], -r0
    2ffc:	1208000f 	andne	r0, r8, #15
    3000:	d4000000 	strle	r0, [r0], #-0
    3004:	07000000 	streq	r0, [r0, -r0]
    3008:	0000045b 	andeq	r0, r0, fp, asr r4
    300c:	004c3d01 	subeq	r3, ip, r1, lsl #26
    3010:	14d60000 	ldrbne	r0, [r6], #0
    3014:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3018:	08000faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp}
    301c:	00000022 	andeq	r0, r0, r2, lsr #32
    3020:	000000f1 	strdeq	r0, [r0], -r1
    3024:	00045b07 	andeq	r5, r4, r7, lsl #22
    3028:	4c720100 	ldfmie	f0, [r2], #-0
    302c:	50000000 	andpl	r0, r0, r0
    3030:	00000015 	andeq	r0, r0, r5, lsl r0
    3034:	000fcc08 	andeq	ip, pc, r8, lsl #24
    3038:	00002008 	andeq	r2, r0, r8
    303c:	00010e00 	andeq	r0, r1, r0, lsl #28
    3040:	045b0700 	ldrbeq	r0, [fp], #-1792	; 0x700
    3044:	73010000 	movwvc	r0, #4096	; 0x1000
    3048:	0000004c 	andeq	r0, r0, ip, asr #32
    304c:	00001571 	andeq	r1, r0, r1, ror r5
    3050:	0f820900 	svceq	0x00820900
    3054:	01ba0800 			; <UNDEFINED> instruction: 0x01ba0800
    3058:	96090000 	strls	r0, [r9], -r0
    305c:	c508000f 	strgt	r0, [r8, #-15]
    3060:	09000001 	stmdbeq	r0, {r0}
    3064:	08000faa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, sl, fp}
    3068:	000001d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    306c:	12bd0600 	adcsne	r0, sp, #0, 12
    3070:	9e010000 	cdpls	0, 0, cr0, cr1, cr0, {0}
    3074:	00000000 	andeq	r0, r0, r0
    3078:	00000070 	andeq	r0, r0, r0, ror r0
    307c:	014f9c01 	cmpeq	pc, r1, lsl #24
    3080:	e9070000 	stmdb	r7, {}	; <UNPREDICTABLE>
    3084:	01000012 	tsteq	r0, r2, lsl r0
    3088:	00003aa0 	andeq	r3, r0, r0, lsr #21
    308c:	00158400 	andseq	r8, r5, r0, lsl #8
    3090:	300a0000 	andcc	r0, sl, r0
    3094:	03000002 	movweq	r0, #2
    3098:	015b022a 	cmpeq	fp, sl, lsr #4
    309c:	4c0b0000 	stcmi	0, cr0, [fp], {-0}
    30a0:	0c000000 	stceq	0, cr0, [r0], {-0}
    30a4:	000012d3 	ldrdeq	r1, [r0], -r3
    30a8:	004c1701 	subeq	r1, ip, r1, lsl #14
    30ac:	03050000 	movweq	r0, #20480	; 0x5000
    30b0:	200002d2 	ldrdcs	r0, [r0], -r2
    30b4:	0012de0c 	andseq	sp, r2, ip, lsl #28
    30b8:	4c180100 	ldfmis	f0, [r8], {-0}
    30bc:	05000000 	streq	r0, [r0, #-0]
    30c0:	0002d403 	andeq	sp, r2, r3, lsl #8
    30c4:	131b0d20 	tstne	fp, #32, 26	; 0x800
    30c8:	1d040000 	stcne	0, cr0, [r4, #-0]
    30cc:	0000005e 	andeq	r0, r0, lr, asr r0
    30d0:	0000700e 	andeq	r7, r0, lr
    30d4:	00019d00 	andeq	r9, r1, r0, lsl #26
    30d8:	019d0f00 	orrseq	r0, sp, r0, lsl #30
    30dc:	00060000 	andeq	r0, r6, r0
    30e0:	15070402 	strne	r0, [r7, #-1026]	; 0x402
    30e4:	0d000005 	stceq	0, cr0, [r0, #-20]	; 0xffffffec
    30e8:	00000032 	andeq	r0, r0, r2, lsr r0
    30ec:	018d1b01 	orreq	r1, sp, r1, lsl #22
    30f0:	ec0d0000 	stc	0, cr0, [sp], {-0}
    30f4:	01000007 	tsteq	r0, r7
    30f8:	00018d1c 	andeq	r8, r1, ip, lsl sp
    30fc:	13021000 	movwne	r1, #8192	; 0x2000
    3100:	dc050000 	stcle	0, cr0, [r5], {-0}
    3104:	0000005e 	andeq	r0, r0, lr, asr r0
    3108:	0012c410 	andseq	ip, r2, r0, lsl r4
    310c:	5ed90500 	cdppl	5, 13, cr0, cr9, cr0, {0}
    3110:	10000000 	andne	r0, r0, r0
    3114:	0000130e 	andeq	r1, r0, lr, lsl #6
    3118:	005edb05 	subseq	sp, lr, r5, lsl #22
    311c:	f9000000 			; <UNDEFINED> instruction: 0xf9000000
    3120:	04000003 	streq	r0, [r0], #-3
    3124:	000ea500 	andeq	sl, lr, r0, lsl #10
    3128:	58010400 	stmdapl	r1, {sl}
    312c:	01000001 	tsteq	r0, r1
    3130:	0000132d 	andeq	r1, r0, sp, lsr #6
    3134:	00000926 	andeq	r0, r0, r6, lsr #18
    3138:	00000530 	andeq	r0, r0, r0, lsr r5
    313c:	00000000 	andeq	r0, r0, r0
    3140:	0000102e 	andeq	r1, r0, lr, lsr #32
    3144:	f6050402 			; <UNDEFINED> instruction: 0xf6050402
    3148:	02000001 	andeq	r0, r0, #1
    314c:	06a50502 	strteq	r0, [r5], r2, lsl #10
    3150:	01020000 	mrseq	r0, (UNDEF: 2)
    3154:	00065106 	andeq	r5, r6, r6, lsl #2
    3158:	07040200 	streq	r0, [r4, -r0, lsl #4]
    315c:	0000037b 	andeq	r0, r0, fp, ror r3
    3160:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    3164:	4c250200 	sfmmi	f0, 4, [r5], #-0
    3168:	02000000 	andeq	r0, r0, #0
    316c:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    3170:	75030000 	strvc	r0, [r3, #-0]
    3174:	26020038 			; <UNDEFINED> instruction: 0x26020038
    3178:	0000005d 	andeq	r0, r0, sp, asr r0
    317c:	4f080102 	svcmi	0x00080102
    3180:	04000006 	streq	r0, [r0], #-6
    3184:	00005304 	andeq	r5, r0, r4, lsl #6
    3188:	07420500 	strbeq	r0, [r2, -r0, lsl #10]
    318c:	03010000 	movweq	r0, #4096	; 0x1000
    3190:	00008f2d 	andeq	r8, r0, sp, lsr #30
    3194:	08d30600 	ldmeq	r3, {r9, sl}^
    3198:	06000000 	streq	r0, [r0], -r0
    319c:	000003ea 	andeq	r0, r0, sl, ror #7
    31a0:	07810601 	streq	r0, [r1, r1, lsl #12]
    31a4:	06020000 	streq	r0, [r2], -r0
    31a8:	00000222 	andeq	r0, r0, r2, lsr #4
    31ac:	43070003 	movwmi	r0, #28675	; 0x7003
    31b0:	03000007 	movweq	r0, #7
    31b4:	00006a34 	andeq	r6, r0, r4, lsr sl
    31b8:	08f80800 	ldmeq	r8!, {fp}^
    31bc:	030c0000 	movweq	r0, #49152	; 0xc000
    31c0:	0000d738 	andeq	sp, r0, r8, lsr r7
    31c4:	02900900 	addseq	r0, r0, #0, 18
    31c8:	50030000 	andpl	r0, r3, r0
    31cc:	00000041 	andeq	r0, r0, r1, asr #32
    31d0:	03190900 	tsteq	r9, #0, 18
    31d4:	51030000 	mrspl	r0, (UNDEF: 3)
    31d8:	00000041 	andeq	r0, r0, r1, asr #32
    31dc:	14f90902 	ldrbtne	r0, [r9], #2306	; 0x902
    31e0:	52030000 	andpl	r0, r3, #0
    31e4:	00000041 	andeq	r0, r0, r1, asr #32
    31e8:	00e30904 	rsceq	r0, r3, r4, lsl #18
    31ec:	53030000 	movwpl	r0, #12288	; 0x3000
    31f0:	000000e6 	andeq	r0, r0, r6, ror #1
    31f4:	640a0008 	strvs	r0, [sl], #-8
    31f8:	e6000000 	str	r0, [r0], -r0
    31fc:	0b000000 	bleq	3204 <__Stack_Size+0x2e04>
    3200:	00000041 	andeq	r0, r0, r1, asr #32
    3204:	d7040400 	strle	r0, [r4, -r0, lsl #8]
    3208:	07000000 	streq	r0, [r0, -r0]
    320c:	000008f9 	strdeq	r0, [r0], -r9
    3210:	009a5403 	addseq	r5, sl, r3, lsl #8
    3214:	420c0000 	andmi	r0, ip, #0
    3218:	03020057 	movweq	r0, #8279	; 0x2057
    321c:	00011b62 	andeq	r1, r1, r2, ror #22
    3220:	62620d00 	rsbvs	r0, r2, #0, 26
    3224:	65030030 	strvs	r0, [r3, #-48]	; 0x30
    3228:	00000053 	andeq	r0, r0, r3, asr r0
    322c:	62620d00 	rsbvs	r0, r2, #0, 26
    3230:	66030031 			; <UNDEFINED> instruction: 0x66030031
    3234:	00000053 	andeq	r0, r0, r3, asr r0
    3238:	020e0001 	andeq	r0, lr, #1
    323c:	01375f03 	teqeq	r7, r3, lsl #30
    3240:	770f0000 	strvc	r0, [pc, -r0]
    3244:	41610300 	cmnmi	r1, r0, lsl #6
    3248:	0f000000 	svceq	0x00000000
    324c:	03007762 	movweq	r7, #1890	; 0x762
    3250:	0000f768 	andeq	pc, r0, r8, ror #14
    3254:	ff070000 			; <UNDEFINED> instruction: 0xff070000
    3258:	03000003 	movweq	r0, #3
    325c:	00011b69 	andeq	r1, r1, r9, ror #22
    3260:	003c0800 	eorseq	r0, ip, r0, lsl #16
    3264:	031c0000 	tsteq	ip, #0
    3268:	0001d36b 	andeq	sp, r1, fp, ror #6
    326c:	05500900 	ldrbeq	r0, [r0, #-2304]	; 0x900
    3270:	6d030000 	stcvs	0, cr0, [r3, #-0]
    3274:	00000053 	andeq	r0, r0, r3, asr r0
    3278:	02160900 	andseq	r0, r6, #0, 18
    327c:	6e030000 	cdpvs	0, 0, cr0, cr3, cr0, {0}
    3280:	00000053 	andeq	r0, r0, r3, asr r0
    3284:	04180901 	ldreq	r0, [r8], #-2305	; 0x901
    3288:	6f030000 	svcvs	0x00030000
    328c:	00000137 	andeq	r0, r0, r7, lsr r1
    3290:	01480902 	cmpeq	r8, r2, lsl #18
    3294:	70030000 	andvc	r0, r3, r0
    3298:	00000137 	andeq	r0, r0, r7, lsr r1
    329c:	081a0904 	ldmdaeq	sl, {r2, r8, fp}
    32a0:	71030000 	mrsvc	r0, (UNDEF: 3)
    32a4:	00000137 	andeq	r0, r0, r7, lsr r1
    32a8:	05cf0906 	strbeq	r0, [pc, #2310]	; 3bb6 <__Stack_Size+0x37b6>
    32ac:	73030000 	movwvc	r0, #12288	; 0x3000
    32b0:	00000053 	andeq	r0, r0, r3, asr r0
    32b4:	03a00908 	moveq	r0, #8, 18	; 0x20000
    32b8:	74030000 	strvc	r0, [r3], #-0
    32bc:	00000053 	andeq	r0, r0, r3, asr r0
    32c0:	04a10909 	strteq	r0, [r1], #2313	; 0x909
    32c4:	75030000 	strvc	r0, [r3, #-0]
    32c8:	00000053 	andeq	r0, r0, r3, asr r0
    32cc:	086f090a 	stmdaeq	pc!, {r1, r3, r8, fp}^	; <UNPREDICTABLE>
    32d0:	76030000 	strvc	r0, [r3], -r0
    32d4:	00000053 	andeq	r0, r0, r3, asr r0
    32d8:	0629090b 	strteq	r0, [r9], -fp, lsl #18
    32dc:	77030000 	strvc	r0, [r3, -r0]
    32e0:	00000053 	andeq	r0, r0, r3, asr r0
    32e4:	0720090c 	streq	r0, [r0, -ip, lsl #18]!
    32e8:	7a030000 	bvc	c32f0 <__Stack_Size+0xc2ef0>
    32ec:	000000ec 	andeq	r0, r0, ip, ror #1
    32f0:	3d070010 	stccc	0, cr0, [r7, #-64]	; 0xffffffc0
    32f4:	03000000 	movweq	r0, #0
    32f8:	0001427b 	andeq	r4, r1, fp, ror r2
    32fc:	074f0800 	strbeq	r0, [pc, -r0, lsl #16]
    3300:	03340000 	teqeq	r4, #0
    3304:	0002877d 	andeq	r8, r2, sp, ror r7
    3308:	053d0900 	ldreq	r0, [sp, #-2304]!	; 0x900
    330c:	7f030000 	svcvc	0x00030000
    3310:	00000288 	andeq	r0, r0, r8, lsl #5
    3314:	03c70900 	biceq	r0, r7, #0, 18
    3318:	80030000 	andhi	r0, r3, r0
    331c:	00000288 	andeq	r0, r0, r8, lsl #5
    3320:	07a70904 	streq	r0, [r7, r4, lsl #18]!
    3324:	83030000 	movwhi	r0, #12288	; 0x3000
    3328:	00000288 	andeq	r0, r0, r8, lsl #5
    332c:	07b90908 	ldreq	r0, [r9, r8, lsl #18]!
    3330:	84030000 	strhi	r0, [r3], #-0
    3334:	00000288 	andeq	r0, r0, r8, lsl #5
    3338:	051e090c 	ldreq	r0, [lr, #-2316]	; 0x90c
    333c:	96030000 	strls	r0, [r3], -r0
    3340:	0000029d 	muleq	r0, sp, r2
    3344:	07040910 	smladeq	r4, r0, r9, r0
    3348:	a1030000 	mrsge	r0, (UNDEF: 3)
    334c:	0000029d 	muleq	r0, sp, r2
    3350:	04e80914 	strbteq	r0, [r8], #2324	; 0x914
    3354:	ab030000 	blge	c335c <__Stack_Size+0xc2f5c>
    3358:	000002b7 			; <UNDEFINED> instruction: 0x000002b7
    335c:	01340918 	teqeq	r4, r8, lsl r9
    3360:	ad030000 	stcge	0, cr0, [r3, #-0]
    3364:	000000e6 	andeq	r0, r0, r6, ror #1
    3368:	0202091c 	andeq	r0, r2, #28, 18	; 0x70000
    336c:	ae030000 	cdpge	0, 0, cr0, cr3, cr0, {0}
    3370:	000000e6 	andeq	r0, r0, r6, ror #1
    3374:	08290920 	stmdaeq	r9!, {r5, r8, fp}
    3378:	af030000 	svcge	0x00030000
    337c:	000000e6 	andeq	r0, r0, r6, ror #1
    3380:	06110924 	ldreq	r0, [r1], -r4, lsr #18
    3384:	b0030000 	andlt	r0, r3, r0
    3388:	000000e6 	andeq	r0, r0, r6, ror #1
    338c:	057b0928 	ldrbeq	r0, [fp, #-2344]!	; 0x928
    3390:	b2030000 	andlt	r0, r3, #0
    3394:	00000064 	andeq	r0, r0, r4, rrx
    3398:	14f6092c 	ldrbtne	r0, [r6], #2348	; 0x92c
    339c:	b3030000 	movwlt	r0, #12288	; 0x3000
    33a0:	00000053 	andeq	r0, r0, r3, asr r0
    33a4:	04100030 	ldreq	r0, [r0], #-48	; 0x30
    33a8:	00028704 	andeq	r8, r2, r4, lsl #14
    33ac:	008f0a00 	addeq	r0, pc, r0, lsl #20
    33b0:	029d0000 	addseq	r0, sp, #0
    33b4:	530b0000 	movwpl	r0, #45056	; 0xb000
    33b8:	00000000 	andeq	r0, r0, r0
    33bc:	028e0404 	addeq	r0, lr, #4, 8	; 0x4000000
    33c0:	8f0a0000 	svchi	0x000a0000
    33c4:	b7000000 	strlt	r0, [r0, -r0]
    33c8:	0b000002 	bleq	33d8 <__Stack_Size+0x2fd8>
    33cc:	00000053 	andeq	r0, r0, r3, asr r0
    33d0:	0000530b 	andeq	r5, r0, fp, lsl #6
    33d4:	04040000 	streq	r0, [r4], #-0
    33d8:	000002a3 	andeq	r0, r0, r3, lsr #5
    33dc:	00075007 	andeq	r5, r7, r7
    33e0:	deb50300 	cdple	3, 11, cr0, cr5, cr0, {0}
    33e4:	08000001 	stmdaeq	r0, {r0}
    33e8:	0000065d 	andeq	r0, r0, sp, asr r6
    33ec:	41b70324 			; <UNDEFINED> instruction: 0x41b70324
    33f0:	09000003 	stmdbeq	r0, {r0, r1}
    33f4:	000006ca 	andeq	r0, r0, sl, asr #13
    33f8:	0288b903 	addeq	fp, r8, #49152	; 0xc000
    33fc:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    3400:	000005b9 			; <UNDEFINED> instruction: 0x000005b9
    3404:	0288ba03 	addeq	fp, r8, #12288	; 0x3000
    3408:	09040000 	stmdbeq	r4, {}	; <UNPREDICTABLE>
    340c:	000005e2 	andeq	r0, r0, r2, ror #11
    3410:	0288bb03 	addeq	fp, r8, #3072	; 0xc00
    3414:	09080000 	stmdbeq	r8, {}	; <UNPREDICTABLE>
    3418:	000000ec 	andeq	r0, r0, ip, ror #1
    341c:	0288bc03 	addeq	fp, r8, #768	; 0x300
    3420:	090c0000 	stmdbeq	ip, {}	; <UNPREDICTABLE>
    3424:	00000696 	muleq	r0, r6, r6
    3428:	0288bd03 	addeq	fp, r8, #3, 26	; 0xc0
    342c:	09100000 	ldmdbeq	r0, {}	; <UNPREDICTABLE>
    3430:	00000406 	andeq	r0, r0, r6, lsl #8
    3434:	0288be03 	addeq	fp, r8, #3, 28	; 0x30
    3438:	09140000 	ldmdbeq	r4, {}	; <UNPREDICTABLE>
    343c:	0000006c 	andeq	r0, r0, ip, rrx
    3440:	0288bf03 	addeq	fp, r8, #3, 30
    3444:	09180000 	ldmdbeq	r8, {}	; <UNPREDICTABLE>
    3448:	000005a3 	andeq	r0, r0, r3, lsr #11
    344c:	0288c003 	addeq	ip, r8, #3
    3450:	091c0000 	ldmdbeq	ip, {}	; <UNPREDICTABLE>
    3454:	0000001c 	andeq	r0, r0, ip, lsl r0
    3458:	0288c103 	addeq	ip, r8, #-1073741824	; 0xc0000000
    345c:	00200000 	eoreq	r0, r0, r0
    3460:	00065e07 	andeq	r5, r6, r7, lsl #28
    3464:	c8c30300 	stmiagt	r3, {r8, r9}^
    3468:	11000002 	tstne	r0, r2
    346c:	00000539 	andeq	r0, r0, r9, lsr r5
    3470:	105c3501 	subsne	r3, ip, r1, lsl #10
    3474:	00380800 	eorseq	r0, r8, r0, lsl #16
    3478:	9c010000 	stcls	0, cr0, [r1], {-0}
    347c:	0005f412 	andeq	pc, r5, r2, lsl r4	; <UNPREDICTABLE>
    3480:	bdec0300 	stcllt	3, cr0, [ip]
    3484:	12000002 	andne	r0, r0, #2
    3488:	00001341 	andeq	r1, r0, r1, asr #6
    348c:	0341ed03 	movteq	lr, #7427	; 0x1d03
    3490:	58130000 	ldmdapl	r3, {}	; <UNPREDICTABLE>
    3494:	01000013 	tsteq	r0, r3, lsl r0
    3498:	0001d327 	andeq	sp, r1, r7, lsr #6
    349c:	e4030500 	str	r0, [r3], #-1280	; 0x500
    34a0:	13200002 	teqne	r0, #2
    34a4:	0000131b 	andeq	r1, r0, fp, lsl r3
    34a8:	00531801 	subseq	r1, r3, r1, lsl #16
    34ac:	03050000 	movweq	r0, #20480	; 0x5000
    34b0:	200002e0 	andcs	r0, r0, r0, ror #5
    34b4:	00027c13 	andeq	r7, r2, r3, lsl ip
    34b8:	a61d0100 	ldrge	r0, [sp], -r0, lsl #2
    34bc:	05000003 	streq	r0, [r0, #-3]
    34c0:	00030403 	andeq	r0, r3, r3, lsl #8
    34c4:	d3040420 	movwle	r0, #17440	; 0x4420
    34c8:	13000001 	movwne	r0, #1
    34cc:	0000052f 	andeq	r0, r0, pc, lsr #10
    34d0:	03bd2001 			; <UNDEFINED> instruction: 0x03bd2001
    34d4:	03050000 	movweq	r0, #20480	; 0x5000
    34d8:	200002dc 	ldrdcs	r0, [r0], -ip
    34dc:	02bd0404 	adcseq	r0, sp, #4, 8	; 0x4000000
    34e0:	40130000 	andsmi	r0, r3, r0
    34e4:	01000013 	tsteq	r0, r3, lsl r0
    34e8:	0003d428 	andeq	sp, r3, r8, lsr #8
    34ec:	00030500 	andeq	r0, r3, r0, lsl #10
    34f0:	04200003 	strteq	r0, [r0], #-3
    34f4:	00034104 	andeq	r4, r3, r4, lsl #2
    34f8:	13231300 	teqne	r3, #0, 6
    34fc:	25010000 	strcs	r0, [r1, #-0]
    3500:	00000041 	andeq	r0, r0, r1, asr #32
    3504:	02d80305 	sbcseq	r0, r8, #335544320	; 0x14000000
    3508:	c2132000 	andsgt	r2, r3, #0
    350c:	01000004 	tsteq	r0, r4
    3510:	00004126 	andeq	r4, r0, r6, lsr #2
    3514:	08030500 	stmdaeq	r3, {r8, sl}
    3518:	00200003 	eoreq	r0, r0, r3
    351c:	00000de0 	andeq	r0, r0, r0, ror #27
    3520:	0fa80004 	svceq	0x00a80004
    3524:	01040000 	mrseq	r0, (UNDEF: 4)
    3528:	00000158 	andeq	r0, r0, r8, asr r1
    352c:	00136401 	andseq	r6, r3, r1, lsl #8
    3530:	00092600 	andeq	r2, r9, r0, lsl #12
    3534:	00057800 	andeq	r7, r5, r0, lsl #16
    3538:	00000000 	andeq	r0, r0, r0
    353c:	00109500 	andseq	r9, r0, r0, lsl #10
    3540:	05040200 	streq	r0, [r4, #-512]	; 0x200
    3544:	000001f6 	strdeq	r0, [r0], -r6
    3548:	a5050202 	strge	r0, [r5, #-514]	; 0x202
    354c:	02000006 	andeq	r0, r0, #6
    3550:	06510601 	ldrbeq	r0, [r1], -r1, lsl #12
    3554:	75030000 	strvc	r0, [r3, #-0]
    3558:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    355c:	00004524 	andeq	r4, r0, r4, lsr #10
    3560:	07040200 	streq	r0, [r4, -r0, lsl #4]
    3564:	0000037b 	andeq	r0, r0, fp, ror r3
    3568:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    356c:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    3570:	02000000 	andeq	r0, r0, #0
    3574:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    3578:	75030000 	strvc	r0, [r3, #-0]
    357c:	26020038 			; <UNDEFINED> instruction: 0x26020038
    3580:	00000068 	andeq	r0, r0, r8, rrx
    3584:	4f080102 	svcmi	0x00080102
    3588:	04000006 	streq	r0, [r0], #-6
    358c:	00000446 	andeq	r0, r0, r6, asr #8
    3590:	007a2c02 	rsbseq	r2, sl, r2, lsl #24
    3594:	45050000 	strmi	r0, [r5, #-0]
    3598:	06000000 	streq	r0, [r0], -r0
    359c:	94360201 	ldrtls	r0, [r6], #-513	; 0x201
    35a0:	07000000 	streq	r0, [r0, -r0]
    35a4:	000005dc 	ldrdeq	r0, [r0], -ip
    35a8:	074a0700 	strbeq	r0, [sl, -r0, lsl #14]
    35ac:	00010000 	andeq	r0, r1, r0
    35b0:	00043304 	andeq	r3, r4, r4, lsl #6
    35b4:	7f390200 	svcvc	0x00390200
    35b8:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    35bc:	0000036b 	andeq	r0, r0, fp, ror #6
    35c0:	c4160301 	ldrgt	r0, [r6], #-769	; 0x301
    35c4:	07000000 	streq	r0, [r0, -r0]
    35c8:	000000fe 	strdeq	r0, [r0], -lr
    35cc:	02aa0700 	adceq	r0, sl, #0, 14
    35d0:	07010000 	streq	r0, [r1, -r0]
    35d4:	000007ff 	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
    35d8:	04230702 	strteq	r0, [r3], #-1794	; 0x702
    35dc:	00030000 	andeq	r0, r3, r0
    35e0:	00066208 	andeq	r6, r6, r8, lsl #4
    35e4:	1f030100 	svcne	0x00030100
    35e8:	00000125 	andeq	r0, r0, r5, lsr #2
    35ec:	0014d607 	andseq	sp, r4, r7, lsl #12
    35f0:	0f070000 	svceq	0x00070000
    35f4:	01000017 	tsteq	r0, r7, lsl r0
    35f8:	0015fb07 	andseq	pc, r5, r7, lsl #22
    35fc:	e1070200 	mrs	r0, (UNDEF: 39)
    3600:	03000014 	movweq	r0, #20
    3604:	000c2907 	andeq	r2, ip, r7, lsl #18
    3608:	9e070400 	cfcpysls	mvf0, mvf7
    360c:	05000016 	streq	r0, [r0, #-22]
    3610:	0016ce07 	andseq	ip, r6, r7, lsl #28
    3614:	4b070600 	blmi	1c4e1c <__Stack_Size+0x1c4a1c>
    3618:	07000015 	smladeq	r0, r5, r0, r0
    361c:	0015aa07 	andseq	sl, r5, r7, lsl #20
    3620:	05070800 	streq	r0, [r7, #-2048]	; 0x800
    3624:	09000016 	stmdbeq	r0, {r1, r2, r4}
    3628:	0014ac07 	andseq	sl, r4, r7, lsl #24
    362c:	5a070a00 	bpl	1c5e34 <__Stack_Size+0x1c5a34>
    3630:	0b000015 	bleq	368c <__Stack_Size+0x328c>
    3634:	00162707 	andseq	r2, r6, r7, lsl #14
    3638:	29070c00 	stmdbcs	r7, {sl, fp}
    363c:	0c000015 	stceq	0, cr0, [r0], {21}
    3640:	15cb0800 	strbne	r0, [fp, #2048]	; 0x800
    3644:	03010000 	movweq	r0, #4096	; 0x1000
    3648:	00015032 	andeq	r5, r1, r2, lsr r0
    364c:	14160700 	ldrne	r0, [r6], #-1792	; 0x700
    3650:	07010000 	streq	r0, [r1, -r0]
    3654:	0000167f 	andeq	r1, r0, pc, ror r6
    3658:	14280702 	strtne	r0, [r8], #-1794	; 0x702
    365c:	07030000 	streq	r0, [r3, -r0]
    3660:	00001636 	andeq	r1, r0, r6, lsr r6
    3664:	166b0704 	strbtne	r0, [fp], -r4, lsl #14
    3668:	00050000 	andeq	r0, r5, r0
    366c:	00156808 	andseq	r6, r5, r8, lsl #16
    3670:	3c030100 	stfccs	f0, [r3], {-0}
    3674:	00000169 	andeq	r0, r0, r9, ror #2
    3678:	00137707 	andseq	r7, r3, r7, lsl #14
    367c:	d5070000 	strle	r0, [r7, #-0]
    3680:	01000013 	tsteq	r0, r3, lsl r0
    3684:	15bc0800 	ldrne	r0, [ip, #2048]!	; 0x800
    3688:	04010000 	streq	r0, [r1], #-0
    368c:	0001b216 	andeq	fp, r1, r6, lsl r2
    3690:	16ea0700 	strbtne	r0, [sl], r0, lsl #14
    3694:	07000000 	streq	r0, [r0, -r0]
    3698:	000015dc 	ldrdeq	r1, [r0], -ip
    369c:	14600701 	strbtne	r0, [r0], #-1793	; 0x701
    36a0:	07020000 	streq	r0, [r2, -r0]
    36a4:	00001722 	andeq	r1, r0, r2, lsr #14
    36a8:	145b0703 	ldrbne	r0, [fp], #-1795	; 0x703
    36ac:	07040000 	streq	r0, [r4, -r0]
    36b0:	0000171d 	andeq	r1, r0, sp, lsl r7
    36b4:	17000705 	strne	r0, [r0, -r5, lsl #14]
    36b8:	07060000 	streq	r0, [r6, -r0]
    36bc:	00001617 	andeq	r1, r0, r7, lsl r6
    36c0:	13ea0707 	mvnne	r0, #1835008	; 0x1c0000
    36c4:	07080000 	streq	r0, [r8, -r0]
    36c8:	0000149c 	muleq	r0, ip, r4
    36cc:	8c090009 	stchi	0, cr0, [r9], {9}
    36d0:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    36d4:	01d72404 	bicseq	r2, r7, r4, lsl #8
    36d8:	3d0a0000 	stccc	0, cr0, [sl, #-0]
    36dc:	04000001 	streq	r0, [r0], #-1
    36e0:	0001d726 	andeq	sp, r1, r6, lsr #14
    36e4:	930a0000 	movwls	r0, #40960	; 0xa000
    36e8:	04000005 	streq	r0, [r0], #-5
    36ec:	00004c27 	andeq	r4, r0, r7, lsr #24
    36f0:	0b000400 	bleq	46f8 <__Stack_Size+0x42f8>
    36f4:	00005e04 	andeq	r5, r0, r4, lsl #28
    36f8:	02d60400 	sbcseq	r0, r6, #0, 8
    36fc:	29040000 	stmdbcs	r4, {}	; <UNPREDICTABLE>
    3700:	000001b2 			; <UNDEFINED> instruction: 0x000001b2
    3704:	00074208 	andeq	r4, r7, r8, lsl #4
    3708:	2d040100 	stfcss	f0, [r4, #-0]
    370c:	0000020d 	andeq	r0, r0, sp, lsl #4
    3710:	0008d307 	andeq	sp, r8, r7, lsl #6
    3714:	ea070000 	b	1c371c <__Stack_Size+0x1c331c>
    3718:	01000003 	tsteq	r0, r3
    371c:	00078107 	andeq	r8, r7, r7, lsl #2
    3720:	22070200 	andcs	r0, r7, #0, 4
    3724:	03000002 	movweq	r0, #2
    3728:	07430400 	strbeq	r0, [r3, -r0, lsl #8]
    372c:	34040000 	strcc	r0, [r4], #-0
    3730:	000001e8 	andeq	r0, r0, r8, ror #3
    3734:	0008f809 	andeq	pc, r8, r9, lsl #16
    3738:	38040c00 	stmdacc	r4, {sl, fp}
    373c:	00000255 	andeq	r0, r0, r5, asr r2
    3740:	0002900a 	andeq	r9, r2, sl
    3744:	4c500400 	cfldrdmi	mvd0, [r0], {-0}
    3748:	00000000 	andeq	r0, r0, r0
    374c:	0003190a 	andeq	r1, r3, sl, lsl #18
    3750:	4c510400 	cfldrdmi	mvd0, [r1], {-0}
    3754:	02000000 	andeq	r0, r0, #0
    3758:	0014f90a 	andseq	pc, r4, sl, lsl #18
    375c:	4c520400 	cfldrdmi	mvd0, [r2], {-0}
    3760:	04000000 	streq	r0, [r0], #-0
    3764:	0000e30a 	andeq	lr, r0, sl, lsl #6
    3768:	64530400 	ldrbvs	r0, [r3], #-1024	; 0x400
    376c:	08000002 	stmdaeq	r0, {r1}
    3770:	01d70c00 	bicseq	r0, r7, r0, lsl #24
    3774:	02640000 	rsbeq	r0, r4, #0
    3778:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    377c:	00000000 	andeq	r0, r0, r0
    3780:	0255040b 	subseq	r0, r5, #184549376	; 0xb000000
    3784:	f9040000 			; <UNDEFINED> instruction: 0xf9040000
    3788:	04000008 	streq	r0, [r0], #-8
    378c:	00021854 	andeq	r1, r2, r4, asr r8
    3790:	07da0900 	ldrbeq	r0, [sl, r0, lsl #18]
    3794:	04020000 	streq	r0, [r2], #-0
    3798:	00029a58 	andeq	r9, r2, r8, asr sl
    379c:	09170a00 	ldmdbeq	r7, {r9, fp}
    37a0:	5a040000 	bpl	1037a8 <__Stack_Size+0x1033a8>
    37a4:	0000005e 	andeq	r0, r0, lr, asr r0
    37a8:	03b00a00 	movseq	r0, #0, 20
    37ac:	5b040000 	blpl	1037b4 <__Stack_Size+0x1033b4>
    37b0:	0000005e 	andeq	r0, r0, lr, asr r0
    37b4:	db040001 	blle	1037c0 <__Stack_Size+0x1033c0>
    37b8:	04000007 	streq	r0, [r0], #-7
    37bc:	0002755d 	andeq	r7, r2, sp, asr r5
    37c0:	57420e00 	strbpl	r0, [r2, -r0, lsl #28]
    37c4:	62040200 	andvs	r0, r4, #0, 4
    37c8:	000002c9 	andeq	r0, r0, r9, asr #5
    37cc:	3062620f 	rsbcc	r6, r2, pc, lsl #4
    37d0:	5e650400 	cdppl	4, 6, cr0, cr5, cr0, {0}
    37d4:	00000000 	andeq	r0, r0, r0
    37d8:	3162620f 	cmncc	r2, pc, lsl #4
    37dc:	5e660400 	cdppl	4, 6, cr0, cr6, cr0, {0}
    37e0:	01000000 	mrseq	r0, (UNDEF: 0)
    37e4:	04021000 	streq	r1, [r2], #-0
    37e8:	0002e55f 	andeq	lr, r2, pc, asr r5
    37ec:	00771100 	rsbseq	r1, r7, r0, lsl #2
    37f0:	004c6104 	subeq	r6, ip, r4, lsl #2
    37f4:	62110000 	andsvs	r0, r1, #0
    37f8:	68040077 	stmdavs	r4, {r0, r1, r2, r4, r5, r6}
    37fc:	000002a5 	andeq	r0, r0, r5, lsr #5
    3800:	03ff0400 	mvnseq	r0, #0, 8
    3804:	69040000 	stmdbvs	r4, {}	; <UNPREDICTABLE>
    3808:	000002c9 	andeq	r0, r0, r9, asr #5
    380c:	00003c09 	andeq	r3, r0, r9, lsl #24
    3810:	6b041c00 	blvs	10a818 <__Stack_Size+0x10a418>
    3814:	00000381 	andeq	r0, r0, r1, lsl #7
    3818:	0005500a 	andeq	r5, r5, sl
    381c:	5e6d0400 	cdppl	4, 6, cr0, cr13, cr0, {0}
    3820:	00000000 	andeq	r0, r0, r0
    3824:	0002160a 	andeq	r1, r2, sl, lsl #12
    3828:	5e6e0400 	cdppl	4, 6, cr0, cr14, cr0, {0}
    382c:	01000000 	mrseq	r0, (UNDEF: 0)
    3830:	0004180a 	andeq	r1, r4, sl, lsl #16
    3834:	e56f0400 	strb	r0, [pc, #-1024]!	; 343c <__Stack_Size+0x303c>
    3838:	02000002 	andeq	r0, r0, #2
    383c:	0001480a 	andeq	r4, r1, sl, lsl #16
    3840:	e5700400 	ldrb	r0, [r0, #-1024]!	; 0x400
    3844:	04000002 	streq	r0, [r0], #-2
    3848:	00081a0a 	andeq	r1, r8, sl, lsl #20
    384c:	e5710400 	ldrb	r0, [r1, #-1024]!	; 0x400
    3850:	06000002 	streq	r0, [r0], -r2
    3854:	0005cf0a 	andeq	ip, r5, sl, lsl #30
    3858:	5e730400 	cdppl	4, 7, cr0, cr3, cr0, {0}
    385c:	08000000 	stmdaeq	r0, {}	; <UNPREDICTABLE>
    3860:	0003a00a 	andeq	sl, r3, sl
    3864:	5e740400 	cdppl	4, 7, cr0, cr4, cr0, {0}
    3868:	09000000 	stmdbeq	r0, {}	; <UNPREDICTABLE>
    386c:	0004a10a 	andeq	sl, r4, sl, lsl #2
    3870:	5e750400 	cdppl	4, 7, cr0, cr5, cr0, {0}
    3874:	0a000000 	beq	387c <__Stack_Size+0x347c>
    3878:	00086f0a 	andeq	r6, r8, sl, lsl #30
    387c:	5e760400 	cdppl	4, 7, cr0, cr6, cr0, {0}
    3880:	0b000000 	bleq	3888 <__Stack_Size+0x3488>
    3884:	0006290a 	andeq	r2, r6, sl, lsl #18
    3888:	5e770400 	cdppl	4, 7, cr0, cr7, cr0, {0}
    388c:	0c000000 	stceq	0, cr0, [r0], {-0}
    3890:	0007200a 	andeq	r2, r7, sl
    3894:	6a7a0400 	bvs	1e8489c <__Stack_Size+0x1e8449c>
    3898:	10000002 	andne	r0, r0, r2
    389c:	003d0400 	eorseq	r0, sp, r0, lsl #8
    38a0:	7b040000 	blvc	1038a8 <__Stack_Size+0x1034a8>
    38a4:	000002f0 	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
    38a8:	00074f09 	andeq	r4, r7, r9, lsl #30
    38ac:	7d043400 	cfstrsvc	mvf3, [r4, #-0]
    38b0:	00000435 	andeq	r0, r0, r5, lsr r4
    38b4:	00053d0a 	andeq	r3, r5, sl, lsl #26
    38b8:	367f0400 	ldrbtcc	r0, [pc], -r0, lsl #8
    38bc:	00000004 	andeq	r0, r0, r4
    38c0:	0003c70a 	andeq	ip, r3, sl, lsl #14
    38c4:	36800400 	strcc	r0, [r0], r0, lsl #8
    38c8:	04000004 	streq	r0, [r0], #-4
    38cc:	0007a70a 	andeq	sl, r7, sl, lsl #14
    38d0:	36830400 	strcc	r0, [r3], r0, lsl #8
    38d4:	08000004 	stmdaeq	r0, {r2}
    38d8:	0007b90a 	andeq	fp, r7, sl, lsl #18
    38dc:	36840400 	strcc	r0, [r4], r0, lsl #8
    38e0:	0c000004 	stceq	0, cr0, [r0], {4}
    38e4:	00051e0a 	andeq	r1, r5, sl, lsl #28
    38e8:	4b960400 	blmi	fe5848f0 <BootRAM+0xd4f5091>
    38ec:	10000004 	andne	r0, r0, r4
    38f0:	0007040a 	andeq	r0, r7, sl, lsl #8
    38f4:	4ba10400 	blmi	fe8448fc <BootRAM+0xd7b509d>
    38f8:	14000004 	strne	r0, [r0], #-4
    38fc:	0004e80a 	andeq	lr, r4, sl, lsl #16
    3900:	65ab0400 	strvs	r0, [fp, #1024]!	; 0x400
    3904:	18000004 	stmdane	r0, {r2}
    3908:	0001340a 	andeq	r3, r1, sl, lsl #8
    390c:	64ad0400 	strtvs	r0, [sp], #1024	; 0x400
    3910:	1c000002 	stcne	0, cr0, [r0], {2}
    3914:	0002020a 	andeq	r0, r2, sl, lsl #4
    3918:	64ae0400 	strtvs	r0, [lr], #1024	; 0x400
    391c:	20000002 	andcs	r0, r0, r2
    3920:	0008290a 	andeq	r2, r8, sl, lsl #18
    3924:	64af0400 	strtvs	r0, [pc], #1024	; 392c <__Stack_Size+0x352c>
    3928:	24000002 	strcs	r0, [r0], #-2
    392c:	0006110a 	andeq	r1, r6, sl, lsl #2
    3930:	64b00400 	ldrtvs	r0, [r0], #1024	; 0x400
    3934:	28000002 	stmdacs	r0, {r1}
    3938:	00057b0a 	andeq	r7, r5, sl, lsl #22
    393c:	d7b20400 	ldrle	r0, [r2, r0, lsl #8]!
    3940:	2c000001 	stccs	0, cr0, [r0], {1}
    3944:	0014f60a 	andseq	pc, r4, sl, lsl #12
    3948:	5eb30400 	cdppl	4, 11, cr0, cr3, cr0, {0}
    394c:	30000000 	andcc	r0, r0, r0
    3950:	040b1200 	streq	r1, [fp], #-512	; 0x200
    3954:	00000435 	andeq	r0, r0, r5, lsr r4
    3958:	00020d0c 	andeq	r0, r2, ip, lsl #26
    395c:	00044b00 	andeq	r4, r4, r0, lsl #22
    3960:	005e0d00 	subseq	r0, lr, r0, lsl #26
    3964:	0b000000 	bleq	396c <__Stack_Size+0x356c>
    3968:	00043c04 	andeq	r3, r4, r4, lsl #24
    396c:	020d0c00 	andeq	r0, sp, #0, 24
    3970:	04650000 	strbteq	r0, [r5], #-0
    3974:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    3978:	0d000000 	stceq	0, cr0, [r0, #-0]
    397c:	0000005e 	andeq	r0, r0, lr, asr r0
    3980:	51040b00 	tstpl	r4, r0, lsl #22
    3984:	04000004 	streq	r0, [r0], #-4
    3988:	00000750 	andeq	r0, r0, r0, asr r7
    398c:	038cb504 	orreq	fp, ip, #4, 10	; 0x1000000
    3990:	5d090000 	stcpl	0, cr0, [r9, #-0]
    3994:	24000006 	strcs	r0, [r0], #-6
    3998:	04efb704 	strbteq	fp, [pc], #1796	; 39a0 <__Stack_Size+0x35a0>
    399c:	ca0a0000 	bgt	2839a4 <__Stack_Size+0x2835a4>
    39a0:	04000006 	streq	r0, [r0], #-6
    39a4:	000436b9 			; <UNDEFINED> instruction: 0x000436b9
    39a8:	b90a0000 	stmdblt	sl, {}	; <UNPREDICTABLE>
    39ac:	04000005 	streq	r0, [r0], #-5
    39b0:	000436ba 			; <UNDEFINED> instruction: 0x000436ba
    39b4:	e20a0400 	and	r0, sl, #0, 8
    39b8:	04000005 	streq	r0, [r0], #-5
    39bc:	000436bb 			; <UNDEFINED> instruction: 0x000436bb
    39c0:	ec0a0800 	stc	8, cr0, [sl], {-0}
    39c4:	04000000 	streq	r0, [r0], #-0
    39c8:	000436bc 			; <UNDEFINED> instruction: 0x000436bc
    39cc:	960a0c00 	strls	r0, [sl], -r0, lsl #24
    39d0:	04000006 	streq	r0, [r0], #-6
    39d4:	000436bd 			; <UNDEFINED> instruction: 0x000436bd
    39d8:	060a1000 	streq	r1, [sl], -r0
    39dc:	04000004 	streq	r0, [r0], #-4
    39e0:	000436be 			; <UNDEFINED> instruction: 0x000436be
    39e4:	6c0a1400 	cfstrsvs	mvf1, [sl], {-0}
    39e8:	04000000 	streq	r0, [r0], #-0
    39ec:	000436bf 			; <UNDEFINED> instruction: 0x000436bf
    39f0:	a30a1800 	movwge	r1, #43008	; 0xa800
    39f4:	04000005 	streq	r0, [r0], #-5
    39f8:	000436c0 	andeq	r3, r4, r0, asr #13
    39fc:	1c0a1c00 	stcne	12, cr1, [sl], {-0}
    3a00:	04000000 	streq	r0, [r0], #-0
    3a04:	000436c1 	andeq	r3, r4, r1, asr #13
    3a08:	04002000 	streq	r2, [r0], #-0
    3a0c:	0000065e 	andeq	r0, r0, lr, asr r6
    3a10:	0476c304 	ldrbteq	ip, [r6], #-772	; 0x304
    3a14:	7a130000 	bvc	4c3a1c <__Stack_Size+0x4c361c>
    3a18:	01000015 	tsteq	r0, r5, lsl r0
    3a1c:	0001d735 	andeq	sp, r1, r5, lsr r7
    3a20:	00109400 	andseq	r9, r0, r0, lsl #8
    3a24:	00002408 	andeq	r2, r0, r8, lsl #8
    3a28:	239c0100 	orrscs	r0, ip, #0, 2
    3a2c:	14000005 	strne	r0, [r0], #-5
    3a30:	00001454 	andeq	r1, r0, r4, asr r4
    3a34:	004c3501 	subeq	r3, ip, r1, lsl #10
    3a38:	15c60000 	strbne	r0, [r6]
    3a3c:	13000000 	movwne	r0, #0
    3a40:	00001535 	andeq	r1, r0, r5, lsr r5
    3a44:	01d76301 	bicseq	r6, r7, r1, lsl #6
    3a48:	10b80000 	adcsne	r0, r8, r0
    3a4c:	00240800 	eoreq	r0, r4, r0, lsl #16
    3a50:	9c010000 	stcls	0, cr0, [r1], {-0}
    3a54:	0000054c 	andeq	r0, r0, ip, asr #10
    3a58:	00145414 	andseq	r5, r4, r4, lsl r4
    3a5c:	4c630100 	stfmie	f0, [r3], #-0
    3a60:	e7000000 	str	r0, [r0, -r0]
    3a64:	00000015 	andeq	r0, r0, r5, lsl r0
    3a68:	00165813 	andseq	r5, r6, r3, lsl r8
    3a6c:	d79b0100 	ldrle	r0, [fp, r0, lsl #2]
    3a70:	dc000001 	stcle	0, cr0, [r0], {1}
    3a74:	90080010 	andls	r0, r8, r0, lsl r0
    3a78:	01000000 	mrseq	r0, (UNDEF: 0)
    3a7c:	0005b69c 	muleq	r5, ip, r6
    3a80:	14541400 	ldrbne	r1, [r4], #-1024	; 0x400
    3a84:	9b010000 	blls	43a8c <__Stack_Size+0x4368c>
    3a88:	0000004c 	andeq	r0, r0, ip, asr #32
    3a8c:	00001608 	andeq	r1, r0, r8, lsl #12
    3a90:	0010fc15 	andseq	pc, r0, r5, lsl ip	; <UNPREDICTABLE>
    3a94:	00001c08 	andeq	r1, r0, r8, lsl #24
    3a98:	00059100 	andeq	r9, r5, r0, lsl #2
    3a9c:	03a81600 			; <UNDEFINED> instruction: 0x03a81600
    3aa0:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    3aa4:	0000005e 	andeq	r0, r0, lr, asr r0
    3aa8:	00001629 	andeq	r1, r0, r9, lsr #12
    3aac:	11201700 	teqne	r0, r0, lsl #14
    3ab0:	00300800 	eorseq	r0, r0, r0, lsl #16
    3ab4:	aa160000 	bge	583abc <__Stack_Size+0x5836bc>
    3ab8:	01000016 	tsteq	r0, r6, lsl r0
    3abc:	00005ec3 	andeq	r5, r0, r3, asr #29
    3ac0:	00163d00 	andseq	r3, r6, r0, lsl #26
    3ac4:	16c61800 	strbne	r1, [r6], r0, lsl #16
    3ac8:	c4010000 	strgt	r0, [r1], #-0
    3acc:	0000005e 	andeq	r0, r0, lr, asr r0
    3ad0:	c9190000 	ldmdbgt	r9, {}	; <UNPREDICTABLE>
    3ad4:	01000013 	tsteq	r0, r3, lsl r0
    3ad8:	116c01e0 	smulttne	ip, r0, r1
    3adc:	00a80800 	adceq	r0, r8, r0, lsl #16
    3ae0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3ae4:	0000067b 	andeq	r0, r0, fp, ror r6
    3ae8:	0016961a 	andseq	r9, r6, sl, lsl r6
    3aec:	01e20100 	mvneq	r0, r0, lsl #2
    3af0:	0000067b 	andeq	r0, r0, fp, ror r6
    3af4:	0000166e 	andeq	r1, r0, lr, ror #12
    3af8:	00164b1a 	andseq	r4, r6, sl, lsl fp
    3afc:	01e30100 	mvneq	r0, r0, lsl #2
    3b00:	0000003a 	andeq	r0, r0, sl, lsr r0
    3b04:	00001683 	andeq	r1, r0, r3, lsl #13
    3b08:	0005cf1a 	andeq	ip, r5, sl, lsl pc
    3b0c:	01e40100 	mvneq	r0, r0, lsl #2
    3b10:	0000003a 	andeq	r0, r0, sl, lsr r0
    3b14:	000016c7 	andeq	r1, r0, r7, asr #13
    3b18:	00139b1a 	andseq	r9, r3, sl, lsl fp
    3b1c:	01e60100 	mvneq	r0, r0, lsl #2
    3b20:	000001d7 	ldrdeq	r0, [r0], -r7
    3b24:	00001712 	andeq	r1, r0, r2, lsl r7
    3b28:	0014541a 	andseq	r5, r4, sl, lsl r4
    3b2c:	01e70100 	mvneq	r0, r0, lsl #2
    3b30:	0000003a 	andeq	r0, r0, sl, lsr r0
    3b34:	00001730 	andeq	r1, r0, r0, lsr r7
    3b38:	00148a1b 	andseq	r8, r4, fp, lsl sl
    3b3c:	02100100 	andseq	r0, r0, #0, 2
    3b40:	080011f0 	stmdaeq	r0, {r4, r5, r6, r7, r8, ip}
    3b44:	0011be1c 	andseq	fp, r1, ip, lsl lr
    3b48:	00063808 	andeq	r3, r6, r8, lsl #16
    3b4c:	50011d00 	andpl	r1, r1, r0, lsl #26
    3b50:	00007502 	andeq	r7, r0, r2, lsl #10
    3b54:	0011c61e 	andseq	ip, r1, lr, lsl r6
    3b58:	000d1c08 	andeq	r1, sp, r8, lsl #24
    3b5c:	00064b00 	andeq	r4, r6, r0, lsl #22
    3b60:	50011d00 	andpl	r1, r1, r0, lsl #26
    3b64:	1e003001 	cdpne	0, 0, cr3, cr0, cr1, {0}
    3b68:	080011d0 	stmdaeq	r0, {r4, r6, r7, r8, ip}
    3b6c:	00000d32 	andeq	r0, r0, r2, lsr sp
    3b70:	00000665 	andeq	r0, r0, r5, ror #12
    3b74:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    3b78:	011d0075 	tsteq	sp, r5, ror r0
    3b7c:	00790250 	rsbseq	r0, r9, r0, asr r2
    3b80:	11d81f00 	bicsne	r1, r8, r0, lsl #30
    3b84:	0d4d0800 	stcleq	8, cr0, [sp, #-0]
    3b88:	011d0000 	tsteq	sp, r0
    3b8c:	00750251 	rsbseq	r0, r5, r1, asr r2
    3b90:	0150011d 	cmpeq	r0, sp, lsl r1
    3b94:	0b000030 	bleq	3c5c <__Stack_Size+0x385c>
    3b98:	00026a04 	andeq	r6, r2, r4, lsl #20
    3b9c:	13af2000 			; <UNDEFINED> instruction: 0x13af2000
    3ba0:	4a010000 	bmi	43ba8 <__Stack_Size+0x437a8>
    3ba4:	0000020d 	andeq	r0, r0, sp, lsl #4
    3ba8:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
    3bac:	00000038 	andeq	r0, r0, r8, lsr r0
    3bb0:	74139c01 	ldrvc	r9, [r3], #-3073	; 0xc01
    3bb4:	01000014 	tsteq	r0, r4, lsl r0
    3bb8:	00020d78 	andeq	r0, r2, r8, ror sp
    3bbc:	00124c00 	andseq	r4, r2, r0, lsl #24
    3bc0:	00004808 	andeq	r4, r0, r8, lsl #16
    3bc4:	be9c0100 	fmllte	f0, f4, f0
    3bc8:	21000006 	tstcs	r0, r6
    3bcc:	01006552 	tsteq	r0, r2, asr r5
    3bd0:	00020d7a 	andeq	r0, r2, sl, ror sp
    3bd4:	00176e00 	andseq	r6, r7, r0, lsl #28
    3bd8:	94130000 	ldrls	r0, [r3], #-0
    3bdc:	01000015 	tsteq	r0, r5, lsl r0
    3be0:	00020de9 	andeq	r0, r2, r9, ror #27
    3be4:	00129400 	andseq	r9, r2, r0, lsl #8
    3be8:	0000d008 	andeq	sp, r0, r8
    3bec:	969c0100 	ldrls	r0, [ip], r0, lsl #2
    3bf0:	16000007 	strne	r0, [r0], -r7
    3bf4:	000013f2 	strdeq	r1, [r0], -r2
    3bf8:	003aeb01 	eorseq	lr, sl, r1, lsl #22
    3bfc:	178c0000 	strne	r0, [ip, r0]
    3c00:	62160000 	andsvs	r0, r6, #0
    3c04:	0100000d 	tsteq	r0, sp
    3c08:	00003aec 	andeq	r3, r0, ip, ror #21
    3c0c:	0017c400 	andseq	ip, r7, r0, lsl #8
    3c10:	12b01700 	adcsne	r1, r0, #0, 14
    3c14:	009e0800 	addseq	r0, lr, r0, lsl #16
    3c18:	04180000 	ldreq	r0, [r8], #-0
    3c1c:	01000015 	tsteq	r0, r5, lsl r0
    3c20:	000796f6 	strdeq	r9, [r7], -r6
    3c24:	16aa1600 	strtne	r1, [sl], r0, lsl #12
    3c28:	f7010000 			; <UNDEFINED> instruction: 0xf7010000
    3c2c:	0000003a 	andeq	r0, r0, sl, lsr r0
    3c30:	000017ed 	andeq	r1, r0, sp, ror #15
    3c34:	0016c616 	andseq	ip, r6, r6, lsl r6
    3c38:	3af80100 	bcc	ffe04040 <BootRAM+0xed747e1>
    3c3c:	16000000 	strne	r0, [r0], -r0
    3c40:	21000018 	tstcs	r0, r8, lsl r0
    3c44:	00504572 	subseq	r4, r0, r2, ror r5
    3c48:	003af901 	eorseq	pc, sl, r1, lsl #18
    3c4c:	17ed0000 	strbne	r0, [sp, r0]!
    3c50:	30150000 	andscc	r0, r5, r0
    3c54:	12080013 	andne	r0, r8, #19
    3c58:	54000000 	strpl	r0, [r0], #-0
    3c5c:	1a000007 	bne	3c80 <__Stack_Size+0x3880>
    3c60:	0000045b 	andeq	r0, r0, fp, asr r4
    3c64:	4c012f01 	stcmi	15, cr2, [r1], {1}
    3c68:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
    3c6c:	00000018 	andeq	r0, r0, r8, lsl r0
    3c70:	00130a1e 	andseq	r0, r3, lr, lsl sl
    3c74:	000d6408 	andeq	r6, sp, r8, lsl #8
    3c78:	00076800 	andeq	r6, r7, r0, lsl #16
    3c7c:	50011d00 	andpl	r1, r1, r0, lsl #26
    3c80:	00007402 	andeq	r7, r0, r2, lsl #8
    3c84:	0013121e 	andseq	r1, r3, lr, lsl r2
    3c88:	000d7608 	andeq	r7, sp, r8, lsl #12
    3c8c:	00078200 	andeq	r8, r7, r0, lsl #4
    3c90:	51011d00 	tstpl	r1, r0, lsl #26
    3c94:	1d300802 	ldcne	8, cr0, [r0, #-8]!
    3c98:	74025001 	strvc	r5, [r2], #-1
    3c9c:	2a220000 	bcs	883ca4 <__Stack_Size+0x8838a4>
    3ca0:	8d080013 	stchi	0, cr0, [r8, #-76]	; 0xffffffb4
    3ca4:	2200000d 	andcs	r0, r0, #13
    3ca8:	08001330 	stmdaeq	r0, {r4, r5, r8, r9, ip}
    3cac:	00000da4 	andeq	r0, r0, r4, lsr #27
    3cb0:	040b0000 	streq	r0, [fp], #-0
    3cb4:	0000029a 	muleq	r0, sl, r2
    3cb8:	0014ba23 	andseq	fp, r4, r3, lsr #20
    3cbc:	01420100 	mrseq	r0, (UNDEF: 82)
    3cc0:	0000020d 	andeq	r0, r0, sp, lsl #4
    3cc4:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
    3cc8:	00000084 	andeq	r0, r0, r4, lsl #1
    3ccc:	082b9c01 	stmdaeq	fp!, {r0, sl, fp, ip, pc}
    3cd0:	c61a0000 	ldrgt	r0, [sl], -r0
    3cd4:	01000016 	tsteq	r0, r6, lsl r0
    3cd8:	003a0144 	eorseq	r0, sl, r4, asr #2
    3cdc:	185c0000 	ldmdane	ip, {}^	; <UNPREDICTABLE>
    3ce0:	aa1a0000 	bge	683ce8 <__Stack_Size+0x6838e8>
    3ce4:	01000016 	tsteq	r0, r6, lsl r0
    3ce8:	003a0145 	eorseq	r0, sl, r5, asr #2
    3cec:	18840000 	stmne	r4, {}	; <UNPREDICTABLE>
    3cf0:	72240000 	eorvc	r0, r4, #0
    3cf4:	01005045 	tsteq	r0, r5, asr #32
    3cf8:	003a0146 	eorseq	r0, sl, r6, asr #2
    3cfc:	18840000 	stmne	r4, {}	; <UNPREDICTABLE>
    3d00:	621a0000 	andsvs	r0, sl, #0
    3d04:	0100000d 	tsteq	r0, sp
    3d08:	003a0147 	eorseq	r0, sl, r7, asr #2
    3d0c:	18b90000 	ldmne	r9!, {}	; <UNPREDICTABLE>
    3d10:	40250000 	eormi	r0, r5, r0
    3d14:	10000005 	andne	r0, r0, r5
    3d18:	1a000008 	bne	3d40 <__Stack_Size+0x3940>
    3d1c:	0000045b 	andeq	r0, r0, fp, asr r4
    3d20:	4c016301 	stcmi	3, cr6, [r1], {1}
    3d24:	d7000000 	strle	r0, [r0, -r0]
    3d28:	00000018 	andeq	r0, r0, r8, lsl r0
    3d2c:	0013bc17 	andseq	fp, r3, r7, lsl ip
    3d30:	00001008 	andeq	r1, r0, r8
    3d34:	045b1a00 	ldrbeq	r1, [fp], #-2560	; 0xa00
    3d38:	69010000 	stmdbvs	r1, {}	; <UNPREDICTABLE>
    3d3c:	00004c01 	andeq	r4, r0, r1, lsl #24
    3d40:	0018ff00 	andseq	pc, r8, r0, lsl #30
    3d44:	26000000 	strcs	r0, [r0], -r0
    3d48:	00001509 	andeq	r1, r0, r9, lsl #10
    3d4c:	0d017801 	stceq	8, cr7, [r1, #-4]
    3d50:	e8000002 	stmda	r0, {r1}
    3d54:	24080013 	strcs	r0, [r8], #-19
    3d58:	01000000 	mrseq	r0, (UNDEF: 0)
    3d5c:	083d279c 	ldmdaeq	sp!, {r2, r3, r4, r7, r8, r9, sl, sp}
    3d60:	92010000 	andls	r0, r1, #0
    3d64:	0001d701 	andeq	sp, r1, r1, lsl #14
    3d68:	00140c00 	andseq	r0, r4, r0, lsl #24
    3d6c:	00001c08 	andeq	r1, r0, r8, lsl #24
    3d70:	8c9c0100 	ldfhis	f0, [ip], {0}
    3d74:	28000008 	stmdacs	r0, {r3}
    3d78:	00001454 	andeq	r1, r0, r4, asr r4
    3d7c:	4c019201 	sfmmi	f1, 1, [r1], {1}
    3d80:	18000000 	stmdane	r0, {}	; <UNPREDICTABLE>
    3d84:	28000019 	stmdacs	r0, {r0, r3, r4}
    3d88:	00001523 	andeq	r1, r0, r3, lsr #10
    3d8c:	8c019201 	sfmhi	f1, 1, [r1], {1}
    3d90:	39000008 	stmdbcc	r0, {r3}
    3d94:	1a000019 	bne	3e00 <__Stack_Size+0x3a00>
    3d98:	0000031d 	andeq	r0, r0, sp, lsl r3
    3d9c:	3a019401 	bcc	68da8 <__Stack_Size+0x689a8>
    3da0:	65000000 	strvs	r0, [r0, #-0]
    3da4:	00000019 	andeq	r0, r0, r9, lsl r0
    3da8:	01dd040b 	bicseq	r0, sp, fp, lsl #8
    3dac:	8d270000 	stchi	0, cr0, [r7, #-0]
    3db0:	01000013 	tsteq	r0, r3, lsl r0
    3db4:	005e03c9 	subseq	r0, lr, r9, asr #7
    3db8:	14280000 	strtne	r0, [r8], #-0
    3dbc:	00400800 	subeq	r0, r0, r0, lsl #16
    3dc0:	9c010000 	stcls	0, cr0, [r1], {-0}
    3dc4:	000008bc 			; <UNDEFINED> instruction: 0x000008bc
    3dc8:	0014361f 	andseq	r3, r4, pc, lsl r6
    3dcc:	000d8d08 	andeq	r8, sp, r8, lsl #26
    3dd0:	50011d00 	andpl	r1, r1, r0, lsl #26
    3dd4:	00003001 	andeq	r3, r0, r1
    3dd8:	00140029 	andseq	r0, r4, r9, lsr #32
    3ddc:	021b0100 	andseq	r0, fp, #0, 2
    3de0:	0008f601 	andeq	pc, r8, r1, lsl #12
    3de4:	13862a00 	orrne	r2, r6, #0, 20
    3de8:	1d010000 	stcne	0, cr0, [r1, #-0]
    3dec:	00020d02 	andeq	r0, r2, r2, lsl #26
    3df0:	14a22a00 	strtne	r2, [r2], #2560	; 0xa00
    3df4:	1e010000 	cdpne	0, 0, cr0, cr1, cr0, {0}
    3df8:	00003a02 	andeq	r3, r0, r2, lsl #20
    3dfc:	05cf2a00 	strbeq	r2, [pc, #2560]	; 4804 <__Stack_Size+0x4404>
    3e00:	1f010000 	svcne	0x00010000
    3e04:	00003a02 	andeq	r3, r0, r2, lsl #20
    3e08:	13fb2b00 	mvnsne	r2, #0, 22
    3e0c:	8b010000 	blhi	43e14 <__Stack_Size+0x43a14>
    3e10:	02290002 	eoreq	r0, r9, #2
    3e14:	01000014 	tsteq	r0, r4, lsl r0
    3e18:	78010297 	stmdavc	r1, {r0, r1, r2, r4, r7, r9}
    3e1c:	2a000009 	bcs	3e48 <__Stack_Size+0x3a48>
    3e20:	00000965 	andeq	r0, r0, r5, ror #18
    3e24:	64029901 	strvs	r9, [r2], #-2305	; 0x901
    3e28:	2a000002 	bcs	3e38 <__Stack_Size+0x3a38>
    3e2c:	00001386 	andeq	r1, r0, r6, lsl #7
    3e30:	0d029a01 	vstreq	s18, [r2, #-4]
    3e34:	2a000002 	bcs	3e44 <__Stack_Size+0x3a44>
    3e38:	000016f5 	strdeq	r1, [r0], -r5
    3e3c:	3a029b01 	bcc	aaa48 <__Stack_Size+0xaa648>
    3e40:	2a000000 	bcs	3e48 <__Stack_Size+0x3a48>
    3e44:	000016aa 	andeq	r1, r0, sl, lsr #13
    3e48:	3a029d01 	bcc	ab254 <__Stack_Size+0xaae54>
    3e4c:	2a000000 	bcs	3e54 <__Stack_Size+0x3a54>
    3e50:	000013a6 	andeq	r1, r0, r6, lsr #7
    3e54:	3a029d01 	bcc	ab260 <__Stack_Size+0xaae60>
    3e58:	2a000000 	bcs	3e60 <__Stack_Size+0x3a60>
    3e5c:	0000031d 	andeq	r0, r0, sp, lsl r3
    3e60:	3a029e01 	bcc	ab66c <__Stack_Size+0xab26c>
    3e64:	2a000000 	bcs	3e6c <__Stack_Size+0x3a6c>
    3e68:	00000d62 	andeq	r0, r0, r2, ror #26
    3e6c:	3a029e01 	bcc	ab678 <__Stack_Size+0xab278>
    3e70:	2c000000 	stccs	0, cr0, [r0], {-0}
    3e74:	00000969 	andeq	r0, r0, r9, ror #18
    3e78:	00140e2a 	andseq	r0, r4, sl, lsr #28
    3e7c:	02a90100 	adceq	r0, r9, #0, 2
    3e80:	0000005e 	andeq	r0, r0, lr, asr r0
    3e84:	942a2d00 	strtls	r2, [sl], #-3328	; 0xd00
    3e88:	01000002 	tsteq	r0, r2
    3e8c:	006f0325 	rsbeq	r0, pc, r5, lsr #6
    3e90:	00000000 	andeq	r0, r0, r0
    3e94:	0012c423 	andseq	ip, r2, r3, lsr #8
    3e98:	034c0100 	movteq	r0, #49408	; 0xc100
    3e9c:	0000005e 	andeq	r0, r0, lr, asr r0
    3ea0:	08001468 	stmdaeq	r0, {r3, r5, r6, sl, ip}
    3ea4:	000002dc 	ldrdeq	r0, [r0], -ip
    3ea8:	0ae69c01 	beq	ff9aaeb4 <BootRAM+0xe91b655>
    3eac:	042e0000 	strteq	r0, [lr], #-0
    3eb0:	b0034f01 	andlt	r4, r3, r1, lsl #30
    3eb4:	2f000009 	svccs	0x00000009
    3eb8:	51010062 	tstpl	r1, r2, rrx
    3ebc:	0001d703 	andeq	sp, r1, r3, lsl #14
    3ec0:	00772f00 	rsbseq	r2, r7, r0, lsl #30
    3ec4:	e6035201 	str	r5, [r3], -r1, lsl #4
    3ec8:	0000000a 	andeq	r0, r0, sl
    3ecc:	0016911a 	andseq	r9, r6, sl, lsl r1
    3ed0:	03530100 	cmpeq	r3, #0, 2
    3ed4:	00000992 	muleq	r0, r2, r9
    3ed8:	00001996 	muleq	r0, r6, r9
    3edc:	0008bc30 	andeq	fp, r8, r0, lsr ip
    3ee0:	0014ae00 	andseq	sl, r4, r0, lsl #28
    3ee4:	0000c408 	andeq	ip, r0, r8, lsl #8
    3ee8:	03670100 	cmneq	r7, #0, 2
    3eec:	00000a40 	andeq	r0, r0, r0, asr #20
    3ef0:	0014ae17 	andseq	sl, r4, r7, lsl lr
    3ef4:	0000c408 	andeq	ip, r0, r8, lsl #8
    3ef8:	08c93100 	stmiaeq	r9, {r8, ip, sp}^
    3efc:	19b90000 	ldmibne	r9!, {}	; <UNPREDICTABLE>
    3f00:	d5310000 	ldrle	r0, [r1, #-0]!
    3f04:	62000008 	andvs	r0, r0, #8
    3f08:	3100001a 	tstcc	r0, sl, lsl r0
    3f0c:	000008e1 	andeq	r0, r0, r1, ror #17
    3f10:	00001a75 	andeq	r1, r0, r5, ror sl
    3f14:	0008ed32 	andeq	lr, r8, r2, lsr sp
    3f18:	00156c00 	andseq	r6, r5, r0, lsl #24
    3f1c:	14be2208 	ldrtne	r2, [lr], #520	; 0x208
    3f20:	06810800 	streq	r0, [r1], r0, lsl #16
    3f24:	f81c0000 			; <UNDEFINED> instruction: 0xf81c0000
    3f28:	1a080014 	bne	203f80 <__Stack_Size+0x203b80>
    3f2c:	1d00000a 	stcne	0, cr0, [r0, #-40]	; 0xffffffd8
    3f30:	74025001 	strvc	r5, [r2], #-1
    3f34:	0e220000 	cdpeq	0, 2, cr0, cr2, cr0, {0}
    3f38:	2b080015 	blcs	203f94 <__Stack_Size+0x203b94>
    3f3c:	22000008 	andcs	r0, r0, #8
    3f40:	0800152a 	stmdaeq	r0, {r1, r3, r5, r8, sl, ip}
    3f44:	000006be 			; <UNDEFINED> instruction: 0x000006be
    3f48:	00153822 	andseq	r3, r5, r2, lsr #16
    3f4c:	00069608 	andeq	r9, r6, r8, lsl #12
    3f50:	154a2200 	strbne	r2, [sl, #-512]	; 0x200
    3f54:	079c0800 	ldreq	r0, [ip, r0, lsl #16]
    3f58:	00000000 	andeq	r0, r0, r0
    3f5c:	0008f633 	andeq	pc, r8, r3, lsr r6	; <UNPREDICTABLE>
    3f60:	00157200 	andseq	r7, r5, r0, lsl #4
    3f64:	00056008 	andeq	r6, r5, r8
    3f68:	036c0100 	cmneq	ip, #0, 2
    3f6c:	00000adc 	ldrdeq	r0, [r0], -ip
    3f70:	00056034 	andeq	r6, r5, r4, lsr r0
    3f74:	09033100 	stmdbeq	r3, {r8, ip, sp}
    3f78:	1a940000 	bne	fe503f80 <BootRAM+0xd474721>
    3f7c:	0f310000 	svceq	0x00310000
    3f80:	2b000009 	blcs	3fac <__Stack_Size+0x3bac>
    3f84:	3100001b 	tstcc	r0, fp, lsl r0
    3f88:	0000091b 	andeq	r0, r0, fp, lsl r9
    3f8c:	00001b6b 	andeq	r1, r0, fp, ror #22
    3f90:	00092731 	andeq	r2, r9, r1, lsr r7
    3f94:	001b9400 	andseq	r9, fp, r0, lsl #8
    3f98:	09333100 	ldmdbeq	r3!, {r8, ip, sp}
    3f9c:	1ba70000 	blne	fe9c3fa4 <BootRAM+0xd934745>
    3fa0:	3f310000 	svccc	0x00310000
    3fa4:	c2000009 	andgt	r0, r0, #9
    3fa8:	3100001b 	tstcc	r0, fp, lsl r0
    3fac:	0000094b 	andeq	r0, r0, fp, asr #18
    3fb0:	00001be2 	andeq	r1, r0, r2, ror #23
    3fb4:	00157c15 	andseq	r7, r5, r5, lsl ip
    3fb8:	00002c08 	andeq	r2, r0, r8, lsl #24
    3fbc:	000aaf00 	andeq	sl, sl, r0, lsl #30
    3fc0:	095c3100 	ldmdbeq	ip, {r8, ip, sp}^
    3fc4:	1bf50000 	blne	ffd43fcc <BootRAM+0xecb476d>
    3fc8:	15000000 	strne	r0, [r0, #-0]
    3fcc:	080016b0 	stmdaeq	r0, {r4, r5, r7, r9, sl, ip}
    3fd0:	00000060 	andeq	r0, r0, r0, rrx
    3fd4:	00000ace 	andeq	r0, r0, lr, asr #21
    3fd8:	00096a35 	andeq	r6, r9, r5, lsr sl
    3fdc:	6c910200 	lfmvs	f0, 4, [r1], {0}
    3fe0:	00170e22 	andseq	r0, r7, r2, lsr #28
    3fe4:	0005b608 	andeq	fp, r5, r8, lsl #12
    3fe8:	72360000 	eorsvc	r0, r6, #0
    3fec:	1d080016 	stcne	0, cr0, [r8, #-88]	; 0xffffffa8
    3ff0:	74025001 	strvc	r5, [r2], #-1
    3ff4:	00000000 	andeq	r0, r0, r0
    3ff8:	00172022 	andseq	r2, r7, r2, lsr #32
    3ffc:	00089208 	andeq	r9, r8, r8, lsl #4
    4000:	040b0000 	streq	r0, [fp], #-0
    4004:	0000004c 	andeq	r0, r0, ip, asr #32
    4008:	0016dd29 	andseq	sp, r6, r9, lsr #26
    400c:	01a70100 			; <UNDEFINED> instruction: 0x01a70100
    4010:	000b2c01 	andeq	r2, fp, r1, lsl #24
    4014:	16962a00 	ldrne	r2, [r6], r0, lsl #20
    4018:	a9010000 	stmdbge	r1, {}	; <UNPREDICTABLE>
    401c:	00067b01 	andeq	r7, r6, r1, lsl #22
    4020:	144e2a00 	strbne	r2, [lr], #-2560	; 0xa00
    4024:	aa010000 	bge	4402c <__Stack_Size+0x43c2c>
    4028:	00003a01 	andeq	r3, r0, r1, lsl #20
    402c:	9f2a2d00 	svcls	0x002a2d00
    4030:	01000013 	tsteq	r0, r3, lsl r0
    4034:	01d701b0 	ldrheq	r0, [r7, #16]
    4038:	542a0000 	strtpl	r0, [sl], #-0
    403c:	01000014 	tsteq	r0, r4, lsl r0
    4040:	003a01b1 	ldrhteq	r0, [sl], -r1
    4044:	00000000 	andeq	r0, r0, r0
    4048:	00130e23 	andseq	r0, r3, r3, lsr #28
    404c:	03a00100 	moveq	r0, #0, 2
    4050:	0000005e 	andeq	r0, r0, lr, asr r0
    4054:	08001744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip}
    4058:	000000c8 	andeq	r0, r0, r8, asr #1
    405c:	0bfe9c01 	bleq	fffab068 <BootRAM+0xef1b809>
    4060:	cf1a0000 	svcgt	0x001a0000
    4064:	01000005 	tsteq	r0, r5
    4068:	003a03a2 	eorseq	r0, sl, r2, lsr #7
    406c:	1c1f0000 	ldcne	0, cr0, [pc], {-0}
    4070:	ec300000 	ldc	0, cr0, [r0], #-0
    4074:	5400000a 	strpl	r0, [r0], #-10
    4078:	7e080017 	mcrvc	0, 0, r0, cr8, cr7, {0}
    407c:	01000000 	mrseq	r0, (UNDEF: 0)
    4080:	0bf403a6 	bleq	ffd04f20 <BootRAM+0xec756c1>
    4084:	54170000 	ldrpl	r0, [r7], #-0
    4088:	7e080017 	mcrvc	0, 0, r0, cr8, cr7, {0}
    408c:	31000000 	mrscc	r0, (UNDEF: 0)
    4090:	00000af9 	strdeq	r0, [r0], -r9
    4094:	00001c6c 	andeq	r1, r0, ip, ror #24
    4098:	000b0531 	andeq	r0, fp, r1, lsr r5
    409c:	001c8100 	andseq	r8, ip, r0, lsl #2
    40a0:	175c1500 	ldrbne	r1, [ip, -r0, lsl #10]
    40a4:	002a0800 	eoreq	r0, sl, r0, lsl #16
    40a8:	0bde0000 	bleq	ff7840b0 <BootRAM+0xe6f4851>
    40ac:	12310000 	eorsne	r0, r1, #0
    40b0:	9400000b 	strls	r0, [r0], #-11
    40b4:	3100001c 	tstcc	r0, ip, lsl r0
    40b8:	00000b1e 	andeq	r0, r0, lr, lsl fp
    40bc:	00001cb2 			; <UNDEFINED> instruction: 0x00001cb2
    40c0:	0017681c 	andseq	r6, r7, ip, lsl r8
    40c4:	000bb408 	andeq	fp, fp, r8, lsl #8
    40c8:	50011d00 	andpl	r1, r1, r0, lsl #26
    40cc:	00007602 	andeq	r7, r0, r2, lsl #12
    40d0:	00177c1e 	andseq	r7, r7, lr, lsl ip
    40d4:	000db608 	andeq	fp, sp, r8, lsl #12
    40d8:	000bc700 	andeq	ip, fp, r0, lsl #14
    40dc:	50011d00 	andpl	r1, r1, r0, lsl #26
    40e0:	1f003001 	svcne	0x00003001
    40e4:	08001786 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, ip}
    40e8:	00000dcc 	andeq	r0, r0, ip, asr #27
    40ec:	0252011d 	subseq	r0, r2, #1073741831	; 0x40000007
    40f0:	011d0076 	tsteq	sp, r6, ror r0
    40f4:	00770250 	rsbseq	r0, r7, r0, asr r2
    40f8:	9a1f0000 	bls	7c4100 <__Stack_Size+0x7c3d00>
    40fc:	4d080017 	stcmi	0, cr0, [r8, #-92]	; 0xffffffa4
    4100:	1d00000d 	stcne	0, cr0, [r0, #-52]	; 0xffffffcc
    4104:	30015101 	andcc	r5, r1, r1, lsl #2
    4108:	0150011d 	cmpeq	r0, sp, lsl r1
    410c:	00000030 	andeq	r0, r0, r0, lsr r0
    4110:	0017f237 	andseq	pc, r7, r7, lsr r2	; <UNPREDICTABLE>
    4114:	00089208 	andeq	r9, r8, r8, lsl #4
    4118:	21380000 	teqcs	r8, r0
    411c:	01000000 	mrseq	r0, (UNDEF: 0)
    4120:	180c03dd 	stmdane	ip, {r0, r2, r3, r4, r6, r7, r8, r9}
    4124:	00380800 	eorseq	r0, r8, r0, lsl #16
    4128:	9c010000 	stcls	0, cr0, [r1], {-0}
    412c:	00000c43 	andeq	r0, r0, r3, asr #24
    4130:	6c615639 	stclvs	6, cr5, [r1], #-228	; 0xffffff1c
    4134:	03dd0100 	bicseq	r0, sp, #0, 2
    4138:	0000005e 	andeq	r0, r0, lr, asr r0
    413c:	00001ce5 	andeq	r1, r0, r5, ror #25
    4140:	01006924 	tsteq	r0, r4, lsr #18
    4144:	003a03df 	ldrsbteq	r0, [sl], -pc
    4148:	1d060000 	stcne	0, cr0, [r6, #-0]
    414c:	6e240000 	cdpvs	0, 2, cr0, cr4, cr0, {0}
    4150:	01005045 	tsteq	r0, r5, asr #32
    4154:	003a03e0 	eorseq	r0, sl, r0, ror #7
    4158:	1d250000 	stcne	0, cr0, [r5, #-0]
    415c:	23000000 	movwcs	r0, #0
    4160:	00001302 	andeq	r1, r0, r2, lsl #6
    4164:	5e037801 	cdppl	8, 0, cr7, cr3, cr1, {0}
    4168:	44000000 	strmi	r0, [r0], #-0
    416c:	5c080018 	stcpl	0, cr0, [r8], {24}
    4170:	01000000 	mrseq	r0, (UNDEF: 0)
    4174:	000c899c 	muleq	ip, ip, r9
    4178:	05cf1a00 	strbeq	r1, [pc, #2560]	; 4b80 <__Stack_Size+0x4780>
    417c:	7a010000 	bvc	44184 <__Stack_Size+0x43d84>
    4180:	00003a03 	andeq	r3, r0, r3, lsl #20
    4184:	001d3800 	andseq	r3, sp, r0, lsl #16
    4188:	18582200 	ldmdane	r8, {r9, sp}^
    418c:	05b60800 	ldreq	r0, [r6, #2048]!	; 0x800
    4190:	74220000 	strtvc	r0, [r2], #-0
    4194:	fe080018 	mcr2	0, 0, r0, cr8, cr8, {0}
    4198:	3700000b 	strcc	r0, [r0, -fp]
    419c:	08001892 	stmdaeq	r0, {r1, r4, r7, fp, ip}
    41a0:	00000892 	muleq	r0, r2, r8
    41a4:	14683a00 	strbtne	r3, [r8], #-2560	; 0xa00
    41a8:	f1010000 	setend	le
    41ac:	00000003 	andeq	r0, r0, r3
    41b0:	00000200 	andeq	r0, r0, r0, lsl #4
    41b4:	3b9c0100 	blcc	fe7045bc <BootRAM+0xd674d5d>
    41b8:	000005f4 	strdeq	r0, [r0], -r4
    41bc:	046bec04 	strbteq	lr, [fp], #-3076	; 0xc04
    41c0:	463b0000 	ldrtmi	r0, [fp], -r0
    41c4:	04000002 	streq	r0, [r0], #-2
    41c8:	00029aee 	andeq	r9, r2, lr, ror #21
    41cc:	12d33b00 	sbcsne	r3, r3, #0, 22
    41d0:	f2040000 	vhadd.s8	d0, d4, d0
    41d4:	0000004c 	andeq	r0, r0, ip, asr #32
    41d8:	0012de3b 	andseq	sp, r2, fp, lsr lr
    41dc:	4cf30400 	cfldrdmi	mvd0, [r3]
    41e0:	3b000000 	blcc	41e8 <__Stack_Size+0x3de8>
    41e4:	0000027c 	andeq	r0, r0, ip, ror r2
    41e8:	0cd22205 	lfmeq	f2, 2, [r2], {5}
    41ec:	040b0000 	streq	r0, [fp], #-0
    41f0:	00000381 	andeq	r0, r0, r1, lsl #7
    41f4:	00052f3b 	andeq	r2, r5, fp, lsr pc
    41f8:	e3250500 	teq	r5, #0, 10
    41fc:	0b00000c 	bleq	4234 <__Stack_Size+0x3e34>
    4200:	00046b04 	andeq	r6, r4, r4, lsl #22
    4204:	13403b00 	movtne	r3, #2816	; 0xb00
    4208:	2a050000 	bcs	144210 <__Stack_Size+0x143e10>
    420c:	00000cf4 	strdeq	r0, [r0], -r4
    4210:	04ef040b 	strbteq	r0, [pc], #1035	; 4218 <__Stack_Size+0x3e18>
    4214:	bb3c0000 	bllt	f0421c <__Stack_Size+0xf03e1c>
    4218:	01000016 	tsteq	r0, r6, lsl r0
    421c:	0002e524 	andeq	lr, r2, r4, lsr #10
    4220:	0a030500 	beq	c5628 <__Stack_Size+0xc5228>
    4224:	3c200003 	stccc	0, cr0, [r0], #-12
    4228:	000014ed 	andeq	r1, r0, sp, ror #9
    422c:	00942501 	addseq	r2, r4, r1, lsl #10
    4230:	03050000 	movweq	r0, #20480	; 0x5000
    4234:	20000b24 	andcs	r0, r0, r4, lsr #22
    4238:	0012773d 	andseq	r7, r2, sp, lsr r7
    423c:	02530700 	subseq	r0, r3, #0, 14
    4240:	0000004c 	andeq	r0, r0, ip, asr #32
    4244:	00000d32 	andeq	r0, r0, r2, lsr sp
    4248:	00005e0d 	andeq	r5, r0, sp, lsl #28
    424c:	3a3e0000 	bcc	f84254 <__Stack_Size+0xf83e54>
    4250:	06000014 			; <UNDEFINED> instruction: 0x06000014
    4254:	000d4d19 	andeq	r4, sp, r9, lsl sp
    4258:	01d70d00 	bicseq	r0, r7, r0, lsl #26
    425c:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    4260:	0d000000 	stceq	0, cr0, [r0, #-0]
    4264:	0000004c 	andeq	r0, r0, ip, asr #32
    4268:	11493f00 	cmpne	r9, r0, lsl #30
    426c:	56070000 	strpl	r0, [r7], -r0
    4270:	000d6402 	andeq	r6, sp, r2, lsl #8
    4274:	005e0d00 	subseq	r0, lr, r0, lsl #26
    4278:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    427c:	00000000 	andeq	r0, r0, r0
    4280:	0012833f 	andseq	r8, r2, pc, lsr r3
    4284:	024e0700 	subeq	r0, lr, #0, 14
    4288:	00000d76 	andeq	r0, r0, r6, ror sp
    428c:	00005e0d 	andeq	r5, r0, sp, lsl #28
    4290:	903f0000 	eorsls	r0, pc, r0
    4294:	07000012 	smladeq	r0, r2, r0, r0
    4298:	0d8d023a 	sfmeq	f0, 4, [sp, #232]	; 0xe8
    429c:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    42a0:	0d000000 	stceq	0, cr0, [r0, #-0]
    42a4:	0000004c 	andeq	r0, r0, ip, asr #32
    42a8:	079a3f00 	ldreq	r3, [sl, r0, lsl #30]
    42ac:	57070000 	strpl	r0, [r7, -r0]
    42b0:	000da402 	andeq	sl, sp, r2, lsl #8
    42b4:	005e0d00 	subseq	r0, lr, r0, lsl #26
    42b8:	4c0d0000 	stcmi	0, cr0, [sp], {-0}
    42bc:	00000000 	andeq	r0, r0, r0
    42c0:	000fbe3f 	andeq	fp, pc, pc, lsr lr	; <UNPREDICTABLE>
    42c4:	024d0700 	subeq	r0, sp, #0, 14
    42c8:	00000db6 			; <UNDEFINED> instruction: 0x00000db6
    42cc:	00005e0d 	andeq	r5, r0, sp, lsl #28
    42d0:	483d0000 	ldmdami	sp!, {}	; <UNPREDICTABLE>
    42d4:	07000010 	smladeq	r0, r0, r0, r0
    42d8:	004c0254 	subeq	r0, ip, r4, asr r2
    42dc:	0dcc0000 	stcleq	0, cr0, [ip]
    42e0:	5e0d0000 	cdppl	0, 0, cr0, cr13, cr0, {0}
    42e4:	00000000 	andeq	r0, r0, r0
    42e8:	0015e740 	andseq	lr, r5, r0, asr #14
    42ec:	0d1a0600 	ldceq	6, cr0, [sl, #-0]
    42f0:	000001d7 	ldrdeq	r0, [r0], -r7
    42f4:	00004c0d 	andeq	r4, r0, sp, lsl #24
    42f8:	004c0d00 	subeq	r0, ip, r0, lsl #26
    42fc:	00000000 	andeq	r0, r0, r0
    4300:	00000170 	andeq	r0, r0, r0, ror r1
    4304:	13490004 	movtne	r0, #36868	; 0x9004
    4308:	01040000 	mrseq	r0, (UNDEF: 4)
    430c:	00000158 	andeq	r0, r0, r8, asr r1
    4310:	00172b01 	andseq	r2, r7, r1, lsl #22
    4314:	00092600 	andeq	r2, r9, r0, lsl #12
    4318:	00060000 	andeq	r0, r6, r0
    431c:	00000000 	andeq	r0, r0, r0
    4320:	0013e900 	andseq	lr, r3, r0, lsl #18
    4324:	05040200 	streq	r0, [r4, #-512]	; 0x200
    4328:	000001f6 	strdeq	r0, [r0], -r6
    432c:	a5050202 	strge	r0, [r5, #-514]	; 0x202
    4330:	02000006 	andeq	r0, r0, #6
    4334:	06510601 	ldrbeq	r0, [r1], -r1, lsl #12
    4338:	75030000 	strvc	r0, [r3, #-0]
    433c:	02003233 	andeq	r3, r0, #805306371	; 0x30000003
    4340:	00004524 	andeq	r4, r0, r4, lsr #10
    4344:	07040200 	streq	r0, [r4, -r0, lsl #4]
    4348:	0000037b 	andeq	r0, r0, fp, ror r3
    434c:	36317503 	ldrtcc	r7, [r1], -r3, lsl #10
    4350:	57250200 	strpl	r0, [r5, -r0, lsl #4]!
    4354:	02000000 	andeq	r0, r0, #0
    4358:	03d70702 	bicseq	r0, r7, #524288	; 0x80000
    435c:	75030000 	strvc	r0, [r3, #-0]
    4360:	26020038 			; <UNDEFINED> instruction: 0x26020038
    4364:	00000068 	andeq	r0, r0, r8, rrx
    4368:	4f080102 	svcmi	0x00080102
    436c:	04000006 	streq	r0, [r0], #-6
    4370:	00005e04 	andeq	r5, r0, r4, lsl #28
    4374:	143a0500 	ldrtne	r0, [sl], #-1280	; 0x500
    4378:	23010000 	movwcs	r0, #4096	; 0x1000
    437c:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
    4380:	00000030 	andeq	r0, r0, r0, lsr r0
    4384:	00fd9c01 	rscseq	r9, sp, r1, lsl #24
    4388:	45060000 	strmi	r0, [r6, #-0]
    438c:	01000017 	tsteq	r0, r7, lsl r0
    4390:	00006f23 	andeq	r6, r0, r3, lsr #30
    4394:	001d7e00 	andseq	r7, sp, r0, lsl #28
    4398:	175a0600 	ldrbne	r0, [sl, -r0, lsl #12]
    439c:	23010000 	movwcs	r0, #4096	; 0x1000
    43a0:	0000004c 	andeq	r0, r0, ip, asr #32
    43a4:	00001dc3 	andeq	r1, r0, r3, asr #27
    43a8:	00173d06 	andseq	r3, r7, r6, lsl #26
    43ac:	4c230100 	stfmis	f0, [r3], #-0
    43b0:	e4000000 	str	r0, [r0], #-0
    43b4:	0700001d 	smladeq	r0, sp, r0, r0
    43b8:	2501006e 	strcs	r0, [r1, #-110]	; 0x6e
    43bc:	0000003a 	andeq	r0, r0, sl, lsr r0
    43c0:	69085201 	stmdbvs	r8, {r0, r9, ip, lr}
    43c4:	3a260100 	bcc	9847cc <__Stack_Size+0x9843cc>
    43c8:	05000000 	streq	r0, [r0, #-0]
    43cc:	0900001e 	stmdbeq	r0, {r1, r2, r3, r4}
    43d0:	0000174e 	andeq	r1, r0, lr, asr #14
    43d4:	003a2601 	eorseq	r2, sl, r1, lsl #12
    43d8:	1e640000 	cdpne	0, 6, cr0, cr4, cr0, {0}
    43dc:	54090000 	strpl	r0, [r9], #-0
    43e0:	01000017 	tsteq	r0, r7, lsl r0
    43e4:	00003a26 	andeq	r3, r0, r6, lsr #20
    43e8:	001e9b00 	andseq	r9, lr, r0, lsl #22
    43ec:	17660900 	strbne	r0, [r6, -r0, lsl #18]!
    43f0:	27010000 	strcs	r0, [r1, -r0]
    43f4:	000000fd 	strdeq	r0, [r0], -sp
    43f8:	00001ebf 			; <UNDEFINED> instruction: 0x00001ebf
    43fc:	4c040400 	cfstrsmi	mvf0, [r4], {-0}
    4400:	05000000 	streq	r0, [r0, #-0]
    4404:	000015e7 	andeq	r1, r0, r7, ror #11
    4408:	18d03c01 	ldmne	r0, {r0, sl, fp, ip, sp}^
    440c:	00240800 	eoreq	r0, r4, r0, lsl #16
    4410:	9c010000 	stcls	0, cr0, [r1], {-0}
    4414:	0000016d 	andeq	r0, r0, sp, ror #2
    4418:	00174506 	andseq	r4, r7, r6, lsl #10
    441c:	6f3c0100 	svcvs	0x003c0100
    4420:	fa000000 	blx	4428 <__Stack_Size+0x4028>
    4424:	0600001e 			; <UNDEFINED> instruction: 0x0600001e
    4428:	0000175a 	andeq	r1, r0, sl, asr r7
    442c:	004c3c01 	subeq	r3, ip, r1, lsl #24
    4430:	1f350000 	svcne	0x00350000
    4434:	3d060000 	stccc	0, cr0, [r6, #-0]
    4438:	01000017 	tsteq	r0, r7, lsl r0
    443c:	00004c3c 	andeq	r4, r0, ip, lsr ip
    4440:	001f5600 	andseq	r5, pc, r0, lsl #12
    4444:	006e0700 	rsbeq	r0, lr, r0, lsl #14
    4448:	003a3e01 	eorseq	r3, sl, r1, lsl #28
    444c:	52010000 	andpl	r0, r1, #0
    4450:	01006908 	tsteq	r0, r8, lsl #18
    4454:	00003a3f 	andeq	r3, r0, pc, lsr sl
    4458:	001f7700 	andseq	r7, pc, r0, lsl #14
    445c:	17660900 	strbne	r0, [r6, -r0, lsl #18]!
    4460:	40010000 	andmi	r0, r1, r0
    4464:	0000016d 	andeq	r0, r0, sp, ror #2
    4468:	00001fd6 	ldrdeq	r1, [r0], -r6
    446c:	3a040400 	bcc	105474 <__Stack_Size+0x105074>
    4470:	00000000 	andeq	r0, r0, r0

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	10001101 	andne	r1, r0, r1, lsl #2
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	03065506 	movweq	r5, #25862	; 0x6506
       8:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
       c:	00051308 	andeq	r1, r5, r8, lsl #6
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	11010000 	mrsne	r0, (UNDEF: 1)
      14:	11061000 	mrsne	r1, (UNDEF: 6)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	03011201 	movweq	r1, #4609	; 0x1201
      1c:	25081b08 	strcs	r1, [r8, #-2824]	; 0xb08
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00051308 	andeq	r1, r5, r8, lsl #6
      24:	11010000 	mrsne	r0, (UNDEF: 1)
      28:	130e2501 	movwne	r2, #58625	; 0xe501
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	1b0e030b 	blne	380c60 <__Stack_Size+0x380860>
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	1117550e 	tstne	r7, lr, lsl #10
      34:	00171001 	andseq	r1, r7, r1
      38:	00240200 	eoreq	r0, r4, r0, lsl #4

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	0b3e0b0b 	bleq	f82c70 <__Stack_Size+0xf82870>

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	00000e03 	andeq	r0, r0, r3, lsl #28
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	03001603 	movweq	r1, #1539	; 0x603
      48:	3b0b3a08 	blcc	2ce870 <__Stack_Size+0x2ce470>
      4c:	0013490b 	andseq	r4, r3, fp, lsl #18

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	00160400 	andseq	r0, r6, r0, lsl #8
      54:	0b3a0e03 	bleq	e83868 <__Stack_Size+0xe83468>
      58:	13490b3b 	movtne	r0, #39739	; 0x9b3b
      5c:	35050000 	strcc	r0, [r5, #-0]
      60:	00134900 	andseq	r4, r3, r0, lsl #18
      64:	01040600 	tsteq	r4, r0, lsl #12
      68:	0b3a0b0b 	bleq	e82c9c <__Stack_Size+0xe8289c>
      6c:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      70:	28070000 	stmdacs	r7, {}	; <UNPREDICTABLE>
      74:	1c0e0300 	stcne	3, cr0, [lr], {-0}
      78:	0800000d 	stmdaeq	r0, {r0, r2, r3}
      7c:	0b0b0113 	bleq	2c04d0 <__Stack_Size+0x2c00d0>
      80:	0b3b0b3a 	bleq	ec2d70 <__Stack_Size+0xec2970>
      84:	00001301 	andeq	r1, r0, r1, lsl #6
      88:	03000d09 	movweq	r0, #3337	; 0xd09
      8c:	3b0b3a0e 	blcc	2ce8cc <__Stack_Size+0x2ce4cc>
      90:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
      94:	0a00000b 	beq	c8 <_Minimum_Stack_Size-0x38>
      98:	0b0b000f 	bleq	2c00dc <__Stack_Size+0x2bfcdc>
      9c:	00001349 	andeq	r1, r0, r9, asr #6
      a0:	2700150b 	strcs	r1, [r0, -fp, lsl #10]
      a4:	0c000019 	stceq	0, cr0, [r0], {25}
      a8:	0e030104 	adfeqs	f0, f3, f4
      ac:	0b3a0b0b 	bleq	e82ce0 <__Stack_Size+0xe828e0>
      b0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      b4:	130d0000 	movwne	r0, #53248	; 0xd000
      b8:	0b0e0301 	bleq	380cc4 <__Stack_Size+0x3808c4>
      bc:	3b0b3a0b 	blcc	2ce8f0 <__Stack_Size+0x2ce4f0>
      c0:	0013010b 	andseq	r0, r3, fp, lsl #2
      c4:	01150e00 	tsteq	r5, r0, lsl #28
      c8:	13491927 	movtne	r1, #39207	; 0x9927
      cc:	00001301 	andeq	r1, r0, r1, lsl #6
      d0:	4900050f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sl}
      d4:	10000013 	andne	r0, r0, r3, lsl r0
      d8:	08030113 	stmdaeq	r3, {r0, r1, r4, r8}
      dc:	0b3a0b0b 	bleq	e82d10 <__Stack_Size+0xe82910>
      e0:	13010b3b 	movwne	r0, #6971	; 0x1b3b
      e4:	0d110000 	ldceq	0, cr0, [r1, #-0]
      e8:	3a080300 	bcc	200cf0 <__Stack_Size+0x2008f0>
      ec:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
      f0:	000b3813 	andeq	r3, fp, r3, lsl r8
      f4:	01171200 	tsteq	r7, r0, lsl #4
      f8:	0b3a0b0b 	bleq	e82d2c <__Stack_Size+0xe8292c>
      fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     100:	0d130000 	ldceq	0, cr0, [r3, #-0]
     104:	3a080300 	bcc	200d0c <__Stack_Size+0x20090c>
     108:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     10c:	14000013 	strne	r0, [r0], #-19
     110:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     114:	0b3a0e03 	bleq	e83928 <__Stack_Size+0xe83528>
     118:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     11c:	0b201349 	bleq	804e48 <__Stack_Size+0x804a48>
     120:	00001301 	andeq	r1, r0, r1, lsl #6
     124:	03000515 	movweq	r0, #1301	; 0x515
     128:	3b0b3a0e 	blcc	2ce968 <__Stack_Size+0x2ce568>
     12c:	00134905 	andseq	r4, r3, r5, lsl #18
     130:	002e1600 	eoreq	r1, lr, r0, lsl #12
     134:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     138:	0b3b0b3a 	bleq	ec2e28 <__Stack_Size+0xec2a28>
     13c:	0b201927 	bleq	8065e0 <__Stack_Size+0x8061e0>
     140:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     144:	03193f00 	tsteq	r9, #0, 30
     148:	3b0b3a0e 	blcc	2ce988 <__Stack_Size+0x2ce588>
     14c:	1119270b 	tstne	r9, fp, lsl #14
     150:	40061201 	andmi	r1, r6, r1, lsl #4
     154:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     158:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     15c:	03193f00 	tsteq	r9, #0, 30
     160:	3b0b3a0e 	blcc	2ce9a0 <__Stack_Size+0x2ce5a0>
     164:	11192705 	tstne	r9, r5, lsl #14
     168:	40061201 	andmi	r1, r6, r1, lsl #4
     16c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     170:	2e190000 	cdpcs	0, 1, cr0, cr9, cr0, {0}
     174:	03193f01 	tsteq	r9, #1, 30
     178:	3b0b3a0e 	blcc	2ce9b8 <__Stack_Size+0x2ce5b8>
     17c:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     180:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     184:	97184006 	ldrls	r4, [r8, -r6]
     188:	13011942 	movwne	r1, #6466	; 0x1942
     18c:	051a0000 	ldreq	r0, [sl, #-0]
     190:	3a0e0300 	bcc	380d98 <__Stack_Size+0x380998>
     194:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     198:	00170213 	andseq	r0, r7, r3, lsl r2
     19c:	00051b00 	andeq	r1, r5, r0, lsl #22
     1a0:	0b3a0e03 	bleq	e839b4 <__Stack_Size+0xe835b4>
     1a4:	1349053b 	movtne	r0, #38203	; 0x953b
     1a8:	00001802 	andeq	r1, r0, r2, lsl #16
     1ac:	3f012e1c 	svccc	0x00012e1c
     1b0:	3a0e0319 	bcc	380e1c <__Stack_Size+0x380a1c>
     1b4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     1b8:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     1bc:	97184006 	ldrls	r4, [r8, -r6]
     1c0:	13011942 	movwne	r1, #6466	; 0x1942
     1c4:	0b1d0000 	bleq	7401cc <__Stack_Size+0x73fdcc>
     1c8:	12011101 	andne	r1, r1, #1073741824	; 0x40000000
     1cc:	00130106 	andseq	r0, r3, r6, lsl #2
     1d0:	00341e00 	eorseq	r1, r4, r0, lsl #28
     1d4:	0b3a0e03 	bleq	e839e8 <__Stack_Size+0xe835e8>
     1d8:	1349053b 	movtne	r0, #38203	; 0x953b
     1dc:	00001702 	andeq	r1, r0, r2, lsl #14
     1e0:	0182891f 	orreq	r8, r2, pc, lsl r9
     1e4:	31011100 	mrscc	r1, (UNDEF: 17)
     1e8:	20000013 	andcs	r0, r0, r3, lsl r0
     1ec:	01018289 	smlabbeq	r1, r9, r2, r8
     1f0:	13310111 	teqne	r1, #1073741828	; 0x40000004
     1f4:	00001301 	andeq	r1, r0, r1, lsl #6
     1f8:	01828a21 	orreq	r8, r2, r1, lsr #20
     1fc:	91180200 	tstls	r8, r0, lsl #4
     200:	00001842 	andeq	r1, r0, r2, asr #16
     204:	01828922 	orreq	r8, r2, r2, lsr #18
     208:	95011101 	strls	r1, [r1, #-257]	; 0x101
     20c:	13311942 	teqne	r1, #1081344	; 0x108000
     210:	89230000 	stmdbhi	r3!, {}	; <UNPREDICTABLE>
     214:	11010182 	smlabbne	r1, r2, r1, r0
     218:	24000001 	strcs	r0, [r0], #-1
     21c:	08030005 	stmdaeq	r3, {r0, r2}
     220:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     224:	17021349 	strne	r1, [r2, -r9, asr #6]
     228:	89250000 	stmdbhi	r5!, {}	; <UNPREDICTABLE>
     22c:	11000182 	smlabbne	r0, r2, r1, r0
     230:	19429501 	stmdbne	r2, {r0, r8, sl, ip, pc}^
     234:	00001331 	andeq	r1, r0, r1, lsr r3
     238:	03003426 	movweq	r3, #1062	; 0x426
     23c:	3b0b3a0e 	blcc	2cea7c <__Stack_Size+0x2ce67c>
     240:	00134905 	andseq	r4, r3, r5, lsl #18
     244:	012e2700 	teqeq	lr, r0, lsl #14
     248:	01111331 	tsteq	r1, r1, lsr r3
     24c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     250:	01194297 			; <UNDEFINED> instruction: 0x01194297
     254:	28000013 	stmdacs	r0, {r0, r1, r4}
     258:	13310005 	teqne	r1, #5
     25c:	00001702 	andeq	r1, r0, r2, lsl #14
     260:	11010b29 	tstne	r1, r9, lsr #22
     264:	00061201 	andeq	r1, r6, r1, lsl #4
     268:	012e2a00 	teqeq	lr, r0, lsl #20
     26c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     270:	0b3b0b3a 	bleq	ec2f60 <__Stack_Size+0xec2b60>
     274:	01111927 	tsteq	r1, r7, lsr #18
     278:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     27c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     280:	2b000013 	blcs	2d4 <_Minimum_Stack_Size+0x1d4>
     284:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     288:	0b3b0b3a 	bleq	ec2f78 <__Stack_Size+0xec2b78>
     28c:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     290:	1d2c0000 	stcne	0, cr0, [ip, #-0]
     294:	11133101 	tstne	r3, r1, lsl #2
     298:	58061201 	stmdapl	r6, {r0, r9, ip}
     29c:	010b590b 	tsteq	fp, fp, lsl #18
     2a0:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
     2a4:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     2a8:	0b3b0b3a 	bleq	ec2f98 <__Stack_Size+0xec2b98>
     2ac:	17021349 	strne	r1, [r2, -r9, asr #6]
     2b0:	052e0000 	streq	r0, [lr, #-0]!
     2b4:	3a0e0300 	bcc	380ebc <__Stack_Size+0x380abc>
     2b8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     2bc:	00170213 	andseq	r0, r7, r3, lsl r2
     2c0:	012e2f00 	teqeq	lr, r0, lsl #30
     2c4:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     2c8:	0b3b0b3a 	bleq	ec2fb8 <__Stack_Size+0xec2bb8>
     2cc:	13491927 	movtne	r1, #39207	; 0x9927
     2d0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     2d4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     2d8:	00130119 	andseq	r0, r3, r9, lsl r1
     2dc:	00343000 	eorseq	r3, r4, r0
     2e0:	0b3a0e03 	bleq	e83af4 <__Stack_Size+0xe836f4>
     2e4:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     2e8:	00000b1c 	andeq	r0, r0, ip, lsl fp
     2ec:	3f002e31 	svccc	0x00002e31
     2f0:	3a0e0319 	bcc	380f5c <__Stack_Size+0x380b5c>
     2f4:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     2f8:	11134919 	tstne	r3, r9, lsl r9
     2fc:	40061201 	andmi	r1, r6, r1, lsl #4
     300:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     304:	34320000 	ldrtcc	r0, [r2], #-0
     308:	3a0e0300 	bcc	380f10 <__Stack_Size+0x380b10>
     30c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     310:	00180213 	andseq	r0, r8, r3, lsl r2
     314:	82893300 	addhi	r3, r9, #0, 6
     318:	01110101 	tsteq	r1, r1, lsl #2
     31c:	00001331 	andeq	r1, r0, r1, lsr r3
     320:	3f012e34 	svccc	0x00012e34
     324:	3a0e0319 	bcc	380f90 <__Stack_Size+0x380b90>
     328:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     32c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     330:	96184006 	ldrls	r4, [r8], -r6
     334:	13011942 	movwne	r1, #6466	; 0x1942
     338:	34350000 	ldrtcc	r0, [r5], #-0
     33c:	3a0e0300 	bcc	380f44 <__Stack_Size+0x380b44>
     340:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     344:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     348:	36000018 			; <UNDEFINED> instruction: 0x36000018
     34c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     350:	0b3b0b3a 	bleq	ec3040 <__Stack_Size+0xec2c40>
     354:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     358:	0000193c 	andeq	r1, r0, ip, lsr r9
     35c:	49010137 	stmdbmi	r1, {r0, r1, r2, r4, r5, r8}
     360:	00130113 	andseq	r0, r3, r3, lsl r1
     364:	00213800 	eoreq	r3, r1, r0, lsl #16
     368:	0b2f1349 	bleq	bc5094 <__Stack_Size+0xbc4c94>
     36c:	24390000 	ldrtcs	r0, [r9], #-0
     370:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     374:	0008030b 	andeq	r0, r8, fp, lsl #6
     378:	00213a00 	eoreq	r3, r1, r0, lsl #20
     37c:	2e3b0000 	cdpcs	0, 3, cr0, cr11, cr0, {0}
     380:	03193f00 	tsteq	r9, #0, 30
     384:	3b0b3a0e 	blcc	2cebc4 <__Stack_Size+0x2ce7c4>
     388:	3c19270b 	ldccc	7, cr2, [r9], {11}
     38c:	3c000019 	stccc	0, cr0, [r0], {25}
     390:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     394:	0b3a0e03 	bleq	e83ba8 <__Stack_Size+0xe837a8>
     398:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     39c:	1301193c 	movwne	r1, #6460	; 0x193c
     3a0:	2e3d0000 	cdpcs	0, 3, cr0, cr13, cr0, {0}
     3a4:	03193f01 	tsteq	r9, #1, 30
     3a8:	3b0b3a0e 	blcc	2cebe8 <__Stack_Size+0x2ce7e8>
     3ac:	3c19270b 	ldccc	7, cr2, [r9], {11}
     3b0:	00130119 	andseq	r0, r3, r9, lsl r1
     3b4:	002e3e00 	eoreq	r3, lr, r0, lsl #28
     3b8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     3bc:	0b3b0b3a 	bleq	ec30ac <__Stack_Size+0xec2cac>
     3c0:	13491927 	movtne	r1, #39207	; 0x9927
     3c4:	0000193c 	andeq	r1, r0, ip, lsr r9
     3c8:	3f012e3f 	svccc	0x00012e3f
     3cc:	3a0e0319 	bcc	381038 <__Stack_Size+0x380c38>
     3d0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     3d4:	3c134919 	ldccc	9, cr4, [r3], {25}
     3d8:	00130119 	andseq	r0, r3, r9, lsl r1
     3dc:	11010000 	mrsne	r0, (UNDEF: 1)
     3e0:	130e2501 	movwne	r2, #58625	; 0xe501
     3e4:	1b0e030b 	blne	381018 <__Stack_Size+0x380c18>
     3e8:	0017100e 	andseq	r1, r7, lr
     3ec:	00240200 	eoreq	r0, r4, r0, lsl #4
     3f0:	0b3e0b0b 	bleq	f83024 <__Stack_Size+0xf82c24>
     3f4:	00000e03 	andeq	r0, r0, r3, lsl #28
     3f8:	03001603 	movweq	r1, #1539	; 0x603
     3fc:	3b0b3a08 	blcc	2cec24 <__Stack_Size+0x2ce824>
     400:	0013490b 	andseq	r4, r3, fp, lsl #18
     404:	01130400 	tsteq	r3, r0, lsl #8
     408:	0b0b0e03 	bleq	2c3c1c <__Stack_Size+0x2c381c>
     40c:	0b3b0b3a 	bleq	ec30fc <__Stack_Size+0xec2cfc>
     410:	00001301 	andeq	r1, r0, r1, lsl #6
     414:	03000d05 	movweq	r0, #3333	; 0xd05
     418:	3b0b3a0e 	blcc	2cec58 <__Stack_Size+0x2ce858>
     41c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     420:	0600000b 	streq	r0, [r0], -fp
     424:	0b0b000f 	bleq	2c0468 <__Stack_Size+0x2c0068>
     428:	00001349 	andeq	r1, r0, r9, asr #6
     42c:	03001607 	movweq	r1, #1543	; 0x607
     430:	3b0b3a0e 	blcc	2cec70 <__Stack_Size+0x2ce870>
     434:	0013490b 	andseq	r4, r3, fp, lsl #18
     438:	00340800 	eorseq	r0, r4, r0, lsl #16
     43c:	0b3a0e03 	bleq	e83c50 <__Stack_Size+0xe83850>
     440:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     444:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     448:	24090000 	strcs	r0, [r9], #-0
     44c:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     450:	0008030b 	andeq	r0, r8, fp, lsl #6
     454:	01010a00 	tsteq	r1, r0, lsl #20
     458:	13011349 	movwne	r1, #4937	; 0x1349
     45c:	210b0000 	mrscs	r0, (UNDEF: 11)
     460:	2f134900 	svccs	0x00134900
     464:	0000000b 	andeq	r0, r0, fp
     468:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     46c:	030b130e 	movweq	r1, #45838	; 0xb30e
     470:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     474:	10011117 	andne	r1, r1, r7, lsl r1
     478:	02000017 	andeq	r0, r0, #23
     47c:	0b0b0024 	bleq	2c0514 <__Stack_Size+0x2c0114>
     480:	0e030b3e 	vmoveq.16	d3[0], r0
     484:	16030000 	strne	r0, [r3], -r0
     488:	3a080300 	bcc	201090 <__Stack_Size+0x200c90>
     48c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     490:	04000013 	streq	r0, [r0], #-19
     494:	0b0b0104 	bleq	2c08ac <__Stack_Size+0x2c04ac>
     498:	0b3b0b3a 	bleq	ec3188 <__Stack_Size+0xec2d88>
     49c:	00001301 	andeq	r1, r0, r1, lsl #6
     4a0:	03002805 	movweq	r2, #2053	; 0x805
     4a4:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     4a8:	00160600 	andseq	r0, r6, r0, lsl #12
     4ac:	0b3a0e03 	bleq	e83cc0 <__Stack_Size+0xe838c0>
     4b0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4b4:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     4b8:	03193f01 	tsteq	r9, #1, 30
     4bc:	3b0b3a0e 	blcc	2cecfc <__Stack_Size+0x2ce8fc>
     4c0:	1113490b 	tstne	r3, fp, lsl #18
     4c4:	40061201 	andmi	r1, r6, r1, lsl #4
     4c8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     4cc:	00001301 	andeq	r1, r0, r1, lsl #6
     4d0:	03003408 	movweq	r3, #1032	; 0x408
     4d4:	3b0b3a0e 	blcc	2ced14 <__Stack_Size+0x2ce914>
     4d8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     4dc:	09000017 	stmdbeq	r0, {r0, r1, r2, r4}
     4e0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     4e4:	0b3a0e03 	bleq	e83cf8 <__Stack_Size+0xe838f8>
     4e8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     4ec:	1301193c 	movwne	r1, #6460	; 0x193c
     4f0:	180a0000 	stmdane	sl, {}	; <UNPREDICTABLE>
     4f4:	0b000000 	bleq	4fc <__Stack_Size+0xfc>
     4f8:	00018289 	andeq	r8, r1, r9, lsl #5
     4fc:	13310111 	teqne	r1, #1073741828	; 0x40000004
     500:	890c0000 	stmdbhi	ip, {}	; <UNPREDICTABLE>
     504:	11010182 	smlabbne	r1, r2, r1, r0
     508:	01133101 	tsteq	r3, r1, lsl #2
     50c:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     510:	0001828a 	andeq	r8, r1, sl, lsl #5
     514:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     518:	0e000018 	mcreq	0, 0, r0, cr0, cr8, {0}
     51c:	0b0b0024 	bleq	2c05b4 <__Stack_Size+0x2c01b4>
     520:	08030b3e 	stmdaeq	r3, {r1, r2, r3, r4, r5, r8, r9, fp}
     524:	340f0000 	strcc	r0, [pc], #-0	; 52c <__Stack_Size+0x12c>
     528:	3a0e0300 	bcc	381130 <__Stack_Size+0x380d30>
     52c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     530:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     534:	10000018 	andne	r0, r0, r8, lsl r0
     538:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     53c:	0b3a0e03 	bleq	e83d50 <__Stack_Size+0xe83950>
     540:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     544:	0000193c 	andeq	r1, r0, ip, lsr r9
     548:	3f012e11 	svccc	0x00012e11
     54c:	3a0e0319 	bcc	3811b8 <__Stack_Size+0x380db8>
     550:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     554:	01193c19 	tsteq	r9, r9, lsl ip
     558:	12000013 	andne	r0, r0, #19
     55c:	13490005 	movtne	r0, #36869	; 0x9005
     560:	2e130000 	cdpcs	0, 1, cr0, cr3, cr0, {0}
     564:	03193f01 	tsteq	r9, #1, 30
     568:	3b0b3a0e 	blcc	2ceda8 <__Stack_Size+0x2ce9a8>
     56c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     570:	01193c13 	tsteq	r9, r3, lsl ip
     574:	14000013 	strne	r0, [r0], #-19
     578:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     57c:	0b3a0e03 	bleq	e83d90 <__Stack_Size+0xe83990>
     580:	193c0b3b 	ldmdbne	ip!, {r0, r1, r3, r4, r5, r8, r9, fp}
     584:	00001301 	andeq	r1, r0, r1, lsl #6
     588:	01110100 	tsteq	r1, r0, lsl #2
     58c:	0b130e25 	bleq	4c3e28 <__Stack_Size+0x4c3a28>
     590:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     594:	01111755 	tsteq	r1, r5, asr r7
     598:	00001710 	andeq	r1, r0, r0, lsl r7
     59c:	0b002402 	bleq	95ac <__Stack_Size+0x91ac>
     5a0:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     5a4:	0300000e 	movweq	r0, #14
     5a8:	08030016 	stmdaeq	r3, {r1, r2, r4}
     5ac:	0b3b0b3a 	bleq	ec329c <__Stack_Size+0xec2e9c>
     5b0:	00001349 	andeq	r1, r0, r9, asr #6
     5b4:	03001604 	movweq	r1, #1540	; 0x604
     5b8:	3b0b3a0e 	blcc	2cedf8 <__Stack_Size+0x2ce9f8>
     5bc:	0013490b 	andseq	r4, r3, fp, lsl #18
     5c0:	00350500 	eorseq	r0, r5, r0, lsl #10
     5c4:	00001349 	andeq	r1, r0, r9, asr #6
     5c8:	49002606 	stmdbmi	r0, {r1, r2, r9, sl, sp}
     5cc:	07000013 	smladeq	r0, r3, r0, r0
     5d0:	0b0b0104 	bleq	2c09e8 <__Stack_Size+0x2c05e8>
     5d4:	0b3b0b3a 	bleq	ec32c4 <__Stack_Size+0xec2ec4>
     5d8:	00001301 	andeq	r1, r0, r1, lsl #6
     5dc:	03002808 	movweq	r2, #2056	; 0x808
     5e0:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     5e4:	00150900 	andseq	r0, r5, r0, lsl #18
     5e8:	00001927 	andeq	r1, r0, r7, lsr #18
     5ec:	0b000f0a 	bleq	421c <__Stack_Size+0x3e1c>
     5f0:	0013490b 	andseq	r4, r3, fp, lsl #18
     5f4:	01130b00 	tsteq	r3, r0, lsl #22
     5f8:	0b3a0b0b 	bleq	e8322c <__Stack_Size+0xe82e2c>
     5fc:	13010b3b 	movwne	r0, #6971	; 0x1b3b
     600:	0d0c0000 	stceq	0, cr0, [ip, #-0]
     604:	3a080300 	bcc	20120c <__Stack_Size+0x200e0c>
     608:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     60c:	000b3813 	andeq	r3, fp, r3, lsl r8
     610:	000d0d00 	andeq	r0, sp, r0, lsl #26
     614:	0b3a0e03 	bleq	e83e28 <__Stack_Size+0xe83a28>
     618:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     61c:	00000b38 	andeq	r0, r0, r8, lsr fp
     620:	0b01130e 	bleq	45260 <__Stack_Size+0x44e60>
     624:	3b0b3a05 	blcc	2cee40 <__Stack_Size+0x2cea40>
     628:	0013010b 	andseq	r0, r3, fp, lsl #2
     62c:	000d0f00 	andeq	r0, sp, r0, lsl #30
     630:	0b3a0e03 	bleq	e83e44 <__Stack_Size+0xe83a44>
     634:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     638:	00000538 	andeq	r0, r0, r8, lsr r5
     63c:	03000d10 	movweq	r0, #3344	; 0xd10
     640:	3b0b3a08 	blcc	2cee68 <__Stack_Size+0x2cea68>
     644:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
     648:	11000005 	tstne	r0, r5
     64c:	13490101 	movtne	r0, #37121	; 0x9101
     650:	00001301 	andeq	r1, r0, r1, lsl #6
     654:	49002112 	stmdbmi	r0, {r1, r4, r8, sp}
     658:	000b2f13 	andeq	r2, fp, r3, lsl pc
     65c:	002e1300 	eoreq	r1, lr, r0, lsl #6
     660:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     664:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     668:	0b201927 	bleq	806b0c <__Stack_Size+0x80670c>
     66c:	2e140000 	cdpcs	0, 1, cr0, cr4, cr0, {0}
     670:	03193f01 	tsteq	r9, #1, 30
     674:	3b0b3a0e 	blcc	2ceeb4 <__Stack_Size+0x2ceab4>
     678:	2019270b 	andscs	r2, r9, fp, lsl #14
     67c:	0013010b 	andseq	r0, r3, fp, lsl #2
     680:	00051500 	andeq	r1, r5, r0, lsl #10
     684:	0b3a0e03 	bleq	e83e98 <__Stack_Size+0xe83a98>
     688:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     68c:	05160000 	ldreq	r0, [r6, #-0]
     690:	3a080300 	bcc	201298 <__Stack_Size+0x200e98>
     694:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     698:	17000013 	smladne	r0, r3, r0, r0
     69c:	1331012e 	teqne	r1, #-2147483637	; 0x8000000b
     6a0:	06120111 			; <UNDEFINED> instruction: 0x06120111
     6a4:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     6a8:	00130119 	andseq	r0, r3, r9, lsl r1
     6ac:	00051800 	andeq	r1, r5, r0, lsl #16
     6b0:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
     6b4:	05190000 	ldreq	r0, [r9, #-0]
     6b8:	02133100 	andseq	r3, r3, #0, 2
     6bc:	1a000017 	bne	720 <__Stack_Size+0x320>
     6c0:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     6c4:	0b3a0e03 	bleq	e83ed8 <__Stack_Size+0xe83ad8>
     6c8:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     6cc:	01111349 	tsteq	r1, r9, asr #6
     6d0:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     6d4:	01194297 			; <UNDEFINED> instruction: 0x01194297
     6d8:	1b000013 	blne	72c <__Stack_Size+0x32c>
     6dc:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     6e0:	0b3b0b3a 	bleq	ec33d0 <__Stack_Size+0xec2fd0>
     6e4:	17021349 	strne	r1, [r2, -r9, asr #6]
     6e8:	051c0000 	ldreq	r0, [ip, #-0]
     6ec:	3a080300 	bcc	2012f4 <__Stack_Size+0x200ef4>
     6f0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     6f4:	00170213 	andseq	r0, r7, r3, lsl r2
     6f8:	012e1d00 	teqeq	lr, r0, lsl #26
     6fc:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     700:	0b3b0b3a 	bleq	ec33f0 <__Stack_Size+0xec2ff0>
     704:	01111349 	tsteq	r1, r9, asr #6
     708:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     70c:	01194297 			; <UNDEFINED> instruction: 0x01194297
     710:	1e000013 	mcrne	0, 0, r0, cr0, cr3, {0}
     714:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     718:	0b3b0b3a 	bleq	ec3408 <__Stack_Size+0xec3008>
     71c:	17021349 	strne	r1, [r2, -r9, asr #6]
     720:	2e1f0000 	cdpcs	0, 1, cr0, cr15, cr0, {0}
     724:	03193f01 	tsteq	r9, #1, 30
     728:	3b0b3a0e 	blcc	2cef68 <__Stack_Size+0x2ceb68>
     72c:	1119270b 	tstne	r9, fp, lsl #14
     730:	40061201 	andmi	r1, r6, r1, lsl #4
     734:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     738:	00001301 	andeq	r1, r0, r1, lsl #6
     73c:	03000520 	movweq	r0, #1312	; 0x520
     740:	3b0b3a0e 	blcc	2cef80 <__Stack_Size+0x2ceb80>
     744:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     748:	21000018 	tstcs	r0, r8, lsl r0
     74c:	08030034 	stmdaeq	r3, {r2, r4, r5}
     750:	0b3b0b3a 	bleq	ec3440 <__Stack_Size+0xec3040>
     754:	17021349 	strne	r1, [r2, -r9, asr #6]
     758:	89220000 	stmdbhi	r2!, {}	; <UNPREDICTABLE>
     75c:	11010182 	smlabbne	r1, r2, r1, r0
     760:	01133101 	tsteq	r3, r1, lsl #2
     764:	23000013 	movwcs	r0, #19
     768:	0001828a 	andeq	r8, r1, sl, lsl #5
     76c:	42911802 	addsmi	r1, r1, #131072	; 0x20000
     770:	24000018 	strcs	r0, [r0], #-24
     774:	01018289 	smlabbeq	r1, r9, r2, r8
     778:	13310111 	teqne	r1, #1073741828	; 0x40000004
     77c:	2e250000 	cdpcs	0, 2, cr0, cr5, cr0, {0}
     780:	03193f00 	tsteq	r9, #0, 30
     784:	3b0b3a0e 	blcc	2cefc4 <__Stack_Size+0x2cebc4>
     788:	1119270b 	tstne	r9, fp, lsl #14
     78c:	40061201 	andmi	r1, r6, r1, lsl #4
     790:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     794:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
     798:	03193f01 	tsteq	r9, #1, 30
     79c:	3b0b3a0e 	blcc	2cefdc <__Stack_Size+0x2cebdc>
     7a0:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     7a4:	010b2013 	tsteq	fp, r3, lsl r0
     7a8:	27000013 	smladcs	r0, r3, r0, r0
     7ac:	08030005 	stmdaeq	r3, {r0, r2}
     7b0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     7b4:	00001349 	andeq	r1, r0, r9, asr #6
     7b8:	03003428 	movweq	r3, #1064	; 0x428
     7bc:	3b0b3a0e 	blcc	2ceffc <__Stack_Size+0x2cebfc>
     7c0:	00134905 	andseq	r4, r3, r5, lsl #18
     7c4:	00242900 	eoreq	r2, r4, r0, lsl #18
     7c8:	0b3e0b0b 	bleq	f833fc <__Stack_Size+0xf82ffc>
     7cc:	00000803 	andeq	r0, r0, r3, lsl #16
     7d0:	31011d2a 	tstcc	r1, sl, lsr #26
     7d4:	55015213 	strpl	r5, [r1, #-531]	; 0x213
     7d8:	590b5817 	stmdbpl	fp, {r0, r1, r2, r4, fp, ip, lr}
     7dc:	2b00000b 	blcs	810 <__Stack_Size+0x410>
     7e0:	13310005 	teqne	r1, #5
     7e4:	00000b1c 	andeq	r0, r0, ip, lsl fp
     7e8:	3100052c 	tstcc	r0, ip, lsr #10
     7ec:	00061c13 	andeq	r1, r6, r3, lsl ip
     7f0:	010b2d00 	tsteq	fp, r0, lsl #26
     7f4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     7f8:	342e0000 	strtcc	r0, [lr], #-0
     7fc:	3a0e0300 	bcc	381404 <__Stack_Size+0x381004>
     800:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     804:	000d1c13 	andeq	r1, sp, r3, lsl ip
     808:	001d2f00 	andseq	r2, sp, r0, lsl #30
     80c:	01521331 	cmpeq	r2, r1, lsr r3
     810:	0b581755 	bleq	160656c <__Stack_Size+0x160616c>
     814:	00000b59 	andeq	r0, r0, r9, asr fp
     818:	01828930 	orreq	r8, r2, r0, lsr r9
     81c:	31011100 	mrscc	r1, (UNDEF: 17)
     820:	31000013 	tstcc	r0, r3, lsl r0
     824:	00018289 	andeq	r8, r1, r9, lsl #5
     828:	42930111 	addsmi	r0, r3, #1073741828	; 0x40000004
     82c:	32000018 	andcc	r0, r0, #24
     830:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
     834:	0b3a0e03 	bleq	e84048 <__Stack_Size+0xe83c48>
     838:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     83c:	01111349 	tsteq	r1, r9, asr #6
     840:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     844:	01194297 			; <UNDEFINED> instruction: 0x01194297
     848:	33000013 	movwcc	r0, #19
     84c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     850:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     854:	17021349 	strne	r1, [r2, -r9, asr #6]
     858:	05340000 	ldreq	r0, [r4, #-0]!
     85c:	3a080300 	bcc	201464 <__Stack_Size+0x201064>
     860:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     864:	00170213 	andseq	r0, r7, r3, lsl r2
     868:	00053500 	andeq	r3, r5, r0, lsl #10
     86c:	0b3a0e03 	bleq	e84080 <__Stack_Size+0xe83c80>
     870:	1349053b 	movtne	r0, #38203	; 0x953b
     874:	00001802 	andeq	r1, r0, r2, lsl #16
     878:	03003436 	movweq	r3, #1078	; 0x436
     87c:	3b0b3a0e 	blcc	2cf0bc <__Stack_Size+0x2cecbc>
     880:	02134905 	andseq	r4, r3, #81920	; 0x14000
     884:	37000017 	smladcc	r0, r7, r0, r0
     888:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     88c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     890:	18021349 	stmdane	r2, {r0, r3, r6, r8, r9, ip}
     894:	2e380000 	cdpcs	0, 3, cr0, cr8, cr0, {0}
     898:	11133100 	tstne	r3, r0, lsl #2
     89c:	40061201 	andmi	r1, r6, r1, lsl #4
     8a0:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8a4:	2e390000 	cdpcs	0, 3, cr0, cr9, cr0, {0}
     8a8:	03193f00 	tsteq	r9, #0, 30
     8ac:	3b0b3a0e 	blcc	2cf0ec <__Stack_Size+0x2cecec>
     8b0:	11192705 	tstne	r9, r5, lsl #14
     8b4:	40061201 	andmi	r1, r6, r1, lsl #4
     8b8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     8bc:	343a0000 	ldrtcc	r0, [sl], #-0
     8c0:	02133100 	andseq	r3, r3, #0, 2
     8c4:	3b000017 	blcc	928 <__Stack_Size+0x528>
     8c8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     8cc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     8d0:	061c1349 	ldreq	r1, [ip], -r9, asr #6
     8d4:	343c0000 	ldrtcc	r0, [ip], #-0
     8d8:	3a0e0300 	bcc	3814e0 <__Stack_Size+0x3810e0>
     8dc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     8e0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     8e4:	3d000018 	stccc	0, cr0, [r0, #-96]	; 0xffffffa0
     8e8:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     8ec:	0b3a0e03 	bleq	e84100 <__Stack_Size+0xe83d00>
     8f0:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
     8f4:	0000193c 	andeq	r1, r0, ip, lsr r9
     8f8:	3f012e3e 	svccc	0x00012e3e
     8fc:	3a0e0319 	bcc	381568 <__Stack_Size+0x381168>
     900:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     904:	00193c19 	andseq	r3, r9, r9, lsl ip
     908:	00053f00 	andeq	r3, r5, r0, lsl #30
     90c:	00001349 	andeq	r1, r0, r9, asr #6
     910:	01110100 	tsteq	r1, r0, lsl #2
     914:	0b130e25 	bleq	4c41b0 <__Stack_Size+0x4c3db0>
     918:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     91c:	01111755 	tsteq	r1, r5, asr r7
     920:	00001710 	andeq	r1, r0, r0, lsl r7
     924:	0b002402 	bleq	9934 <__Stack_Size+0x9534>
     928:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     92c:	0300000e 	movweq	r0, #14
     930:	08030016 	stmdaeq	r3, {r1, r2, r4}
     934:	0b3b0b3a 	bleq	ec3624 <__Stack_Size+0xec3224>
     938:	00001349 	andeq	r1, r0, r9, asr #6
     93c:	0b010404 	bleq	41954 <__Stack_Size+0x41554>
     940:	3b0b3a0b 	blcc	2cf174 <__Stack_Size+0x2ced74>
     944:	0013010b 	andseq	r0, r3, fp, lsl #2
     948:	00280500 	eoreq	r0, r8, r0, lsl #10
     94c:	0d1c0e03 	ldceq	14, cr0, [ip, #-12]
     950:	16060000 	strne	r0, [r6], -r0
     954:	3a0e0300 	bcc	38155c <__Stack_Size+0x38115c>
     958:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     95c:	07000013 	smladeq	r0, r3, r0, r0
     960:	0b0b000f 	bleq	2c09a4 <__Stack_Size+0x2c05a4>
     964:	00001349 	andeq	r1, r0, r9, asr #6
     968:	03011308 	movweq	r1, #4872	; 0x1308
     96c:	3a0b0b0e 	bcc	2c35ac <__Stack_Size+0x2c31ac>
     970:	010b3b0b 	tsteq	fp, fp, lsl #22
     974:	09000013 	stmdbeq	r0, {r0, r1, r4}
     978:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
     97c:	0b3b0b3a 	bleq	ec366c <__Stack_Size+0xec326c>
     980:	0b381349 	bleq	e056ac <__Stack_Size+0xe052ac>
     984:	150a0000 	strne	r0, [sl, #-0]
     988:	49192701 	ldmdbmi	r9, {r0, r8, r9, sl, sp}
     98c:	00130113 	andseq	r0, r3, r3, lsl r1
     990:	00050b00 	andeq	r0, r5, r0, lsl #22
     994:	00001349 	andeq	r1, r0, r9, asr #6
     998:	0301130c 	movweq	r1, #4876	; 0x130c
     99c:	3a0b0b08 	bcc	2c35c4 <__Stack_Size+0x2c31c4>
     9a0:	010b3b0b 	tsteq	fp, fp, lsl #22
     9a4:	0d000013 	stceq	0, cr0, [r0, #-76]	; 0xffffffb4
     9a8:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     9ac:	0b3b0b3a 	bleq	ec369c <__Stack_Size+0xec329c>
     9b0:	0b381349 	bleq	e056dc <__Stack_Size+0xe052dc>
     9b4:	170e0000 	strne	r0, [lr, -r0]
     9b8:	3a0b0b01 	bcc	2c35c4 <__Stack_Size+0x2c31c4>
     9bc:	010b3b0b 	tsteq	fp, fp, lsl #22
     9c0:	0f000013 	svceq	0x00000013
     9c4:	0803000d 	stmdaeq	r3, {r0, r2, r3}
     9c8:	0b3b0b3a 	bleq	ec36b8 <__Stack_Size+0xec32b8>
     9cc:	00001349 	andeq	r1, r0, r9, asr #6
     9d0:	03010410 	movweq	r0, #5136	; 0x1410
     9d4:	3a0b0b0e 	bcc	2c3614 <__Stack_Size+0x2c3214>
     9d8:	010b3b0b 	tsteq	fp, fp, lsl #22
     9dc:	11000013 	tstne	r0, r3, lsl r0
     9e0:	08030028 	stmdaeq	r3, {r3, r5}
     9e4:	00000d1c 	andeq	r0, r0, ip, lsl sp
     9e8:	3f002e12 	svccc	0x00002e12
     9ec:	3a0e0319 	bcc	381658 <__Stack_Size+0x381258>
     9f0:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     9f4:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     9f8:	97184006 	ldrls	r4, [r8, -r6]
     9fc:	00001942 	andeq	r1, r0, r2, asr #18
     a00:	3f012e13 	svccc	0x00012e13
     a04:	3a0e0319 	bcc	381670 <__Stack_Size+0x381270>
     a08:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     a0c:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     a10:	97184006 	ldrls	r4, [r8, -r6]
     a14:	13011942 	movwne	r1, #6466	; 0x1942
     a18:	34140000 	ldrcc	r0, [r4], #-0
     a1c:	3a0e0300 	bcc	381624 <__Stack_Size+0x381224>
     a20:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a24:	00170213 	andseq	r0, r7, r3, lsl r2
     a28:	82891500 	addhi	r1, r9, #0, 10
     a2c:	01110001 	tsteq	r1, r1
     a30:	00001331 	andeq	r1, r0, r1, lsr r3
     a34:	01828916 	orreq	r8, r2, r6, lsl r9
     a38:	95011100 	strls	r1, [r1, #-256]	; 0x100
     a3c:	13311942 	teqne	r1, #1081344	; 0x108000
     a40:	2e170000 	cdpcs	0, 1, cr0, cr7, cr0, {0}
     a44:	03193f00 	tsteq	r9, #0, 30
     a48:	3b0b3a0e 	blcc	2cf288 <__Stack_Size+0x2cee88>
     a4c:	11192705 	tstne	r9, r5, lsl #14
     a50:	40061201 	andmi	r1, r6, r1, lsl #4
     a54:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     a58:	2e180000 	cdpcs	0, 1, cr0, cr8, cr0, {0}
     a5c:	03193f01 	tsteq	r9, #1, 30
     a60:	3b0b3a0e 	blcc	2cf2a0 <__Stack_Size+0x2ceea0>
     a64:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
     a68:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     a6c:	97184006 	ldrls	r4, [r8, -r6]
     a70:	13011942 	movwne	r1, #6466	; 0x1942
     a74:	05190000 	ldreq	r0, [r9, #-0]
     a78:	3a0e0300 	bcc	381680 <__Stack_Size+0x381280>
     a7c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     a80:	00170213 	andseq	r0, r7, r3, lsl r2
     a84:	00341a00 	eorseq	r1, r4, r0, lsl #20
     a88:	0b3a0803 	bleq	e82a9c <__Stack_Size+0xe8269c>
     a8c:	1349053b 	movtne	r0, #38203	; 0x953b
     a90:	00001702 	andeq	r1, r0, r2, lsl #14
     a94:	0300341b 	movweq	r3, #1051	; 0x41b
     a98:	3b0b3a0e 	blcc	2cf2d8 <__Stack_Size+0x2ceed8>
     a9c:	00134905 	andseq	r4, r3, r5, lsl #18
     aa0:	82891c00 	addhi	r1, r9, #0, 24
     aa4:	01110101 	tsteq	r1, r1, lsl #2
     aa8:	13011331 	movwne	r1, #4913	; 0x1331
     aac:	8a1d0000 	bhi	740ab4 <__Stack_Size+0x7406b4>
     ab0:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
     ab4:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
     ab8:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
     abc:	11010182 	smlabbne	r1, r2, r1, r0
     ac0:	00133101 	andseq	r3, r3, r1, lsl #2
     ac4:	00241f00 	eoreq	r1, r4, r0, lsl #30
     ac8:	0b3e0b0b 	bleq	f836fc <__Stack_Size+0xf832fc>
     acc:	00000803 	andeq	r0, r0, r3, lsl #16
     ad0:	3f012e20 	svccc	0x00012e20
     ad4:	3a0e0319 	bcc	381740 <__Stack_Size+0x381340>
     ad8:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     adc:	11134919 	tstne	r3, r9, lsl r9
     ae0:	40061201 	andmi	r1, r6, r1, lsl #4
     ae4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ae8:	00001301 	andeq	r1, r0, r1, lsl #6
     aec:	03003421 	movweq	r3, #1057	; 0x421
     af0:	3b0b3a0e 	blcc	2cf330 <__Stack_Size+0x2cef30>
     af4:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     af8:	22000017 	andcs	r0, r0, #23
     afc:	193f002e 	ldmdbne	pc!, {r1, r2, r3, r5}	; <UNPREDICTABLE>
     b00:	0b3a0e03 	bleq	e84314 <__Stack_Size+0xe83f14>
     b04:	1927053b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, sl}
     b08:	01111349 	tsteq	r1, r9, asr #6
     b0c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     b10:	00194297 	mulseq	r9, r7, r2
     b14:	00052300 	andeq	r2, r5, r0, lsl #6
     b18:	0b3a0e03 	bleq	e8432c <__Stack_Size+0xe83f2c>
     b1c:	1349053b 	movtne	r0, #38203	; 0x953b
     b20:	00001802 	andeq	r1, r0, r2, lsl #16
     b24:	3f002e24 	svccc	0x00002e24
     b28:	3a0e0319 	bcc	381794 <__Stack_Size+0x381394>
     b2c:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     b30:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
     b34:	97184006 	ldrls	r4, [r8, -r6]
     b38:	00001942 	andeq	r1, r0, r2, asr #18
     b3c:	3f002e25 	svccc	0x00002e25
     b40:	3a0e0319 	bcc	3817ac <__Stack_Size+0x3813ac>
     b44:	11053b0b 	tstne	r5, fp, lsl #22
     b48:	40061201 	andmi	r1, r6, r1, lsl #4
     b4c:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     b50:	34260000 	strtcc	r0, [r6], #-0
     b54:	3a0e0300 	bcc	38175c <__Stack_Size+0x38135c>
     b58:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b5c:	00180213 	andseq	r0, r8, r3, lsl r2
     b60:	00352700 	eorseq	r2, r5, r0, lsl #14
     b64:	00001349 	andeq	r1, r0, r9, asr #6
     b68:	49010128 	stmdbmi	r1, {r3, r5, r8}
     b6c:	00130113 	andseq	r0, r3, r3, lsl r1
     b70:	00212900 	eoreq	r2, r1, r0, lsl #18
     b74:	052f1349 	streq	r1, [pc, #-841]!	; 833 <__Stack_Size+0x433>
     b78:	342a0000 	strtcc	r0, [sl], #-0
     b7c:	3a0e0300 	bcc	381784 <__Stack_Size+0x381384>
     b80:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     b84:	3c193f13 	ldccc	15, cr3, [r9], {19}
     b88:	2b000019 	blcs	bf4 <__Stack_Size+0x7f4>
     b8c:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
     b90:	0b3b0b3a 	bleq	ec3880 <__Stack_Size+0xec3480>
     b94:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
     b98:	00001802 	andeq	r1, r0, r2, lsl #16
     b9c:	3f002e2c 	svccc	0x00002e2c
     ba0:	3a0e0319 	bcc	38180c <__Stack_Size+0x38140c>
     ba4:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     ba8:	00193c19 	andseq	r3, r9, r9, lsl ip
     bac:	012e2d00 	teqeq	lr, r0, lsl #26
     bb0:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     bb4:	0b3b0b3a 	bleq	ec38a4 <__Stack_Size+0xec34a4>
     bb8:	13491927 	movtne	r1, #39207	; 0x9927
     bbc:	1301193c 	movwne	r1, #6460	; 0x193c
     bc0:	2e2e0000 	cdpcs	0, 2, cr0, cr14, cr0, {0}
     bc4:	03193f00 	tsteq	r9, #0, 30
     bc8:	3b0b3a0e 	blcc	2cf408 <__Stack_Size+0x2cf008>
     bcc:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     bd0:	00193c13 	andseq	r3, r9, r3, lsl ip
     bd4:	11010000 	mrsne	r0, (UNDEF: 1)
     bd8:	130e2501 	movwne	r2, #58625	; 0xe501
     bdc:	1b0e030b 	blne	381810 <__Stack_Size+0x381410>
     be0:	1117550e 	tstne	r7, lr, lsl #10
     be4:	00171001 	andseq	r1, r7, r1
     be8:	00240200 	eoreq	r0, r4, r0, lsl #4
     bec:	0b3e0b0b 	bleq	f83820 <__Stack_Size+0xf83420>
     bf0:	00000e03 	andeq	r0, r0, r3, lsl #28
     bf4:	03001603 	movweq	r1, #1539	; 0x603
     bf8:	3b0b3a08 	blcc	2cf420 <__Stack_Size+0x2cf020>
     bfc:	0013490b 	andseq	r4, r3, fp, lsl #18
     c00:	01040400 	tsteq	r4, r0, lsl #8
     c04:	0b0b0e03 	bleq	2c4418 <__Stack_Size+0x2c4018>
     c08:	0b3b0b3a 	bleq	ec38f8 <__Stack_Size+0xec34f8>
     c0c:	00001301 	andeq	r1, r0, r1, lsl #6
     c10:	03002805 	movweq	r2, #2053	; 0x805
     c14:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     c18:	00160600 	andseq	r0, r6, r0, lsl #12
     c1c:	0b3a0e03 	bleq	e84430 <__Stack_Size+0xe84030>
     c20:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     c24:	2e070000 	cdpcs	0, 0, cr0, cr7, cr0, {0}
     c28:	03193f01 	tsteq	r9, #1, 30
     c2c:	3b0b3a0e 	blcc	2cf46c <__Stack_Size+0x2cf06c>
     c30:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
     c34:	010b2013 	tsteq	fp, r3, lsl r0
     c38:	08000013 	stmdaeq	r0, {r0, r1, r4}
     c3c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c40:	0b3b0b3a 	bleq	ec3930 <__Stack_Size+0xec3530>
     c44:	00001349 	andeq	r1, r0, r9, asr #6
     c48:	3f012e09 	svccc	0x00012e09
     c4c:	3a0e0319 	bcc	3818b8 <__Stack_Size+0x3814b8>
     c50:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
     c54:	12011119 	andne	r1, r1, #1073741830	; 0x40000006
     c58:	97184006 	ldrls	r4, [r8, -r6]
     c5c:	13011942 	movwne	r1, #6466	; 0x1942
     c60:	050a0000 	streq	r0, [sl, #-0]
     c64:	3a0e0300 	bcc	38186c <__Stack_Size+0x38146c>
     c68:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     c6c:	00180213 	andseq	r0, r8, r3, lsl r2
     c70:	002e0b00 	eoreq	r0, lr, r0, lsl #22
     c74:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     c78:	0b3b0b3a 	bleq	ec3968 <__Stack_Size+0xec3568>
     c7c:	13491927 	movtne	r1, #39207	; 0x9927
     c80:	06120111 			; <UNDEFINED> instruction: 0x06120111
     c84:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     c88:	0c000019 	stceq	0, cr0, [r0], {25}
     c8c:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     c90:	0b3b0b3a 	bleq	ec3980 <__Stack_Size+0xec3580>
     c94:	17021349 	strne	r1, [r2, -r9, asr #6]
     c98:	2e0d0000 	cdpcs	0, 0, cr0, cr13, cr0, {0}
     c9c:	11133101 	tstne	r3, r1, lsl #2
     ca0:	40061201 	andmi	r1, r6, r1, lsl #4
     ca4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     ca8:	00001301 	andeq	r1, r0, r1, lsl #6
     cac:	3100050e 	tstcc	r0, lr, lsl #10
     cb0:	00170213 	andseq	r0, r7, r3, lsl r2
     cb4:	012e0f00 	teqeq	lr, r0, lsl #30
     cb8:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     cbc:	0b3b0b3a 	bleq	ec39ac <__Stack_Size+0xec35ac>
     cc0:	13491927 	movtne	r1, #39207	; 0x9927
     cc4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cc8:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     ccc:	00130119 	andseq	r0, r3, r9, lsl r1
     cd0:	010b1000 	mrseq	r1, (UNDEF: 11)
     cd4:	06120111 			; <UNDEFINED> instruction: 0x06120111
     cd8:	34110000 	ldrcc	r0, [r1], #-0
     cdc:	3a0e0300 	bcc	3818e4 <__Stack_Size+0x3814e4>
     ce0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     ce4:	00180213 	andseq	r0, r8, r3, lsl r2
     ce8:	00341200 	eorseq	r1, r4, r0, lsl #4
     cec:	0b3a0e03 	bleq	e84500 <__Stack_Size+0xe84100>
     cf0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     cf4:	1d130000 	ldcne	0, cr0, [r3, #-0]
     cf8:	52133101 	andspl	r3, r3, #1073741824	; 0x40000000
     cfc:	58175501 	ldmdapl	r7, {r0, r8, sl, ip, lr}
     d00:	000b590b 	andeq	r5, fp, fp, lsl #18
     d04:	012e1400 	teqeq	lr, r0, lsl #8
     d08:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d0c:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d10:	01111927 	tsteq	r1, r7, lsr #18
     d14:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     d18:	01194297 			; <UNDEFINED> instruction: 0x01194297
     d1c:	15000013 	strne	r0, [r0, #-19]
     d20:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
     d24:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d28:	17021349 	strne	r1, [r2, -r9, asr #6]
     d2c:	34160000 	ldrcc	r0, [r6], #-0
     d30:	3a0e0300 	bcc	381938 <__Stack_Size+0x381538>
     d34:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d38:	00170213 	andseq	r0, r7, r3, lsl r2
     d3c:	012e1700 	teqeq	lr, r0, lsl #14
     d40:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     d44:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
     d48:	13491927 	movtne	r1, #39207	; 0x9927
     d4c:	06120111 			; <UNDEFINED> instruction: 0x06120111
     d50:	42971840 	addsmi	r1, r7, #64, 16	; 0x400000
     d54:	00130119 	andseq	r0, r3, r9, lsl r1
     d58:	00051800 	andeq	r1, r5, r0, lsl #16
     d5c:	0b3a0e03 	bleq	e84570 <__Stack_Size+0xe84170>
     d60:	1349053b 	movtne	r0, #38203	; 0x953b
     d64:	00001802 	andeq	r1, r0, r2, lsl #16
     d68:	0b000f19 	bleq	49d4 <__Stack_Size+0x45d4>
     d6c:	0013490b 	andseq	r4, r3, fp, lsl #18
     d70:	00341a00 	eorseq	r1, r4, r0, lsl #20
     d74:	0b3a0e03 	bleq	e84588 <__Stack_Size+0xe84188>
     d78:	1349053b 	movtne	r0, #38203	; 0x953b
     d7c:	00001802 	andeq	r1, r0, r2, lsl #16
     d80:	55010b1b 	strpl	r0, [r1, #-2843]	; 0xb1b
     d84:	1c000017 	stcne	0, cr0, [r0], {23}
     d88:	0111010b 	tsteq	r1, fp, lsl #2
     d8c:	13010612 	movwne	r0, #5650	; 0x1612
     d90:	051d0000 	ldreq	r0, [sp, #-0]
     d94:	3a080300 	bcc	20199c <__Stack_Size+0x20159c>
     d98:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
     d9c:	00170213 	andseq	r0, r7, r3, lsl r2
     da0:	00051e00 	andeq	r1, r5, r0, lsl #28
     da4:	0b3a0803 	bleq	e82db8 <__Stack_Size+0xe829b8>
     da8:	1349053b 	movtne	r0, #38203	; 0x953b
     dac:	00001802 	andeq	r1, r0, r2, lsl #16
     db0:	3f012e1f 	svccc	0x00012e1f
     db4:	3a0e0319 	bcc	381a20 <__Stack_Size+0x381620>
     db8:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
     dbc:	11134919 	tstne	r3, r9, lsl r9
     dc0:	40061201 	andmi	r1, r6, r1, lsl #4
     dc4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
     dc8:	01000000 	mrseq	r0, (UNDEF: 0)
     dcc:	0e250111 	mcreq	1, 1, r0, cr5, cr1, {0}
     dd0:	0e030b13 	vmoveq.32	d3[0], r0
     dd4:	17550e1b 	smmlane	r5, fp, lr, r0
     dd8:	17100111 			; <UNDEFINED> instruction: 0x17100111
     ddc:	24020000 	strcs	r0, [r2], #-0
     de0:	3e0b0b00 	vmlacc.f64	d0, d11, d0
     de4:	000e030b 	andeq	r0, lr, fp, lsl #6
     de8:	00160300 	andseq	r0, r6, r0, lsl #6
     dec:	0b3a0803 	bleq	e82e00 <__Stack_Size+0xe82a00>
     df0:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     df4:	15040000 	strne	r0, [r4, #-0]
     df8:	00192700 	andseq	r2, r9, r0, lsl #14
     dfc:	000f0500 	andeq	r0, pc, r0, lsl #10
     e00:	13490b0b 	movtne	r0, #39691	; 0x9b0b
     e04:	2e060000 	cdpcs	0, 0, cr0, cr6, cr0, {0}
     e08:	03193f01 	tsteq	r9, #1, 30
     e0c:	3b0b3a0e 	blcc	2cf64c <__Stack_Size+0x2cf24c>
     e10:	1119270b 	tstne	r9, fp, lsl #14
     e14:	40061201 	andmi	r1, r6, r1, lsl #4
     e18:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
     e1c:	00001301 	andeq	r1, r0, r1, lsl #6
     e20:	03003407 	movweq	r3, #1031	; 0x407
     e24:	3b0b3a0e 	blcc	2cf664 <__Stack_Size+0x2cf264>
     e28:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
     e2c:	08000017 	stmdaeq	r0, {r0, r1, r2, r4}
     e30:	0111010b 	tsteq	r1, fp, lsl #2
     e34:	13010612 	movwne	r0, #5650	; 0x1612
     e38:	89090000 	stmdbhi	r9, {}	; <UNPREDICTABLE>
     e3c:	11000182 	smlabbne	r0, r2, r1, r0
     e40:	00133101 	andseq	r3, r3, r1, lsl #2
     e44:	00340a00 	eorseq	r0, r4, r0, lsl #20
     e48:	0b3a0e03 	bleq	e8465c <__Stack_Size+0xe8425c>
     e4c:	1349053b 	movtne	r0, #38203	; 0x953b
     e50:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e54:	350b0000 	strcc	r0, [fp, #-0]
     e58:	00134900 	andseq	r4, r3, r0, lsl #18
     e5c:	00340c00 	eorseq	r0, r4, r0, lsl #24
     e60:	0b3a0e03 	bleq	e84674 <__Stack_Size+0xe84274>
     e64:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     e68:	1802193f 	stmdane	r2, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     e6c:	340d0000 	strcc	r0, [sp], #-0
     e70:	3a0e0300 	bcc	381a78 <__Stack_Size+0x381678>
     e74:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     e78:	3c193f13 	ldccc	15, cr3, [r9], {19}
     e7c:	0e000019 	mcreq	0, 0, r0, cr0, cr9, {0}
     e80:	13490101 	movtne	r0, #37121	; 0x9101
     e84:	00001301 	andeq	r1, r0, r1, lsl #6
     e88:	4900210f 	stmdbmi	r0, {r0, r1, r2, r3, r8, sp}
     e8c:	000b2f13 	andeq	r2, fp, r3, lsl pc
     e90:	002e1000 	eoreq	r1, lr, r0
     e94:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     e98:	0b3b0b3a 	bleq	ec3b88 <__Stack_Size+0xec3788>
     e9c:	13491927 	movtne	r1, #39207	; 0x9927
     ea0:	0000193c 	andeq	r1, r0, ip, lsr r9
     ea4:	01110100 	tsteq	r1, r0, lsl #2
     ea8:	0b130e25 	bleq	4c4744 <__Stack_Size+0x4c4344>
     eac:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
     eb0:	01111755 	tsteq	r1, r5, asr r7
     eb4:	00001710 	andeq	r1, r0, r0, lsl r7
     eb8:	0b002402 	bleq	9ec8 <__Stack_Size+0x9ac8>
     ebc:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
     ec0:	0300000e 	movweq	r0, #14
     ec4:	08030016 	stmdaeq	r3, {r1, r2, r4}
     ec8:	0b3b0b3a 	bleq	ec3bb8 <__Stack_Size+0xec37b8>
     ecc:	00001349 	andeq	r1, r0, r9, asr #6
     ed0:	0b000f04 	bleq	4ae8 <__Stack_Size+0x46e8>
     ed4:	0013490b 	andseq	r4, r3, fp, lsl #18
     ed8:	01040500 	tsteq	r4, r0, lsl #10
     edc:	0b0b0e03 	bleq	2c46f0 <__Stack_Size+0x2c42f0>
     ee0:	0b3b0b3a 	bleq	ec3bd0 <__Stack_Size+0xec37d0>
     ee4:	00001301 	andeq	r1, r0, r1, lsl #6
     ee8:	03002806 	movweq	r2, #2054	; 0x806
     eec:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     ef0:	00160700 	andseq	r0, r6, r0, lsl #14
     ef4:	0b3a0e03 	bleq	e84708 <__Stack_Size+0xe84308>
     ef8:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     efc:	13080000 	movwne	r0, #32768	; 0x8000
     f00:	0b0e0301 	bleq	381b0c <__Stack_Size+0x38170c>
     f04:	3b0b3a0b 	blcc	2cf738 <__Stack_Size+0x2cf338>
     f08:	0013010b 	andseq	r0, r3, fp, lsl #2
     f0c:	000d0900 	andeq	r0, sp, r0, lsl #18
     f10:	0b3a0e03 	bleq	e84724 <__Stack_Size+0xe84324>
     f14:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f18:	00000b38 	andeq	r0, r0, r8, lsr fp
     f1c:	2701150a 	strcs	r1, [r1, -sl, lsl #10]
     f20:	01134919 	tsteq	r3, r9, lsl r9
     f24:	0b000013 	bleq	f78 <__Stack_Size+0xb78>
     f28:	13490005 	movtne	r0, #36869	; 0x9005
     f2c:	130c0000 	movwne	r0, #49152	; 0xc000
     f30:	0b080301 	bleq	201b3c <__Stack_Size+0x20173c>
     f34:	3b0b3a0b 	blcc	2cf768 <__Stack_Size+0x2cf368>
     f38:	0013010b 	andseq	r0, r3, fp, lsl #2
     f3c:	000d0d00 	andeq	r0, sp, r0, lsl #26
     f40:	0b3a0803 	bleq	e82f54 <__Stack_Size+0xe82b54>
     f44:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f48:	00000b38 	andeq	r0, r0, r8, lsr fp
     f4c:	0b01170e 	bleq	46b8c <__Stack_Size+0x4678c>
     f50:	3b0b3a0b 	blcc	2cf784 <__Stack_Size+0x2cf384>
     f54:	0013010b 	andseq	r0, r3, fp, lsl #2
     f58:	000d0f00 	andeq	r0, sp, r0, lsl #30
     f5c:	0b3a0803 	bleq	e82f70 <__Stack_Size+0xe82b70>
     f60:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f64:	15100000 	ldrne	r0, [r0, #-0]
     f68:	00192700 	andseq	r2, r9, r0, lsl #14
     f6c:	002e1100 	eoreq	r1, lr, r0, lsl #2
     f70:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
     f74:	0b3b0b3a 	bleq	ec3c64 <__Stack_Size+0xec3864>
     f78:	01111927 	tsteq	r1, r7, lsr #18
     f7c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
     f80:	00194296 	mulseq	r9, r6, r2
     f84:	00341200 	eorseq	r1, r4, r0, lsl #4
     f88:	0b3a0e03 	bleq	e8479c <__Stack_Size+0xe8439c>
     f8c:	13490b3b 	movtne	r0, #39739	; 0x9b3b
     f90:	193c193f 	ldmdbne	ip!, {r0, r1, r2, r3, r4, r5, r8, fp, ip}
     f94:	34130000 	ldrcc	r0, [r3], #-0
     f98:	3a0e0300 	bcc	381ba0 <__Stack_Size+0x3817a0>
     f9c:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fa0:	02193f13 	andseq	r3, r9, #19, 30	; 0x4c
     fa4:	00000018 	andeq	r0, r0, r8, lsl r0
     fa8:	25011101 	strcs	r1, [r1, #-257]	; 0x101
     fac:	030b130e 	movweq	r1, #45838	; 0xb30e
     fb0:	550e1b0e 	strpl	r1, [lr, #-2830]	; 0xb0e
     fb4:	10011117 	andne	r1, r1, r7, lsl r1
     fb8:	02000017 	andeq	r0, r0, #23
     fbc:	0b0b0024 	bleq	2c1054 <__Stack_Size+0x2c0c54>
     fc0:	0e030b3e 	vmoveq.16	d3[0], r0
     fc4:	16030000 	strne	r0, [r3], -r0
     fc8:	3a080300 	bcc	201bd0 <__Stack_Size+0x2017d0>
     fcc:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
     fd0:	04000013 	streq	r0, [r0], #-19
     fd4:	0e030016 	mcreq	0, 0, r0, cr3, cr6, {0}
     fd8:	0b3b0b3a 	bleq	ec3cc8 <__Stack_Size+0xec38c8>
     fdc:	00001349 	andeq	r1, r0, r9, asr #6
     fe0:	49003505 	stmdbmi	r0, {r0, r2, r8, sl, ip, sp}
     fe4:	06000013 			; <UNDEFINED> instruction: 0x06000013
     fe8:	0b0b0104 	bleq	2c1400 <__Stack_Size+0x2c1000>
     fec:	0b3b0b3a 	bleq	ec3cdc <__Stack_Size+0xec38dc>
     ff0:	00001301 	andeq	r1, r0, r1, lsl #6
     ff4:	03002807 	movweq	r2, #2055	; 0x807
     ff8:	000d1c0e 	andeq	r1, sp, lr, lsl #24
     ffc:	01040800 	tsteq	r4, r0, lsl #16
    1000:	0b0b0e03 	bleq	2c4814 <__Stack_Size+0x2c4414>
    1004:	0b3b0b3a 	bleq	ec3cf4 <__Stack_Size+0xec38f4>
    1008:	00001301 	andeq	r1, r0, r1, lsl #6
    100c:	03011309 	movweq	r1, #4873	; 0x1309
    1010:	3a0b0b0e 	bcc	2c3c50 <__Stack_Size+0x2c3850>
    1014:	010b3b0b 	tsteq	fp, fp, lsl #22
    1018:	0a000013 	beq	106c <__Stack_Size+0xc6c>
    101c:	0e03000d 	cdpeq	0, 0, cr0, cr3, cr13, {0}
    1020:	0b3b0b3a 	bleq	ec3d10 <__Stack_Size+0xec3910>
    1024:	0b381349 	bleq	e05d50 <__Stack_Size+0xe05950>
    1028:	0f0b0000 	svceq	0x000b0000
    102c:	490b0b00 	stmdbmi	fp, {r8, r9, fp}
    1030:	0c000013 	stceq	0, cr0, [r0], {19}
    1034:	19270115 	stmdbne	r7!, {r0, r2, r4, r8}
    1038:	13011349 	movwne	r1, #4937	; 0x1349
    103c:	050d0000 	streq	r0, [sp, #-0]
    1040:	00134900 	andseq	r4, r3, r0, lsl #18
    1044:	01130e00 	tsteq	r3, r0, lsl #28
    1048:	0b0b0803 	bleq	2c305c <__Stack_Size+0x2c2c5c>
    104c:	0b3b0b3a 	bleq	ec3d3c <__Stack_Size+0xec393c>
    1050:	00001301 	andeq	r1, r0, r1, lsl #6
    1054:	03000d0f 	movweq	r0, #3343	; 0xd0f
    1058:	3b0b3a08 	blcc	2cf880 <__Stack_Size+0x2cf480>
    105c:	3813490b 	ldmdacc	r3, {r0, r1, r3, r8, fp, lr}
    1060:	1000000b 	andne	r0, r0, fp
    1064:	0b0b0117 	bleq	2c14c8 <__Stack_Size+0x2c10c8>
    1068:	0b3b0b3a 	bleq	ec3d58 <__Stack_Size+0xec3958>
    106c:	00001301 	andeq	r1, r0, r1, lsl #6
    1070:	03000d11 	movweq	r0, #3345	; 0xd11
    1074:	3b0b3a08 	blcc	2cf89c <__Stack_Size+0x2cf49c>
    1078:	0013490b 	andseq	r4, r3, fp, lsl #18
    107c:	00151200 	andseq	r1, r5, r0, lsl #4
    1080:	00001927 	andeq	r1, r0, r7, lsr #18
    1084:	3f012e13 	svccc	0x00012e13
    1088:	3a0e0319 	bcc	381cf4 <__Stack_Size+0x3818f4>
    108c:	270b3b0b 	strcs	r3, [fp, -fp, lsl #22]
    1090:	11134919 	tstne	r3, r9, lsl r9
    1094:	40061201 	andmi	r1, r6, r1, lsl #4
    1098:	19429618 	stmdbne	r2, {r3, r4, r9, sl, ip, pc}^
    109c:	00001301 	andeq	r1, r0, r1, lsl #6
    10a0:	03000514 	movweq	r0, #1300	; 0x514
    10a4:	3b0b3a0e 	blcc	2cf8e4 <__Stack_Size+0x2cf4e4>
    10a8:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    10ac:	15000017 	strne	r0, [r0, #-23]
    10b0:	0111010b 	tsteq	r1, fp, lsl #2
    10b4:	13010612 	movwne	r0, #5650	; 0x1612
    10b8:	34160000 	ldrcc	r0, [r6], #-0
    10bc:	3a0e0300 	bcc	381cc4 <__Stack_Size+0x3818c4>
    10c0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10c4:	00170213 	andseq	r0, r7, r3, lsl r2
    10c8:	010b1700 	tsteq	fp, r0, lsl #14
    10cc:	06120111 			; <UNDEFINED> instruction: 0x06120111
    10d0:	34180000 	ldrcc	r0, [r8], #-0
    10d4:	3a0e0300 	bcc	381cdc <__Stack_Size+0x3818dc>
    10d8:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    10dc:	19000013 	stmdbne	r0, {r0, r1, r4}
    10e0:	0e03012e 	adfeqsp	f0, f3, #0.5
    10e4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    10e8:	01111927 	tsteq	r1, r7, lsr #18
    10ec:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    10f0:	01194297 			; <UNDEFINED> instruction: 0x01194297
    10f4:	1a000013 	bne	1148 <__Stack_Size+0xd48>
    10f8:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    10fc:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    1100:	17021349 	strne	r1, [r2, -r9, asr #6]
    1104:	0a1b0000 	beq	6c110c <__Stack_Size+0x6c0d0c>
    1108:	3a0e0300 	bcc	381d10 <__Stack_Size+0x381910>
    110c:	11053b0b 	tstne	r5, fp, lsl #22
    1110:	1c000001 	stcne	0, cr0, [r0], {1}
    1114:	01018289 	smlabbeq	r1, r9, r2, r8
    1118:	13010111 	movwne	r0, #4369	; 0x1111
    111c:	8a1d0000 	bhi	741124 <__Stack_Size+0x740d24>
    1120:	02000182 	andeq	r0, r0, #-2147483616	; 0x80000020
    1124:	18429118 	stmdane	r2, {r3, r4, r8, ip, pc}^
    1128:	891e0000 	ldmdbhi	lr, {}	; <UNPREDICTABLE>
    112c:	11010182 	smlabbne	r1, r2, r1, r0
    1130:	01133101 	tsteq	r3, r1, lsl #2
    1134:	1f000013 	svcne	0x00000013
    1138:	01018289 	smlabbeq	r1, r9, r2, r8
    113c:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1140:	2e200000 	cdpcs	0, 2, cr0, cr0, cr0, {0}
    1144:	03193f00 	tsteq	r9, #0, 30
    1148:	3b0b3a0e 	blcc	2cf988 <__Stack_Size+0x2cf588>
    114c:	4919270b 	ldmdbmi	r9, {r0, r1, r3, r8, r9, sl, sp}
    1150:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1154:	96184006 	ldrls	r4, [r8], -r6
    1158:	00001942 	andeq	r1, r0, r2, asr #18
    115c:	03003421 	movweq	r3, #1057	; 0x421
    1160:	3b0b3a08 	blcc	2cf988 <__Stack_Size+0x2cf588>
    1164:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    1168:	22000017 	andcs	r0, r0, #23
    116c:	00018289 	andeq	r8, r1, r9, lsl #5
    1170:	13310111 	teqne	r1, #1073741828	; 0x40000004
    1174:	2e230000 	cdpcs	0, 2, cr0, cr3, cr0, {0}
    1178:	03193f01 	tsteq	r9, #1, 30
    117c:	3b0b3a0e 	blcc	2cf9bc <__Stack_Size+0x2cf5bc>
    1180:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    1184:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    1188:	96184006 	ldrls	r4, [r8], -r6
    118c:	13011942 	movwne	r1, #6466	; 0x1942
    1190:	34240000 	strtcc	r0, [r4], #-0
    1194:	3a080300 	bcc	201d9c <__Stack_Size+0x20199c>
    1198:	49053b0b 	stmdbmi	r5, {r0, r1, r3, r8, r9, fp, ip, sp}
    119c:	00170213 	andseq	r0, r7, r3, lsl r2
    11a0:	010b2500 	tsteq	fp, r0, lsl #10
    11a4:	13011755 	movwne	r1, #5973	; 0x1755
    11a8:	2e260000 	cdpcs	0, 2, cr0, cr6, cr0, {0}
    11ac:	03193f00 	tsteq	r9, #0, 30
    11b0:	3b0b3a0e 	blcc	2cf9f0 <__Stack_Size+0x2cf5f0>
    11b4:	49192705 	ldmdbmi	r9, {r0, r2, r8, r9, sl, sp}
    11b8:	12011113 	andne	r1, r1, #-1073741820	; 0xc0000004
    11bc:	96184006 	ldrls	r4, [r8], -r6
    11c0:	00001942 	andeq	r1, r0, r2, asr #18
    11c4:	3f012e27 	svccc	0x00012e27
    11c8:	3a0e0319 	bcc	381e34 <__Stack_Size+0x381a34>
    11cc:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    11d0:	11134919 	tstne	r3, r9, lsl r9
    11d4:	40061201 	andmi	r1, r6, r1, lsl #4
    11d8:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    11dc:	00001301 	andeq	r1, r0, r1, lsl #6
    11e0:	03000528 	movweq	r0, #1320	; 0x528
    11e4:	3b0b3a0e 	blcc	2cfa24 <__Stack_Size+0x2cf624>
    11e8:	02134905 	andseq	r4, r3, #81920	; 0x14000
    11ec:	29000017 	stmdbcs	r0, {r0, r1, r2, r4}
    11f0:	0e03012e 	adfeqsp	f0, f3, #0.5
    11f4:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    11f8:	0b201927 	bleq	80769c <__Stack_Size+0x80729c>
    11fc:	00001301 	andeq	r1, r0, r1, lsl #6
    1200:	0300342a 	movweq	r3, #1066	; 0x42a
    1204:	3b0b3a0e 	blcc	2cfa44 <__Stack_Size+0x2cf644>
    1208:	00134905 	andseq	r4, r3, r5, lsl #18
    120c:	000a2b00 	andeq	r2, sl, r0, lsl #22
    1210:	0b3a0e03 	bleq	e84a24 <__Stack_Size+0xe84624>
    1214:	0000053b 	andeq	r0, r0, fp, lsr r5
    1218:	01010b2c 	tsteq	r1, ip, lsr #22
    121c:	2d000013 	stccs	0, cr0, [r0, #-76]	; 0xffffffb4
    1220:	0000010b 	andeq	r0, r0, fp, lsl #2
    1224:	0b01172e 	bleq	46ee4 <__Stack_Size+0x46ae4>
    1228:	3b0b3a0b 	blcc	2cfa5c <__Stack_Size+0x2cf65c>
    122c:	00130105 	andseq	r0, r3, r5, lsl #2
    1230:	000d2f00 	andeq	r2, sp, r0, lsl #30
    1234:	0b3a0803 	bleq	e83248 <__Stack_Size+0xe82e48>
    1238:	1349053b 	movtne	r0, #38203	; 0x953b
    123c:	1d300000 	ldcne	0, cr0, [r0, #-0]
    1240:	11133101 	tstne	r3, r1, lsl #2
    1244:	58061201 	stmdapl	r6, {r0, r9, ip}
    1248:	0105590b 	tsteq	r5, fp, lsl #18
    124c:	31000013 	tstcc	r0, r3, lsl r0
    1250:	13310034 	teqne	r1, #52	; 0x34
    1254:	00001702 	andeq	r1, r0, r2, lsl #14
    1258:	31000a32 	tstcc	r0, r2, lsr sl
    125c:	00011113 	andeq	r1, r1, r3, lsl r1
    1260:	011d3300 	tsteq	sp, r0, lsl #6
    1264:	01521331 	cmpeq	r2, r1, lsr r3
    1268:	0b581755 	bleq	1606fc4 <__Stack_Size+0x1606bc4>
    126c:	13010559 	movwne	r0, #5465	; 0x1559
    1270:	0b340000 	bleq	d01278 <__Stack_Size+0xd00e78>
    1274:	00175501 	andseq	r5, r7, r1, lsl #10
    1278:	00343500 	eorseq	r3, r4, r0, lsl #10
    127c:	18021331 	stmdane	r2, {r0, r4, r5, r8, r9, ip}
    1280:	89360000 	ldmdbhi	r6!, {}	; <UNPREDICTABLE>
    1284:	11010182 	smlabbne	r1, r2, r1, r0
    1288:	37000001 	strcc	r0, [r0, -r1]
    128c:	00018289 	andeq	r8, r1, r9, lsl #5
    1290:	42950111 	addsmi	r0, r5, #1073741828	; 0x40000004
    1294:	00133119 	andseq	r3, r3, r9, lsl r1
    1298:	012e3800 	teqeq	lr, r0, lsl #16
    129c:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    12a0:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12a4:	01111927 	tsteq	r1, r7, lsr #18
    12a8:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    12ac:	01194297 			; <UNDEFINED> instruction: 0x01194297
    12b0:	39000013 	stmdbcc	r0, {r0, r1, r4}
    12b4:	08030005 	stmdaeq	r3, {r0, r2}
    12b8:	053b0b3a 	ldreq	r0, [fp, #-2874]!	; 0xb3a
    12bc:	17021349 	strne	r1, [r2, -r9, asr #6]
    12c0:	2e3a0000 	cdpcs	0, 3, cr0, cr10, cr0, {0}
    12c4:	03193f00 	tsteq	r9, #0, 30
    12c8:	3b0b3a0e 	blcc	2cfb08 <__Stack_Size+0x2cf708>
    12cc:	11192705 	tstne	r9, r5, lsl #14
    12d0:	40061201 	andmi	r1, r6, r1, lsl #4
    12d4:	19429718 	stmdbne	r2, {r3, r4, r8, r9, sl, ip, pc}^
    12d8:	343b0000 	ldrtcc	r0, [fp], #-0
    12dc:	3a0e0300 	bcc	381ee4 <__Stack_Size+0x381ae4>
    12e0:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    12e4:	3c193f13 	ldccc	15, cr3, [r9], {19}
    12e8:	3c000019 	stccc	0, cr0, [r0], {25}
    12ec:	0e030034 	mcreq	0, 0, r0, cr3, cr4, {1}
    12f0:	0b3b0b3a 	bleq	ec3fe0 <__Stack_Size+0xec3be0>
    12f4:	193f1349 	ldmdbne	pc!, {r0, r3, r6, r8, r9, ip}	; <UNPREDICTABLE>
    12f8:	00001802 	andeq	r1, r0, r2, lsl #16
    12fc:	3f012e3d 	svccc	0x00012e3d
    1300:	3a0e0319 	bcc	381f6c <__Stack_Size+0x381b6c>
    1304:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1308:	3c134919 	ldccc	9, cr4, [r3], {25}
    130c:	00130119 	andseq	r0, r3, r9, lsl r1
    1310:	012e3e00 	teqeq	lr, r0, lsl #28
    1314:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1318:	0b3b0b3a 	bleq	ec4008 <__Stack_Size+0xec3c08>
    131c:	193c1927 	ldmdbne	ip!, {r0, r1, r2, r5, r8, fp, ip}
    1320:	00001301 	andeq	r1, r0, r1, lsl #6
    1324:	3f012e3f 	svccc	0x00012e3f
    1328:	3a0e0319 	bcc	381f94 <__Stack_Size+0x381b94>
    132c:	27053b0b 	strcs	r3, [r5, -fp, lsl #22]
    1330:	01193c19 	tsteq	r9, r9, lsl ip
    1334:	40000013 	andmi	r0, r0, r3, lsl r0
    1338:	193f012e 	ldmdbne	pc!, {r1, r2, r3, r5, r8}	; <UNPREDICTABLE>
    133c:	0b3a0e03 	bleq	e84b50 <__Stack_Size+0xe84750>
    1340:	19270b3b 	stmdbne	r7!, {r0, r1, r3, r4, r5, r8, r9, fp}
    1344:	0000193c 	andeq	r1, r0, ip, lsr r9
    1348:	01110100 	tsteq	r1, r0, lsl #2
    134c:	0b130e25 	bleq	4c4be8 <__Stack_Size+0x4c47e8>
    1350:	0e1b0e03 	cdpeq	14, 1, cr0, cr11, cr3, {0}
    1354:	01111755 	tsteq	r1, r5, asr r7
    1358:	00001710 	andeq	r1, r0, r0, lsl r7
    135c:	0b002402 	bleq	a36c <__Stack_Size+0x9f6c>
    1360:	030b3e0b 	movweq	r3, #48651	; 0xbe0b
    1364:	0300000e 	movweq	r0, #14
    1368:	08030016 	stmdaeq	r3, {r1, r2, r4}
    136c:	0b3b0b3a 	bleq	ec405c <__Stack_Size+0xec3c5c>
    1370:	00001349 	andeq	r1, r0, r9, asr #6
    1374:	0b000f04 	bleq	4f8c <__Stack_Size+0x4b8c>
    1378:	0013490b 	andseq	r4, r3, fp, lsl #18
    137c:	012e0500 	teqeq	lr, r0, lsl #10
    1380:	0e03193f 	mcreq	9, 0, r1, cr3, cr15, {1}
    1384:	0b3b0b3a 	bleq	ec4074 <__Stack_Size+0xec3c74>
    1388:	01111927 	tsteq	r1, r7, lsr #18
    138c:	18400612 	stmdane	r0, {r1, r4, r9, sl}^
    1390:	01194297 			; <UNDEFINED> instruction: 0x01194297
    1394:	06000013 			; <UNDEFINED> instruction: 0x06000013
    1398:	0e030005 	cdpeq	0, 0, cr0, cr3, cr5, {0}
    139c:	0b3b0b3a 	bleq	ec408c <__Stack_Size+0xec3c8c>
    13a0:	17021349 	strne	r1, [r2, -r9, asr #6]
    13a4:	34070000 	strcc	r0, [r7], #-0
    13a8:	3a080300 	bcc	201fb0 <__Stack_Size+0x201bb0>
    13ac:	490b3b0b 	stmdbmi	fp, {r0, r1, r3, r8, r9, fp, ip, sp}
    13b0:	00180213 	andseq	r0, r8, r3, lsl r2
    13b4:	00340800 	eorseq	r0, r4, r0, lsl #16
    13b8:	0b3a0803 	bleq	e833cc <__Stack_Size+0xe82fcc>
    13bc:	13490b3b 	movtne	r0, #39739	; 0x9b3b
    13c0:	00001702 	andeq	r1, r0, r2, lsl #14
    13c4:	03003409 	movweq	r3, #1033	; 0x409
    13c8:	3b0b3a0e 	blcc	2cfc08 <__Stack_Size+0x2cf808>
    13cc:	0213490b 	andseq	r4, r3, #180224	; 0x2c000
    13d0:	00000017 	andeq	r0, r0, r7, lsl r0

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	00000071 	andeq	r0, r0, r1, ror r0
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	00310002 	eorseq	r0, r1, r2
       8:	01020000 	mrseq	r0, (UNDEF: 2)
       c:	000d0efb 	strdeq	r0, [sp], -fp
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	01010101 	tsteq	r1, r1, lsl #2
      14:	01000000 	mrseq	r0, (UNDEF: 0)
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	73010000 	movwvc	r0, #4096	; 0x1000
      1c:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
      24:	5f630000 	svcpl	0x00630000
      28:	796c6e6f 	stmdbvc	ip!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	6174735f 	cmnvs	r4, pc, asr r3
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	70757472 	rsbsvc	r7, r5, r2, ror r4
      34:	0100732e 	tsteq	r0, lr, lsr #6
      38:	00000000 	andeq	r0, r0, r0

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	016c0205 	cmneq	ip, r5, lsl #4

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	c1030800 	tstgt	r3, r0, lsl #16
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	31210100 	teqcc	r1, r0, lsl #2
      48:	23212121 	teqcs	r1, #1073741832	; 0x40000008
      4c:	21212121 	teqcs	r1, r1, lsr #2

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	2131212f 	teqcs	r1, pc, lsr #2
      54:	30212131 	eorcc	r2, r1, r1, lsr r1
      58:	2068032f 	rsbcs	r0, r8, pc, lsr #6
      5c:	36322f34 	shasxcc	r2, r2, r4
      60:	01000202 	tsteq	r0, r2, lsl #4
      64:	02050001 	andeq	r0, r5, #1
      68:	080001b4 	stmdaeq	r0, {r2, r4, r5, r7, r8}
      6c:	0100eb03 	tsteq	r0, r3, lsl #22
      70:	01000202 	tsteq	r0, r2, lsl #4
      74:	0000a201 	andeq	sl, r0, r1, lsl #4
      78:	33000200 	movwcc	r0, #512	; 0x200
      7c:	02000000 	andeq	r0, r0, #0
      80:	0d0efb01 	vstreq	d15, [lr, #-4]
      84:	01010100 	mrseq	r0, (UNDEF: 17)
      88:	00000001 	andeq	r0, r0, r1
      8c:	01000001 	tsteq	r0, r1
      90:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
      94:	5f32336d 	svcpl	0x0032336d
      98:	0062696c 	rsbeq	r6, r2, ip, ror #18
      9c:	726f6300 	rsbvc	r6, pc, #0, 6
      a0:	6d786574 	cfldr64vs	mvdx6, [r8, #-464]!	; 0xfffffe30
      a4:	616d5f33 	cmnvs	sp, r3, lsr pc
      a8:	2e6f7263 	cdpcs	2, 6, cr7, cr15, cr3, {3}
      ac:	00010053 	andeq	r0, r1, r3, asr r0
      b0:	05000000 	streq	r0, [r0, #-0]
      b4:	0000f002 	andeq	pc, r0, r2
      b8:	01370308 	teqeq	r7, r8, lsl #6
      bc:	200b0321 	andcs	r0, fp, r1, lsr #6
      c0:	200b0321 	andcs	r0, fp, r1, lsr #6
      c4:	200b0321 	andcs	r0, fp, r1, lsr #6
      c8:	200b032f 	andcs	r0, fp, pc, lsr #6
      cc:	200b032f 	andcs	r0, fp, pc, lsr #6
      d0:	200b032f 	andcs	r0, fp, pc, lsr #6
      d4:	200b0321 	andcs	r0, fp, r1, lsr #6
      d8:	200b032f 	andcs	r0, fp, pc, lsr #6
      dc:	0a032f2f 	beq	cbda0 <__Stack_Size+0xcb9a0>
      e0:	0b032f20 	bleq	cbd68 <__Stack_Size+0xcb968>
      e4:	0b032f20 	bleq	cbd6c <__Stack_Size+0xcb96c>
      e8:	0b032f20 	bleq	cbd70 <__Stack_Size+0xcb970>
      ec:	0b032f20 	bleq	cbd74 <__Stack_Size+0xcb974>
      f0:	0b032120 	bleq	c8578 <__Stack_Size+0xc8178>
      f4:	0b032120 	bleq	c857c <__Stack_Size+0xc817c>
      f8:	0b032f20 	bleq	cbd80 <__Stack_Size+0xcb980>
      fc:	0b032120 	bleq	c8584 <__Stack_Size+0xc8184>
     100:	0b032120 	bleq	c8588 <__Stack_Size+0xc8188>
     104:	0b032f20 	bleq	cbd8c <__Stack_Size+0xcb98c>
     108:	0b032f20 	bleq	cbd90 <__Stack_Size+0xcb990>
     10c:	0a032f20 	beq	cbd94 <__Stack_Size+0xcb994>
     110:	0b032120 	bleq	c8598 <__Stack_Size+0xc8198>
     114:	01022120 	tsteq	r2, r0, lsr #2
     118:	85010100 	strhi	r0, [r1, #-256]	; 0x100
     11c:	02000003 	andeq	r0, r0, #3
     120:	0000be00 	andeq	fp, r0, r0, lsl #28
     124:	fb010200 	blx	4092e <__Stack_Size+0x4052e>
     128:	01000d0e 	tsteq	r0, lr, lsl #26
     12c:	00010101 	andeq	r0, r1, r1, lsl #2
     130:	00010000 	andeq	r0, r1, r0
     134:	2f2e0100 	svccs	0x002e0100
     138:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     13c:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     140:	2f2e0062 	svccs	0x002e0062
     144:	5f627375 	svcpl	0x00627375
     148:	0062696c 	rsbeq	r6, r2, ip, ror #18
     14c:	62737500 	rsbsvs	r7, r3, #0, 10
     150:	0000632e 	andeq	r6, r0, lr, lsr #6
     154:	74730000 	ldrbtvc	r0, [r3], #-0
     158:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     15c:	5f783031 	svcpl	0x00783031
     160:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     164:	0100682e 	tsteq	r0, lr, lsr #16
     168:	61680000 	cmnvs	r8, r0
     16c:	61776472 	cmnvs	r7, r2, ror r4
     170:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     174:	00000000 	andeq	r0, r0, r0
     178:	5f627375 	svcpl	0x00627375
     17c:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     180:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     184:	73750000 	cmnvc	r5, #0
     188:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     18c:	00682e66 	rsbeq	r2, r8, r6, ror #28
     190:	75000002 	strvc	r0, [r0, #-2]
     194:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     198:	00000000 	andeq	r0, r0, r0
     19c:	5f627375 	svcpl	0x00627375
     1a0:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
     1a4:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1a8:	73750000 	cmnvc	r5, #0
     1ac:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     1b0:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     1b4:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     1b8:	0000682e 	andeq	r6, r0, lr, lsr #16
     1bc:	66640000 	strbtvs	r0, [r4], -r0
     1c0:	00682e75 	rsbeq	r2, r8, r5, ror lr
     1c4:	75000000 	strvc	r0, [r0, #-0]
     1c8:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     1cc:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     1d0:	00020068 	andeq	r0, r2, r8, rrx
     1d4:	62737500 	rsbsvs	r7, r3, #0, 10
     1d8:	746e695f 	strbtvc	r6, [lr], #-2399	; 0x95f
     1dc:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     1e0:	00000000 	andeq	r0, r0, r0
     1e4:	01b80205 			; <UNDEFINED> instruction: 0x01b80205
     1e8:	a2030800 	andge	r0, r3, #0, 16
     1ec:	01020101 	tsteq	r2, r1, lsl #2
     1f0:	00010100 	andeq	r0, r1, r0, lsl #2
     1f4:	01ba0205 			; <UNDEFINED> instruction: 0x01ba0205
     1f8:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
     1fc:	01020102 	tsteq	r2, r2, lsl #2
     200:	00010100 	andeq	r0, r1, r0, lsl #2
     204:	01bc0205 			; <UNDEFINED> instruction: 0x01bc0205
     208:	ba030800 	blt	c2210 <__Stack_Size+0xc1e10>
     20c:	01020102 	tsteq	r2, r2, lsl #2
     210:	00010100 	andeq	r0, r1, r0, lsl #2
     214:	01be0205 			; <UNDEFINED> instruction: 0x01be0205
     218:	ee030800 	cdp	8, 0, cr0, cr3, cr0, {0}
     21c:	24150102 	ldrcs	r0, [r5], #-258	; 0x102
     220:	01000402 	tsteq	r0, r2, lsl #8
     224:	02050001 	andeq	r0, r5, #1
     228:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
     22c:	01039503 	tsteq	r3, r3, lsl #10
     230:	01000102 	tsteq	r0, r2, lsl #2
     234:	02050001 	andeq	r0, r5, #1
     238:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
     23c:	01039903 	tsteq	r3, r3, lsl #18
     240:	08024b13 	stmdaeq	r2, {r0, r1, r4, r8, r9, fp, lr}
     244:	00010100 	andeq	r0, r1, r0, lsl #2
     248:	01e40205 	mvneq	r0, r5, lsl #4
     24c:	9f030800 	svcls	0x00030800
     250:	01020103 	tsteq	r2, r3, lsl #2
     254:	00010100 	andeq	r0, r1, r0, lsl #2
     258:	01e60205 	mvneq	r0, r5, lsl #4
     25c:	a3030800 	movwge	r0, #14336	; 0x3800
     260:	01020103 	tsteq	r2, r3, lsl #2
     264:	00010100 	andeq	r0, r1, r0, lsl #2
     268:	01e80205 	mvneq	r0, r5, lsl #4
     26c:	a7030800 	strge	r0, [r3, -r0, lsl #16]
     270:	01020103 	tsteq	r2, r3, lsl #2
     274:	00010100 	andeq	r0, r1, r0, lsl #2
     278:	01ea0205 	mvneq	r0, r5, lsl #4
     27c:	ab030800 	blge	c2284 <__Stack_Size+0xc1e84>
     280:	01020103 	tsteq	r2, r3, lsl #2
     284:	00010100 	andeq	r0, r1, r0, lsl #2
     288:	01ec0205 	mvneq	r0, r5, lsl #4
     28c:	af030800 	svcge	0x00030800
     290:	01020103 	tsteq	r2, r3, lsl #2
     294:	00010100 	andeq	r0, r1, r0, lsl #2
     298:	01ee0205 	mvneq	r0, r5, lsl #4
     29c:	b3030800 	movwlt	r0, #14336	; 0x3800
     2a0:	01020103 	tsteq	r2, r3, lsl #2
     2a4:	00010100 	andeq	r0, r1, r0, lsl #2
     2a8:	01f00205 	mvnseq	r0, r5, lsl #4
     2ac:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
     2b0:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     2b4:	01010006 	tsteq	r1, r6
     2b8:	fc020500 	stc2	5, cr0, [r2], {-0}
     2bc:	03080001 	movweq	r0, #32769	; 0x8001
     2c0:	2101029e 			; <UNDEFINED> instruction: 0x2101029e
     2c4:	2f1f2130 	svccs	0x001f2130
     2c8:	0b03211f 	bleq	c874c <__Stack_Size+0xc834c>
     2cc:	20750320 	rsbscs	r0, r5, r0, lsr #6
     2d0:	231d2322 	tstcs	sp, #-2013265920	; 0x88000000
     2d4:	92759291 	rsbsls	r9, r5, #268435465	; 0x10000009
     2d8:	2f3e7630 	svccs	0x003e7630
     2dc:	08212c21 	stmdaeq	r1!, {r0, r5, sl, fp, sp}
     2e0:	00010100 	andeq	r0, r1, r0, lsl #2
     2e4:	02a40205 	adceq	r0, r4, #1342177280	; 0x50000000
     2e8:	bd030800 	stclt	8, cr0, [r3, #-0]
     2ec:	1b250102 	blne	9406fc <__Stack_Size+0x9402fc>
     2f0:	8a3e7525 	bhi	f9d78c <__Stack_Size+0xf9d38c>
     2f4:	03212221 	teqeq	r1, #268435458	; 0x10000002
     2f8:	03312076 	teqeq	r1, #118	; 0x76
     2fc:	21212010 	teqcs	r1, r0, lsl r0
     300:	2221211e 	eorcs	r2, r1, #-2147483641	; 0x80000007
     304:	0b022131 	bleq	887d0 <__Stack_Size+0x883d0>
     308:	00010100 	andeq	r0, r1, r0, lsl #2
     30c:	03040205 	movweq	r0, #16901	; 0x4205
     310:	f7030800 			; <UNDEFINED> instruction: 0xf7030800
     314:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     318:	01010006 	tsteq	r1, r6
     31c:	10020500 	andne	r0, r2, r0, lsl #10
     320:	03080003 	movweq	r0, #32771	; 0x8003
     324:	130102fb 	movwne	r0, #4859	; 0x12fb
     328:	01000602 	tsteq	r0, r2, lsl #12
     32c:	02050001 	andeq	r0, r5, #1
     330:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
     334:	0102ff03 	tsteq	r2, r3, lsl #30
     338:	5a313d13 	bpl	c4f78c <__Stack_Size+0xc4f38c>
     33c:	01000602 	tsteq	r0, r2, lsl #12
     340:	02050001 	andeq	r0, r5, #1
     344:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
     348:	01038803 	tsteq	r3, r3, lsl #16
     34c:	00060213 	andeq	r0, r6, r3, lsl r2
     350:	05000101 	streq	r0, [r0, #-257]	; 0x101
     354:	00034802 	andeq	r4, r3, r2, lsl #16
     358:	02e40308 	rsceq	r0, r4, #8, 6	; 0x20000000
     35c:	3d762101 	ldfcce	f2, [r6, #-4]!
     360:	0402214d 	streq	r2, [r2], #-333	; 0x14d
     364:	00010100 	andeq	r0, r1, r0, lsl #2
     368:	03700205 	cmneq	r0, #1342177280	; 0x50000000
     36c:	27030800 	strcs	r0, [r3, -r0, lsl #16]
     370:	20110301 	andscs	r0, r1, r1, lsl #6
     374:	02005b93 	andeq	r5, r0, #150528	; 0x24c00
     378:	20060204 	andcs	r0, r6, r4, lsl #4
     37c:	3d887806 	stccc	8, cr7, [r8, #24]
     380:	2d21211f 	stfcss	f2, [r1, #-124]!	; 0xffffff84
     384:	032f302f 	teqeq	pc, #47	; 0x2f
     388:	032000dc 	teqeq	r0, #220	; 0xdc
     38c:	022e7fa8 	eoreq	r7, lr, #168, 30	; 0x2a0
     390:	0101000c 	tsteq	r1, ip
     394:	00020500 	andeq	r0, r2, r0, lsl #10
     398:	03000000 	movweq	r0, #0
     39c:	150101a6 	strne	r0, [r1, #-422]	; 0x1a6
     3a0:	01000202 	tsteq	r0, r2, lsl #4
     3a4:	02050001 	andeq	r0, r5, #1
     3a8:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
     3ac:	0101ac03 	tsteq	r1, r3, lsl #24
     3b0:	023f3e14 	eorseq	r3, pc, #20, 28	; 0x140
     3b4:	01010008 	tsteq	r1, r8
     3b8:	04020500 	streq	r0, [r2], #-1280	; 0x500
     3bc:	03080004 	movweq	r0, #32772	; 0x8004
     3c0:	170101b6 			; <UNDEFINED> instruction: 0x170101b6
     3c4:	32222c22 	eorcc	r2, r2, #8704	; 0x2200
     3c8:	01000602 	tsteq	r0, r2, lsl #12
     3cc:	02050001 	andeq	r0, r5, #1
     3d0:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
     3d4:	0101c403 	tsteq	r1, r3, lsl #8
     3d8:	84302131 	ldrthi	r2, [r0], #-305	; 0x131
     3dc:	2f312f40 	svccs	0x00312f40
     3e0:	312f4b31 	teqcc	pc, r1, lsr fp	; <UNPREDICTABLE>
     3e4:	2f2f3d3e 	svccs	0x002f3d3e
     3e8:	222f4b22 	eorcs	r4, pc, #34816	; 0x8800
     3ec:	502f222c 	eorpl	r2, pc, ip, lsr #4
     3f0:	01000702 	tsteq	r0, r2, lsl #14
     3f4:	02050001 	andeq	r0, r5, #1
     3f8:	080004a0 	stmdaeq	r0, {r5, r7, sl}
     3fc:	0101f403 	tsteq	r1, r3, lsl #8
     400:	221f4016 	andscs	r4, pc, #22
     404:	3d21211e 	stfccs	f2, [r1, #-120]!	; 0xffffff88
     408:	00080223 	andeq	r0, r8, r3, lsr #4
     40c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     410:	0004c802 	andeq	ip, r4, r2, lsl #16
     414:	02830308 	addeq	r0, r3, #8, 6	; 0x20000000
     418:	3d3d1301 	ldccc	3, cr1, [sp, #-4]!
     41c:	00060236 	andeq	r0, r6, r6, lsr r2
     420:	05000101 	streq	r0, [r0, #-257]	; 0x101
     424:	0004e402 	andeq	lr, r4, r2, lsl #8
     428:	00d60308 	sbcseq	r0, r6, r8, lsl #6
     42c:	02021401 	andeq	r1, r2, #16777216	; 0x1000000
     430:	00010100 	andeq	r0, r1, r0, lsl #2
     434:	04e80205 	strbteq	r0, [r8], #517	; 0x205
     438:	bd030800 	stclt	8, cr0, [r3, #-0]
     43c:	3d240103 	stfccs	f0, [r4, #-12]!
     440:	3d1f303d 	ldccc	0, cr3, [pc, #-244]	; 354 <_Minimum_Stack_Size+0x254>
     444:	0003022f 	andeq	r0, r3, pc, lsr #4
     448:	05000101 	streq	r0, [r0, #-257]	; 0x101
     44c:	00050c02 	andeq	r0, r5, r2, lsl #24
     450:	02900308 	addseq	r0, r0, #8, 6	; 0x20000000
     454:	4b302101 	blmi	c08860 <__Stack_Size+0xc08460>
     458:	211f2130 	tstcs	pc, r0, lsr r1	; <UNPREDICTABLE>
     45c:	022f303d 	eoreq	r3, pc, #61	; 0x3d
     460:	0101000d 	tsteq	r1, sp
     464:	4c020500 	cfstr32mi	mvfx0, [r2], {-0}
     468:	03080005 	movweq	r0, #32773	; 0x8005
     46c:	220103c8 	andcs	r0, r1, #200, 6	; 0x20000003
     470:	2f3d1d40 	svccs	0x003d1d40
     474:	03022f2f 	movweq	r2, #12079	; 0x2f2f
     478:	00010100 	andeq	r0, r1, r0, lsl #2
     47c:	05700205 	ldrbeq	r0, [r0, #-517]!	; 0x205
     480:	d1030800 	tstle	r3, r0, lsl #16
     484:	40210103 	eormi	r0, r1, r3, lsl #2
     488:	3d59321c 	lfmcc	f3, 2, [r9, #-112]	; 0xffffff90
     48c:	4b3c0d03 	blmi	f038a0 <__Stack_Size+0xf034a0>
     490:	423d4b50 	eorsmi	r4, sp, #80, 22	; 0x14000
     494:	5942345c 	stmdbpl	r2, {r2, r3, r4, r6, sl, ip, sp}^
     498:	3e4b5e3d 	mcrcc	14, 2, r5, cr11, cr13, {1}
     49c:	022a5f42 	eoreq	r5, sl, #264	; 0x108
     4a0:	0101000e 	tsteq	r1, lr
     4a4:	0000006e 	andeq	r0, r0, lr, rrx
     4a8:	00680002 	rsbeq	r0, r8, r2
     4ac:	01020000 	mrseq	r0, (UNDEF: 2)
     4b0:	000d0efb 	strdeq	r0, [sp], -fp
     4b4:	01010101 	tsteq	r1, r1, lsl #2
     4b8:	01000000 	mrseq	r0, (UNDEF: 0)
     4bc:	2e010000 	cdpcs	0, 0, cr0, cr1, cr0, {0}
     4c0:	6d74732f 	ldclvs	3, cr7, [r4, #-188]!	; 0xffffff44
     4c4:	6c5f3233 	lfmvs	f3, 2, [pc], {51}	; 0x33
     4c8:	2e006269 	cdpcs	2, 0, cr6, cr0, cr9, {3}
     4cc:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
     4d0:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     4d4:	74730000 	ldrbtvc	r0, [r3], #-0
     4d8:	6632336d 	ldrtvs	r3, [r2], -sp, ror #6
     4dc:	5f783031 	svcpl	0x00783031
     4e0:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
     4e4:	0100682e 	tsteq	r0, lr, lsr #16
     4e8:	73750000 	cmnvc	r5, #0
     4ec:	6f635f62 	svcvs	0x00635f62
     4f0:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     4f4:	00000200 	andeq	r0, r0, r0, lsl #4
     4f8:	2e627375 	mcrcs	3, 3, r7, cr2, cr5, {3}
     4fc:	00000068 	andeq	r0, r0, r8, rrx
     500:	62737500 	rsbsvs	r7, r3, #0, 10
     504:	7365645f 	cmnvc	r5, #1593835520	; 0x5f000000
     508:	70697263 	rsbvc	r7, r9, r3, ror #4
     50c:	2e726f74 	mrccs	15, 3, r6, cr2, cr4, {3}
     510:	00000063 	andeq	r0, r0, r3, rrx
     514:	00a50000 	adceq	r0, r5, r0
     518:	00020000 	andeq	r0, r2, r0
     51c:	0000005d 	andeq	r0, r0, sp, asr r0
     520:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     524:	0101000d 	tsteq	r1, sp
     528:	00000101 	andeq	r0, r0, r1, lsl #2
     52c:	00000100 	andeq	r0, r0, r0, lsl #2
     530:	732f2e01 	teqvc	pc, #1, 28
     534:	32336d74 	eorscc	r6, r3, #116, 26	; 0x1d00
     538:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     53c:	616d0000 	cmnvs	sp, r0
     540:	632e6e69 	teqvs	lr, #1680	; 0x690
     544:	00000000 	andeq	r0, r0, r0
     548:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     54c:	30316632 	eorscc	r6, r1, r2, lsr r6
     550:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     554:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     558:	00000100 	andeq	r0, r0, r0, lsl #2
     55c:	64726168 	ldrbtvs	r6, [r2], #-360	; 0x168
     560:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     564:	0000682e 	andeq	r6, r0, lr, lsr #16
     568:	73750000 	cmnvc	r5, #0
     56c:	00682e62 	rsbeq	r2, r8, r2, ror #28
     570:	64000000 	strvs	r0, [r0], #-0
     574:	682e7566 	stmdavs	lr!, {r1, r2, r5, r6, r8, sl, ip, sp, lr}
     578:	00000000 	andeq	r0, r0, r0
     57c:	02050000 	andeq	r0, r5, #0
     580:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
     584:	21012603 	tstcs	r1, r3, lsl #12
     588:	2f2f2f2f 	svccs	0x002f2f2f
     58c:	02009431 	andeq	r9, r0, #822083584	; 0x31000000
     590:	9e060104 	adflss	f0, f6, f4
     594:	04020058 	streq	r0, [r2], #-88	; 0x58
     598:	02002004 	andeq	r2, r0, #4
     59c:	24060404 	strcs	r0, [r6], #-1028	; 0x404
     5a0:	01040200 	mrseq	r0, R12_usr
     5a4:	31062006 	tstcc	r6, r6
     5a8:	02003e92 	andeq	r3, r0, #2336	; 0x920
     5ac:	79030204 	stmdbvc	r3, {r2, r9}
     5b0:	2e0c034a 	cdpcs	3, 0, cr0, cr12, cr10, {2}
     5b4:	4f4c324c 	svcmi	0x004c324c
     5b8:	0a023383 	beq	8d3cc <__Stack_Size+0x8cfcc>
     5bc:	b6010100 	strlt	r0, [r1], -r0, lsl #2
     5c0:	02000002 	andeq	r0, r0, #2
     5c4:	00006c00 	andeq	r6, r0, r0, lsl #24
     5c8:	fb010200 	blx	40dd2 <__Stack_Size+0x409d2>
     5cc:	01000d0e 	tsteq	r0, lr, lsl #26
     5d0:	00010101 	andeq	r0, r1, r1, lsl #2
     5d4:	00010000 	andeq	r0, r1, r0
     5d8:	2f2e0100 	svccs	0x002e0100
     5dc:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     5e0:	696c5f32 	stmdbvs	ip!, {r1, r4, r5, r8, r9, sl, fp, ip, lr}^
     5e4:	68000062 	stmdavs	r0, {r1, r5, r6}
     5e8:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     5ec:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     5f0:	00000063 	andeq	r0, r0, r3, rrx
     5f4:	6d747300 	ldclvs	3, cr7, [r4, #-0]
     5f8:	31663233 	cmncc	r6, r3, lsr r2
     5fc:	745f7830 	ldrbvc	r7, [pc], #-2096	; 604 <__Stack_Size+0x204>
     600:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     604:	00010068 	andeq	r0, r1, r8, rrx
     608:	72616800 	rsbvc	r6, r1, #0, 16
     60c:	72617764 	rsbvc	r7, r1, #100, 14	; 0x1900000
     610:	00682e65 	rsbeq	r2, r8, r5, ror #28
     614:	75000000 	strvc	r0, [r0, #-0]
     618:	682e6273 	stmdavs	lr!, {r0, r1, r4, r5, r6, r9, sp, lr}
     61c:	00000000 	andeq	r0, r0, r0
     620:	74726f63 	ldrbtvc	r6, [r2], #-3939	; 0xf63
     624:	336d7865 	cmncc	sp, #6619136	; 0x650000
     628:	63616d5f 	cmnvs	r1, #6080	; 0x17c0
     62c:	682e6f72 	stmdavs	lr!, {r1, r4, r5, r6, r8, r9, sl, fp, sp, lr}
     630:	00000100 	andeq	r0, r0, r0, lsl #2
     634:	02050000 	andeq	r0, r5, #0
     638:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
     63c:	14012c03 	strne	r2, [r1], #-3075	; 0xc03
     640:	04024b3b 	streq	r4, [r2], #-2875	; 0xb3b
     644:	00010100 	andeq	r0, r1, r0, lsl #2
     648:	00000205 	andeq	r0, r0, r5, lsl #4
     64c:	31030000 	mrscc	r0, (UNDEF: 3)
     650:	025d1401 	subseq	r1, sp, #16777216	; 0x1000000
     654:	01010004 	tsteq	r1, r4
     658:	f4020500 	vst3.8	{d0,d2,d4}, [r2], r0
     65c:	03080006 	movweq	r0, #32774	; 0x8006
     660:	0316013a 	tsteq	r6, #-2147483634	; 0x8000000e
     664:	06022e0b 	streq	r2, [r2], -fp, lsl #28
     668:	00010100 	andeq	r0, r1, r0, lsl #2
     66c:	07040205 	streq	r0, [r4, -r5, lsl #4]
     670:	cc030800 	stcgt	8, cr0, [r3], {-0}
     674:	3d2e0100 	stfccs	f0, [lr, #-0]
     678:	02003d49 	andeq	r3, r0, #4672	; 0x1240
     67c:	06310104 	ldrteq	r0, [r1], -r4, lsl #2
     680:	04020020 	streq	r0, [r2], #-32
     684:	00220601 	eoreq	r0, r2, r1, lsl #12
     688:	22020402 	andcs	r0, r2, #33554432	; 0x2000000
     68c:	02040200 	andeq	r0, r4, #0, 4
     690:	005a331e 	subseq	r3, sl, lr, lsl r3
     694:	06010402 	streq	r0, [r1], -r2, lsl #8
     698:	04020020 	streq	r0, [r2], #-32
     69c:	00220602 	eoreq	r0, r2, r2, lsl #12
     6a0:	1e020402 	cdpne	4, 0, cr0, cr2, cr2, {0}
     6a4:	000a0232 	andeq	r0, sl, r2, lsr r2
     6a8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     6ac:	00075402 	andeq	r5, r7, r2, lsl #8
     6b0:	00e10308 	rsceq	r0, r1, r8, lsl #6
     6b4:	1f211301 	svcne	0x00211301
     6b8:	4b674b4b 	blmi	19d33ec <__Stack_Size+0x19d2fec>
     6bc:	000c024c 	andeq	r0, ip, ip, asr #4
     6c0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     6c4:	00079c02 	andeq	r9, r7, r2, lsl #24
     6c8:	00eb0308 	rsceq	r0, fp, r8, lsl #6
     6cc:	02001401 	andeq	r1, r0, #16777216	; 0x1000000
     6d0:	4d590104 	ldfmie	f0, [r9, #-16]
     6d4:	02008340 	andeq	r8, r0, #64, 6
     6d8:	4d4b0104 	stfmie	f0, [fp, #-16]
     6dc:	01040200 	mrseq	r0, R12_usr
     6e0:	024b3e4b 	subeq	r3, fp, #1200	; 0x4b0
     6e4:	01010009 	tsteq	r1, r9
     6e8:	fc020500 	stc2	5, cr0, [r2], {-0}
     6ec:	03080007 	movweq	r0, #32775	; 0x8007
     6f0:	16010182 	strne	r0, [r1], -r2, lsl #3
     6f4:	2e7fa803 	cdpcs	8, 7, cr10, cr15, cr3, {0}
     6f8:	2e00d803 	cdpcs	8, 0, cr13, cr0, cr3, {0}
     6fc:	207fa803 	rsbscs	sl, pc, r3, lsl #16
     700:	4a00dc03 	bmi	37714 <__Stack_Size+0x37314>
     704:	01000b02 	tsteq	r0, r2, lsl #22
     708:	02050001 	andeq	r0, r5, #1
     70c:	08000824 	stmdaeq	r0, {r2, r5, fp}
     710:	01018d03 	tsteq	r1, r3, lsl #26
     714:	2f214b14 	svccs	0x00214b14
     718:	01040200 	mrseq	r0, R12_usr
     71c:	03023d24 	movweq	r3, #11556	; 0x2d24
     720:	00010100 	andeq	r0, r1, r0, lsl #2
     724:	08400205 	stmdaeq	r0, {r0, r2, r9}^
     728:	99030800 	stmdbls	r3, {fp}
     72c:	22130101 	andscs	r0, r3, #1073741824	; 0x40000000
     730:	00070233 	andeq	r0, r7, r3, lsr r2
     734:	05000101 	streq	r0, [r0, #-257]	; 0x101
     738:	00085402 	andeq	r5, r8, r2, lsl #8
     73c:	01bd0308 			; <UNDEFINED> instruction: 0x01bd0308
     740:	010c0301 	tsteq	ip, r1, lsl #6
     744:	03207403 	teqeq	r0, #50331648	; 0x3000000
     748:	1c24200c 	stcne	0, cr2, [r4], #-48	; 0xffffffd0
     74c:	312c313d 	teqcc	ip, sp, lsr r1
     750:	3b311d23 	blcc	c47be4 <__Stack_Size+0xc477e4>
     754:	73231d24 	teqvc	r3, #36, 26	; 0x900
     758:	22212f30 	eorcs	r2, r1, #48, 30	; 0xc0
     75c:	211f2131 	tstcs	pc, r1, lsr r1	; <UNPREDICTABLE>
     760:	00090249 	andeq	r0, r9, r9, asr #4
     764:	05000101 	streq	r0, [r0, #-257]	; 0x101
     768:	0008c002 	andeq	ip, r8, r2
     76c:	01e00308 	mvneq	r0, r8, lsl #6
     770:	2f591401 	svccs	0x00591401
     774:	0702302f 	streq	r3, [r2, -pc, lsr #32]
     778:	00010100 	andeq	r0, r1, r0, lsl #2
     77c:	08e40205 	stmiaeq	r4!, {r0, r2, r9}^
     780:	a3030800 	movwge	r0, #14336	; 0x3800
     784:	8d030101 	stfhis	f0, [r3, #-4]
     788:	f6032001 			; <UNDEFINED> instruction: 0xf6032001
     78c:	031d2e7e 	tsteq	sp, #2016	; 0x7e0
     790:	0320018d 	teqeq	r0, #1073741859	; 0x40000023
     794:	2f207efd 	svccs	0x00207efd
     798:	3e313231 	mrccc	2, 1, r3, cr1, cr1, {1}
     79c:	01000502 	tsteq	r0, r2, lsl #10
     7a0:	02050001 	andeq	r0, r5, #1
     7a4:	08000910 	stmdaeq	r0, {r4, r8, fp}
     7a8:	0101ea03 	tsteq	r1, r3, lsl #20
     7ac:	04020016 	streq	r0, [r2], #-22
     7b0:	07024001 	streq	r4, [r2, -r1]
     7b4:	00010100 	andeq	r0, r1, r0, lsl #2
     7b8:	09240205 	stmdbeq	r4!, {r0, r2, r9}
     7bc:	f6030800 			; <UNDEFINED> instruction: 0xf6030800
     7c0:	1f130101 	svcne	0x00130101
     7c4:	02002221 	andeq	r2, r0, #268435458	; 0x10000002
     7c8:	67300104 	ldrvs	r0, [r0, -r4, lsl #2]!
     7cc:	04020021 	streq	r0, [r2], #-33	; 0x21
     7d0:	234f2f01 	movtcs	r2, #65281	; 0xff01
     7d4:	01000702 	tsteq	r0, r2, lsl #14
     7d8:	02050001 	andeq	r0, r5, #1
     7dc:	00000000 	andeq	r0, r0, r0
     7e0:	01028703 	tsteq	r2, r3, lsl #14
     7e4:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     7e8:	b14b2f01 	cmplt	fp, r1, lsl #30
     7ec:	00040221 	andeq	r0, r4, r1, lsr #4
     7f0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     7f4:	00095802 	andeq	r5, r9, r2, lsl #16
     7f8:	02910308 	addseq	r0, r1, #8, 6	; 0x20000000
     7fc:	302f2201 	eorcc	r2, pc, r1, lsl #4
     800:	00211f21 	eoreq	r1, r1, r1, lsr #30
     804:	24010402 	strcs	r0, [r1], #-1026	; 0x402
     808:	0402004b 	streq	r0, [r2], #-75	; 0x4b
     80c:	003d3d01 	eorseq	r3, sp, r1, lsl #26
     810:	3d010402 	cfstrscc	mvf0, [r1, #-8]
     814:	25232f3e 	strcs	r2, [r3, #-3902]!	; 0xf3e
     818:	01000902 	tsteq	r0, r2, lsl #18
     81c:	02050001 	andeq	r0, r5, #1
     820:	080009a4 	stmdaeq	r0, {r2, r5, r7, r8, fp}
     824:	0102ac03 	tsteq	r2, r3, lsl #24
     828:	00060216 	andeq	r0, r6, r6, lsl r2
     82c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     830:	0009b002 	andeq	fp, r9, r2
     834:	02b30308 	adcseq	r0, r3, #8, 6	; 0x20000000
     838:	023d1401 	eorseq	r1, sp, #16777216	; 0x1000000
     83c:	01010009 	tsteq	r1, r9
     840:	c8020500 	stmdagt	r2, {r8, sl}
     844:	03080009 	movweq	r0, #32777	; 0x8009
     848:	140102bc 	strne	r0, [r1], #-700	; 0x2bc
     84c:	024c3022 	subeq	r3, ip, #34	; 0x22
     850:	01010002 	tsteq	r1, r2
     854:	dc020500 	cfstr32le	mvfx0, [r2], {-0}
     858:	03080009 	movweq	r0, #32777	; 0x8009
     85c:	140102c8 	strne	r0, [r1], #-712	; 0x2c8
     860:	0004024b 	andeq	r0, r4, fp, asr #4
     864:	05000101 	streq	r0, [r0, #-257]	; 0x101
     868:	0009ec02 	andeq	lr, r9, r2, lsl #24
     86c:	02ce0308 	sbceq	r0, lr, #8, 6	; 0x20000000
     870:	26301501 	ldrtcs	r1, [r0], -r1, lsl #10
     874:	01000902 	tsteq	r0, r2, lsl #18
     878:	00022e01 	andeq	r2, r2, r1, lsl #28
     87c:	82000200 	andhi	r0, r0, #0, 4
     880:	02000000 	andeq	r0, r0, #0
     884:	0d0efb01 	vstreq	d15, [lr, #-4]
     888:	01010100 	mrseq	r0, (UNDEF: 17)
     88c:	00000001 	andeq	r0, r0, r1
     890:	01000001 	tsteq	r0, r1
     894:	74732f2e 	ldrbtvc	r2, [r3], #-3886	; 0xf2e
     898:	5f32336d 	svcpl	0x0032336d
     89c:	0062696c 	rsbeq	r6, r2, ip, ror #18
     8a0:	73752f2e 	cmnvc	r5, #46, 30	; 0xb8
     8a4:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     8a8:	64000062 	strvs	r0, [r0], #-98	; 0x62
     8ac:	632e7566 	teqvs	lr, #427819008	; 0x19800000
     8b0:	00000000 	andeq	r0, r0, r0
     8b4:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     8b8:	30316632 	eorscc	r6, r1, r2, lsr r6
     8bc:	79745f78 	ldmdbvc	r4!, {r3, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     8c0:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
     8c4:	00000100 	andeq	r0, r0, r0, lsl #2
     8c8:	5f627375 	svcpl	0x00627375
     8cc:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
     8d0:	0200682e 	andeq	r6, r0, #3014656	; 0x2e0000
     8d4:	66640000 	strbtvs	r0, [r4], -r0
     8d8:	00682e75 	rsbeq	r2, r8, r5, ror lr
     8dc:	75000000 	strvc	r0, [r0, #-0]
     8e0:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     8e4:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     8e8:	00020068 	andeq	r0, r2, r8, rrx
     8ec:	62737500 	rsbsvs	r7, r3, #0, 10
     8f0:	0000682e 	andeq	r6, r0, lr, lsr #16
     8f4:	61680000 	cmnvs	r8, r0
     8f8:	61776472 	cmnvs	r7, r2, ror r4
     8fc:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
     900:	00000000 	andeq	r0, r0, r0
     904:	02050000 	andeq	r0, r5, #0
     908:	08000a04 	stmdaeq	r0, {r2, r9, fp}
     90c:	13013703 	movwne	r3, #5891	; 0x1703
     910:	21211c32 	teqcs	r1, r2, lsr ip
     914:	21212121 	teqcs	r1, r1, lsr #2
     918:	2f211e22 	svccs	0x00211e22
     91c:	1f214b2f 	svcne	0x00214b2f
     920:	15022f21 	strne	r2, [r2, #-3873]	; 0xf21
     924:	00010100 	andeq	r0, r1, r0, lsl #2
     928:	0a600205 	beq	1801144 <__Stack_Size+0x1800d44>
     92c:	d5030800 	strle	r0, [r3, #-2048]	; 0x800
     930:	21210102 	teqcs	r1, r2, lsl #2
     934:	231f211f 	tstcs	pc, #-1073741817	; 0xc0000007
     938:	2f21221e 	svccs	0x0021221e
     93c:	2e0e0322 	cdpcs	3, 0, cr0, cr14, cr2, {1}
     940:	302e7303 	eorcc	r7, lr, r3, lsl #6
     944:	2c242f42 	stccs	15, cr2, [r4], #-264	; 0xfffffef8
     948:	01000802 	tsteq	r0, r2, lsl #16
     94c:	02050001 	andeq	r0, r5, #1
     950:	00000000 	andeq	r0, r0, r0
     954:	0102ed03 	tsteq	r2, r3, lsl #26
     958:	01000102 	tsteq	r0, r2, lsl #2
     95c:	02050001 	andeq	r0, r5, #1
     960:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
     964:	0102f003 	tsteq	r2, r3
     968:	224b2113 	subcs	r2, fp, #-1073741820	; 0xc0000004
     96c:	00050222 	andeq	r0, r5, r2, lsr #4
     970:	05000101 	streq	r0, [r0, #-257]	; 0x101
     974:	000abc02 	andeq	fp, sl, r2, lsl #24
     978:	02f90308 	rscseq	r0, r9, #8, 6	; 0x20000000
     97c:	4b211301 	blmi	845588 <__Stack_Size+0x845188>
     980:	05022222 	streq	r2, [r2, #-546]	; 0x222
     984:	00010100 	andeq	r0, r1, r0, lsl #2
     988:	0ad40205 	beq	ff5011a4 <BootRAM+0xe471945>
     98c:	83030800 	movwhi	r0, #14336	; 0x3800
     990:	1f220103 	svcne	0x00220103
     994:	222f4b21 	eorcs	r4, pc, #33792	; 0x8400
     998:	0007023e 	andeq	r0, r7, lr, lsr r2
     99c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     9a0:	000afc02 	andeq	pc, sl, r2, lsl #24
     9a4:	038d0308 	orreq	r0, sp, #8, 6	; 0x20000000
     9a8:	67212101 	strvs	r2, [r1, -r1, lsl #2]!
     9ac:	09028422 	stmdbeq	r2, {r1, r5, sl, pc}
     9b0:	00010100 	andeq	r0, r1, r0, lsl #2
     9b4:	0b300205 	bleq	c011d0 <__Stack_Size+0xc00dd0>
     9b8:	96030800 	strls	r0, [r3], -r0, lsl #16
     9bc:	13030103 	movwne	r0, #12547	; 0x3103
     9c0:	221e3e20 	andscs	r3, lr, #32, 28	; 0x200
     9c4:	003e315c 	eorseq	r3, lr, ip, asr r1
     9c8:	06010402 	streq	r0, [r1], -r2, lsl #8
     9cc:	04020020 	streq	r0, [r2], #-32
     9d0:	00590602 	subseq	r0, r9, r2, lsl #12
     9d4:	57020402 	strpl	r0, [r2, -r2, lsl #8]
     9d8:	0c025a33 	stceq	10, cr5, [r2], {51}	; 0x33
     9dc:	00010100 	andeq	r0, r1, r0, lsl #2
     9e0:	0b8c0205 	bleq	fe3011fc <BootRAM+0xd27199d>
     9e4:	ca030800 	bgt	c29ec <__Stack_Size+0xc25ec>
     9e8:	24310100 	ldrtcs	r0, [r1], #-256	; 0x100
     9ec:	1f21321c 	svcne	0x0021321c
     9f0:	22221e23 	eorcs	r1, r2, #560	; 0x230
     9f4:	224b5a22 	subcs	r5, fp, #139264	; 0x22000
     9f8:	3d1f221e 	lfmcc	f2, 4, [pc, #-120]	; 988 <__Stack_Size+0x588>
     9fc:	2f3c1403 	svccs	0x003c1403
     a00:	032f2f3e 	teqeq	pc, #62, 30	; 0xf8
     a04:	313d2071 	teqcc	sp, r1, ror r0
     a08:	033d302f 	teqeq	sp, #47	; 0x2f
     a0c:	2f36200a 	svccs	0x0036200a
     a10:	674c3d31 	smlaldxvs	r3, ip, r1, sp
     a14:	2a580c03 	bcs	1603a28 <__Stack_Size+0x1603628>
     a18:	254b2f24 	strbcs	r2, [fp, #-3876]	; 0xf24
     a1c:	3031312f 	eorscc	r3, r1, pc, lsr #2
     a20:	1d033135 	stfnes	f3, [r3, #-212]	; 0xffffff2c
     a24:	353f2f58 	ldrcc	r2, [pc, #-3928]!	; fffffad4 <BootRAM+0xef70275>
     a28:	211f4c30 	tstcs	pc, r0, lsr ip	; <UNPREDICTABLE>
     a2c:	59304121 	ldmdbpl	r0!, {r0, r5, r8, lr}
     a30:	3e31312f 	rsfccsp	f3, f1, #10.0
     a34:	31433030 	cmpcc	r3, r0, lsr r0
     a38:	432f2f59 	teqmi	pc, #356	; 0x164
     a3c:	59313535 	ldmdbpl	r1!, {r0, r2, r4, r5, r8, sl, ip, sp}
     a40:	3d1f3d30 	ldccc	13, cr3, [pc, #-192]	; 988 <__Stack_Size+0x588>
     a44:	4fc9211f 	svcmi	0x00c9211f
     a48:	2f414b76 	svccs	0x00414b76
     a4c:	302f2f30 	eorcc	r2, pc, r0, lsr pc	; <UNPREDICTABLE>
     a50:	5a31352f 	bpl	c4df14 <__Stack_Size+0xc4db14>
     a54:	2f30302f 	svccs	0x0030302f
     a58:	25312f36 	ldrcs	r2, [r1, #-3894]!	; 0xf36
     a5c:	01001f02 	tsteq	r0, r2, lsl #30
     a60:	02050001 	andeq	r0, r5, #1
     a64:	00000000 	andeq	r0, r0, r0
     a68:	0103be03 	tsteq	r3, r3, lsl #28
     a6c:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     a70:	00010100 	andeq	r0, r1, r0, lsl #2
     a74:	00000205 	andeq	r0, r0, r5, lsl #4
     a78:	c2030000 	andgt	r0, r3, #0
     a7c:	02130103 	andseq	r0, r3, #-1073741824	; 0xc0000000
     a80:	01010006 	tsteq	r1, r6
     a84:	c0020500 	andgt	r0, r2, r0, lsl #10
     a88:	0308000d 	movweq	r0, #32781	; 0x800d
     a8c:	130103c6 	movwne	r0, #5062	; 0x13c6
     a90:	0004022f 	andeq	r0, r4, pc, lsr #4
     a94:	05000101 	streq	r0, [r0, #-257]	; 0x101
     a98:	000dcc02 	andeq	ip, sp, r2, lsl #24
     a9c:	03ca0308 	biceq	r0, sl, #8, 6	; 0x20000000
     aa0:	04020001 	streq	r0, [r2], #-1
     aa4:	02021501 	andeq	r1, r2, #4194304	; 0x400000
     aa8:	c7010100 	strgt	r0, [r1, -r0, lsl #2]
     aac:	02000004 	andeq	r0, r0, #4
     ab0:	00004500 	andeq	r4, r0, r0, lsl #10
     ab4:	fb010200 	blx	412be <__Stack_Size+0x40ebe>
     ab8:	01000d0e 	tsteq	r0, lr, lsl #26
     abc:	00010101 	andeq	r0, r1, r1, lsl #2
     ac0:	00010000 	andeq	r0, r1, r0
     ac4:	73750100 	cmnvc	r5, #0, 2
     ac8:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
     acc:	75000062 	strvc	r0, [r0, #-98]	; 0x62
     ad0:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     ad4:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     ad8:	00010063 	andeq	r0, r1, r3, rrx
     adc:	62737500 	rsbsvs	r7, r3, #0, 10
     ae0:	7079745f 	rsbsvc	r7, r9, pc, asr r4
     ae4:	00682e65 	rsbeq	r2, r8, r5, ror #28
     ae8:	75000001 	strvc	r0, [r0, #-1]
     aec:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
     af0:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
     af4:	00010068 	andeq	r0, r1, r8, rrx
     af8:	05000000 	streq	r0, [r0, #-0]
     afc:	00000002 	andeq	r0, r0, r2
     b00:	01220300 	teqeq	r2, r0, lsl #6
     b04:	00060213 	andeq	r0, r6, r3, lsl r2
     b08:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b0c:	00000002 	andeq	r0, r0, r2
     b10:	012e0300 	teqeq	lr, r0, lsl #6
     b14:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     b18:	00010100 	andeq	r0, r1, r0, lsl #2
     b1c:	00000205 	andeq	r0, r0, r5, lsl #4
     b20:	3a030000 	bcc	c0b28 <__Stack_Size+0xc0728>
     b24:	06021301 	streq	r1, [r2], -r1, lsl #6
     b28:	00010100 	andeq	r0, r1, r0, lsl #2
     b2c:	00000205 	andeq	r0, r0, r5, lsl #4
     b30:	c6030000 	strgt	r0, [r3], -r0
     b34:	2f130100 	svccs	0x00130100
     b38:	01000402 	tsteq	r0, r2, lsl #8
     b3c:	02050001 	andeq	r0, r5, #1
     b40:	00000000 	andeq	r0, r0, r0
     b44:	0100d203 	tsteq	r0, r3, lsl #4
     b48:	04022f13 	streq	r2, [r2], #-3859	; 0xf13
     b4c:	00010100 	andeq	r0, r1, r0, lsl #2
     b50:	00000205 	andeq	r0, r0, r5, lsl #4
     b54:	de030000 	cdple	0, 0, cr0, cr3, cr0, {0}
     b58:	02130100 	andseq	r0, r3, #0, 2
     b5c:	01010006 	tsteq	r1, r6
     b60:	00020500 	andeq	r0, r2, r0, lsl #10
     b64:	03000000 	movweq	r0, #0
     b68:	130100ea 	movwne	r0, #4330	; 0x10ea
     b6c:	0004022f 	andeq	r0, r4, pc, lsr #4
     b70:	05000101 	streq	r0, [r0, #-257]	; 0x101
     b74:	00000002 	andeq	r0, r0, r2
     b78:	00f60300 	rscseq	r0, r6, r0, lsl #6
     b7c:	08021301 	stmdaeq	r2, {r0, r8, r9, ip}
     b80:	00010100 	andeq	r0, r1, r0, lsl #2
     b84:	00000205 	andeq	r0, r0, r5, lsl #4
     b88:	82030000 	andhi	r0, r3, #0
     b8c:	2f130101 	svccs	0x00130101
     b90:	01000402 	tsteq	r0, r2, lsl #8
     b94:	02050001 	andeq	r0, r5, #1
     b98:	00000000 	andeq	r0, r0, r0
     b9c:	01018f03 	tsteq	r1, r3, lsl #30
     ba0:	00070213 	andeq	r0, r7, r3, lsl r2
     ba4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ba8:	00000002 	andeq	r0, r0, r2
     bac:	019b0300 	orrseq	r0, fp, r0, lsl #6
     bb0:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
     bb4:	01010002 	tsteq	r1, r2
     bb8:	00020500 	andeq	r0, r2, r0, lsl #10
     bbc:	03000000 	movweq	r0, #0
     bc0:	130101a8 	movwne	r0, #4520	; 0x11a8
     bc4:	01000e02 	tsteq	r0, r2, lsl #28
     bc8:	02050001 	andeq	r0, r5, #1
     bcc:	00000000 	andeq	r0, r0, r0
     bd0:	0101b403 	tsteq	r1, r3, lsl #8
     bd4:	03026713 	movweq	r6, #10003	; 0x2713
     bd8:	00010100 	andeq	r0, r1, r0, lsl #2
     bdc:	0dd00205 	lfmeq	f0, 2, [r0, #20]
     be0:	c1030800 	tstgt	r3, r0, lsl #16
     be4:	02130101 	andseq	r0, r3, #1073741824	; 0x40000000
     be8:	01010015 	tsteq	r1, r5, lsl r0
     bec:	00020500 	andeq	r0, r2, r0, lsl #10
     bf0:	03000000 	movweq	r0, #0
     bf4:	130101ce 	movwne	r0, #4558	; 0x11ce
     bf8:	01001502 	tsteq	r0, r2, lsl #10
     bfc:	02050001 	andeq	r0, r5, #1
     c00:	00000000 	andeq	r0, r0, r0
     c04:	0101db03 	tsteq	r1, r3, lsl #22
     c08:	03014103 	movweq	r4, #4355	; 0x1103
     c0c:	035800c2 	cmpeq	r8, #194	; 0xc2
     c10:	03207fbe 	teqeq	r0, #760	; 0x2f8
     c14:	222000c2 	eorcs	r0, r0, #194	; 0xc2
     c18:	0502303e 	streq	r3, [r2, #-62]	; 0x3e
     c1c:	00010100 	andeq	r0, r1, r0, lsl #2
     c20:	00000205 	andeq	r0, r0, r5, lsl #4
     c24:	f0030000 			; <UNDEFINED> instruction: 0xf0030000
     c28:	67130101 	ldrvs	r0, [r3, -r1, lsl #2]
     c2c:	01000302 	tsteq	r0, r2, lsl #6
     c30:	02050001 	andeq	r0, r5, #1
     c34:	00000000 	andeq	r0, r0, r0
     c38:	0101fc03 	tsteq	r1, r3, lsl #24
     c3c:	03026713 	movweq	r6, #10003	; 0x2713
     c40:	00010100 	andeq	r0, r1, r0, lsl #2
     c44:	00000205 	andeq	r0, r0, r5, lsl #4
     c48:	88030000 	stmdahi	r3, {}	; <UNPREDICTABLE>
     c4c:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     c50:	0101000f 	tsteq	r1, pc
     c54:	fa020500 	blx	8205c <__Stack_Size+0x81c5c>
     c58:	0308000d 	movweq	r0, #32781	; 0x800d
     c5c:	13010294 	movwne	r0, #4756	; 0x1294
     c60:	01000f02 	tsteq	r0, r2, lsl #30
     c64:	02050001 	andeq	r0, r5, #1
     c68:	00000000 	andeq	r0, r0, r0
     c6c:	0102a003 	tsteq	r2, r3
     c70:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     c74:	05000101 	streq	r0, [r0, #-257]	; 0x101
     c78:	00000002 	andeq	r0, r0, r2
     c7c:	02ac0300 	adceq	r0, ip, #0, 6
     c80:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     c84:	00010100 	andeq	r0, r1, r0, lsl #2
     c88:	0e180205 	cdpeq	2, 1, cr0, cr8, cr5, {0}
     c8c:	b7030800 	strlt	r0, [r3, -r0, lsl #16]
     c90:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     c94:	0101000e 	tsteq	r1, lr
     c98:	00020500 	andeq	r0, r2, r0, lsl #10
     c9c:	03000000 	movweq	r0, #0
     ca0:	130102c2 	movwne	r0, #4802	; 0x12c2
     ca4:	01000f02 	tsteq	r0, r2, lsl #30
     ca8:	02050001 	andeq	r0, r5, #1
     cac:	00000000 	andeq	r0, r0, r0
     cb0:	0102cd03 	tsteq	r2, r3, lsl #26
     cb4:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     cb8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     cbc:	00000002 	andeq	r0, r0, r2
     cc0:	02d80300 	sbcseq	r0, r8, #0, 6
     cc4:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     cc8:	00010100 	andeq	r0, r1, r0, lsl #2
     ccc:	00000205 	andeq	r0, r0, r5, lsl #4
     cd0:	e3030000 	movw	r0, #12288	; 0x3000
     cd4:	83130102 	tsthi	r3, #-2147483648	; 0x80000000
     cd8:	01000502 	tsteq	r0, r2, lsl #10
     cdc:	02050001 	andeq	r0, r5, #1
     ce0:	00000000 	andeq	r0, r0, r0
     ce4:	0102ee03 	tsteq	r2, r3, lsl #28
     ce8:	05028313 	streq	r8, [r2, #-787]	; 0x313
     cec:	00010100 	andeq	r0, r1, r0, lsl #2
     cf0:	00000205 	andeq	r0, r0, r5, lsl #4
     cf4:	f9030000 			; <UNDEFINED> instruction: 0xf9030000
     cf8:	02130102 	andseq	r0, r3, #-2147483648	; 0x80000000
     cfc:	0101000c 	tsteq	r1, ip
     d00:	00020500 	andeq	r0, r2, r0, lsl #10
     d04:	03000000 	movweq	r0, #0
     d08:	13010384 	movwne	r0, #4996	; 0x1384
     d0c:	01000e02 	tsteq	r0, r2, lsl #28
     d10:	02050001 	andeq	r0, r5, #1
     d14:	00000000 	andeq	r0, r0, r0
     d18:	01038f03 	tsteq	r3, r3, lsl #30
     d1c:	00100213 	andseq	r0, r0, r3, lsl r2
     d20:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d24:	00000002 	andeq	r0, r0, r2
     d28:	039a0300 	orrseq	r0, sl, #0, 6
     d2c:	10021301 	andne	r1, r2, r1, lsl #6
     d30:	00010100 	andeq	r0, r1, r0, lsl #2
     d34:	0e340205 	cdpeq	2, 3, cr0, cr4, cr5, {0}
     d38:	a5030800 	strge	r0, [r3, #-2048]	; 0x800
     d3c:	00130103 	andseq	r0, r3, r3, lsl #2
     d40:	06010402 	streq	r0, [r1], -r2, lsl #8
     d44:	00080282 	andeq	r0, r8, r2, lsl #5
     d48:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d4c:	000e5402 	andeq	r5, lr, r2, lsl #8
     d50:	03b00308 	movseq	r0, #8, 6	; 0x20000000
     d54:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     d58:	82060104 	andhi	r0, r6, #4, 2
     d5c:	01000802 	tsteq	r0, r2, lsl #16
     d60:	02050001 	andeq	r0, r5, #1
     d64:	00000000 	andeq	r0, r0, r0
     d68:	0103bc03 	tsteq	r3, r3, lsl #24
     d6c:	000f0213 	andeq	r0, pc, r3, lsl r2	; <UNPREDICTABLE>
     d70:	05000101 	streq	r0, [r0, #-257]	; 0x101
     d74:	00000002 	andeq	r0, r0, r2
     d78:	03c70300 	biceq	r0, r7, #0, 6
     d7c:	02671301 	rsbeq	r1, r7, #67108864	; 0x4000000
     d80:	01010003 	tsteq	r1, r3
     d84:	00020500 	andeq	r0, r2, r0, lsl #10
     d88:	03000000 	movweq	r0, #0
     d8c:	130103d3 	movwne	r0, #5075	; 0x13d3
     d90:	01001002 	tsteq	r0, r2
     d94:	02050001 	andeq	r0, r5, #1
     d98:	00000000 	andeq	r0, r0, r0
     d9c:	0103df03 	tsteq	r3, r3, lsl #30
     da0:	00100213 	andseq	r0, r0, r3, lsl r2
     da4:	05000101 	streq	r0, [r0, #-257]	; 0x101
     da8:	000e7402 	andeq	r7, lr, r2, lsl #8
     dac:	03ea0308 	mvneq	r0, #8, 6	; 0x20000000
     db0:	029f1301 	addseq	r1, pc, #67108864	; 0x4000000
     db4:	01010004 	tsteq	r1, r4
     db8:	90020500 	andls	r0, r2, r0, lsl #10
     dbc:	0308000e 	movweq	r0, #32782	; 0x800e
     dc0:	130103f5 	movwne	r0, #5109	; 0x13f5
     dc4:	00060283 	andeq	r0, r6, r3, lsl #5
     dc8:	05000101 	streq	r0, [r0, #-257]	; 0x101
     dcc:	000eac02 	andeq	sl, lr, r2, lsl #24
     dd0:	04810308 	streq	r0, [r1], #776	; 0x308
     dd4:	0e021301 	cdpeq	3, 0, cr1, cr2, cr1, {0}
     dd8:	00010100 	andeq	r0, r1, r0, lsl #2
     ddc:	00000205 	andeq	r0, r0, r5, lsl #4
     de0:	8d030000 	stchi	0, cr0, [r3, #-0]
     de4:	00130104 	andseq	r0, r3, r4, lsl #2
     de8:	06010402 	streq	r0, [r1], -r2, lsl #8
     dec:	0402002e 	streq	r0, [r2], #-46	; 0x2e
     df0:	07029e02 	streq	r9, [r2, -r2, lsl #28]
     df4:	00010100 	andeq	r0, r1, r0, lsl #2
     df8:	0ec80205 	cdpeq	2, 12, cr0, cr8, cr5, {0}
     dfc:	99030800 	stmdbls	r3, {fp}
     e00:	00130104 	andseq	r0, r3, r4, lsl #2
     e04:	06010402 	streq	r0, [r1], -r2, lsl #8
     e08:	040200ac 	streq	r0, [r2], #-172	; 0xac
     e0c:	0b029e02 	bleq	a861c <__Stack_Size+0xa821c>
     e10:	00010100 	andeq	r0, r1, r0, lsl #2
     e14:	00000205 	andeq	r0, r0, r5, lsl #4
     e18:	a4030000 	strge	r0, [r3], #-0
     e1c:	91130104 	tstls	r3, r4, lsl #2
     e20:	01000702 	tsteq	r0, r2, lsl #14
     e24:	02050001 	andeq	r0, r5, #1
     e28:	00000000 	andeq	r0, r0, r0
     e2c:	0104af03 	tsteq	r4, r3, lsl #30
     e30:	07029113 	smladeq	r2, r3, r1, r9
     e34:	00010100 	andeq	r0, r1, r0, lsl #2
     e38:	00000205 	andeq	r0, r0, r5, lsl #4
     e3c:	bc030000 	stclt	0, cr0, [r3], {-0}
     e40:	02210104 	eoreq	r0, r1, #4, 2
     e44:	0101001b 	tsteq	r1, fp, lsl r0
     e48:	00020500 	andeq	r0, r2, r0, lsl #10
     e4c:	03000000 	movweq	r0, #0
     e50:	130104c8 	movwne	r0, #5320	; 0x14c8
     e54:	01001002 	tsteq	r0, r2
     e58:	02050001 	andeq	r0, r5, #1
     e5c:	00000000 	andeq	r0, r0, r0
     e60:	0104d403 	tsteq	r4, r3, lsl #8
     e64:	00100213 	andseq	r0, r0, r3, lsl r2
     e68:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e6c:	00000002 	andeq	r0, r0, r2
     e70:	04df0300 	ldrbeq	r0, [pc], #768	; e78 <__Stack_Size+0xa78>
     e74:	029f1301 	addseq	r1, pc, #67108864	; 0x4000000
     e78:	01010004 	tsteq	r1, r4
     e7c:	00020500 	andeq	r0, r2, r0, lsl #10
     e80:	03000000 	movweq	r0, #0
     e84:	130104ea 	movwne	r0, #5354	; 0x14ea
     e88:	00060283 	andeq	r0, r6, r3, lsl #5
     e8c:	05000101 	streq	r0, [r0, #-257]	; 0x101
     e90:	00000002 	andeq	r0, r0, r2
     e94:	04f60300 	ldrbteq	r0, [r6], #768	; 0x300
     e98:	211f1301 	tstcs	pc, r1, lsl #6
     e9c:	01040200 	mrseq	r0, R12_usr
     ea0:	02002006 	andeq	r2, r0, #6
     ea4:	58080204 	stmdapl	r8, {r2, r9}
     ea8:	01040200 	mrseq	r0, R12_usr
     eac:	040200f2 	streq	r0, [r2], #-242	; 0xf2
     eb0:	02009e02 	andeq	r9, r0, #2, 28
     eb4:	002e0104 	eoreq	r0, lr, r4, lsl #2
     eb8:	08020402 	stmdaeq	r2, {r1, sl}
     ebc:	000e0212 	andeq	r0, lr, r2, lsl r2
     ec0:	05000101 	streq	r0, [r0, #-257]	; 0x101
     ec4:	00000002 	andeq	r0, r0, r2
     ec8:	05820300 	streq	r0, [r2, #768]	; 0x300
     ecc:	02001301 	andeq	r1, r0, #67108864	; 0x4000000
     ed0:	2e060104 	adfcss	f0, f6, f4
     ed4:	02040200 	andeq	r0, r4, #0, 4
     ed8:	02004a08 	andeq	r4, r0, #8, 20	; 0x8000
     edc:	02900104 	addseq	r0, r0, #4, 2
     ee0:	0101000e 	tsteq	r1, lr
     ee4:	00020500 	andeq	r0, r2, r0, lsl #10
     ee8:	03000000 	movweq	r0, #0
     eec:	1301058e 	movwne	r0, #5518	; 0x158e
     ef0:	01040200 	mrseq	r0, R12_usr
     ef4:	02002e06 	andeq	r2, r0, #6, 28	; 0x60
     ef8:	4a080204 	bmi	201710 <__Stack_Size+0x201310>
     efc:	01040200 	mrseq	r0, R12_usr
     f00:	000e0290 	muleq	lr, r0, r2
     f04:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f08:	00000002 	andeq	r0, r0, r2
     f0c:	059a0300 	ldreq	r0, [sl, #768]	; 0x300
     f10:	02911301 	addseq	r1, r1, #67108864	; 0x4000000
     f14:	01010007 	tsteq	r1, r7
     f18:	00020500 	andeq	r0, r2, r0, lsl #10
     f1c:	03000000 	movweq	r0, #0
     f20:	130105a6 	movwne	r0, #5542	; 0x15a6
     f24:	00070291 	muleq	r7, r1, r2
     f28:	05000101 	streq	r0, [r0, #-257]	; 0x101
     f2c:	00000002 	andeq	r0, r0, r2
     f30:	05b20300 	ldreq	r0, [r2, #768]!	; 0x300
     f34:	9fbc1301 	svcls	0x00bc1301
     f38:	07022548 	streq	r2, [r2, -r8, asr #10]
     f3c:	00010100 	andeq	r0, r1, r0, lsl #2
     f40:	00000205 	andeq	r0, r0, r5, lsl #4
     f44:	c3030000 	movwgt	r0, #12288	; 0x3000
     f48:	30130105 	andscc	r0, r3, r5, lsl #2
     f4c:	0d0230bc 	stceq	0, cr3, [r2, #-752]	; 0xfffffd10
     f50:	00010100 	andeq	r0, r1, r0, lsl #2
     f54:	00000205 	andeq	r0, r0, r5, lsl #4
     f58:	d6030000 	strle	r0, [r3], -r0
     f5c:	02160105 	andseq	r0, r6, #1073741825	; 0x40000001
     f60:	01010003 	tsteq	r1, r3
     f64:	00020500 	andeq	r0, r2, r0, lsl #10
     f68:	03000000 	movweq	r0, #0
     f6c:	160105e3 	strne	r0, [r1], -r3, ror #11
     f70:	00030230 	andeq	r0, r3, r0, lsr r2
     f74:	00b40101 	adcseq	r0, r4, r1, lsl #2
     f78:	00020000 	andeq	r0, r2, r0
     f7c:	00000060 	andeq	r0, r0, r0, rrx
     f80:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
     f84:	0101000d 	tsteq	r1, sp
     f88:	00000101 	andeq	r0, r0, r1, lsl #2
     f8c:	00000100 	andeq	r0, r0, r0, lsl #2
     f90:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
     f94:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
     f98:	73750000 	cmnvc	r5, #0
     f9c:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
     fa0:	00632e74 	rsbeq	r2, r3, r4, ror lr
     fa4:	75000001 	strvc	r0, [r0, #-1]
     fa8:	745f6273 	ldrbvc	r6, [pc], #-627	; fb0 <__Stack_Size+0xbb0>
     fac:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
     fb0:	00010068 	andeq	r0, r1, r8, rrx
     fb4:	62737500 	rsbsvs	r7, r3, #0, 10
     fb8:	6765725f 			; <UNDEFINED> instruction: 0x6765725f
     fbc:	00682e73 	rsbeq	r2, r8, r3, ror lr
     fc0:	75000001 	strvc	r0, [r0, #-1]
     fc4:	695f6273 	ldmdbvs	pc, {r0, r1, r4, r5, r6, r9, sp, lr}^	; <UNPREDICTABLE>
     fc8:	2e74696e 	cdpcs	9, 7, cr6, cr4, cr14, {3}
     fcc:	00010068 	andeq	r0, r1, r8, rrx
     fd0:	62737500 	rsbsvs	r7, r3, #0, 10
     fd4:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
     fd8:	00682e65 	rsbeq	r2, r8, r5, ror #28
     fdc:	00000001 	andeq	r0, r0, r1
     fe0:	08020500 	stmdaeq	r2, {r8, sl}
     fe4:	0308000f 	movweq	r0, #32783	; 0x800f
     fe8:	84230129 	strthi	r0, [r3], #-297	; 0x129
     fec:	3d36593e 	ldccc	9, cr5, [r6, #-248]!	; 0xffffff08
     ff0:	914b3d1f 	cmpls	fp, pc, lsl sp
     ff4:	3c170395 	ldccc	3, cr0, [r7], {149}	; 0x95
     ff8:	42593021 	subsmi	r3, r9, #33	; 0x21
     ffc:	30435930 	subcc	r5, r3, r0, lsr r9
    1000:	13083059 	movwne	r3, #32857	; 0x8059
    1004:	200903f3 	strdcs	r0, [r9], -r3
    1008:	5c5b3167 	ldfple	f3, [fp], {103}	; 0x67
    100c:	311d933f 	tstcc	sp, pc, lsr r3
    1010:	01001602 	tsteq	r0, r2, lsl #12
    1014:	02050001 	andeq	r0, r5, #1
    1018:	00000000 	andeq	r0, r0, r0
    101c:	01019e03 	tsteq	r1, r3, lsl #28
    1020:	5a3e7623 	bpl	f9e8b4 <__Stack_Size+0xf9e4b4>
    1024:	3f5b3167 	svccc	0x005b3167
    1028:	00085b31 	andeq	r5, r8, r1, lsr fp
    102c:	00630101 	rsbeq	r0, r3, r1, lsl #2
    1030:	00020000 	andeq	r0, r2, r0
    1034:	00000045 	andeq	r0, r0, r5, asr #32
    1038:	0efb0102 	cdpeq	1, 15, cr0, cr11, cr2, {0}
    103c:	0101000d 	tsteq	r1, sp
    1040:	00000101 	andeq	r0, r0, r1, lsl #2
    1044:	00000100 	andeq	r0, r0, r0, lsl #2
    1048:	62737501 	rsbsvs	r7, r3, #4194304	; 0x400000
    104c:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1050:	73750000 	cmnvc	r5, #0
    1054:	6e695f62 	cdpvs	15, 6, cr5, cr9, cr2, {3}
    1058:	632e7469 	teqvs	lr, #1761607680	; 0x69000000
    105c:	00000100 	andeq	r0, r0, r0, lsl #2
    1060:	5f627375 	svcpl	0x00627375
    1064:	65707974 	ldrbvs	r7, [r0, #-2420]!	; 0x974
    1068:	0100682e 	tsteq	r0, lr, lsr #16
    106c:	73750000 	cmnvc	r5, #0
    1070:	6f635f62 	svcvs	0x00635f62
    1074:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
    1078:	00000100 	andeq	r0, r0, r0, lsl #2
    107c:	02050000 	andeq	r0, r5, #0
    1080:	0800105c 	stmdaeq	r0, {r2, r3, r4, r6, ip}
    1084:	21013503 	tstcs	r1, r3, lsl #10
    1088:	2f211d31 	svccs	0x00211d31
    108c:	231d233d 	tstcs	sp, #-201326592	; 0xf4000000
    1090:	01000f02 	tsteq	r0, r2, lsl #30
    1094:	00035001 	andeq	r5, r3, r1
    1098:	7b000200 	blvc	18a0 <__Stack_Size+0x14a0>
    109c:	02000000 	andeq	r0, r0, #0
    10a0:	0d0efb01 	vstreq	d15, [lr, #-4]
    10a4:	01010100 	mrseq	r0, (UNDEF: 17)
    10a8:	00000001 	andeq	r0, r0, r1
    10ac:	01000001 	tsteq	r0, r1
    10b0:	5f627375 	svcpl	0x00627375
    10b4:	0062696c 	rsbeq	r6, r2, ip, ror #18
    10b8:	62737500 	rsbsvs	r7, r3, #0, 10
    10bc:	726f635f 	rsbvc	r6, pc, #2080374785	; 0x7c000001
    10c0:	00632e65 	rsbeq	r2, r3, r5, ror #28
    10c4:	75000001 	strvc	r0, [r0, #-1]
    10c8:	745f6273 	ldrbvc	r6, [pc], #-627	; 10d0 <__Stack_Size+0xcd0>
    10cc:	2e657079 	mcrcs	0, 3, r7, cr5, cr9, {3}
    10d0:	00010068 	andeq	r0, r1, r8, rrx
    10d4:	62737500 	rsbsvs	r7, r3, #0, 10
    10d8:	6665645f 			; <UNDEFINED> instruction: 0x6665645f
    10dc:	0100682e 	tsteq	r0, lr, lsr #16
    10e0:	73750000 	cmnvc	r5, #0
    10e4:	6f635f62 	svcvs	0x00635f62
    10e8:	682e6572 	stmdavs	lr!, {r1, r4, r5, r6, r8, sl, sp, lr}
    10ec:	00000100 	andeq	r0, r0, r0, lsl #2
    10f0:	5f627375 	svcpl	0x00627375
    10f4:	74696e69 	strbtvc	r6, [r9], #-3689	; 0xe69
    10f8:	0100682e 	tsteq	r0, lr, lsr #16
    10fc:	73750000 	cmnvc	r5, #0
    1100:	656d5f62 	strbvs	r5, [sp, #-3938]!	; 0xf62
    1104:	00682e6d 	rsbeq	r2, r8, sp, ror #28
    1108:	75000001 	strvc	r0, [r0, #-1]
    110c:	725f6273 	subsvc	r6, pc, #805306375	; 0x30000007
    1110:	2e736765 	cdpcs	7, 7, cr6, cr3, cr5, {3}
    1114:	00010068 	andeq	r0, r1, r8, rrx
    1118:	05000000 	streq	r0, [r0, #-0]
    111c:	00109402 	andseq	r9, r0, r2, lsl #8
    1120:	01350308 	teqeq	r5, r8, lsl #6
    1124:	223e222f 	eorscs	r2, lr, #-268435454	; 0xf0000002
    1128:	05022f4b 	streq	r2, [r2, #-3915]	; 0xf4b
    112c:	00010100 	andeq	r0, r1, r0, lsl #2
    1130:	10b80205 	adcsne	r0, r8, r5, lsl #4
    1134:	e3030800 	movw	r0, #14336	; 0x3800
    1138:	222f0100 	eorcs	r0, pc, #0, 2
    113c:	2f4b223e 	svccs	0x004b223e
    1140:	01000502 	tsteq	r0, r2, lsl #10
    1144:	02050001 	andeq	r0, r5, #1
    1148:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
    114c:	01019b03 	tsteq	r1, r3, lsl #22
    1150:	233d222f 	teqcs	sp, #-268435454	; 0xf0000002
    1154:	5b311d23 	blpl	c485e8 <__Stack_Size+0xc481e8>
    1158:	30402223 	subcc	r2, r0, r3, lsr #4
    115c:	3133404e 	teqcc	r3, lr, asr #32
    1160:	31474022 	cmpcc	r7, r2, lsr #32
    1164:	424c231d 	submi	r2, ip, #1946157056	; 0x74000000
    1168:	4b580b03 	blmi	1603d7c <__Stack_Size+0x160397c>
    116c:	032e6003 	teqeq	lr, #3
    1170:	07022021 	streq	r2, [r2, -r1, lsr #32]
    1174:	00010100 	andeq	r0, r1, r0, lsl #2
    1178:	116c0205 	cmnne	ip, r5, lsl #4
    117c:	e0030800 	and	r0, r3, r0, lsl #16
    1180:	1f130103 	svcne	0x00130103
    1184:	33212f2f 	teqcc	r1, #47, 30	; 0xbc
    1188:	01040200 	mrseq	r0, R12_usr
    118c:	30062006 	andcc	r2, r6, r6
    1190:	2d34924d 	lfmcs	f1, 1, [r4, #-308]!	; 0xfffffecc
    1194:	76512135 			; <UNDEFINED> instruction: 0x76512135
    1198:	2a244c84 	bcs	9143b0 <__Stack_Size+0x913fb0>
    119c:	1d302f2f 	ldcne	15, cr2, [r0, #-188]!	; 0xffffff44
    11a0:	12022323 	andne	r2, r2, #-1946157056	; 0x8c000000
    11a4:	00010100 	andeq	r0, r1, r0, lsl #2
    11a8:	12140205 	andsne	r0, r4, #1342177280	; 0x50000000
    11ac:	ca030800 	bgt	c31b4 <__Stack_Size+0xc2db4>
    11b0:	21220100 	teqcs	r2, r0, lsl #2
    11b4:	302f591f 	eorcc	r5, pc, pc, lsl r9	; <UNPREDICTABLE>
    11b8:	22324b21 	eorscs	r4, r2, #33792	; 0x8400
    11bc:	01000802 	tsteq	r0, r2, lsl #16
    11c0:	02050001 	andeq	r0, r5, #1
    11c4:	0800124c 	stmdaeq	r0, {r2, r3, r6, r9, ip}
    11c8:	0100f803 	tsteq	r0, r3, lsl #16
    11cc:	003e8424 	eorseq	r8, lr, r4, lsr #8
    11d0:	06010402 	streq	r0, [r1], -r2, lsl #8
    11d4:	342f0620 	strtcc	r0, [pc], #-1568	; 11dc <__Stack_Size+0xddc>
    11d8:	2f1e224b 	svccs	0x001e224b
    11dc:	0221252f 	eoreq	r2, r1, #197132288	; 0xbc00000
    11e0:	01010007 	tsteq	r1, r7
    11e4:	94020500 	strls	r0, [r2], #-1280	; 0x500
    11e8:	03080012 	movweq	r0, #32786	; 0x8012
    11ec:	210101e9 	smlattcs	r1, r9, r1, r0
    11f0:	224b3e40 	subcs	r3, fp, #64, 28	; 0x400
    11f4:	03423d35 	movteq	r3, #11573	; 0x2d35
    11f8:	7203200f 	andvc	r2, r3, #15
    11fc:	035f4320 	cmpeq	pc, #32, 6	; 0x80000000
    1200:	40322075 	eorsmi	r2, r2, r5, ror r0
    1204:	04020031 	streq	r0, [r2], #-49	; 0x31
    1208:	062e0601 	strteq	r0, [lr], -r1, lsl #12
    120c:	2e09032f 	cdpcs	3, 0, cr0, cr9, cr15, {1}
    1210:	231d2347 	tstcs	sp, #469762049	; 0x1c000001
    1214:	5a5e4b4c 	bpl	1793f4c <__Stack_Size+0x1793b4c>
    1218:	942f6b23 	strtls	r6, [pc], #-2851	; 1220 <__Stack_Size+0xe20>
    121c:	0221314b 	eoreq	r3, r1, #-1073741806	; 0xc0000012
    1220:	0101000a 	tsteq	r1, sl
    1224:	64020500 	strvs	r0, [r2], #-1280	; 0x500
    1228:	03080013 	movweq	r0, #32787	; 0x8013
    122c:	260102c2 	strcs	r0, [r1], -r2, asr #5
    1230:	03200f03 	teqeq	r0, #3, 30
    1234:	0f032071 	svceq	0x00032071
    1238:	20710320 	rsbscs	r0, r1, r0, lsr #6
    123c:	32544321 	subscc	r4, r4, #-2080374784	; 0x84000000
    1240:	002f3140 	eoreq	r3, pc, r0, asr #2
    1244:	06010402 	streq	r0, [r1], -r2, lsl #8
    1248:	0321062e 	teqeq	r1, #48234496	; 0x2e00000
    124c:	31472e09 	cmpcc	r7, r9, lsl #28
    1250:	8588231d 	strhi	r2, [r8, #797]	; 0x31d
    1254:	2e6f034b 	cdpcs	3, 6, cr0, cr15, cr11, {2}
    1258:	02201203 	eoreq	r1, r0, #805306368	; 0x30000000
    125c:	01010007 	tsteq	r1, r7
    1260:	e8020500 	stmda	r2, {r8, sl}
    1264:	03080013 	movweq	r0, #32787	; 0x8013
    1268:	210102f8 	strdcs	r0, [r1, -r8]
    126c:	07024c67 	streq	r4, [r2, -r7, ror #24]
    1270:	00010100 	andeq	r0, r1, r0, lsl #2
    1274:	140c0205 	strne	r0, [ip], #-517	; 0x205
    1278:	92030800 	andls	r0, r3, #0, 16
    127c:	3d150103 	ldfccs	f0, [r5, #-12]
    1280:	2f233d22 	svccs	0x00233d22
    1284:	01000402 	tsteq	r0, r2, lsl #8
    1288:	02050001 	andeq	r0, r5, #1
    128c:	08001428 	stmdaeq	r0, {r3, r5, sl, ip}
    1290:	0107c903 	tsteq	r7, r3, lsl #18
    1294:	4b5a6821 	blmi	169b320 <__Stack_Size+0x169af20>
    1298:	000d0240 	andeq	r0, sp, r0, asr #4
    129c:	05000101 	streq	r0, [r0, #-257]	; 0x101
    12a0:	00146802 	andseq	r6, r4, r2, lsl #16
    12a4:	06cc0308 	strbeq	r0, [ip], r8, lsl #6
    12a8:	2c3e2801 	ldccs	8, cr2, [lr], #-4
    12ac:	2f5c563e 	svccs	0x005c563e
    12b0:	31303030 	teqcc	r0, r0, lsr r0
    12b4:	7dbd032f 	ldcvc	3, cr0, [sp, #188]!	; 0xbc
    12b8:	40304e4a 	eorsmi	r4, r0, sl, asr #28
    12bc:	3d294f30 	stccc	15, cr4, [r9, #-192]!	; 0xffffff40
    12c0:	4a0c033d 	bmi	301fbc <__Stack_Size+0x301bbc>
    12c4:	3c3c0330 	ldccc	3, cr0, [ip], #-192	; 0xffffff40
    12c8:	3c440359 	mcrrcc	3, 5, r0, r4, cr9
    12cc:	30443e3d 	subcc	r3, r4, sp, lsr lr
    12d0:	033e3d3d 	teqeq	lr, #3904	; 0xf40
    12d4:	30313c0b 	eorscc	r3, r1, fp, lsl #24
    12d8:	30333141 	eorscc	r3, r3, r1, asr #2
    12dc:	032e0903 	teqeq	lr, #49152	; 0xc000
    12e0:	9c362e0a 	ldcls	14, cr2, [r6], #-40	; 0xffffffd8
    12e4:	032e7503 	teqeq	lr, #12582912	; 0xc00000
    12e8:	19032010 	stmdbne	r3, {r4, sp}
    12ec:	2f3e303c 	svccs	0x003e303c
    12f0:	3e303e30 	mrccc	14, 1, r3, cr0, cr0, {1}
    12f4:	42303d30 	eorsmi	r3, r0, #48, 26	; 0xc00
    12f8:	5e4b695a 	mcrpl	9, 2, r6, cr11, cr10, {2}
    12fc:	306d7530 	rsbcc	r7, sp, r0, lsr r5
    1300:	03200e03 	teqeq	r0, #3, 28	; 0x30
    1304:	5f432072 	svcpl	0x00432072
    1308:	32207503 	eorcc	r7, r0, #12582912	; 0xc00000
    130c:	03593140 	cmpeq	r9, #64, 2
    1310:	50303c09 	eorspl	r3, r0, r9, lsl #24
    1314:	674b5930 	smlaldxvs	r5, fp, r0, r9
    1318:	233d2289 	teqcs	sp, #-1879048184	; 0x90000008
    131c:	3067322f 	rsbcc	r3, r7, pc, lsr #4
    1320:	3f316941 	svccc	0x00316941
    1324:	4c314d41 	ldcmi	13, cr4, [r1], #-260	; 0xfffffefc
    1328:	5a302308 	bpl	c09f50 <__Stack_Size+0xc09b50>
    132c:	4b405a30 	blmi	1017bf4 <__Stack_Size+0x10177f4>
    1330:	2f032f40 	svccs	0x00032f40
    1334:	d6032f4a 	strle	r2, [r3], -sl, asr #30
    1338:	2c032e7e 	stccs	14, cr2, [r3], {126}	; 0x7e
    133c:	2e0b032e 	cdpcs	3, 0, cr0, cr11, cr14, {1}
    1340:	01000c02 	tsteq	r0, r2, lsl #24
    1344:	02050001 	andeq	r0, r5, #1
    1348:	08001744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip}
    134c:	0107a003 	tsteq	r7, r3
    1350:	02003e21 	andeq	r3, r0, #528	; 0x210
    1354:	2e060104 	adfcss	f0, f6, f4
    1358:	7c8a0306 	stcvc	3, cr0, [sl], {6}
    135c:	33221e2e 	teqcc	r2, #736	; 0x2e0
    1360:	211f5926 	tstcs	pc, r6, lsr #18
    1364:	301e222f 	andscc	r2, lr, pc, lsr #4
    1368:	1f213077 	svcne	0x00213077
    136c:	2f211f2f 	svccs	0x00211f2f
    1370:	22404c3f 	subcs	r4, r0, #16128	; 0x3f00
    1374:	d3033d4e 	movwle	r3, #15694	; 0x3d4e
    1378:	303f9e03 	eorscc	r9, pc, r3, lsl #28
    137c:	20090351 	andcs	r0, r9, r1, asr r3
    1380:	0f022d31 	svceq	0x00022d31
    1384:	00010100 	andeq	r0, r1, r0, lsl #2
    1388:	180c0205 	stmdane	ip, {r0, r2, r9}
    138c:	dd030800 	stcle	8, cr0, [r3, #-0]
    1390:	31220107 	teqcc	r2, r7, lsl #2
    1394:	01040200 	mrseq	r0, R12_usr
    1398:	02002006 	andeq	r2, r0, #6
    139c:	76060204 	strvc	r0, [r6], -r4, lsl #4
    13a0:	02040200 	andeq	r0, r4, #0, 4
    13a4:	09023264 	stmdbeq	r2, {r2, r5, r6, r9, ip, sp}
    13a8:	00010100 	andeq	r0, r1, r0, lsl #2
    13ac:	18440205 	stmdane	r4, {r0, r2, r9}^
    13b0:	f8030800 			; <UNDEFINED> instruction: 0xf8030800
    13b4:	3e210106 	sufccs	f0, f1, f6
    13b8:	01040200 	mrseq	r0, R12_usr
    13bc:	30062e06 	andcc	r2, r6, r6, lsl #28
    13c0:	00303f30 	eorseq	r3, r0, r0, lsr pc
    13c4:	3d010402 	cfstrscc	mvf0, [r1, #-8]
    13c8:	01040200 	mrseq	r0, R12_usr
    13cc:	4c3d311f 	ldfmis	f3, [sp], #-124	; 0xffffff84
    13d0:	2d312350 	ldccs	3, cr2, [r1, #-320]!	; 0xfffffec0
    13d4:	01000902 	tsteq	r0, r2, lsl #18
    13d8:	02050001 	andeq	r0, r5, #1
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	0107f103 	tsteq	r7, r3, lsl #2
    13e4:	01000102 	tsteq	r0, r2, lsl #2
    13e8:	00008f01 	andeq	r8, r0, r1, lsl #30
    13ec:	36000200 	strcc	r0, [r0], -r0, lsl #4
    13f0:	02000000 	andeq	r0, r0, #0
    13f4:	0d0efb01 	vstreq	d15, [lr, #-4]
    13f8:	01010100 	mrseq	r0, (UNDEF: 17)
    13fc:	00000001 	andeq	r0, r0, r1
    1400:	01000001 	tsteq	r0, r1
    1404:	5f627375 	svcpl	0x00627375
    1408:	0062696c 	rsbeq	r6, r2, ip, ror #18
    140c:	62737500 	rsbsvs	r7, r3, #0, 10
    1410:	6d656d5f 	stclvs	13, cr6, [r5, #-380]!	; 0xfffffe84
    1414:	0100632e 	tsteq	r0, lr, lsr #6
    1418:	73750000 	cmnvc	r5, #0
    141c:	79745f62 	ldmdbvc	r4!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1420:	682e6570 	stmdavs	lr!, {r4, r5, r6, r8, sl, sp, lr}
    1424:	00000100 	andeq	r0, r0, r0, lsl #2
    1428:	02050000 	andeq	r0, r5, #0
    142c:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
    1430:	24012303 	strcs	r2, [r1], #-771	; 0x303
    1434:	232b232b 	teqcs	fp, #-1409286144	; 0xac000000
    1438:	04020021 	streq	r0, [r2], #-33	; 0x21
    143c:	00200601 	eoreq	r0, r0, r1, lsl #12
    1440:	06020402 	streq	r0, [r2], -r2, lsl #8
    1444:	0402004e 	streq	r0, [r2], #-78	; 0x4e
    1448:	02002c02 	andeq	r2, r0, #512	; 0x200
    144c:	00300204 	eorseq	r0, r0, r4, lsl #4
    1450:	2f020402 	svccs	0x00020402
    1454:	0001024e 	andeq	r0, r1, lr, asr #4
    1458:	05000101 	streq	r0, [r0, #-257]	; 0x101
    145c:	0018d002 	andseq	sp, r8, r2
    1460:	013c0308 	teqeq	ip, r8, lsl #6
    1464:	2b232b24 	blcs	8cc0fc <__Stack_Size+0x8cbcfc>
    1468:	02002123 	andeq	r2, r0, #-1073741816	; 0xc0000008
    146c:	20060104 	andcs	r0, r6, r4, lsl #2
    1470:	02040200 	andeq	r0, r4, #0, 4
    1474:	02693006 	rsbeq	r3, r9, #6
    1478:	01010001 	tsteq	r1, r1

Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0000000c 	andeq	r0, r0, ip
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
   8:	7c020001 	stcvc	0, cr0, [r2], {1}
   c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	0000000c 	andeq	r0, r0, ip
  14:	00000000 	andeq	r0, r0, r0
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
  18:	080001b8 	stmdaeq	r0, {r3, r4, r5, r7, r8}
  1c:	00000002 	andeq	r0, r0, r2
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	0000000c 	andeq	r0, r0, ip
  24:	00000000 	andeq	r0, r0, r0
  28:	080001ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	00000002 	andeq	r0, r0, r2
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	0000000c 	andeq	r0, r0, ip
  34:	00000000 	andeq	r0, r0, r0
  38:	080001bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	00000002 	andeq	r0, r0, r2

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	0000000c 	andeq	r0, r0, ip
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	00000000 	andeq	r0, r0, r0
  48:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}
  4c:	0000000a 	andeq	r0, r0, sl

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	0000000c 	andeq	r0, r0, ip
  54:	00000000 	andeq	r0, r0, r0
  58:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
  5c:	00000002 	andeq	r0, r0, r2
  60:	0000000c 	andeq	r0, r0, ip
  64:	00000000 	andeq	r0, r0, r0
  68:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
  6c:	00000018 	andeq	r0, r0, r8, lsl r0
  70:	0000000c 	andeq	r0, r0, ip
  74:	00000000 	andeq	r0, r0, r0
  78:	080001e4 	stmdaeq	r0, {r2, r5, r6, r7, r8}
  7c:	00000002 	andeq	r0, r0, r2
  80:	0000000c 	andeq	r0, r0, ip
  84:	00000000 	andeq	r0, r0, r0
  88:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
  8c:	00000002 	andeq	r0, r0, r2
  90:	0000000c 	andeq	r0, r0, ip
  94:	00000000 	andeq	r0, r0, r0
  98:	080001e8 	stmdaeq	r0, {r3, r5, r6, r7, r8}
  9c:	00000002 	andeq	r0, r0, r2
  a0:	0000000c 	andeq	r0, r0, ip
  a4:	00000000 	andeq	r0, r0, r0
  a8:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
  ac:	00000002 	andeq	r0, r0, r2
  b0:	0000000c 	andeq	r0, r0, ip
  b4:	00000000 	andeq	r0, r0, r0
  b8:	080001ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8}
  bc:	00000002 	andeq	r0, r0, r2
  c0:	0000000c 	andeq	r0, r0, ip
  c4:	00000000 	andeq	r0, r0, r0
  c8:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
  cc:	00000002 	andeq	r0, r0, r2
  d0:	0000000c 	andeq	r0, r0, ip
  d4:	00000000 	andeq	r0, r0, r0
  d8:	080001f0 	stmdaeq	r0, {r4, r5, r6, r7, r8}
  dc:	0000000c 	andeq	r0, r0, ip
  e0:	00000018 	andeq	r0, r0, r8, lsl r0
  e4:	00000000 	andeq	r0, r0, r0
  e8:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
  ec:	000000a8 	andeq	r0, r0, r8, lsr #1
  f0:	40080e41 	andmi	r0, r8, r1, asr #28
  f4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
  f8:	00000001 	andeq	r0, r0, r1
  fc:	0000001c 	andeq	r0, r0, ip, lsl r0
 100:	00000000 	andeq	r0, r0, r0
 104:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
 108:	00000060 	andeq	r0, r0, r0, rrx
 10c:	40100e41 	andsmi	r0, r0, r1, asr #28
 110:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 114:	02854003 	addeq	r4, r5, #3
 118:	00018e40 	andeq	r8, r1, r0, asr #28
 11c:	0000000c 	andeq	r0, r0, ip
 120:	00000000 	andeq	r0, r0, r0
 124:	08000304 	stmdaeq	r0, {r2, r8, r9}
 128:	0000000c 	andeq	r0, r0, ip
 12c:	0000000c 	andeq	r0, r0, ip
 130:	00000000 	andeq	r0, r0, r0
 134:	08000310 	stmdaeq	r0, {r4, r8, r9}
 138:	0000000c 	andeq	r0, r0, ip
 13c:	0000000c 	andeq	r0, r0, ip
 140:	00000000 	andeq	r0, r0, r0
 144:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
 148:	00000020 	andeq	r0, r0, r0, lsr #32
 14c:	0000000c 	andeq	r0, r0, ip
 150:	00000000 	andeq	r0, r0, r0
 154:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
 158:	0000000c 	andeq	r0, r0, ip
 15c:	00000018 	andeq	r0, r0, r8, lsl r0
 160:	00000000 	andeq	r0, r0, r0
 164:	08000348 	stmdaeq	r0, {r3, r6, r8, r9}
 168:	00000028 	andeq	r0, r0, r8, lsr #32
 16c:	40080e41 	andmi	r0, r8, r1, asr #28
 170:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 174:	00000001 	andeq	r0, r0, r1
 178:	00000024 	andeq	r0, r0, r4, lsr #32
 17c:	00000000 	andeq	r0, r0, r0
 180:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
 184:	00000078 	andeq	r0, r0, r8, ror r0
 188:	40180e41 	andsmi	r0, r8, r1, asr #28
 18c:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 190:	04824005 	streq	r4, [r2], #5
 194:	40038440 	andmi	r8, r3, r0, asr #8
 198:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 19c:	00000001 	andeq	r0, r0, r1
 1a0:	0000000c 	andeq	r0, r0, ip
	...
 1ac:	00000004 	andeq	r0, r0, r4
 1b0:	0000000c 	andeq	r0, r0, ip
 1b4:	00000000 	andeq	r0, r0, r0
 1b8:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
 1bc:	0000001c 	andeq	r0, r0, ip, lsl r0
 1c0:	0000000c 	andeq	r0, r0, ip
 1c4:	00000000 	andeq	r0, r0, r0
 1c8:	08000404 	stmdaeq	r0, {r2, sl}
 1cc:	00000018 	andeq	r0, r0, r8, lsl r0
 1d0:	00000018 	andeq	r0, r0, r8, lsl r0
 1d4:	00000000 	andeq	r0, r0, r0
 1d8:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
 1dc:	00000084 	andeq	r0, r0, r4, lsl #1
 1e0:	40080e41 	andmi	r0, r8, r1, asr #28
 1e4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 1e8:	00000001 	andeq	r0, r0, r1
 1ec:	0000000c 	andeq	r0, r0, ip
 1f0:	00000000 	andeq	r0, r0, r0
 1f4:	080004a0 	stmdaeq	r0, {r5, r7, sl}
 1f8:	00000028 	andeq	r0, r0, r8, lsr #32
 1fc:	0000000c 	andeq	r0, r0, ip
 200:	00000000 	andeq	r0, r0, r0
 204:	080004c8 	stmdaeq	r0, {r3, r6, r7, sl}
 208:	0000001c 	andeq	r0, r0, ip, lsl r0
 20c:	0000000c 	andeq	r0, r0, ip
 210:	00000000 	andeq	r0, r0, r0
 214:	080004e4 	stmdaeq	r0, {r2, r5, r6, r7, sl}
 218:	00000004 	andeq	r0, r0, r4
 21c:	0000001c 	andeq	r0, r0, ip, lsl r0
 220:	00000000 	andeq	r0, r0, r0
 224:	080004e8 	stmdaeq	r0, {r3, r5, r6, r7, sl}
 228:	00000024 	andeq	r0, r0, r4, lsr #32
 22c:	40100e41 	andsmi	r0, r0, r1, asr #28
 230:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 234:	02824003 	addeq	r4, r2, #3
 238:	00018e40 	andeq	r8, r1, r0, asr #28
 23c:	00000018 	andeq	r0, r0, r8, lsl r0
 240:	00000000 	andeq	r0, r0, r0
 244:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
 248:	00000040 	andeq	r0, r0, r0, asr #32
 24c:	40080e41 	andmi	r0, r8, r1, asr #28
 250:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 254:	00000001 	andeq	r0, r0, r1
 258:	0000001c 	andeq	r0, r0, ip, lsl r0
 25c:	00000000 	andeq	r0, r0, r0
 260:	0800054c 	stmdaeq	r0, {r2, r3, r6, r8, sl}
 264:	00000022 	andeq	r0, r0, r2, lsr #32
 268:	40100e41 	andsmi	r0, r0, r1, asr #28
 26c:	81400480 	smlalbbhi	r0, r0, r0, r4	; <UNPREDICTABLE>
 270:	02824003 	addeq	r4, r2, #3
 274:	00018e40 	andeq	r8, r1, r0, asr #28
 278:	0000001c 	andeq	r0, r0, ip, lsl r0
 27c:	00000000 	andeq	r0, r0, r0
 280:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
 284:	000000b4 	strheq	r0, [r0], -r4
 288:	40100e41 	andsmi	r0, r0, r1, asr #28
 28c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 290:	02864003 	addeq	r4, r6, #3
 294:	00018e40 	andeq	r8, r1, r0, asr #28
 298:	0000000c 	andeq	r0, r0, ip
 29c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2a0:	7c020001 	stcvc	0, cr0, [r2], {1}
 2a4:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2a8:	00000024 	andeq	r0, r0, r4, lsr #32
 2ac:	00000298 	muleq	r0, r8, r2
 2b0:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 2b4:	000000b8 	strheq	r0, [r0], -r8
 2b8:	40180e41 	andsmi	r0, r8, r1, asr #28
 2bc:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 2c0:	04824005 	streq	r4, [r2], #5
 2c4:	40038440 	andmi	r8, r3, r0, asr #8
 2c8:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 2cc:	00000001 	andeq	r0, r0, r1
 2d0:	0000000c 	andeq	r0, r0, ip
 2d4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 2d8:	7c020001 	stcvc	0, cr0, [r2], {1}
 2dc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 2e0:	0000000c 	andeq	r0, r0, ip
 2e4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2e8:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
 2ec:	00000016 	andeq	r0, r0, r6, lsl r0
 2f0:	0000000c 	andeq	r0, r0, ip
 2f4:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 2f8:	00000000 	andeq	r0, r0, r0
 2fc:	00000012 	andeq	r0, r0, r2, lsl r0
 300:	0000000c 	andeq	r0, r0, ip
 304:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 308:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 30c:	00000010 	andeq	r0, r0, r0, lsl r0
 310:	00000028 	andeq	r0, r0, r8, lsr #32
 314:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 318:	08000704 	stmdaeq	r0, {r2, r8, r9, sl}
 31c:	00000050 	andeq	r0, r0, r0, asr r0
 320:	40200e42 	eormi	r0, r0, r2, asr #28
 324:	85400884 	strbhi	r0, [r0, #-2180]	; 0x884
 328:	06864007 	streq	r4, [r6], r7
 32c:	40058740 	andmi	r8, r5, r0, asr #14
 330:	89400488 	stmdbhi	r0, {r3, r7, sl}^
 334:	028a4003 	addeq	r4, sl, #3
 338:	00018e40 	andeq	r8, r1, r0, asr #28
 33c:	0000000c 	andeq	r0, r0, ip
 340:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 344:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 348:	00000048 	andeq	r0, r0, r8, asr #32
 34c:	0000000c 	andeq	r0, r0, ip
 350:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 354:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
 358:	00000060 	andeq	r0, r0, r0, rrx
 35c:	0000000c 	andeq	r0, r0, ip
 360:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 364:	080007fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 368:	00000028 	andeq	r0, r0, r8, lsr #32
 36c:	0000000c 	andeq	r0, r0, ip
 370:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 374:	08000824 	stmdaeq	r0, {r2, r5, fp}
 378:	0000001c 	andeq	r0, r0, ip, lsl r0
 37c:	0000000c 	andeq	r0, r0, ip
 380:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 384:	08000840 	stmdaeq	r0, {r6, fp}
 388:	00000014 	andeq	r0, r0, r4, lsl r0
 38c:	00000018 	andeq	r0, r0, r8, lsl r0
 390:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 394:	08000854 	stmdaeq	r0, {r2, r4, r6, fp}
 398:	0000006c 	andeq	r0, r0, ip, rrx
 39c:	400c0e42 	andmi	r0, ip, r2, asr #28
 3a0:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 3a4:	018e4002 	orreq	r4, lr, r2
 3a8:	0000000c 	andeq	r0, r0, ip
 3ac:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3b0:	080008c0 	stmdaeq	r0, {r6, r7, fp}
 3b4:	00000024 	andeq	r0, r0, r4, lsr #32
 3b8:	0000001c 	andeq	r0, r0, ip, lsl r0
 3bc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3c0:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
 3c4:	0000002c 	andeq	r0, r0, ip, lsr #32
 3c8:	40100e41 	andsmi	r0, r0, r1, asr #28
 3cc:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 3d0:	02854003 	addeq	r4, r5, #3
 3d4:	00018e40 	andeq	r8, r1, r0, asr #28
 3d8:	0000000c 	andeq	r0, r0, ip
 3dc:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3e0:	08000910 	stmdaeq	r0, {r4, r8, fp}
 3e4:	00000014 	andeq	r0, r0, r4, lsl r0
 3e8:	00000018 	andeq	r0, r0, r8, lsl r0
 3ec:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 3f0:	08000924 	stmdaeq	r0, {r2, r5, r8, fp}
 3f4:	00000034 	andeq	r0, r0, r4, lsr r0
 3f8:	40080e42 	andmi	r0, r8, r2, asr #28
 3fc:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 400:	00000001 	andeq	r0, r0, r1
 404:	0000001c 	andeq	r0, r0, ip, lsl r0
 408:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 40c:	00000000 	andeq	r0, r0, r0
 410:	00000030 	andeq	r0, r0, r0, lsr r0
 414:	40100e42 	andsmi	r0, r0, r2, asr #28
 418:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 41c:	02854003 	addeq	r4, r5, #3
 420:	00018e40 	andeq	r8, r1, r0, asr #28
 424:	00000024 	andeq	r0, r0, r4, lsr #32
 428:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 42c:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
 430:	0000004c 	andeq	r0, r0, ip, asr #32
 434:	40180e41 	andsmi	r0, r8, r1, asr #28
 438:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 43c:	04824005 	streq	r4, [r2], #5
 440:	40038440 	andmi	r8, r3, r0, asr #8
 444:	8e400285 	cdphi	2, 4, cr0, cr0, cr5, {4}
 448:	00000001 	andeq	r0, r0, r1
 44c:	0000000c 	andeq	r0, r0, ip
 450:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 454:	080009a4 	stmdaeq	r0, {r2, r5, r7, r8, fp}
 458:	0000000c 	andeq	r0, r0, ip
 45c:	0000000c 	andeq	r0, r0, ip
 460:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 464:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
 468:	00000018 	andeq	r0, r0, r8, lsl r0
 46c:	0000000c 	andeq	r0, r0, ip
 470:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 474:	080009c8 	stmdaeq	r0, {r3, r6, r7, r8, fp}
 478:	00000012 	andeq	r0, r0, r2, lsl r0
 47c:	0000000c 	andeq	r0, r0, ip
 480:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 484:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
 488:	00000010 	andeq	r0, r0, r0, lsl r0
 48c:	0000000c 	andeq	r0, r0, ip
 490:	000002d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 494:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
 498:	00000018 	andeq	r0, r0, r8, lsl r0
 49c:	0000000c 	andeq	r0, r0, ip
 4a0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 4a4:	7c020001 	stcvc	0, cr0, [r2], {1}
 4a8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 4ac:	0000000c 	andeq	r0, r0, ip
 4b0:	0000049c 	muleq	r0, ip, r4
 4b4:	08000a04 	stmdaeq	r0, {r2, r9, fp}
 4b8:	0000005c 	andeq	r0, r0, ip, asr r0
 4bc:	00000018 	andeq	r0, r0, r8, lsl r0
 4c0:	0000049c 	muleq	r0, ip, r4
 4c4:	08000a60 	stmdaeq	r0, {r5, r6, r9, fp}
 4c8:	00000044 	andeq	r0, r0, r4, asr #32
 4cc:	40080e41 	andmi	r0, r8, r1, asr #28
 4d0:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	0000000c 	andeq	r0, r0, ip
 4dc:	0000049c 	muleq	r0, ip, r4
 4e0:	00000000 	andeq	r0, r0, r0
 4e4:	00000002 	andeq	r0, r0, r2
 4e8:	0000000c 	andeq	r0, r0, ip
 4ec:	0000049c 	muleq	r0, ip, r4
 4f0:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 4f4:	00000018 	andeq	r0, r0, r8, lsl r0
 4f8:	0000000c 	andeq	r0, r0, ip
 4fc:	0000049c 	muleq	r0, ip, r4
 500:	08000abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp}
 504:	00000018 	andeq	r0, r0, r8, lsl r0
 508:	0000000c 	andeq	r0, r0, ip
 50c:	0000049c 	muleq	r0, ip, r4
 510:	08000ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp}
 514:	00000028 	andeq	r0, r0, r8, lsr #32
 518:	0000000c 	andeq	r0, r0, ip
 51c:	0000049c 	muleq	r0, ip, r4
 520:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 524:	00000034 	andeq	r0, r0, r4, lsr r0
 528:	0000001c 	andeq	r0, r0, ip, lsl r0
 52c:	0000049c 	muleq	r0, ip, r4
 530:	08000b30 	stmdaeq	r0, {r4, r5, r8, r9, fp}
 534:	0000005c 	andeq	r0, r0, ip, asr r0
 538:	40100e41 	andsmi	r0, r0, r1, asr #28
 53c:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 540:	02864003 	addeq	r4, r6, #3
 544:	00018e40 	andeq	r8, r1, r0, asr #28
 548:	00000024 	andeq	r0, r0, r4, lsr #32
 54c:	0000049c 	muleq	r0, ip, r4
 550:	08000b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp}
 554:	00000234 	andeq	r0, r0, r4, lsr r2
 558:	40180e42 	andsmi	r0, r8, r2, asr #28
 55c:	85400684 	strbhi	r0, [r0, #-1668]	; 0x684
 560:	04864005 	streq	r4, [r6], #5
 564:	40038740 	andmi	r8, r3, r0, asr #14
 568:	8e400288 	cdphi	2, 4, cr0, cr0, cr8, {4}
 56c:	00000001 	andeq	r0, r0, r1
 570:	0000000c 	andeq	r0, r0, ip
 574:	0000049c 	muleq	r0, ip, r4
 578:	00000000 	andeq	r0, r0, r0
 57c:	0000000c 	andeq	r0, r0, ip
 580:	0000000c 	andeq	r0, r0, ip
 584:	0000049c 	muleq	r0, ip, r4
 588:	00000000 	andeq	r0, r0, r0
 58c:	0000000c 	andeq	r0, r0, ip
 590:	0000000c 	andeq	r0, r0, ip
 594:	0000049c 	muleq	r0, ip, r4
 598:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 59c:	0000000c 	andeq	r0, r0, ip
 5a0:	0000000c 	andeq	r0, r0, ip
 5a4:	0000049c 	muleq	r0, ip, r4
 5a8:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 5ac:	00000004 	andeq	r0, r0, r4
 5b0:	0000000c 	andeq	r0, r0, ip
 5b4:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 5b8:	7c020001 	stcvc	0, cr0, [r2], {1}
 5bc:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 5c0:	0000000c 	andeq	r0, r0, ip
 5c4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 5c8:	00000000 	andeq	r0, r0, r0
 5cc:	0000000c 	andeq	r0, r0, ip
 5d0:	0000000c 	andeq	r0, r0, ip
 5d4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 5d8:	00000000 	andeq	r0, r0, r0
 5dc:	0000000c 	andeq	r0, r0, ip
 5e0:	0000000c 	andeq	r0, r0, ip
 5e4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 5e8:	00000000 	andeq	r0, r0, r0
 5ec:	0000000c 	andeq	r0, r0, ip
 5f0:	0000000c 	andeq	r0, r0, ip
 5f4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 5f8:	00000000 	andeq	r0, r0, r0
 5fc:	0000000c 	andeq	r0, r0, ip
 600:	0000000c 	andeq	r0, r0, ip
 604:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 608:	00000000 	andeq	r0, r0, r0
 60c:	0000000c 	andeq	r0, r0, ip
 610:	0000000c 	andeq	r0, r0, ip
 614:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 618:	00000000 	andeq	r0, r0, r0
 61c:	0000000c 	andeq	r0, r0, ip
 620:	0000000c 	andeq	r0, r0, ip
 624:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 628:	00000000 	andeq	r0, r0, r0
 62c:	0000000c 	andeq	r0, r0, ip
 630:	0000000c 	andeq	r0, r0, ip
 634:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 638:	00000000 	andeq	r0, r0, r0
 63c:	00000010 	andeq	r0, r0, r0, lsl r0
 640:	0000000c 	andeq	r0, r0, ip
 644:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 648:	00000000 	andeq	r0, r0, r0
 64c:	0000000c 	andeq	r0, r0, ip
 650:	0000000c 	andeq	r0, r0, ip
 654:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 658:	00000000 	andeq	r0, r0, r0
 65c:	0000000e 	andeq	r0, r0, lr
 660:	0000000c 	andeq	r0, r0, ip
 664:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 668:	00000000 	andeq	r0, r0, r0
 66c:	00000010 	andeq	r0, r0, r0, lsl r0
 670:	0000000c 	andeq	r0, r0, ip
 674:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 678:	00000000 	andeq	r0, r0, r0
 67c:	0000001c 	andeq	r0, r0, ip, lsl r0
 680:	0000000c 	andeq	r0, r0, ip
 684:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 688:	00000000 	andeq	r0, r0, r0
 68c:	00000012 	andeq	r0, r0, r2, lsl r0
 690:	0000000c 	andeq	r0, r0, ip
 694:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 698:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
 69c:	0000002a 	andeq	r0, r0, sl, lsr #32
 6a0:	0000000c 	andeq	r0, r0, ip
 6a4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6a8:	00000000 	andeq	r0, r0, r0
 6ac:	0000002a 	andeq	r0, r0, sl, lsr #32
 6b0:	0000000c 	andeq	r0, r0, ip
 6b4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6b8:	00000000 	andeq	r0, r0, r0
 6bc:	00000024 	andeq	r0, r0, r4, lsr #32
 6c0:	0000000c 	andeq	r0, r0, ip
 6c4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6c8:	00000000 	andeq	r0, r0, r0
 6cc:	00000012 	andeq	r0, r0, r2, lsl r0
 6d0:	0000000c 	andeq	r0, r0, ip
 6d4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6d8:	00000000 	andeq	r0, r0, r0
 6dc:	00000012 	andeq	r0, r0, r2, lsl r0
 6e0:	0000000c 	andeq	r0, r0, ip
 6e4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6e8:	00000000 	andeq	r0, r0, r0
 6ec:	0000001e 	andeq	r0, r0, lr, lsl r0
 6f0:	0000000c 	andeq	r0, r0, ip
 6f4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 6f8:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
 6fc:	0000001e 	andeq	r0, r0, lr, lsl r0
 700:	0000000c 	andeq	r0, r0, ip
 704:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 708:	00000000 	andeq	r0, r0, r0
 70c:	0000001e 	andeq	r0, r0, lr, lsl r0
 710:	0000000c 	andeq	r0, r0, ip
 714:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 718:	00000000 	andeq	r0, r0, r0
 71c:	0000001c 	andeq	r0, r0, ip, lsl r0
 720:	0000000c 	andeq	r0, r0, ip
 724:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 728:	08000e18 	stmdaeq	r0, {r3, r4, r9, sl, fp}
 72c:	0000001c 	andeq	r0, r0, ip, lsl r0
 730:	0000000c 	andeq	r0, r0, ip
 734:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 738:	00000000 	andeq	r0, r0, r0
 73c:	0000001e 	andeq	r0, r0, lr, lsl r0
 740:	0000000c 	andeq	r0, r0, ip
 744:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 748:	00000000 	andeq	r0, r0, r0
 74c:	0000001e 	andeq	r0, r0, lr, lsl r0
 750:	0000000c 	andeq	r0, r0, ip
 754:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 758:	00000000 	andeq	r0, r0, r0
 75c:	0000001c 	andeq	r0, r0, ip, lsl r0
 760:	0000000c 	andeq	r0, r0, ip
 764:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 768:	00000000 	andeq	r0, r0, r0
 76c:	0000001a 	andeq	r0, r0, sl, lsl r0
 770:	0000000c 	andeq	r0, r0, ip
 774:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 778:	00000000 	andeq	r0, r0, r0
 77c:	0000001a 	andeq	r0, r0, sl, lsl r0
 780:	0000000c 	andeq	r0, r0, ip
 784:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 788:	00000000 	andeq	r0, r0, r0
 78c:	00000018 	andeq	r0, r0, r8, lsl r0
 790:	0000000c 	andeq	r0, r0, ip
 794:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 798:	00000000 	andeq	r0, r0, r0
 79c:	0000001c 	andeq	r0, r0, ip, lsl r0
 7a0:	0000000c 	andeq	r0, r0, ip
 7a4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7a8:	00000000 	andeq	r0, r0, r0
 7ac:	00000020 	andeq	r0, r0, r0, lsr #32
 7b0:	0000000c 	andeq	r0, r0, ip
 7b4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7b8:	00000000 	andeq	r0, r0, r0
 7bc:	00000020 	andeq	r0, r0, r0, lsr #32
 7c0:	0000000c 	andeq	r0, r0, ip
 7c4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7c8:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 7cc:	00000020 	andeq	r0, r0, r0, lsr #32
 7d0:	0000000c 	andeq	r0, r0, ip
 7d4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7d8:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 7dc:	00000020 	andeq	r0, r0, r0, lsr #32
 7e0:	0000000c 	andeq	r0, r0, ip
 7e4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7e8:	00000000 	andeq	r0, r0, r0
 7ec:	0000001e 	andeq	r0, r0, lr, lsl r0
 7f0:	0000000c 	andeq	r0, r0, ip
 7f4:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 7f8:	00000000 	andeq	r0, r0, r0
 7fc:	00000012 	andeq	r0, r0, r2, lsl r0
 800:	0000000c 	andeq	r0, r0, ip
 804:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 808:	00000000 	andeq	r0, r0, r0
 80c:	00000020 	andeq	r0, r0, r0, lsr #32
 810:	0000000c 	andeq	r0, r0, ip
 814:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 818:	00000000 	andeq	r0, r0, r0
 81c:	00000020 	andeq	r0, r0, r0, lsr #32
 820:	0000000c 	andeq	r0, r0, ip
 824:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 828:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
 82c:	0000001c 	andeq	r0, r0, ip, lsl r0
 830:	0000000c 	andeq	r0, r0, ip
 834:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 838:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
 83c:	0000001c 	andeq	r0, r0, ip, lsl r0
 840:	0000000c 	andeq	r0, r0, ip
 844:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 848:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
 84c:	0000001c 	andeq	r0, r0, ip, lsl r0
 850:	0000000c 	andeq	r0, r0, ip
 854:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 858:	00000000 	andeq	r0, r0, r0
 85c:	00000026 	andeq	r0, r0, r6, lsr #32
 860:	0000000c 	andeq	r0, r0, ip
 864:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 868:	08000ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp}
 86c:	00000040 	andeq	r0, r0, r0, asr #32
 870:	0000000c 	andeq	r0, r0, ip
 874:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 878:	00000000 	andeq	r0, r0, r0
 87c:	00000020 	andeq	r0, r0, r0, lsr #32
 880:	0000000c 	andeq	r0, r0, ip
 884:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 888:	00000000 	andeq	r0, r0, r0
 88c:	00000020 	andeq	r0, r0, r0, lsr #32
 890:	00000018 	andeq	r0, r0, r8, lsl r0
 894:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 898:	00000000 	andeq	r0, r0, r0
 89c:	00000038 	andeq	r0, r0, r8, lsr r0
 8a0:	40080e41 	andmi	r0, r8, r1, asr #28
 8a4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 8a8:	00000001 	andeq	r0, r0, r1
 8ac:	0000000c 	andeq	r0, r0, ip
 8b0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8b4:	00000000 	andeq	r0, r0, r0
 8b8:	00000020 	andeq	r0, r0, r0, lsr #32
 8bc:	0000000c 	andeq	r0, r0, ip
 8c0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8c4:	00000000 	andeq	r0, r0, r0
 8c8:	00000020 	andeq	r0, r0, r0, lsr #32
 8cc:	0000000c 	andeq	r0, r0, ip
 8d0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8d4:	00000000 	andeq	r0, r0, r0
 8d8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8dc:	0000000c 	andeq	r0, r0, ip
 8e0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8e4:	00000000 	andeq	r0, r0, r0
 8e8:	0000001c 	andeq	r0, r0, ip, lsl r0
 8ec:	00000018 	andeq	r0, r0, r8, lsl r0
 8f0:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 8f4:	00000000 	andeq	r0, r0, r0
 8f8:	000000a8 	andeq	r0, r0, r8, lsr #1
 8fc:	40080e42 	andmi	r0, r8, r2, asr #28
 900:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 904:	00000001 	andeq	r0, r0, r1
 908:	0000000c 	andeq	r0, r0, ip
 90c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 910:	00000000 	andeq	r0, r0, r0
 914:	0000005c 	andeq	r0, r0, ip, asr r0
 918:	0000000c 	andeq	r0, r0, ip
 91c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 920:	00000000 	andeq	r0, r0, r0
 924:	0000005c 	andeq	r0, r0, ip, asr r0
 928:	0000000c 	andeq	r0, r0, ip
 92c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 930:	00000000 	andeq	r0, r0, r0
 934:	00000020 	andeq	r0, r0, r0, lsr #32
 938:	0000000c 	andeq	r0, r0, ip
 93c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 940:	00000000 	andeq	r0, r0, r0
 944:	00000020 	andeq	r0, r0, r0, lsr #32
 948:	0000000c 	andeq	r0, r0, ip
 94c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 950:	00000000 	andeq	r0, r0, r0
 954:	00000044 	andeq	r0, r0, r4, asr #32
 958:	0000000c 	andeq	r0, r0, ip
 95c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 960:	00000000 	andeq	r0, r0, r0
 964:	0000003a 	andeq	r0, r0, sl, lsr r0
 968:	0000000c 	andeq	r0, r0, ip
 96c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 970:	00000000 	andeq	r0, r0, r0
 974:	00000006 	andeq	r0, r0, r6
 978:	0000000c 	andeq	r0, r0, ip
 97c:	000005b0 			; <UNDEFINED> instruction: 0x000005b0
 980:	00000000 	andeq	r0, r0, r0
 984:	0000000a 	andeq	r0, r0, sl
 988:	0000000c 	andeq	r0, r0, ip
 98c:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 990:	7c020001 	stcvc	0, cr0, [r2], {1}
 994:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 998:	0000001c 	andeq	r0, r0, ip, lsl r0
 99c:	00000988 	andeq	r0, r0, r8, lsl #19
 9a0:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
 9a4:	00000154 	andeq	r0, r0, r4, asr r1
 9a8:	40100e41 	andsmi	r0, r0, r1, asr #28
 9ac:	85400484 	strbhi	r0, [r0, #-1156]	; 0x484
 9b0:	02864003 	addeq	r4, r6, #3
 9b4:	00018e40 	andeq	r8, r1, r0, asr #28
 9b8:	00000018 	andeq	r0, r0, r8, lsl r0
 9bc:	00000988 	andeq	r0, r0, r8, lsl #19
 9c0:	00000000 	andeq	r0, r0, r0
 9c4:	00000070 	andeq	r0, r0, r0, ror r0
 9c8:	40080e41 	andmi	r0, r8, r1, asr #28
 9cc:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 9d0:	00000001 	andeq	r0, r0, r1
 9d4:	0000000c 	andeq	r0, r0, ip
 9d8:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 9dc:	7c020001 	stcvc	0, cr0, [r2], {1}
 9e0:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 9e4:	00000018 	andeq	r0, r0, r8, lsl r0
 9e8:	000009d4 	ldrdeq	r0, [r0], -r4
 9ec:	0800105c 	stmdaeq	r0, {r2, r3, r4, r6, ip}
 9f0:	00000038 	andeq	r0, r0, r8, lsr r0
 9f4:	40080e41 	andmi	r0, r8, r1, asr #28
 9f8:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 9fc:	00000001 	andeq	r0, r0, r1
 a00:	0000000c 	andeq	r0, r0, ip
 a04:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 a08:	7c020001 	stcvc	0, cr0, [r2], {1}
 a0c:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 a10:	00000018 	andeq	r0, r0, r8, lsl r0
 a14:	00000a00 	andeq	r0, r0, r0, lsl #20
 a18:	08001094 	stmdaeq	r0, {r2, r4, r7, ip}
 a1c:	00000024 	andeq	r0, r0, r4, lsr #32
 a20:	40080e41 	andmi	r0, r8, r1, asr #28
 a24:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a28:	00000001 	andeq	r0, r0, r1
 a2c:	00000018 	andeq	r0, r0, r8, lsl r0
 a30:	00000a00 	andeq	r0, r0, r0, lsl #20
 a34:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 a38:	00000024 	andeq	r0, r0, r4, lsr #32
 a3c:	40080e41 	andmi	r0, r8, r1, asr #28
 a40:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a44:	00000001 	andeq	r0, r0, r1
 a48:	00000018 	andeq	r0, r0, r8, lsl r0
 a4c:	00000a00 	andeq	r0, r0, r0, lsl #20
 a50:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
 a54:	00000090 	muleq	r0, r0, r0
 a58:	40080e41 	andmi	r0, r8, r1, asr #28
 a5c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 a60:	00000001 	andeq	r0, r0, r1
 a64:	00000028 	andeq	r0, r0, r8, lsr #32
 a68:	00000a00 	andeq	r0, r0, r0, lsl #20
 a6c:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 a70:	000000a8 	andeq	r0, r0, r8, lsr #1
 a74:	40200e43 	eormi	r0, r0, r3, asr #28
 a78:	84400883 	strbhi	r0, [r0], #-2179	; 0x883
 a7c:	06854007 	streq	r4, [r5], r7
 a80:	40058640 	andmi	r8, r5, r0, asr #12
 a84:	88400487 	stmdahi	r0, {r0, r1, r2, r7, sl}^
 a88:	02894003 	addeq	r4, r9, #3
 a8c:	00018e40 	andeq	r8, r1, r0, asr #28
 a90:	00000018 	andeq	r0, r0, r8, lsl r0
 a94:	00000a00 	andeq	r0, r0, r0, lsl #20
 a98:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
 a9c:	00000038 	andeq	r0, r0, r8, lsr r0
 aa0:	40080e41 	andmi	r0, r8, r1, asr #28
 aa4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 aa8:	00000001 	andeq	r0, r0, r1
 aac:	0000001c 	andeq	r0, r0, ip, lsl r0
 ab0:	00000a00 	andeq	r0, r0, r0, lsl #20
 ab4:	0800124c 	stmdaeq	r0, {r2, r3, r6, r9, ip}
 ab8:	00000048 	andeq	r0, r0, r8, asr #32
 abc:	40100e41 	andsmi	r0, r0, r1, asr #28
 ac0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 ac4:	02854003 	addeq	r4, r5, #3
 ac8:	00018e40 	andeq	r8, r1, r0, asr #28
 acc:	0000001c 	andeq	r0, r0, ip, lsl r0
 ad0:	00000a00 	andeq	r0, r0, r0, lsl #20
 ad4:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
 ad8:	000000d0 	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 adc:	40100e41 	andsmi	r0, r0, r1, asr #28
 ae0:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 ae4:	02854003 	addeq	r4, r5, #3
 ae8:	00018e40 	andeq	r8, r1, r0, asr #28
 aec:	0000001c 	andeq	r0, r0, ip, lsl r0
 af0:	00000a00 	andeq	r0, r0, r0, lsl #20
 af4:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 af8:	00000084 	andeq	r0, r0, r4, lsl #1
 afc:	40100e41 	andsmi	r0, r0, r1, asr #28
 b00:	84400483 	strbhi	r0, [r0], #-1155	; 0x483
 b04:	02854003 	addeq	r4, r5, #3
 b08:	00018e40 	andeq	r8, r1, r0, asr #28
 b0c:	00000018 	andeq	r0, r0, r8, lsl r0
 b10:	00000a00 	andeq	r0, r0, r0, lsl #20
 b14:	080013e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip}
 b18:	00000024 	andeq	r0, r0, r4, lsr #32
 b1c:	40080e41 	andmi	r0, r8, r1, asr #28
 b20:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b24:	00000001 	andeq	r0, r0, r1
 b28:	0000000c 	andeq	r0, r0, ip
 b2c:	00000a00 	andeq	r0, r0, r0, lsl #20
 b30:	0800140c 	stmdaeq	r0, {r2, r3, sl, ip}
 b34:	0000001c 	andeq	r0, r0, ip, lsl r0
 b38:	00000018 	andeq	r0, r0, r8, lsl r0
 b3c:	00000a00 	andeq	r0, r0, r0, lsl #20
 b40:	08001428 	stmdaeq	r0, {r3, r5, sl, ip}
 b44:	00000040 	andeq	r0, r0, r0, asr #32
 b48:	40080e41 	andmi	r0, r8, r1, asr #28
 b4c:	8e400283 	cdphi	2, 4, cr0, cr0, cr3, {4}
 b50:	00000001 	andeq	r0, r0, r1
 b54:	00000024 	andeq	r0, r0, r4, lsr #32
 b58:	00000a00 	andeq	r0, r0, r0, lsl #20
 b5c:	08001468 	stmdaeq	r0, {r3, r5, r6, sl, ip}
 b60:	000002dc 	ldrdeq	r0, [r0], -ip
 b64:	40180e41 	andsmi	r0, r8, r1, asr #28
 b68:	81400680 	smlalbbhi	r0, r0, r0, r6	; <UNPREDICTABLE>
 b6c:	04844005 	streq	r4, [r4], #5
 b70:	40038540 	andmi	r8, r3, r0, asr #10
 b74:	8e400286 	cdphi	2, 4, cr0, cr0, cr6, {4}
 b78:	00000001 	andeq	r0, r0, r1
 b7c:	00000024 	andeq	r0, r0, r4, lsr #32
 b80:	00000a00 	andeq	r0, r0, r0, lsl #20
 b84:	08001744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip}
 b88:	000000c8 	andeq	r0, r0, r8, asr #1
 b8c:	40180e41 	andsmi	r0, r8, r1, asr #28
 b90:	84400683 	strbhi	r0, [r0], #-1667	; 0x683
 b94:	04854005 	streq	r4, [r5], #5
 b98:	40038640 	andmi	r8, r3, r0, asr #12
 b9c:	8e400287 	cdphi	2, 4, cr0, cr0, cr7, {4}
 ba0:	00000001 	andeq	r0, r0, r1
 ba4:	00000018 	andeq	r0, r0, r8, lsl r0
 ba8:	00000a00 	andeq	r0, r0, r0, lsl #20
 bac:	0800180c 	stmdaeq	r0, {r2, r3, fp, ip}
 bb0:	00000038 	andeq	r0, r0, r8, lsr r0
 bb4:	400c0e41 	andmi	r0, ip, r1, asr #28
 bb8:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 bbc:	018e4002 	orreq	r4, lr, r2
 bc0:	00000018 	andeq	r0, r0, r8, lsl r0
 bc4:	00000a00 	andeq	r0, r0, r0, lsl #20
 bc8:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
 bcc:	0000005c 	andeq	r0, r0, ip, asr r0
 bd0:	40080e41 	andmi	r0, r8, r1, asr #28
 bd4:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 bd8:	00000001 	andeq	r0, r0, r1
 bdc:	0000000c 	andeq	r0, r0, ip
 be0:	00000a00 	andeq	r0, r0, r0, lsl #20
 be4:	00000000 	andeq	r0, r0, r0
 be8:	00000002 	andeq	r0, r0, r2
 bec:	0000000c 	andeq	r0, r0, ip
 bf0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
 bf4:	7c020001 	stcvc	0, cr0, [r2], {1}
 bf8:	000d0c0e 	andeq	r0, sp, lr, lsl #24
 bfc:	00000018 	andeq	r0, r0, r8, lsl r0
 c00:	00000bec 	andeq	r0, r0, ip, ror #23
 c04:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
 c08:	00000030 	andeq	r0, r0, r0, lsr r0
 c0c:	400c0e41 	andmi	r0, ip, r1, asr #28
 c10:	85400384 	strbhi	r0, [r0, #-900]	; 0x384
 c14:	018e4002 	orreq	r4, lr, r2
 c18:	00000018 	andeq	r0, r0, r8, lsl r0
 c1c:	00000bec 	andeq	r0, r0, ip, ror #23
 c20:	080018d0 	stmdaeq	r0, {r4, r6, r7, fp, ip}
 c24:	00000024 	andeq	r0, r0, r4, lsr #32
 c28:	40080e41 	andmi	r0, r8, r1, asr #28
 c2c:	8e400284 	cdphi	2, 4, cr0, cr0, cr4, {4}
 c30:	00000001 	andeq	r0, r0, r1

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	4349564e 	movtmi	r5, #38478	; 0x964e
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	5152495f 	cmppl	r2, pc, asr r9
       8:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
       c:	436c656e 	cmnmi	ip, #461373440	; 0x1b800000
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	7300646d 	movwvc	r6, #1133	; 0x46d
      14:	6e497274 	mcrvs	2, 2, r7, cr9, cr4, {3}
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	00786564 	rsbseq	r6, r8, r4, ror #10
      1c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      24:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
      28:	64416563 	strbvs	r6, [r1], #-1379	; 0x563
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	45700073 	ldrbmi	r0, [r0, #-115]!	; 0x73
      34:	746e4970 	strbtvc	r4, [lr], #-2416	; 0x970
      38:	004e495f 	subeq	r4, lr, pc, asr r9

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	5645445f 			; <UNDEFINED> instruction: 0x5645445f

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	5f454349 	svcpl	0x00454349
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	4f464e49 	svcmi	0x00464e49
      48:	65446200 	strbvs	r6, [r4, #-512]	; 0x200
      4c:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
      54:	73750065 	cmnvc	r5, #101	; 0x65
      58:	626e4562 	rsbvs	r4, lr, #411041792	; 0x18800000
      5c:	00525349 	subseq	r5, r2, r9, asr #6
      60:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
      64:	575f454d 	ldrbpl	r4, [pc, -sp, asr #10]
      68:	00544941 	subseq	r4, r4, r1, asr #18
      6c:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      70:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      74:	50646e45 	rsbpl	r6, r4, r5, asr #28
      78:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
      7c:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
      80:	00657275 	rsbeq	r7, r5, r5, ror r2
      84:	49756664 	ldmdbmi	r5!, {r2, r5, r6, r9, sl, sp, lr}^
      88:	0074696e 	rsbseq	r6, r4, lr, ror #18
      8c:	44656e4f 	strbtmi	r6, [r5], #-3663	; 0xe4f
      90:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
      94:	6f747069 	svcvs	0x00747069
      98:	73750072 	cmnvc	r5, #114	; 0x72
      9c:	73755362 	cmnvc	r5, #-2013265919	; 0x88000001
      a0:	646e6570 	strbtvs	r6, [lr], #-1392	; 0x570
      a4:	53456200 	movtpl	r6, #20992	; 0x5200
      a8:	6e63464f 	cdpvs	6, 6, cr4, cr3, cr15, {2}
      ac:	73750074 	cmnvc	r5, #116	; 0x74
      b0:	73655262 	cmnvc	r5, #536870918	; 0x20000006
      b4:	00656d75 	rsbeq	r6, r5, r5, ror sp
      b8:	50535553 	subspl	r5, r3, r3, asr r5
      bc:	45444e45 	strbmi	r4, [r4, #-3653]	; 0xe45
      c0:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
      c4:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
      c8:	4154535f 	cmpmi	r4, pc, asr r3
      cc:	75005452 	strvc	r5, [r0, #-1106]	; 0x452
      d0:	65536273 	ldrbvs	r6, [r3, #-627]	; 0x273
      d4:	76654474 			; <UNDEFINED> instruction: 0x76654474
      d8:	46656369 	strbtmi	r6, [r5], -r9, ror #6
      dc:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
      e0:	43006572 	movwmi	r6, #1394	; 0x572
      e4:	4479706f 	ldrbtmi	r7, [r9], #-111	; 0x6f
      e8:	00617461 	rsbeq	r7, r1, r1, ror #8
      ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
      f0:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
      f4:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
      f8:	63616672 	cmnvs	r1, #119537664	; 0x7200000
      fc:	45440065 	strbmi	r0, [r4, #-101]	; 0x65
     100:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
     104:	4345525f 	movtmi	r5, #21087	; 0x525f
     108:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     10c:	5000544e 	andpl	r5, r0, lr, asr #8
     110:	5245574f 	subpl	r5, r5, #20709376	; 0x13c0000
     114:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     118:	632e6273 	teqvs	lr, #805306375	; 0x30000007
     11c:	62737500 	rsbsvs	r7, r3, #0, 10
     120:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     124:	6544676e 	strbvs	r6, [r4, #-1902]	; 0x76e
     128:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     12c:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     130:	62737500 	rsbsvs	r7, r3, #0, 10
     134:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
     138:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     13c:	73654465 	cmnvc	r5, #1694498816	; 0x65000000
     140:	70697263 	rsbvc	r7, r9, r3, ror #4
     144:	00726f74 	rsbseq	r6, r2, r4, ror pc
     148:	77425355 	smlsldvc	r5, r2, r5, r3
     14c:	65646e49 	strbvs	r6, [r4, #-3657]!	; 0xe49
     150:	76007378 			; <UNDEFINED> instruction: 0x76007378
     154:	00363175 	eorseq	r3, r6, r5, ror r1
     158:	20554e47 	subscs	r4, r5, r7, asr #28
     15c:	2e342043 	cdpcs	0, 3, cr2, cr4, cr3, {2}
     160:	20332e38 	eorscs	r2, r3, r8, lsr lr
     164:	34313032 	ldrtcc	r3, [r1], #-50	; 0x32
     168:	38323230 	ldmdacc	r2!, {r4, r5, r9, ip, sp}
     16c:	65722820 	ldrbvs	r2, [r2, #-2080]!	; 0x820
     170:	7361656c 	cmnvc	r1, #108, 10	; 0x1b000000
     174:	5b202965 	blpl	80a710 <__Stack_Size+0x80a310>
     178:	2f4d5241 	svccs	0x004d5241
     17c:	65626d65 	strbvs	r6, [r2, #-3429]!	; 0xd65
     180:	64656464 	strbtvs	r6, [r5], #-1124	; 0x464
     184:	385f342d 	ldmdacc	pc, {r0, r2, r3, r5, sl, ip, sp}^	; <UNPREDICTABLE>
     188:	6172622d 	cmnvs	r2, sp, lsr #4
     18c:	2068636e 	rsbcs	r6, r8, lr, ror #6
     190:	69766572 	ldmdbvs	r6!, {r1, r4, r5, r6, r8, sl, sp, lr}^
     194:	6e6f6973 	mcrvs	9, 3, r6, cr15, cr3, {3}
     198:	38303220 	ldmdacc	r0!, {r5, r9, ip, sp}
     19c:	5d323233 	lfmpl	f3, 4, [r2, #-204]!	; 0xffffff34
     1a0:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1a4:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1a8:	636d2d20 	cmnvs	sp, #32, 26	; 0x800
     1ac:	633d7570 	teqvs	sp, #112, 10	; 0x1c000000
     1b0:	6574726f 	ldrbvs	r7, [r4, #-623]!	; 0x26f
     1b4:	336d2d78 	cmncc	sp, #120, 26	; 0x1e00
     1b8:	746d2d20 	strbtvc	r2, [sp], #-3360	; 0xd20
     1bc:	626d7568 	rsbvs	r7, sp, #104, 10	; 0x1a000000
     1c0:	746e692d 	strbtvc	r6, [lr], #-2349	; 0x92d
     1c4:	6f777265 	svcvs	0x00777265
     1c8:	2d206b72 	vstmdbcs	r0!, {d6-<overflow reg d62>}
     1cc:	4f2d2067 	svcmi	0x002d2067
     1d0:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1d4:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     1d8:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1dc:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1e0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1e4:	662d2073 			; <UNDEFINED> instruction: 0x662d2073
     1e8:	61746164 	cmnvs	r4, r4, ror #2
     1ec:	6365732d 	cmnvs	r5, #-1275068416	; 0xb4000000
     1f0:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     1f4:	6f6c0073 	svcvs	0x006c0073
     1f8:	6920676e 	stmdbvs	r0!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}
     1fc:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
     200:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     204:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     208:	44676966 	strbtmi	r6, [r7], #-2406	; 0x966
     20c:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     210:	6f747069 	svcvs	0x00747069
     214:	53550072 	cmppl	r5, #114	; 0x72
     218:	65526242 	ldrbvs	r6, [r2, #-578]	; 0x242
     21c:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
     220:	53550074 	cmppl	r5, #116	; 0x74
     224:	4f4e5f42 	svcmi	0x004e5f42
     228:	45525f54 	ldrbmi	r5, [r2, #-3924]	; 0xf54
     22c:	00594441 	subseq	r4, r9, r1, asr #8
     230:	74734977 	ldrbtvc	r4, [r3], #-2423	; 0x977
     234:	45520072 	ldrbmi	r0, [r2, #-114]	; 0x72
     238:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     23c:	5458455f 	ldrbpl	r4, [r8], #-1375	; 0x55f
     240:	414e5245 	cmpmi	lr, r5, asr #4
     244:	6544004c 	strbvs	r0, [r4, #-76]	; 0x4c
     248:	65636976 	strbvs	r6, [r3, #-2422]!	; 0x976
     24c:	6261545f 	rsbvs	r5, r1, #1593835520	; 0x5f000000
     250:	7300656c 	movwvc	r6, #1388	; 0x56c
     254:	70757465 	rsbsvc	r7, r5, r5, ror #8
     258:	00425355 	subeq	r5, r2, r5, asr r3
     25c:	47627375 			; <UNDEFINED> instruction: 0x47627375
     260:	6f437465 	svcvs	0x00437465
     264:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     268:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     26c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     270:	746e4962 	strbtvc	r4, [lr], #-2402	; 0x962
     274:	6b636150 	blvs	18d87bc <__Stack_Size+0x18d83bc>
     278:	00464f53 	subeq	r4, r6, r3, asr pc
     27c:	666e4970 			; <UNDEFINED> instruction: 0x666e4970
     280:	616d726f 	cmnvs	sp, pc, ror #4
     284:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     288:	4d726300 	ldclmi	3, cr6, [r2, #-0]
     28c:	006b7361 	rsbeq	r7, fp, r1, ror #6
     290:	5f627355 	svcpl	0x00627355
     294:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
     298:	00687467 	rsbeq	r7, r8, r7, ror #8
     29c:	73655265 	cmnvc	r5, #1342177286	; 0x50000006
     2a0:	53656d75 	cmnpl	r5, #7488	; 0x1d40
     2a4:	61567465 	cmpvs	r6, r5, ror #8
     2a8:	4e49006c 	cdpmi	0, 4, cr0, cr9, cr12, {3}
     2ac:	46524554 			; <UNDEFINED> instruction: 0x46524554
     2b0:	5f454341 	svcpl	0x00454341
     2b4:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     2b8:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     2bc:	43770054 	cmnmi	r7, #84	; 0x54
     2c0:	0052544e 	subseq	r5, r2, lr, asr #8
     2c4:	46746567 	ldrbtmi	r6, [r4], -r7, ror #10
     2c8:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     2cc:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     2d0:	657a6953 	ldrbvs	r6, [sl, #-2387]!	; 0x953
     2d4:	4e4f5000 	cdpmi	0, 4, cr5, cr15, cr0, {0}
     2d8:	45445f45 	strbmi	r5, [r4, #-3909]	; 0xf45
     2dc:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
     2e0:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
     2e4:	62737500 	rsbsvs	r7, r3, #0, 10
     2e8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     2ec:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     2f0:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
     2f4:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
     2f8:	49564e00 	ldmdbmi	r6, {r9, sl, fp, lr}^
     2fc:	6e495f43 	cdpvs	15, 4, cr5, cr9, cr3, {2}
     300:	74537469 	ldrbvc	r7, [r3], #-1129	; 0x469
     304:	74637572 	strbtvc	r7, [r3], #-1394	; 0x572
     308:	00657275 	rsbeq	r7, r5, r5, ror r2
     30c:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     310:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     314:	74754f73 	ldrbtvc	r4, [r5], #-3955	; 0xf73
     318:	62735500 	rsbsvs	r5, r3, #0, 10
     31c:	664f775f 			; <UNDEFINED> instruction: 0x664f775f
     320:	74657366 	strbtvc	r7, [r5], #-870	; 0x366
     324:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     328:	61647055 	qdsubvs	r7, r5, r4
     32c:	79426574 	stmdbvc	r2, {r2, r4, r5, r6, r8, sl, sp, lr}^
     330:	75716552 	ldrbvc	r6, [r1, #-1362]!	; 0x552
     334:	00747365 	rsbseq	r7, r4, r5, ror #6
     338:	41545441 	cmpmi	r4, r1, asr #8
     33c:	44454843 	strbmi	r4, [r5], #-2115	; 0x843
     340:	62737500 	rsbsvs	r7, r3, #0, 10
     344:	61446f4e 	cmpvs	r4, lr, asr #30
     348:	65536174 	ldrbvs	r6, [r3, #-372]	; 0x174
     34c:	00707574 	rsbseq	r7, r0, r4, ror r5
     350:	4349564e 	movtmi	r5, #38478	; 0x964e
     354:	5152495f 	cmppl	r2, pc, asr r9
     358:	6e616843 	cdpvs	8, 6, cr6, cr1, cr3, {2}
     35c:	536c656e 	cmnpl	ip, #461373440	; 0x1b800000
     360:	72506275 	subsvc	r6, r0, #1342177287	; 0x50000007
     364:	69726f69 	ldmdbvs	r2!, {r0, r3, r5, r6, r8, r9, sl, fp, sp, lr}^
     368:	5f007974 	svcpl	0x00007974
     36c:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     370:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     374:	59545f54 	ldmdbpl	r4, {r2, r4, r6, r8, r9, sl, fp, ip, lr}^
     378:	6c004550 	cfstr32vs	mvfx4, [r0], {80}	; 0x50
     37c:	20676e6f 	rsbcs	r6, r7, pc, ror #28
     380:	69736e75 	ldmdbvs	r3!, {r0, r2, r4, r5, r6, r9, sl, fp, sp, lr}^
     384:	64656e67 	strbtvs	r6, [r5], #-3687	; 0xe67
     388:	746e6920 	strbtvc	r6, [lr], #-2336	; 0x920
     38c:	52544300 	subspl	r4, r4, #0, 6
     390:	00504c5f 	subseq	r4, r0, pc, asr ip
     394:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     398:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     39c:	006e4973 	rsbeq	r4, lr, r3, ror r9
     3a0:	72727543 	rsbsvc	r7, r2, #281018368	; 0x10c00000
     3a4:	5f746e65 	svcpl	0x00746e65
     3a8:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     3ac:	00657275 	rsbeq	r7, r5, r5, ror r2
     3b0:	61746f54 	cmnvs	r4, r4, asr pc
     3b4:	6f435f6c 	svcvs	0x00435f6c
     3b8:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     3bc:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     3c0:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     3c4:	52627375 	rsbpl	r7, r2, #-738197503	; 0xd4000001
     3c8:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     3cc:	62737500 	rsbsvs	r7, r3, #0, 10
     3d0:	49627344 	stmdbmi	r2!, {r2, r6, r8, r9, ip, sp, lr}^
     3d4:	73005253 	movwvc	r5, #595	; 0x253
     3d8:	74726f68 	ldrbtvc	r6, [r2], #-3944	; 0xf68
     3dc:	736e7520 	cmnvc	lr, #32, 10	; 0x8000000
     3e0:	656e6769 	strbvs	r6, [lr, #-1897]!	; 0x769
     3e4:	6e692064 	cdpvs	0, 6, cr2, cr9, cr4, {3}
     3e8:	53550074 	cmppl	r5, #116	; 0x74
     3ec:	52455f42 	subpl	r5, r5, #264	; 0x108
     3f0:	00524f52 	subseq	r4, r2, r2, asr pc
     3f4:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     3f8:	4f5f454d 	svcmi	0x005f454d
     3fc:	75004646 	strvc	r4, [r0, #-1606]	; 0x646
     400:	755f3631 	ldrbvc	r3, [pc, #-1585]	; fffffdd7 <BootRAM+0xef70578>
     404:	73550038 	cmpvc	r5, #56	; 0x38
     408:	435f7265 	cmpmi	pc, #1342177286	; 0x50000006
     40c:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
     410:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     414:	00657275 	rsbeq	r7, r5, r5, ror r2
     418:	77425355 	smlsldvc	r5, r2, r5, r3
     41c:	756c6156 	strbvc	r6, [ip, #-342]!	; 0x156
     420:	4f007365 	svcmi	0x00007365
     424:	52454854 	subpl	r4, r5, #84, 16	; 0x540000
     428:	4345525f 	movtmi	r5, #21087	; 0x525f
     42c:	45495049 	strbmi	r5, [r9, #-73]	; 0x49
     430:	6200544e 	andvs	r5, r0, #1308622848	; 0x4e000000
     434:	006c6f6f 	rsbeq	r6, ip, pc, ror #30
     438:	61725477 	cmnvs	r2, r7, ror r4
     43c:	6566736e 	strbvs	r7, [r6, #-878]!	; 0x36e
     440:	7a695372 	bvc	1a55210 <__Stack_Size+0x1a54e10>
     444:	75760065 	ldrbvc	r0, [r6, #-101]!	; 0x65
     448:	4e003233 	mcrmi	2, 0, r3, cr0, cr3, {1}
     44c:	5f434956 	svcpl	0x00434956
     450:	43515249 	cmpmi	r1, #-1879048188	; 0x90000004
     454:	6e6e6168 	powvsez	f6, f6, #0.0
     458:	5f006c65 	svcpl	0x00006c65
     45c:	67655277 			; <UNDEFINED> instruction: 0x67655277
     460:	006c6156 	rsbeq	r6, ip, r6, asr r1
     464:	65746e69 	ldrbvs	r6, [r4, #-3689]!	; 0xe69
     468:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     46c:	564e0065 	strbpl	r0, [lr], -r5, rrx
     470:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     474:	68435152 	stmdavs	r3, {r1, r4, r6, r8, ip, lr}^
     478:	656e6e61 	strbvs	r6, [lr, #-3681]!	; 0xe61
     47c:	6572506c 	ldrbvs	r5, [r2, #-108]!	; 0x6c
     480:	74706d65 	ldrbtvc	r6, [r0], #-3429	; 0xd65
     484:	506e6f69 	rsbpl	r6, lr, r9, ror #30
     488:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     48c:	00797469 	rsbseq	r7, r9, r9, ror #8
     490:	4349564e 	movtmi	r5, #38478	; 0x964e
     494:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     498:	70795474 	rsbsvc	r5, r9, r4, ror r4
     49c:	66654465 	strbtvs	r4, [r5], -r5, ror #8
     4a0:	72754300 	rsbsvc	r4, r5, #0, 6
     4a4:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     4a8:	6e6f435f 	mcrvs	3, 3, r4, cr15, cr15, {2}
     4ac:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     4b0:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     4b4:	75006e6f 	strvc	r6, [r0, #-3695]	; 0xe6f
     4b8:	70416273 	subvc	r6, r1, r3, ror r2
     4bc:	696e4970 	stmdbvs	lr!, {r4, r5, r6, r8, fp, lr}^
     4c0:	49770074 	ldmdbmi	r7!, {r2, r4, r5, r6}^
     4c4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     4c8:	74707572 	ldrbtvc	r7, [r0], #-1394	; 0x572
     4cc:	73614d5f 	cmnvc	r1, #6080	; 0x17c0
     4d0:	7375006b 	cmnvc	r5, #107	; 0x6b
     4d4:	74655362 	strbtvc	r5, [r5], #-866	; 0x362
     4d8:	70646e45 	rsbvc	r6, r4, r5, asr #28
     4dc:	746e696f 	strbtvc	r6, [lr], #-2415	; 0x96f
     4e0:	74616546 	strbtvc	r6, [r1], #-1350	; 0x546
     4e4:	00657275 	rsbeq	r7, r5, r5, ror r2
     4e8:	73616c43 	cmnvc	r1, #17152	; 0x4300
     4ec:	65475f73 	strbvs	r5, [r7, #-3955]	; 0xf73
     4f0:	6e495f74 	mcrvs	15, 2, r5, cr9, cr4, {3}
     4f4:	66726574 			; <UNDEFINED> instruction: 0x66726574
     4f8:	5f656361 	svcpl	0x00656361
     4fc:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     500:	00676e69 	rsbeq	r6, r7, r9, ror #28
     504:	55756664 	ldrbpl	r6, [r5, #-1636]!	; 0x664
     508:	74616470 	strbtvc	r6, [r1], #-1136	; 0x470
     50c:	52794265 	rsbspl	r4, r9, #1342177286	; 0x50000006
     510:	74657365 	strbtvc	r7, [r5], #-869	; 0x365
     514:	7a697300 	bvc	1a5d11c <__Stack_Size+0x1a5cd1c>
     518:	70797465 	rsbsvc	r7, r9, r5, ror #8
     51c:	6c430065 	mcrrvs	0, 6, r0, r3, cr5
     520:	5f737361 	svcpl	0x00737361
     524:	61746144 	cmnvs	r4, r4, asr #2
     528:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     52c:	70007075 	andvc	r7, r0, r5, ror r0
     530:	706f7250 	rsbvc	r7, pc, r0, asr r2	; <UNPREDICTABLE>
     534:	79747265 	ldmdbvc	r4!, {r0, r2, r5, r6, r9, ip, sp, lr}^
     538:	42535500 	subsmi	r5, r3, #0, 10
     53c:	696e495f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, lr}^
     540:	445f0074 	ldrbmi	r0, [pc], #-116	; 548 <__Stack_Size+0x148>
     544:	43495645 	movtmi	r5, #38469	; 0x9645
     548:	54535f45 	ldrbpl	r5, [r3], #-3909	; 0xf45
     54c:	00455441 	subeq	r5, r5, r1, asr #8
     550:	62425355 	subvs	r5, r2, #1409286145	; 0x54000001
     554:	7165526d 	cmnvc	r5, sp, ror #4
     558:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
     55c:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
     560:	62737500 	rsbsvs	r7, r3, #0, 10
     564:	65776f50 	ldrbvs	r6, [r7, #-3920]!	; 0xf50
     568:	006e4f72 	rsbeq	r4, lr, r2, ror pc
     56c:	6f697067 	svcvs	0x00697067
     570:	6972775f 	ldmdbvs	r2!, {r0, r1, r2, r3, r4, r6, r8, r9, sl, ip, sp, lr}^
     574:	625f6574 	subsvs	r6, pc, #116, 10	; 0x1d000000
     578:	52007469 	andpl	r7, r0, #1761607680	; 0x69000000
     57c:	5f504578 	svcpl	0x00504578
     580:	66667562 	strbtvs	r7, [r6], -r2, ror #10
     584:	52007265 	andpl	r7, r0, #1342177286	; 0x50000006
     588:	4d555345 	ldclmi	3, cr5, [r5, #-276]	; 0xfffffeec
     58c:	53455f45 	movtpl	r5, #24389	; 0x5f45
     590:	4400464f 	strmi	r4, [r0], #-1615	; 0x64f
     594:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     598:	6f747069 	svcvs	0x00747069
     59c:	69535f72 	ldmdbvs	r3, {r1, r4, r5, r6, r8, r9, sl, fp, ip, lr}^
     5a0:	5500657a 	strpl	r6, [r0, #-1402]	; 0x57a
     5a4:	5f726573 	svcpl	0x00726573
     5a8:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     5ac:	63697665 	cmnvs	r9, #105906176	; 0x6500000
     5b0:	61654665 	cmnvs	r5, r5, ror #12
     5b4:	65727574 	ldrbvs	r7, [r2, #-1396]!	; 0x574
     5b8:	65735500 	ldrbvs	r5, [r3, #-1280]!	; 0x500
     5bc:	65535f72 	ldrbvs	r5, [r3, #-3954]	; 0xf72
     5c0:	6e6f4374 	mcrvs	3, 3, r4, cr15, cr4, {3}
     5c4:	75676966 	strbvc	r6, [r7, #-2406]!	; 0x966
     5c8:	69746172 	ldmdbvs	r4!, {r1, r4, r5, r6, r8, sp, lr}^
     5cc:	43006e6f 	movwmi	r6, #3695	; 0xe6f
     5d0:	72746e6f 	rsbsvc	r6, r4, #1776	; 0x6f0
     5d4:	74536c6f 	ldrbvc	r6, [r3], #-3183	; 0xc6f
     5d8:	00657461 	rsbeq	r7, r5, r1, ror #8
     5dc:	534c4146 	movtpl	r4, #49478	; 0xc146
     5e0:	73550045 	cmpvc	r5, #69	; 0x45
     5e4:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
     5e8:	6e497465 	cdpvs	4, 4, cr7, cr9, cr5, {3}
     5ec:	66726574 			; <UNDEFINED> instruction: 0x66726574
     5f0:	00656361 	rsbeq	r6, r5, r1, ror #6
     5f4:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
     5f8:	505f6563 	subspl	r6, pc, r3, ror #10
     5fc:	65706f72 	ldrbvs	r6, [r0, #-3954]!	; 0xf72
     600:	00797472 	rsbseq	r7, r9, r2, ror r4
     604:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     608:	4f5f454d 	svcmi	0x005f454d
     60c:	7375004e 	cmnvc	r5, #78	; 0x4e
     610:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     614:	636e7546 	cmnvs	lr, #293601280	; 0x11800000
     618:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
     61c:	65446c61 	strbvs	r6, [r4, #-3169]	; 0xc61
     620:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     624:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     628:	72754300 	rsbsvc	r4, r5, #0, 6
     62c:	746e6572 	strbtvc	r6, [lr], #-1394	; 0x572
     630:	746c415f 	strbtvc	r4, [ip], #-351	; 0x15f
     634:	616e7265 	cmnvs	lr, r5, ror #4
     638:	65536574 	ldrbvs	r6, [r3, #-1396]	; 0x574
     63c:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     640:	73750067 	cmnvc	r5, #103	; 0x67
     644:	74614462 	strbtvc	r4, [r1], #-1122	; 0x462
     648:	74655361 	strbtvc	r5, [r5], #-865	; 0x361
     64c:	75007075 	strvc	r7, [r0, #-117]	; 0x75
     650:	6769736e 	strbvs	r7, [r9, -lr, ror #6]!
     654:	2064656e 	rsbcs	r6, r4, lr, ror #10
     658:	72616863 	rsbvc	r6, r1, #6488064	; 0x630000
     65c:	53555f00 	cmppl	r5, #0, 30
     660:	535f5245 	cmppl	pc, #1342177284	; 0x50000004
     664:	444e4154 	strbmi	r4, [lr], #-340	; 0x154
     668:	5f445241 	svcpl	0x00445241
     66c:	55514552 	ldrbpl	r4, [r1, #-1362]	; 0x552
     670:	53545345 	cmppl	r4, #335544321	; 0x14000001
     674:	42535500 	subsmi	r5, r3, #0, 10
     678:	5f504c5f 	svcpl	0x00504c5f
     67c:	314e4143 	cmpcc	lr, r3, asr #2
     680:	3058525f 	subscc	r5, r8, pc, asr r2
     684:	5152495f 	cmppl	r2, pc, asr r9
     688:	646e6148 	strbtvs	r6, [lr], #-328	; 0x148
     68c:	0072656c 	rsbseq	r6, r2, ip, ror #10
     690:	616c6564 	cmnvs	ip, r4, ror #10
     694:	73550079 	cmpvc	r5, #121	; 0x79
     698:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
     69c:	74537465 	ldrbvc	r7, [r3], #-1125	; 0x465
     6a0:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     6a4:	6f687300 	svcvs	0x00687300
     6a8:	69207472 	stmdbvs	r0!, {r1, r4, r5, r6, sl, ip, sp, lr}
     6ac:	7500746e 	strvc	r7, [r0, #-1134]	; 0x46e
     6b0:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     6b4:	6e754662 	cdpvs	6, 7, cr4, cr5, cr2, {3}
     6b8:	6f697463 	svcvs	0x00697463
     6bc:	446c616e 	strbtmi	r6, [ip], #-366	; 0x16e
     6c0:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     6c4:	6f747069 	svcvs	0x00747069
     6c8:	73550072 	cmpvc	r5, #114	; 0x72
     6cc:	475f7265 	ldrbmi	r7, [pc, -r5, ror #4]
     6d0:	6f437465 	svcvs	0x00437465
     6d4:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     6d8:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     6dc:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     6e0:	55534552 	ldrbpl	r4, [r3, #-1362]	; 0x552
     6e4:	4c5f454d 	cfldr64mi	mvdx4, [pc], {77}	; 0x4d
     6e8:	52455441 	subpl	r5, r5, #1090519040	; 0x41000000
     6ec:	62737500 	rsbsvs	r7, r3, #0, 10
     6f0:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     6f4:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     6f8:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     6fc:	74746553 	ldrbtvc	r6, [r4], #-1363	; 0x553
     700:	00676e69 	rsbeq	r6, r7, r9, ror #28
     704:	73616c43 	cmnvc	r1, #17152	; 0x4300
     708:	6f4e5f73 	svcvs	0x004e5f73
     70c:	61746144 	cmnvs	r4, r4, asr #2
     710:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
     714:	6e007075 	mcrvs	0, 0, r7, cr0, cr5, {3}
     718:	49636976 	stmdbmi	r3!, {r1, r2, r4, r5, r6, r8, fp, sp, lr}^
     71c:	0074696e 	rsbseq	r6, r4, lr, ror #18
     720:	6c727443 	cfldrdvs	mvd7, [r2], #-268	; 0xfffffef4
     724:	666e495f 			; <UNDEFINED> instruction: 0x666e495f
     728:	6552006f 	ldrbvs	r0, [r2, #-111]	; 0x6f
     72c:	656d7573 	strbvs	r7, [sp, #-1395]!	; 0x573
     730:	73750053 	cmnvc	r5, #83	; 0x53
     734:	74655362 	strbtvc	r5, [r5], #-866	; 0x362
     738:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
     73c:	63616672 	cmnvs	r1, #119537664	; 0x7200000
     740:	525f0065 	subspl	r0, pc, #101	; 0x65
     744:	4c555345 	mrrcmi	3, 4, r5, r5, cr5	; <UNPREDICTABLE>
     748:	52540054 	subspl	r0, r4, #84	; 0x54
     74c:	5f004555 	svcpl	0x00004555
     750:	49564544 	ldmdbmi	r6, {r2, r6, r8, sl, lr}^
     754:	505f4543 	subspl	r4, pc, r3, asr #10
     758:	00504f52 	subseq	r4, r0, r2, asr pc
     75c:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     760:	6f437465 	svcvs	0x00437465
     764:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
     768:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
     76c:	006e6f69 	rsbeq	r6, lr, r9, ror #30
     770:	61656c43 	cmnvs	r5, r3, asr #24
     774:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
     778:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     77c:	74754f5f 	ldrbtvc	r4, [r5], #-3935	; 0xf5f
     780:	42535500 	subsmi	r5, r3, #0, 10
     784:	534e555f 	movtpl	r5, #58719	; 0xe55f
     788:	4f505055 	svcmi	0x00505055
     78c:	61005452 	tstvs	r0, r2, asr r4
     790:	6553746c 	ldrbvs	r7, [r3, #-1132]	; 0x46c
     794:	6e697474 	mcrvs	4, 3, r7, cr9, cr4, {3}
     798:	65530067 	ldrbvs	r0, [r3, #-103]	; 0x67
     79c:	52504574 	subspl	r4, r0, #116, 10	; 0x1d000000
     7a0:	756f4378 	strbvc	r4, [pc, #-888]!	; 430 <__Stack_Size+0x30>
     7a4:	5000746e 	andpl	r7, r0, lr, ror #8
     7a8:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
     7ac:	535f7373 	cmppl	pc, #-872415231	; 0xcc000001
     7b0:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     7b4:	4e495f73 	mcrmi	15, 2, r5, cr9, cr3, {3}
     7b8:	6f725000 	svcvs	0x00725000
     7bc:	73736563 	cmnvc	r3, #415236096	; 0x18c00000
     7c0:	6174535f 	cmnvs	r4, pc, asr r3
     7c4:	5f737574 	svcpl	0x00737574
     7c8:	0054554f 	subseq	r5, r4, pc, asr #10
     7cc:	52627375 	rsbpl	r7, r2, #-738197503	; 0xd4000001
     7d0:	6d757365 	ldclvs	3, cr7, [r5, #-404]!	; 0xfffffe6c
     7d4:	696e4965 	stmdbvs	lr!, {r0, r2, r5, r6, r8, fp, lr}^
     7d8:	445f0074 	ldrbmi	r0, [pc], #-116	; 7e0 <__Stack_Size+0x3e0>
     7dc:	43495645 	movtmi	r5, #38469	; 0x9645
     7e0:	73750045 	cmnvc	r5, #69	; 0x45
     7e4:	62734462 	rsbsvs	r4, r3, #1644167168	; 0x62000000
     7e8:	00737542 	rsbseq	r7, r3, r2, asr #10
     7ec:	49704570 	ldmdbmi	r0!, {r4, r5, r6, r8, sl, lr}^
     7f0:	4f5f746e 	svcmi	0x005f746e
     7f4:	72005455 	andvc	r5, r0, #1426063360	; 0x55000000
     7f8:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
     7fc:	45007473 	strmi	r7, [r0, #-1139]	; 0x473
     800:	4f50444e 	svcmi	0x0050444e
     804:	5f544e49 	svcpl	0x00544e49
     808:	49434552 	stmdbmi	r3, {r1, r4, r6, r8, sl, lr}^
     80c:	4e454950 	mcrmi	9, 2, r4, cr5, cr0, {2}
     810:	73750054 	cmnvc	r5, #84	; 0x54
     814:	696e4962 	stmdbvs	lr!, {r1, r5, r6, r8, fp, lr}^
     818:	53550074 	cmppl	r5, #116	; 0x74
     81c:	654c7742 	strbvs	r7, [ip, #-1858]	; 0x742
     820:	6874676e 	ldmdavs	r4!, {r1, r2, r3, r5, r6, r8, r9, sl, sp, lr}^
     824:	73750073 	cmnvc	r5, #115	; 0x73
     828:	74654762 	strbtvc	r4, [r5], #-1890	; 0x762
     82c:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     830:	6544676e 	strbvs	r6, [r4, #-1902]	; 0x76e
     834:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     838:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     83c:	61745300 	cmnvs	r4, r0, lsl #6
     840:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
     844:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
     848:	73654474 	cmnvc	r5, #116, 8	; 0x74000000
     84c:	70697263 	rsbvc	r7, r9, r3, ror #4
     850:	44726f74 	ldrbtmi	r6, [r2], #-3956	; 0xf74
     854:	00617461 	rsbeq	r7, r1, r1, ror #8
     858:	464e4f43 	strbmi	r4, [lr], -r3, asr #30
     85c:	52554749 	subspl	r4, r5, #19136512	; 0x1240000
     860:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     864:	6f506273 	svcvs	0x00506273
     868:	4f726577 	svcmi	0x00726577
     86c:	43006666 	movwmi	r6, #1638	; 0x666
     870:	65727275 	ldrbvs	r7, [r2, #-629]!	; 0x275
     874:	495f746e 	ldmdbmi	pc, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^	; <UNPREDICTABLE>
     878:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     87c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     880:	62737500 	rsbsvs	r7, r3, #0, 10
     884:	49746547 	ldmdbmi	r4!, {r0, r1, r2, r6, r8, sl, sp, lr}^
     888:	7265746e 	rsbvc	r7, r5, #1845493760	; 0x6e000000
     88c:	65636166 	strbvs	r6, [r3, #-358]!	; 0x166
     890:	5f387500 	svcpl	0x00387500
     894:	43627375 	cmnmi	r2, #-738197503	; 0xd4000001
     898:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
     89c:	73654467 	cmnvc	r5, #1728053248	; 0x67000000
     8a0:	70697263 	rsbvc	r7, r9, r3, ror #4
     8a4:	44726f74 	ldrbtmi	r6, [r2], #-3956	; 0xf74
     8a8:	41005546 	tstmi	r0, r6, asr #10
     8ac:	45524444 	ldrbmi	r4, [r2, #-1092]	; 0x444
     8b0:	44455353 	strbmi	r5, [r5], #-851	; 0x353
     8b4:	53455200 	movtpl	r5, #20992	; 0x5200
     8b8:	5f454d55 	svcpl	0x00454d55
     8bc:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
     8c0:	4c414e52 	mcrrmi	14, 5, r4, r1, cr2
     8c4:	45525f00 	ldrbmi	r5, [r2, #-3840]	; 0xf00
     8c8:	454d5553 	strbmi	r5, [sp, #-1363]	; 0x553
     8cc:	4154535f 	cmpmi	r4, pc, asr r3
     8d0:	55004554 	strpl	r4, [r0, #-1364]	; 0x554
     8d4:	535f4253 	cmppl	pc, #805306373	; 0x30000005
     8d8:	45434355 	strbmi	r4, [r3, #-853]	; 0x355
     8dc:	55005353 	strpl	r5, [r0, #-851]	; 0x353
     8e0:	4e4f434e 	cdpmi	3, 4, cr4, cr15, cr14, {2}
     8e4:	5443454e 	strbpl	r4, [r3], #-1358	; 0x54e
     8e8:	75004445 	strvc	r4, [r0, #-1093]	; 0x445
     8ec:	65476273 	strbvs	r6, [r7, #-627]	; 0x273
     8f0:	61745374 	cmnvs	r4, r4, ror r3
     8f4:	00737574 	rsbseq	r7, r3, r4, ror r5
     8f8:	444e455f 	strbmi	r4, [lr], #-1375	; 0x55f
     8fc:	4e494f50 	mcrmi	15, 2, r4, cr9, cr0, {2}
     900:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
     904:	75004f46 	strvc	r4, [r0, #-3910]	; 0xf46
     908:	6c436273 	sfmvs	f6, 2, [r3], {115}	; 0x73
     90c:	46726165 	ldrbtmi	r6, [r2], -r5, ror #2
     910:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
     914:	54006572 	strpl	r6, [r0], #-1394	; 0x572
     918:	6c61746f 	cfstrdvs	mvd7, [r1], #-444	; 0xfffffe44
     91c:	646e455f 	strbtvs	r4, [lr], #-1375	; 0x55f
     920:	6e696f70 	mcrvs	15, 3, r6, cr9, cr0, {3}
     924:	3a430074 	bcc	10c0afc <__Stack_Size+0x10c06fc>
     928:	6573555c 	ldrbvs	r5, [r3, #-1372]!	; 0x55c
     92c:	725c7372 	subsvc	r7, ip, #-939524095	; 0xc8000001
     930:	72616c63 	rsbvc	r6, r1, #25344	; 0x6300
     934:	6f445c6b 	svcvs	0x00445c6b
     938:	656d7563 	strbvs	r7, [sp, #-1379]!	; 0x563
     93c:	5c73746e 	cfldrdpl	mvd7, [r3], #-440	; 0xfffffe48
     940:	75647241 	strbvc	r7, [r4, #-577]!	; 0x241
     944:	5c6f6e69 	stclpl	14, cr6, [pc], #-420	; 7a8 <__Stack_Size+0x3a8>
     948:	336d7473 	cmncc	sp, #1929379840	; 0x73000000
     94c:	69756432 	ldmdbvs	r5!, {r1, r4, r5, sl, sp, lr}^
     950:	622d6f6e 	eorvs	r6, sp, #440	; 0x1b8
     954:	6c746f6f 	ldclvs	15, cr6, [r4], #-444	; 0xfffffe44
     958:	6564616f 	strbvs	r6, [r4, #-367]!	; 0x16f
     95c:	44475c72 	strbmi	r5, [r7], #-3186	; 0xc72
     960:	31463233 	cmpcc	r6, r3, lsr r2
     964:	706f4300 	rsbvc	r4, pc, r0, lsl #6
     968:	756f5279 	strbvc	r5, [pc, #-633]!	; 6f7 <__Stack_Size+0x2f7>
     96c:	656e6974 	strbvs	r6, [lr, #-2420]!	; 0x974
     970:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     974:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     978:	696c6156 	stmdbvs	ip!, {r1, r2, r4, r6, r8, sp, lr}^
     97c:	6f6e0064 	svcvs	0x006e0064
     980:	6e696874 	mcrvs	8, 3, r6, cr9, cr4, {3}
     984:	6f725067 	svcvs	0x00725067
     988:	38750063 	ldmdacc	r5!, {r0, r1, r5, r6}^
     98c:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     990:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     994:	6556676e 	ldrbvs	r6, [r6, #-1902]	; 0x76e
     998:	726f646e 	rsbvc	r6, pc, #1845493760	; 0x6e000000
     99c:	5f387500 	svcpl	0x00387500
     9a0:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9a4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9a8:	746e4967 	strbtvc	r4, [lr], #-2407	; 0x967
     9ac:	61667265 	cmnvs	r6, r5, ror #4
     9b0:	75006563 	strvc	r6, [r0, #-1379]	; 0x563
     9b4:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     9b8:	76654462 	strbtvc	r4, [r5], -r2, ror #8
     9bc:	44656369 	strbtmi	r6, [r5], #-873	; 0x369
     9c0:	72637365 	rsbvc	r7, r3, #-1811939327	; 0x94000001
     9c4:	6f747069 	svcvs	0x00747069
     9c8:	55464472 	strbpl	r4, [r6, #-1138]	; 0x472
     9cc:	5f387500 	svcpl	0x00387500
     9d0:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9d4:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9d8:	72655367 	rsbvc	r5, r5, #-1677721599	; 0x9c000001
     9dc:	006c6169 	rsbeq	r6, ip, r9, ror #2
     9e0:	755f3875 	ldrbvc	r3, [pc, #-2165]	; 173 <_Minimum_Stack_Size+0x73>
     9e4:	74536273 	ldrbvc	r6, [r3], #-627	; 0x273
     9e8:	676e6972 			; <UNDEFINED> instruction: 0x676e6972
     9ec:	30746c41 	rsbscc	r6, r4, r1, asr #24
     9f0:	5f387500 	svcpl	0x00387500
     9f4:	53627375 	cmnpl	r2, #-738197503	; 0xd4000001
     9f8:	6e697274 	mcrvs	2, 3, r7, cr9, cr4, {3}
     9fc:	746c4167 	strbtvc	r4, [ip], #-359	; 0x167
     a00:	38750031 	ldmdacc	r5!, {r0, r4, r5}^
     a04:	6273755f 	rsbsvs	r7, r3, #398458880	; 0x17c00000
     a08:	69727453 	ldmdbvs	r2!, {r0, r1, r4, r6, sl, ip, sp, lr}^
     a0c:	6c41676e 	mcrrvs	7, 6, r6, r1, cr14
     a10:	75003274 	strvc	r3, [r0, #-628]	; 0x274
     a14:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a18:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a1c:	50676e69 	rsbpl	r6, r7, r9, ror #28
     a20:	75646f72 	strbvc	r6, [r4, #-3954]!	; 0xf72
     a24:	75007463 	strvc	r7, [r0, #-1123]	; 0x463
     a28:	73755f38 	cmnvc	r5, #56, 30	; 0xe0
     a2c:	72745362 	rsbsvc	r5, r4, #-2013265919	; 0x88000001
     a30:	4c676e69 	stclmi	14, cr6, [r7], #-420	; 0xfffffe5c
     a34:	49676e61 	stmdbmi	r7!, {r0, r5, r6, r9, sl, fp, sp, lr}^
     a38:	73750064 	cmnvc	r5, #100	; 0x64
     a3c:	65645f62 	strbvs	r5, [r4, #-3938]!	; 0xf62
     a40:	69726373 	ldmdbvs	r2!, {r0, r1, r4, r5, r6, r8, r9, sp, lr}^
     a44:	726f7470 	rsbvc	r7, pc, #112, 8	; 0x70000000
     a48:	6400632e 	strvs	r6, [r0], #-814	; 0x32e
     a4c:	69467566 	stmdbvs	r6, {r1, r2, r5, r6, r8, sl, ip, sp, lr}^
     a50:	6873696e 	ldmdavs	r3!, {r1, r2, r3, r5, r6, r8, fp, sp, lr}^
     a54:	6f6c7055 	svcvs	0x006c7055
     a58:	6a006461 	bvs	19be4 <__Stack_Size+0x197e4>
     a5c:	54706d75 	ldrbtpl	r6, [r0], #-3445	; 0xd75
     a60:	6573556f 	ldrbvs	r5, [r3, #-1391]!	; 0x56f
     a64:	68630072 	stmdavs	r3!, {r1, r4, r5, r6}^
     a68:	556b6365 	strbpl	r6, [fp, #-869]!	; 0x365
     a6c:	43726573 	cmnmi	r2, #482344960	; 0x1cc00000
     a70:	0065646f 	rsbeq	r6, r5, pc, ror #8
     a74:	74737973 	ldrbtvc	r7, [r3], #-2419	; 0x973
     a78:	65526d65 	ldrbvs	r6, [r2, #-3429]	; 0xd65
     a7c:	00746573 	rsbseq	r6, r4, r3, ror r5
     a80:	64616572 	strbtvs	r6, [r1], #-1394	; 0x572
     a84:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     a88:	74536e6f 	ldrbvc	r6, [r3], #-3695	; 0xe6f
     a8c:	00657461 	rsbeq	r7, r5, r1, ror #8
     a90:	75746573 	ldrbvc	r6, [r4, #-1395]!	; 0x573
     a94:	414c4670 	hvcmi	50272	; 0xc460
     a98:	73004853 	movwvc	r4, #2131	; 0x853
     a9c:	70757465 	rsbsvc	r7, r5, r5, ror #8
     aa0:	004b4c43 	subeq	r4, fp, r3, asr #24
     aa4:	6e69616d 	powvsez	f6, f1, #5.0
     aa8:	74657300 	strbtvc	r7, [r5], #-768	; 0x300
     aac:	454c7075 	strbmi	r7, [ip, #-117]	; 0x75
     ab0:	646e4144 	strbtvs	r4, [lr], #-324	; 0x144
     ab4:	74747542 	ldrbtvc	r7, [r4], #-1346	; 0x542
     ab8:	6e006e6f 	cdpvs	14, 0, cr6, cr0, cr15, {3}
     abc:	73755f6f 	cmnvc	r5, #444	; 0x1bc
     ac0:	6a5f7265 	bvs	17dd45c <__Stack_Size+0x17dd05c>
     ac4:	00706d75 	rsbseq	r6, r0, r5, ror sp
     ac8:	6e69616d 	powvsez	f6, f1, #5.0
     acc:	7300632e 	movwvc	r6, #814	; 0x32e
     ad0:	65747379 	ldrbvs	r7, [r4, #-889]!	; 0x379
     ad4:	7261486d 	rsbvc	r4, r1, #7143424	; 0x6d0000
     ad8:	73655264 	cmnvc	r5, #100, 4	; 0x40000006
     adc:	64007465 	strvs	r7, [r0], #-1125	; 0x465
     ae0:	79616c65 	stmdbvc	r1!, {r0, r2, r5, r6, sl, fp, sp, lr}^
     ae4:	756f635f 	strbvc	r6, [pc, #-863]!	; 78d <__Stack_Size+0x38d>
     ae8:	7300746e 	movwvc	r7, #1134	; 0x46e
     aec:	626f7274 	rsbvs	r7, pc, #116, 4	; 0x40000007
     af0:	6e695065 	cdpvs	0, 6, cr5, cr9, cr5, {3}
     af4:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     af8:	6f6c7055 	svcvs	0x006c7055
     afc:	74536461 	ldrbvc	r6, [r3], #-1121	; 0x461
     b00:	65747261 	ldrbvs	r7, [r4, #-609]!	; 0x261
     b04:	43490064 	movtmi	r0, #36964	; 0x9064
     b08:	74005250 	strvc	r5, [r0], #-592	; 0x250
     b0c:	7573706d 	ldrbvc	r7, [r3, #-109]!	; 0x6d
     b10:	77720062 	ldrbvc	r0, [r2, -r2, rrx]!
     b14:	6c61566d 	stclvs	6, cr5, [r1], #-436	; 0xfffffe4c
     b18:	50534900 	subspl	r4, r3, r0, lsl #18
     b1c:	65720052 	ldrbvs	r0, [r2, #-82]!	; 0x52
     b20:	69506461 	ldmdbvs	r0, {r0, r5, r6, sl, sp, lr}^
     b24:	6c66006e 	stclvs	0, cr0, [r6], #-440	; 0xfffffe48
     b28:	45687361 	strbmi	r7, [r8, #-865]!	; 0x361
     b2c:	65736172 	ldrbvs	r6, [r3, #-370]!	; 0x172
     b30:	65676150 	strbvs	r6, [r7, #-336]!	; 0x150
     b34:	61720073 	cmnvs	r2, r3, ror r0
     b38:	72006574 	andvc	r6, r0, #116, 10	; 0x1d000000
     b3c:	00424353 	subeq	r4, r2, r3, asr r3
     b40:	72706d74 	rsbsvc	r6, r0, #116, 26	; 0x1d00
     b44:	73006765 	movwvc	r6, #1893	; 0x765
     b48:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     b4c:	42504100 	subsmi	r4, r0, #0, 2
     b50:	54535232 	ldrbpl	r5, [r3], #-562	; 0x232
     b54:	6d740052 	ldclvs	0, cr0, [r4, #-328]!	; 0xfffffeb8
     b58:	65727070 	ldrbvs	r7, [r2, #-112]!	; 0x70
     b5c:	616c6600 	cmnvs	ip, r0, lsl #12
     b60:	6e556873 	mrcvs	8, 2, r6, cr5, cr3, {3}
     b64:	6b636f6c 	blvs	18dc91c <__Stack_Size+0x18dc51c>
     b68:	74656700 	strbtvc	r6, [r5], #-1792	; 0x700
     b6c:	73616c46 	cmnvc	r1, #17920	; 0x4600
     b70:	646e4568 	strbtvs	r4, [lr], #-1384	; 0x568
     b74:	41464200 	mrsmi	r4, (UNDEF: 102)
     b78:	766e0052 			; <UNDEFINED> instruction: 0x766e0052
     b7c:	69446369 	stmdbvs	r4, {r0, r3, r5, r6, r8, r9, sp, lr}^
     b80:	6c626173 	stfvse	f6, [r2], #-460	; 0xfffffe34
     b84:	746e4965 	strbtvc	r4, [lr], #-2405	; 0x965
     b88:	75727265 	ldrbvc	r7, [r2, #-613]!	; 0x265
     b8c:	00737470 	rsbseq	r7, r3, r0, ror r4
     b90:	534d5f5f 	movtpl	r5, #57183	; 0xdf5f
     b94:	534d5f52 	movtpl	r5, #57170	; 0xdf52
     b98:	54560050 	ldrbpl	r0, [r6], #-80	; 0x50
     b9c:	6a00524f 	bvs	154e0 <__Stack_Size+0x150e0>
     ba0:	41706d75 	cmnmi	r0, r5, ror sp
     ba4:	00726464 	rsbseq	r6, r2, r4, ror #8
     ba8:	5f434352 	svcpl	0x00434352
     bac:	53676552 	cmnpl	r7, #343932928	; 0x14800000
     bb0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     bb4:	564e0074 			; <UNDEFINED> instruction: 0x564e0074
     bb8:	495f4349 	ldmdbmi	pc, {r0, r3, r6, r8, r9, lr}^	; <UNPREDICTABLE>
     bbc:	5374696e 	cmnpl	r4, #1802240	; 0x1b8000
     bc0:	63757274 	cmnvs	r5, #116, 4	; 0x40000007
     bc4:	43490074 	movtmi	r0, #36980	; 0x9074
     bc8:	74005253 	strvc	r5, [r0], #-595	; 0x253
     bcc:	616d706d 	cmnvs	sp, sp, rrx
     bd0:	41006b73 	tstmi	r0, r3, ror fp
     bd4:	4e454248 	cdpmi	2, 4, cr4, cr5, cr8, {2}
     bd8:	49410052 	stmdbmi	r1, {r1, r4, r6}^
     bdc:	00524352 	subseq	r4, r2, r2, asr r3
     be0:	41464d4d 	cmpmi	r6, sp, asr #26
     be4:	686c0052 	stmdavs	ip!, {r1, r4, r6}^
     be8:	64726f57 	ldrbtvs	r6, [r2], #-3927	; 0xf57
     bec:	616c6600 	cmnvs	ip, r0, lsl #12
     bf0:	6f4c6873 	svcvs	0x004c6873
     bf4:	43006b63 	movwmi	r6, #2915	; 0xb63
     bf8:	00525346 	subseq	r5, r2, r6, asr #6
     bfc:	52424149 	subpl	r4, r2, #1073741842	; 0x40000012
     c00:	726f7700 	rsbvc	r7, pc, #0, 14
     c04:	43490064 	movtmi	r0, #36964	; 0x9064
     c08:	41005245 	tstmi	r0, r5, asr #4
     c0c:	52314250 	eorspl	r4, r1, #80, 4
     c10:	00525453 	subseq	r5, r2, r3, asr r4
     c14:	49555043 	ldmdbmi	r5, {r0, r1, r6, ip, lr}^
     c18:	45520044 	ldrbmi	r0, [r2, #-68]	; 0x44
     c1c:	56524553 			; <UNDEFINED> instruction: 0x56524553
     c20:	00304445 	eorseq	r4, r0, r5, asr #8
     c24:	52534644 	subspl	r4, r3, #68, 12	; 0x4400000
     c28:	53455200 	movtpl	r5, #20992	; 0x5200
     c2c:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     c30:	52003244 	andpl	r3, r0, #68, 4	; 0x40000004
     c34:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
     c38:	33444556 	movtcc	r4, #17750	; 0x4556
     c3c:	53455200 	movtpl	r5, #20992	; 0x5200
     c40:	45565245 	ldrbmi	r5, [r6, #-581]	; 0x245
     c44:	61003444 	tstvs	r0, r4, asr #8
     c48:	00726464 	rsbseq	r6, r2, r4, ror #8
     c4c:	49564e72 	ldmdbmi	r6, {r1, r4, r5, r6, r9, sl, fp, lr}^
     c50:	48530043 	ldmdami	r3, {r0, r1, r6}^
     c54:	00525343 	subseq	r5, r2, r3, asr #6
     c58:	52455349 	subpl	r5, r5, #603979777	; 0x24000001
     c5c:	42504100 	subsmi	r4, r0, #0, 2
     c60:	524e4532 	subpl	r4, lr, #209715200	; 0xc800000
     c64:	67617000 	strbvs	r7, [r1, -r0]!
     c68:	64644165 	strbtvs	r4, [r4], #-357	; 0x165
     c6c:	73750072 	cmnvc	r5, #114	; 0x72
     c70:	69614d72 	stmdbvs	r1!, {r1, r4, r5, r6, r8, sl, fp, lr}^
     c74:	4641006e 	strbmi	r0, [r1], -lr, rrx
     c78:	68005253 	stmdavs	r0, {r0, r1, r4, r6, r9, ip, lr}
     c7c:	77647261 	strbvc	r7, [r4, -r1, ror #4]!
     c80:	2e657261 	cdpcs	2, 6, cr7, cr5, cr1, {3}
     c84:	564e0063 	strbpl	r0, [lr], -r3, rrx
     c88:	545f4349 	ldrbpl	r4, [pc], #-841	; c90 <__Stack_Size+0x890>
     c8c:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     c90:	41006665 	tstmi	r0, r5, ror #12
     c94:	45314250 	ldrmi	r4, [r1, #-592]!	; 0x250
     c98:	6600524e 	strvs	r5, [r0], -lr, asr #4
     c9c:	6873616c 	ldmdavs	r3!, {r2, r3, r5, r6, r8, sp, lr}^
     ca0:	74697257 	strbtvc	r7, [r9], #-599	; 0x257
     ca4:	726f5765 	rsbvc	r5, pc, #26476544	; 0x1940000
     ca8:	6c660064 	stclvs	0, cr0, [r6], #-400	; 0xfffffe70
     cac:	53687361 	cmnpl	r8, #-2080374783	; 0x84000001
     cb0:	00657a69 	rsbeq	r7, r5, r9, ror #20
     cb4:	52504853 	subspl	r4, r0, #5439488	; 0x530000
     cb8:	6e616200 	cdpvs	2, 6, cr6, cr1, cr0, {0}
     cbc:	6c66006b 	stclvs	0, cr0, [r6], #-428	; 0xfffffe54
     cc0:	41687361 	cmnmi	r8, r1, ror #6
     cc4:	00726464 	rsbseq	r6, r2, r4, ror #8
     cc8:	636e7566 	cmnvs	lr, #427819008	; 0x19800000
     ccc:	00727450 	rsbseq	r7, r2, r0, asr r4
     cd0:	41727375 	cmnmi	r2, r5, ror r3
     cd4:	00726464 	rsbseq	r6, r2, r4, ror #8
     cd8:	73616c66 	cmnvc	r1, #26112	; 0x6600
     cdc:	61724568 	cmnvs	r2, r8, ror #10
     ce0:	61506573 	cmpvs	r0, r3, ror r5
     ce4:	42006567 	andmi	r6, r0, #432013312	; 0x19c00000
     ce8:	00524344 	subseq	r4, r2, r4, asr #6
     cec:	70706d74 	rsbsvc	r6, r0, r4, ror sp
     cf0:	726f6972 	rsbvc	r6, pc, #1867776	; 0x1c8000
     cf4:	00797469 	rsbseq	r7, r9, r9, ror #8
     cf8:	6f576868 	svcvs	0x00576868
     cfc:	52006472 	andpl	r6, r0, #1912602624	; 0x72000000
     d00:	56524553 			; <UNDEFINED> instruction: 0x56524553
     d04:	00314445 	eorseq	r4, r1, r5, asr #8
     d08:	52474643 	subpl	r4, r7, #70254592	; 0x4300000
     d0c:	63757600 	cmnvs	r5, #0, 12
     d10:	53003233 	movwpl	r3, #563	; 0x233
     d14:	545f4243 	ldrbpl	r4, [pc], #-579	; d1c <__Stack_Size+0x91c>
     d18:	44657079 	strbtmi	r7, [r5], #-121	; 0x79
     d1c:	48006665 	stmdami	r0, {r0, r2, r5, r6, r9, sl, sp, lr}
     d20:	00525346 	subseq	r5, r2, r6, asr #6
     d24:	72745369 	rsbsvc	r5, r4, #-1543503871	; 0xa4000001
     d28:	00676e69 	rsbeq	r6, r7, r9, ror #28
     d2c:	76636572 			; <UNDEFINED> instruction: 0x76636572
     d30:	66667542 	strbtvs	r7, [r6], -r2, asr #10
     d34:	64007265 	strvs	r7, [r0], #-613	; 0x265
     d38:	632e7566 	teqvs	lr, #427819008	; 0x19800000
     d3c:	4c505f00 	mrrcmi	15, 0, r5, r0, cr0
     d40:	4400544f 	strmi	r5, [r0], #-1103	; 0x44f
     d44:	555f5546 	ldrbpl	r5, [pc, #-1350]	; 806 <__Stack_Size+0x406>
     d48:	414f4c50 	cmpmi	pc, r0, asr ip	; <UNPREDICTABLE>
     d4c:	4c465f44 	mcrrmi	15, 4, r5, r6, cr4
     d50:	5f485341 	svcpl	0x00485341
     d54:	30385830 	eorscc	r5, r8, r0, lsr r8
     d58:	30303530 	eorscc	r3, r0, r0, lsr r5
     d5c:	445f0030 	ldrbmi	r0, [pc], #-48	; d64 <__Stack_Size+0x964>
     d60:	74535546 	ldrbvc	r5, [r3], #-1350	; 0x546
     d64:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     d68:	65737500 	ldrbvs	r7, [r3, #-1280]!	; 0x500
     d6c:	70704172 	rsbsvc	r4, r0, r2, ror r1
     d70:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     d74:	50776200 	rsbspl	r6, r7, r0, lsl #4
     d78:	546c6c6f 	strbtpl	r6, [ip], #-3183	; 0xc6f
     d7c:	6f656d69 	svcvs	0x00656d69
     d80:	00307475 	eorseq	r7, r0, r5, ror r4
     d84:	6f507762 	svcvs	0x00507762
     d88:	69546c6c 	ldmdbvs	r4, {r2, r3, r5, r6, sl, fp, sp, lr}^
     d8c:	756f656d 	strbvc	r6, [pc, #-1389]!	; 827 <__Stack_Size+0x427>
     d90:	62003174 	andvs	r3, r0, #116, 2
     d94:	6c6f5077 	stclvs	0, cr5, [pc], #-476	; bc0 <__Stack_Size+0x7c0>
     d98:	6d69546c 	cfstrdvs	mvd5, [r9, #-432]!	; 0xfffffe50
     d9c:	74756f65 	ldrbtvc	r6, [r5], #-3941	; 0xf65
     da0:	46440032 			; <UNDEFINED> instruction: 0x46440032
     da4:	50555f55 	subspl	r5, r5, r5, asr pc
     da8:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     dac:	4e4f4e5f 	mcrmi	14, 2, r4, cr15, cr15, {2}
     db0:	66640045 	strbtvs	r0, [r4], -r5, asr #32
     db4:	706f4375 	rsbvc	r4, pc, r5, ror r3	; <UNPREDICTABLE>
     db8:	4c505579 	cfldr64mi	mvdx5, [r0], {121}	; 0x79
     dbc:	0044414f 	subeq	r4, r4, pc, asr #2
     dc0:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     dc4:	6f6c7055 	svcvs	0x006c7055
     dc8:	79546461 	ldmdbvc	r4, {r0, r5, r6, sl, sp, lr}^
     dcc:	64006570 	strvs	r6, [r0], #-1392	; 0x570
     dd0:	6f437566 	svcvs	0x00437566
     dd4:	75427970 	strbvc	r7, [r2, #-2416]	; 0x970
     dd8:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     ddc:	78456f54 	stmdavc	r5, {r2, r4, r6, r8, r9, sl, fp, sp, lr}^
     de0:	64006365 	strvs	r6, [r0], #-869	; 0x365
     de4:	6f437566 	svcvs	0x00437566
     de8:	74537970 	ldrbvc	r7, [r3], #-2416	; 0x970
     dec:	73757461 	cmnvc	r5, #1627389952	; 0x61000000
     df0:	646f6300 	strbtvs	r6, [pc], #-768	; df8 <__Stack_Size+0x9f8>
     df4:	6f635f65 	svcvs	0x00635f65
     df8:	6c5f7970 	mrrcvs	9, 7, r7, pc, cr0	; <UNPREDICTABLE>
     dfc:	006b636f 	rsbeq	r6, fp, pc, ror #6
     e00:	43756664 	cmnmi	r5, #100, 12	; 0x6400000
     e04:	5379706f 	cmnpl	r9, #111	; 0x6f
     e08:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     e0c:	75666400 	strbvc	r6, [r6, #-1024]!	; 0x400
     e10:	79706f43 	ldmdbvc	r0!, {r0, r1, r6, r8, r9, sl, fp, sp, lr}^
     e14:	4f4c4e44 	svcmi	0x004c4e44
     e18:	64004441 	strvs	r4, [r0], #-1089	; 0x441
     e1c:	70557566 	subsvc	r7, r5, r6, ror #10
     e20:	65746164 	ldrbvs	r6, [r4, #-356]!	; 0x164
     e24:	69547942 	ldmdbvs	r4, {r1, r6, r8, fp, ip, sp, lr}^
     e28:	756f656d 	strbvc	r6, [pc, #-1389]!	; 8c3 <__Stack_Size+0x4c3>
     e2c:	46440074 			; <UNDEFINED> instruction: 0x46440074
     e30:	50555f55 	subspl	r5, r5, r5, asr pc
     e34:	44414f4c 	strbmi	r4, [r1], #-3916	; 0xf4c
     e38:	414c465f 	cmpmi	ip, pc, asr r6
     e3c:	305f4853 	subscc	r4, pc, r3, asr r8	; <UNPREDICTABLE>
     e40:	30303858 	eorscc	r3, r0, r8, asr r8
     e44:	30303032 	eorscc	r3, r0, r2, lsr r0
     e48:	77656e00 	strbvc	r6, [r5, -r0, lsl #28]!
     e4c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     e50:	66640065 	strbtvs	r0, [r4], -r5, rrx
     e54:	6c705575 	cfldr64vs	mvdx5, [r0], #-468	; 0xfffffe2c
     e58:	5464616f 	strbtpl	r6, [r4], #-367	; 0x16f
     e5c:	73657079 	cmnvc	r5, #121	; 0x79
     e60:	6400745f 	strvs	r7, [r0], #-1119	; 0x45f
     e64:	70417566 	subvc	r7, r1, r6, ror #10
     e68:	61745370 	cmnvs	r4, r0, ror r3
     e6c:	00737574 	rsbseq	r7, r3, r4, ror r5
     e70:	6f6c7075 	svcvs	0x006c7075
     e74:	6c426461 	cfstrdvs	mvd6, [r2], {97}	; 0x61
     e78:	4c6b636f 	stclmi	3, cr6, [fp], #-444	; 0xfffffe44
     e7c:	74006e65 	strvc	r6, [r0], #-3685	; 0xe65
     e80:	42736968 	rsbsmi	r6, r3, #104, 18	; 0x1a0000
     e84:	6b636f6c 	blvs	18dcc3c <__Stack_Size+0x18dc83c>
     e88:	006e654c 	rsbeq	r6, lr, ip, asr #10
     e8c:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     e90:	6d726946 	ldclvs	9, cr6, [r2, #-280]!	; 0xfffffee8
     e94:	65726177 	ldrbvs	r6, [r2, #-375]!	; 0x177
     e98:	006e654c 	rsbeq	r6, lr, ip, asr #10
     e9c:	42756664 	rsbsmi	r6, r5, #100, 12	; 0x6400000
     ea0:	00797375 	rsbseq	r7, r9, r5, ror r3
     ea4:	61745362 	cmnvs	r4, r2, ror #6
     ea8:	6c006574 	cfstr32vs	mvfx6, [r0], {116}	; 0x74
     eac:	74676e65 	strbtvc	r6, [r7], #-3685	; 0xe65
     eb0:	74730068 	ldrbtvc	r0, [r3], #-104	; 0x68
     eb4:	53747261 	cmnpl	r4, #268435462	; 0x10000006
     eb8:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
     ebc:	55464400 	strbpl	r4, [r6, #-1024]	; 0x400
     ec0:	4c50555f 	cfldr64mi	mvdx5, [r0], {95}	; 0x5f
     ec4:	5f44414f 	svcpl	0x0044414f
     ec8:	004d4152 	subeq	r4, sp, r2, asr r1
     ecc:	49474542 	stmdbmi	r7, {r1, r6, r8, sl, lr}^
     ed0:	4e494e4e 	cdpmi	14, 4, cr4, cr9, cr14, {2}
     ed4:	73750047 	cmnvc	r5, #71	; 0x47
     ed8:	70537265 	subsvc	r7, r3, r5, ror #4
     edc:	00656361 	rsbeq	r6, r5, r1, ror #6
     ee0:	72657375 	rsbvc	r7, r5, #-738197503	; 0xd4000001
     ee4:	45707041 	ldrbmi	r7, [r0, #-65]!	; 0x41
     ee8:	6200646e 	andvs	r6, r0, #1845493760	; 0x6e000000
     eec:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     ef0:	64007375 	strvs	r7, [r0], #-885	; 0x375
     ef4:	65537566 	ldrbvs	r7, [r3, #-1382]	; 0x566
     ef8:	61745374 	cmnvs	r4, r4, ror r3
     efc:	4d006574 	cfstr32mi	mvfx6, [r0, #-464]	; 0xfffffe30
     f00:	4c444449 	cfstrdmi	mvd4, [r4], {73}	; 0x49
     f04:	66640045 	strbtvs	r0, [r4], -r5, asr #32
     f08:	74654775 	strbtvc	r4, [r5], #-1909	; 0x775
     f0c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f10:	72460065 	subvc	r0, r6, #101	; 0x65
     f14:	73556565 	cmpvc	r5, #423624704	; 0x19400000
     f18:	75427265 	strbvc	r7, [r2, #-613]	; 0x265
     f1c:	72656666 	rsbvc	r6, r5, #106954752	; 0x6600000
     f20:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
     f24:	74537854 	ldrbvc	r7, [r3], #-2132	; 0x854
     f28:	536c6c61 	cmnpl	ip, #24832	; 0x6100
     f2c:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
     f30:	65530073 	ldrbvs	r0, [r3, #-115]	; 0x73
     f34:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
     f38:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
     f3c:	64413166 	strbvs	r3, [r1], #-358	; 0x166
     f40:	53007264 	movwpl	r7, #612	; 0x264
     f44:	50457465 	subpl	r7, r5, r5, ror #8
     f48:	61567854 	cmpvs	r6, r4, asr r8
     f4c:	0064696c 	rsbeq	r6, r4, ip, ror #18
     f50:	44746553 	ldrbtmi	r6, [r4], #-1363	; 0x553
     f54:	6c42756f 	cfstr64vs	mvdx7, [r2], {111}	; 0x6f
     f58:	66754265 	ldrbtvs	r4, [r5], -r5, ror #4
     f5c:	53504566 	cmppl	r0, #427819008	; 0x19800000
     f60:	6c6c6174 	stfvse	f6, [ip], #-464	; 0xfffffe30
     f64:	5f504500 	svcpl	0x00504500
     f68:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
     f6c:	54554f5f 	ldrbpl	r4, [r5], #-3935	; 0xf5f
     f70:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
     f74:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
     f78:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
     f7c:	54007375 	strpl	r7, [r0], #-885	; 0x375
     f80:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
     f84:	4f544465 	svcmi	0x00544465
     f88:	58545f47 	ldmdapl	r4, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
     f8c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
     f90:	64415045 	strbvs	r5, [r1], #-69	; 0x45
     f94:	73657264 	cmnvc	r5, #100, 4	; 0x40000006
     f98:	455f0073 	ldrbmi	r0, [pc, #-115]	; f2d <__Stack_Size+0xb2d>
     f9c:	42445f50 	submi	r5, r4, #80, 30	; 0x140
     fa0:	445f4655 	ldrbmi	r4, [pc], #-1621	; fa8 <__Stack_Size+0xba8>
     fa4:	62005249 	andvs	r5, r0, #-1879048188	; 0x90000004
     fa8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
     fac:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
     fb0:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
     fb4:	424e7700 	submi	r7, lr, #0, 14
     fb8:	6b636f6c 	blvs	18dcd70 <__Stack_Size+0x18dc970>
     fbc:	6c430073 	mcrrvs	0, 7, r0, r3, cr3
     fc0:	44726165 	ldrbtmi	r6, [r2], #-357	; 0x165
     fc4:	5f474f54 	svcpl	0x00474f54
     fc8:	47005852 	smlsdmi	r0, r2, r8, r5
     fcc:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
     fd0:	47005254 	smlsdmi	r0, r4, r2, r5
     fd4:	78527465 	ldmdavc	r2, {r0, r2, r5, r6, sl, ip, sp, lr}^
     fd8:	6c617453 	cfstrdvs	mvd7, [r1], #-332	; 0xfffffeb4
     fdc:	6174536c 	cmnvs	r4, ip, ror #6
     fe0:	00737574 	rsbseq	r7, r3, r4, ror r5
     fe4:	44746547 	ldrbtmi	r6, [r4], #-1351	; 0x547
     fe8:	52444441 	subpl	r4, r4, #1090519040	; 0x41000000
     fec:	6f437700 	svcvs	0x00437700
     ff0:	00746e75 	rsbseq	r6, r4, r5, ror lr
     ff4:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
     ff8:	64644150 	strbtvs	r4, [r4], #-336	; 0x150
     ffc:	73736572 	cmnvc	r3, #478150656	; 0x1c800000
    1000:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1004:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    1008:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    100c:	54007375 	strpl	r7, [r0], #-885	; 0x375
    1010:	6c67676f 	stclvs	7, cr6, [r7], #-444	; 0xfffffe44
    1014:	4f544465 	svcmi	0x00544465
    1018:	58525f47 	ldmdapl	r2, {r0, r1, r2, r6, r8, r9, sl, fp, ip, lr}^
    101c:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    1020:	62445045 	subvs	r5, r4, #69	; 0x45
    1024:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1028:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    102c:	65530072 	ldrbvs	r0, [r3, #-114]	; 0x72
    1030:	54504574 	ldrbpl	r4, [r0], #-1396	; 0x574
    1034:	00657079 	rsbeq	r7, r5, r9, ror r0
    1038:	445f5045 	ldrbmi	r5, [pc], #-69	; 1040 <__Stack_Size+0xc40>
    103c:	5f465542 	svcpl	0x00465542
    1040:	77004e49 	strvc	r4, [r0, -r9, asr #28]
    1044:	00746552 	rsbseq	r6, r4, r2, asr r5
    1048:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    104c:	41785250 	cmnmi	r8, r0, asr r2
    1050:	00726464 	rsbseq	r6, r2, r4, ror #8
    1054:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1058:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    105c:	30667542 	rsbcc	r7, r6, r2, asr #10
    1060:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1064:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1068:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    106c:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1070:	62007375 	andvs	r7, r0, #-738197503	; 0xd4000001
    1074:	00726944 	rsbseq	r6, r2, r4, asr #18
    1078:	70795477 	rsbsvc	r5, r9, r7, ror r4
    107c:	73750065 	cmnvc	r5, #101	; 0x65
    1080:	696c5f62 	stmdbvs	ip!, {r1, r5, r6, r8, r9, sl, fp, ip, lr}^
    1084:	73752f62 	cmnvc	r5, #392	; 0x188
    1088:	65725f62 	ldrbvs	r5, [r2, #-3938]!	; 0xf62
    108c:	632e7367 	teqvs	lr, #-1677721599	; 0x9c000001
    1090:	5f504500 	svcpl	0x00504500
    1094:	46554244 	ldrbmi	r4, [r5], -r4, asr #4
    1098:	5252455f 	subspl	r4, r2, #398458880	; 0x17c00000
    109c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    10a0:	62445045 	subvs	r5, r4, #69	; 0x45
    10a4:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    10a8:	00726944 	rsbseq	r6, r2, r4, asr #18
    10ac:	66754277 			; <UNDEFINED> instruction: 0x66754277
    10b0:	64644131 	strbtvs	r4, [r4], #-305	; 0x131
    10b4:	53770072 	cmnpl	r7, #114	; 0x72
    10b8:	53005777 	movwpl	r5, #1911	; 0x777
    10bc:	50457465 	subpl	r7, r5, r5, ror #8
    10c0:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    10c4:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    10c8:	53006666 	movwpl	r6, #1638	; 0x666
    10cc:	50457465 	subpl	r7, r5, r5, ror #8
    10d0:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    10d4:	43316675 	teqmi	r1, #122683392	; 0x7500000
    10d8:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    10dc:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    10e0:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    10e4:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    10e8:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    10ec:	50457261 	subpl	r7, r5, r1, ror #4
    10f0:	62756f44 	rsbsvs	r6, r5, #68, 30	; 0x110
    10f4:	7542656c 	strbvc	r6, [r2, #-1388]	; 0x56c
    10f8:	54006666 	strpl	r6, [r0], #-1638	; 0x666
    10fc:	726f576f 	rsbvc	r5, pc, #29097984	; 0x1bc0000
    1100:	65470064 	strbvs	r0, [r7, #-100]	; 0x64
    1104:	44504574 	ldrbmi	r4, [r0], #-1396	; 0x574
    1108:	75426c62 	strbvc	r6, [r2, #-3170]	; 0xc62
    110c:	64413166 	strbvs	r3, [r1], #-358	; 0x166
    1110:	47007264 	strmi	r7, [r0, -r4, ror #4]
    1114:	50457465 	subpl	r7, r5, r5, ror #8
    1118:	65707954 	ldrbvs	r7, [r0, #-2388]!	; 0x954
    111c:	656c4300 	strbvs	r4, [ip, #-768]!	; 0x300
    1120:	50457261 	subpl	r7, r5, r1, ror #4
    1124:	5254435f 	subspl	r4, r4, #2080374785	; 0x7c000001
    1128:	0058525f 	subseq	r5, r8, pc, asr r2
    112c:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1130:	6c624450 	cfstrdvs	mvd4, [r2], #-320	; 0xfffffec0
    1134:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    1138:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    113c:	65530074 	ldrbvs	r0, [r3, #-116]	; 0x74
    1140:	5f504574 	svcpl	0x00504574
    1144:	444e494b 	strbmi	r4, [lr], #-2379	; 0x94b
    1148:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    114c:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    1150:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    1154:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    1158:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    115c:	494b5f50 	stmdbmi	fp, {r4, r6, r8, r9, sl, fp, ip, lr}^
    1160:	4700444e 	strmi	r4, [r0, -lr, asr #8]
    1164:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    1168:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    116c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1170:	52545349 	subspl	r5, r4, #603979777	; 0x24000001
    1174:	65527700 	ldrbvs	r7, [r2, #-1792]	; 0x700
    1178:	6c615667 	stclvs	6, cr5, [r1], #-412	; 0xfffffe64
    117c:	47006575 	smlsdxmi	r0, r5, r5, r6
    1180:	4e457465 	cdpmi	4, 4, cr7, cr5, cr5, {3}
    1184:	494f5044 	stmdbmi	pc, {r2, r6, ip, lr}^	; <UNPREDICTABLE>
    1188:	7700544e 	strvc	r5, [r0, -lr, asr #8]
    118c:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    1190:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1194:	62445045 	subvs	r5, r4, #69	; 0x45
    1198:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    119c:	756f4330 	strbvc	r4, [pc, #-816]!	; e74 <__Stack_Size+0xa74>
    11a0:	5300746e 	movwpl	r7, #1134	; 0x46e
    11a4:	41447465 	cmpmi	r4, r5, ror #8
    11a8:	00524444 	subseq	r4, r2, r4, asr #8
    11ac:	52776470 	rsbspl	r6, r7, #112, 8	; 0x70000000
    11b0:	42006765 	andmi	r6, r0, #26476544	; 0x1940000
    11b4:	53657479 	cmnpl	r5, #2030043136	; 0x79000000
    11b8:	00706177 	rsbseq	r6, r0, r7, ror r1
    11bc:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    11c0:	756f4350 	strbvc	r4, [pc, #-848]!	; e78 <__Stack_Size+0xa78>
    11c4:	7852746e 	ldmdavc	r2, {r1, r2, r3, r5, r6, sl, ip, sp, lr}^
    11c8:	00676552 	rsbeq	r6, r7, r2, asr r5
    11cc:	45746547 	ldrbmi	r6, [r4, #-1351]!	; 0x547
    11d0:	43785250 	cmnmi	r8, #80, 4
    11d4:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    11d8:	65546200 	ldrbvs	r6, [r4, #-512]	; 0x200
    11dc:	5300706d 	movwpl	r7, #109	; 0x6d
    11e0:	4e437465 	cdpmi	4, 4, cr7, cr3, cr5, {3}
    11e4:	53005254 	movwpl	r5, #596	; 0x254
    11e8:	54427465 	strbpl	r7, [r2], #-1125	; 0x465
    11ec:	454c4241 	strbmi	r4, [ip, #-577]	; 0x241
    11f0:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    11f4:	78545045 	ldmdavc	r4, {r0, r2, r6, ip, lr}^
    11f8:	6e756f43 	cdpvs	15, 7, cr6, cr5, cr3, {2}
    11fc:	6c430074 	mcrrvs	0, 7, r0, r3, cr4
    1200:	45726165 	ldrbmi	r6, [r2, #-357]!	; 0x165
    1204:	54435f50 	strbpl	r5, [r3], #-3920	; 0xf50
    1208:	58545f52 	ldmdapl	r4, {r1, r4, r6, r8, r9, sl, fp, ip, lr}^
    120c:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1210:	62445045 	subvs	r5, r4, #69	; 0x45
    1214:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    1218:	756f4331 	strbvc	r4, [pc, #-817]!	; eef <__Stack_Size+0xaef>
    121c:	5300746e 	movwpl	r7, #1134	; 0x46e
    1220:	50457465 	subpl	r7, r5, r5, ror #8
    1224:	426c6244 	rsbmi	r6, ip, #68, 4	; 0x40000004
    1228:	43306675 	teqmi	r0, #122683392	; 0x7500000
    122c:	746e756f 	strbtvc	r7, [lr], #-1391	; 0x56f
    1230:	75427700 	strbvc	r7, [r2, #-1792]	; 0x700
    1234:	64413066 	strbvs	r3, [r1], #-102	; 0x66
    1238:	53007264 	movwpl	r7, #612	; 0x264
    123c:	535f7465 	cmppl	pc, #1694498816	; 0x65000000
    1240:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    1244:	754f5f73 	strbvc	r5, [pc, #-3955]	; 2d9 <_Minimum_Stack_Size+0x1d9>
    1248:	65470074 	strbvs	r0, [r7, #-116]	; 0x74
    124c:	524e4674 	subpl	r4, lr, #116, 12	; 0x7400000
    1250:	74654700 	strbtvc	r4, [r5], #-1792	; 0x700
    1254:	62445045 	subvs	r5, r4, #69	; 0x45
    1258:	6675426c 	ldrbtvs	r4, [r5], -ip, ror #4
    125c:	64644130 	strbtvs	r4, [r4], #-304	; 0x130
    1260:	6e450072 	mcrvs	0, 2, r0, cr5, cr2, {3}
    1264:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    1268:	445f746e 	ldrbmi	r7, [pc], #-1134	; 1270 <__Stack_Size+0xe70>
    126c:	5f474f54 	svcpl	0x00474f54
    1270:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1274:	47007375 	smlsdxmi	r0, r5, r3, r7
    1278:	50457465 	subpl	r7, r5, r5, ror #8
    127c:	64417854 	strbvs	r7, [r1], #-2132	; 0x854
    1280:	43007264 	movwmi	r7, #612	; 0x264
    1284:	7261656c 	rsbvc	r6, r1, #108, 10	; 0x1b000000
    1288:	474f5444 	strbmi	r5, [pc, -r4, asr #8]
    128c:	0058545f 	subseq	r5, r8, pc, asr r4
    1290:	45746553 	ldrbmi	r6, [r4, #-1363]!	; 0x553
    1294:	53785450 	cmnpl	r8, #80, 8	; 0x50000000
    1298:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    129c:	45620073 	strbmi	r0, [r2, #-115]!	; 0x73
    12a0:	6d754e70 	ldclvs	14, cr4, [r5, #-448]!	; 0xfffffe40
    12a4:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    12a8:	50444e45 	subpl	r4, r4, r5, asr #28
    12ac:	544e494f 	strbpl	r4, [lr], #-2383	; 0x94f
    12b0:	74655300 	strbtvc	r5, [r5], #-768	; 0x300
    12b4:	78525045 	ldmdavc	r2, {r0, r2, r6, ip, lr}^
    12b8:	72646441 	rsbvc	r6, r4, #1090519040	; 0x41000000
    12bc:	52544300 	subspl	r4, r4, #0, 6
    12c0:	0050485f 	subseq	r4, r0, pc, asr r8
    12c4:	75746553 	ldrbvc	r6, [r4, #-1363]!	; 0x553
    12c8:	505f3070 	subspl	r3, pc, r0, ror r0	; <UNPREDICTABLE>
    12cc:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    12d0:	53007373 	movwpl	r7, #883	; 0x373
    12d4:	52657661 	rsbpl	r7, r5, #101711872	; 0x6100000
    12d8:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    12dc:	61530065 	cmpvs	r3, r5, rrx
    12e0:	53546576 	cmppl	r4, #494927872	; 0x1d800000
    12e4:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    12e8:	50457700 	subpl	r7, r5, r0, lsl #14
    12ec:	006c6156 	rsbeq	r6, ip, r6, asr r1
    12f0:	5f627375 	svcpl	0x00627375
    12f4:	2f62696c 	svccs	0x0062696c
    12f8:	5f627375 	svcpl	0x00627375
    12fc:	2e746e69 	cdpcs	14, 7, cr6, cr4, cr9, {3}
    1300:	6e490063 	cdpvs	0, 4, cr0, cr9, cr3, {3}
    1304:	72505f30 	subsvc	r5, r0, #48, 30	; 0xc0
    1308:	7365636f 	cmnvc	r5, #-1140850687	; 0xbc000001
    130c:	754f0073 	strbvc	r0, [pc, #-115]	; 12a1 <__Stack_Size+0xea1>
    1310:	505f3074 	subspl	r3, pc, r4, ror r0	; <UNPREDICTABLE>
    1314:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1318:	45007373 	strmi	r7, [r0, #-883]	; 0x373
    131c:	646e6950 	strbtvs	r6, [lr], #-2384	; 0x950
    1320:	53007865 	movwpl	r7, #2149	; 0x865
    1324:	53657661 	cmnpl	r5, #101711872	; 0x6100000
    1328:	65746174 	ldrbvs	r6, [r4, #-372]!	; 0x174
    132c:	62737500 	rsbsvs	r7, r3, #0, 10
    1330:	62696c5f 	rsbvs	r6, r9, #24320	; 0x5f00
    1334:	6273752f 	rsbsvs	r7, r3, #197132288	; 0xbc00000
    1338:	696e695f 	stmdbvs	lr!, {r0, r1, r2, r3, r4, r6, r8, fp, sp, lr}^
    133c:	00632e74 	rsbeq	r2, r3, r4, ror lr
    1340:	65735570 	ldrbvs	r5, [r3, #-1392]!	; 0x570
    1344:	74535f72 	ldrbvc	r5, [r3], #-3954	; 0xf72
    1348:	61646e61 	cmnvs	r4, r1, ror #28
    134c:	525f6472 	subspl	r6, pc, #1912602624	; 0x72000000
    1350:	65757165 	ldrbvs	r7, [r5, #-357]!	; 0x165
    1354:	00737473 	rsbseq	r7, r3, r3, ror r4
    1358:	69766544 	ldmdbvs	r6!, {r2, r6, r8, sl, sp, lr}^
    135c:	495f6563 	ldmdbmi	pc, {r0, r1, r5, r6, r8, sl, sp, lr}^	; <UNPREDICTABLE>
    1360:	006f666e 	rsbeq	r6, pc, lr, ror #12
    1364:	5f627375 	svcpl	0x00627375
    1368:	2f62696c 	svccs	0x0062696c
    136c:	5f627375 	svcpl	0x00627375
    1370:	65726f63 	ldrbvs	r6, [r2, #-3939]!	; 0xf63
    1374:	4500632e 	strmi	r6, [r0, #-814]	; 0x32e
    1378:	4f50444e 	svcmi	0x0050444e
    137c:	5f544e49 	svcpl	0x00544e49
    1380:	4c415453 	cfstrdmi	mvd5, [r1], {83}	; 0x53
    1384:	6552004c 	ldrbvs	r0, [r2, #-76]	; 0x4c
    1388:	746c7573 	strbtvc	r7, [ip], #-1395	; 0x573
    138c:	736f5000 	cmnvc	pc, #0
    1390:	505f3074 	subspl	r3, pc, r4, ror r0	; <UNPREDICTABLE>
    1394:	65636f72 	strbvs	r6, [r3, #-3954]!	; 0xf72
    1398:	44007373 	strmi	r7, [r0], #-883	; 0x373
    139c:	42617461 	rsbmi	r7, r1, #1627389952	; 0x61000000
    13a0:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    13a4:	65520072 	ldrbvs	r0, [r2, #-114]	; 0x72
    13a8:	76726573 			; <UNDEFINED> instruction: 0x76726573
    13ac:	53006465 	movwpl	r6, #1125	; 0x465
    13b0:	646e6174 	strbtvs	r6, [lr], #-372	; 0x174
    13b4:	5f647261 	svcpl	0x00647261
    13b8:	43746553 	cmnmi	r4, #348127232	; 0x14c00000
    13bc:	69666e6f 	stmdbvs	r6!, {r0, r1, r2, r3, r5, r6, r9, sl, fp, sp, lr}^
    13c0:	61727567 	cmnvs	r2, r7, ror #10
    13c4:	6e6f6974 	mcrvs	9, 3, r6, cr15, cr4, {3}
    13c8:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    13cc:	61745361 	cmnvs	r4, r1, ror #6
    13d0:	6e496567 	cdpvs	5, 4, cr6, cr9, cr7, {3}
    13d4:	56454400 	strbpl	r4, [r5], -r0, lsl #8
    13d8:	5f454349 	svcpl	0x00454349
    13dc:	4f4d4552 	svcmi	0x004d4552
    13e0:	575f4554 			; <UNDEFINED> instruction: 0x575f4554
    13e4:	55454b41 	strbpl	r4, [r5, #-2881]	; 0xb41
    13e8:	54530050 	ldrbpl	r0, [r3], #-80	; 0x50
    13ec:	454c4c41 	strbmi	r4, [ip, #-3137]	; 0xc41
    13f0:	79540044 	ldmdbvc	r4, {r2, r6}^
    13f4:	525f6570 	subspl	r6, pc, #112, 10	; 0x1c000000
    13f8:	65006365 	strvs	r6, [r0, #-869]	; 0x365
    13fc:	5f746978 	svcpl	0x00746978
    1400:	61446f4e 	cmpvs	r4, lr, asr #30
    1404:	535f6174 	cmppl	pc, #116, 2
    1408:	70757465 	rsbsvc	r7, r5, r5, ror #8
    140c:	56770030 			; <UNDEFINED> instruction: 0x56770030
    1410:	65756c61 	ldrbvs	r6, [r5, #-3169]!	; 0xc61
    1414:	45440031 	strbmi	r0, [r4, #-49]	; 0x31
    1418:	45434956 	strbmi	r4, [r3, #-2390]	; 0x956
    141c:	5345445f 	movtpl	r4, #21599	; 0x545f
    1420:	50495243 	subpl	r5, r9, r3, asr #4
    1424:	00524f54 	subseq	r4, r2, r4, asr pc
    1428:	49525453 	ldmdbmi	r2, {r0, r1, r4, r6, sl, ip, lr}^
    142c:	445f474e 	ldrbmi	r4, [pc], #-1870	; 1434 <__Stack_Size+0x1034>
    1430:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    1434:	4f545049 	svcmi	0x00545049
    1438:	73550052 	cmpvc	r5, #82	; 0x52
    143c:	6f547265 	svcvs	0x00547265
    1440:	42414d50 	submi	r4, r1, #80, 26	; 0x1400
    1444:	65666675 	strbvs	r6, [r6, #-1653]!	; 0x675
    1448:	706f4372 	rsbvc	r4, pc, r2, ror r3	; <UNPREDICTABLE>
    144c:	61730079 	cmnvs	r3, r9, ror r0
    1450:	725f6576 	subsvc	r6, pc, #494927872	; 0x1d800000
    1454:	676e654c 	strbvs	r6, [lr, -ip, asr #10]!
    1458:	4c006874 	stcmi	8, cr6, [r0], {116}	; 0x74
    145c:	5f545341 	svcpl	0x00545341
    1460:	445f4e49 	ldrbmi	r4, [pc], #-3657	; 1468 <__Stack_Size+0x1068>
    1464:	00415441 	subeq	r5, r1, r1, asr #8
    1468:	5f504f4e 	svcpl	0x00504f4e
    146c:	636f7250 	cmnvs	pc, #80, 4
    1470:	00737365 	rsbseq	r7, r3, r5, ror #6
    1474:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1478:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    147c:	7465535f 	strbtvc	r5, [r5], #-863	; 0x35f
    1480:	65746e49 	ldrbvs	r6, [r4, #-3657]!	; 0xe49
    1484:	63616672 	cmnvs	r1, #119537664	; 0x7200000
    1488:	78450065 	stmdavc	r5, {r0, r2, r5, r6}^
    148c:	74636570 	strbtvc	r6, [r3], #-1392	; 0x570
    1490:	6174535f 	cmnvs	r4, pc, asr r3
    1494:	5f737574 	svcpl	0x00737574
    1498:	0074754f 	rsbseq	r7, r4, pc, asr #10
    149c:	53554150 	cmppl	r5, #80, 2
    14a0:	65520045 	ldrbvs	r0, [r2, #-69]	; 0x45
    14a4:	73657571 	cmnvc	r5, #473956352	; 0x1c400000
    14a8:	006f4e74 	rsbeq	r4, pc, r4, ror lr	; <UNPREDICTABLE>
    14ac:	5f544547 	svcpl	0x00544547
    14b0:	45544e49 	ldrbmi	r4, [r4, #-3657]	; 0xe49
    14b4:	43414652 	movtmi	r4, #5714	; 0x1652
    14b8:	74530045 	ldrbvc	r0, [r3], #-69	; 0x45
    14bc:	61646e61 	cmnvs	r4, r1, ror #28
    14c0:	535f6472 	cmppl	pc, #1912602624	; 0x72000000
    14c4:	6e457465 	cdpvs	4, 4, cr7, cr5, cr5, {3}
    14c8:	696f5064 	stmdbvs	pc!, {r2, r5, r6, ip, lr}^	; <UNPREDICTABLE>
    14cc:	6546746e 	strbvs	r7, [r6, #-1134]	; 0x46e
    14d0:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    14d4:	45470065 	strbmi	r0, [r7, #-101]	; 0x65
    14d8:	54535f54 	ldrbpl	r5, [r3], #-3924	; 0xf54
    14dc:	53555441 	cmppl	r5, #1090519040	; 0x41000000
    14e0:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    14e4:	4145465f 	cmpmi	r5, pc, asr r6
    14e8:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    14ec:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    14f0:	754d5f61 	strbvc	r5, [sp, #-3937]	; 0xf61
    14f4:	614d5f6c 	cmpvs	sp, ip, ror #30
    14f8:	63615078 	cmnvs	r1, #120	; 0x78
    14fc:	5374656b 	cmnpl	r4, #448790528	; 0x1ac00000
    1500:	00657a69 	rsbeq	r7, r5, r9, ror #20
    1504:	76654470 			; <UNDEFINED> instruction: 0x76654470
    1508:	61745300 	cmnvs	r4, r0, lsl #6
    150c:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    1510:	65535f64 	ldrbvs	r5, [r3, #-3940]	; 0xf64
    1514:	76654474 			; <UNDEFINED> instruction: 0x76654474
    1518:	46656369 	strbtmi	r6, [r5], -r9, ror #6
    151c:	75746165 	ldrbvc	r6, [r4, #-357]!	; 0x165
    1520:	70006572 	andvc	r6, r0, r2, ror r5
    1524:	63736544 	cmnvs	r3, #68, 10	; 0x11000000
    1528:	4e595300 	cdpmi	3, 5, cr5, cr9, cr0, {0}
    152c:	465f4843 	ldrbmi	r4, [pc], -r3, asr #16
    1530:	454d4152 	strbmi	r4, [sp, #-338]	; 0x152
    1534:	61745300 	cmnvs	r4, r0, lsl #6
    1538:	7261646e 	rsbvc	r6, r1, #1845493760	; 0x6e000000
    153c:	65475f64 	strbvs	r5, [r7, #-3940]	; 0xf64
    1540:	746e4974 	strbtvc	r4, [lr], #-2420	; 0x974
    1544:	61667265 	cmnvs	r6, r5, ror #4
    1548:	53006563 	movwpl	r6, #1379	; 0x563
    154c:	445f5445 	ldrbmi	r5, [pc], #-1093	; 1554 <__Stack_Size+0x1154>
    1550:	52435345 	subpl	r5, r3, #335544321	; 0x14000001
    1554:	4f545049 	svcmi	0x00545049
    1558:	45530052 	ldrbmi	r0, [r3, #-82]	; 0x52
    155c:	4e495f54 	mcrmi	15, 2, r5, cr9, cr4, {2}
    1560:	46524554 			; <UNDEFINED> instruction: 0x46524554
    1564:	00454341 	subeq	r4, r5, r1, asr #6
    1568:	4145465f 	cmpmi	r5, pc, asr r6
    156c:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    1570:	4c45535f 	mcrrmi	3, 5, r5, r5, cr15
    1574:	4f544345 	svcmi	0x00544345
    1578:	74530052 	ldrbvc	r0, [r3], #-82	; 0x52
    157c:	61646e61 	cmnvs	r4, r1, ror #28
    1580:	475f6472 			; <UNDEFINED> instruction: 0x475f6472
    1584:	6f437465 	svcvs	0x00437465
    1588:	6769666e 	strbvs	r6, [r9, -lr, ror #12]!
    158c:	74617275 	strbtvc	r7, [r1], #-629	; 0x275
    1590:	006e6f69 	rsbeq	r6, lr, r9, ror #30
    1594:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    1598:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    159c:	656c435f 	strbvs	r4, [ip, #-863]!	; 0x35f
    15a0:	65467261 	strbvs	r7, [r6, #-609]	; 0x261
    15a4:	72757461 	rsbsvc	r7, r5, #1627389952	; 0x61000000
    15a8:	45470065 	strbmi	r0, [r7, #-101]	; 0x65
    15ac:	4f435f54 	svcmi	0x00435f54
    15b0:	4749464e 	strbmi	r4, [r9, -lr, asr #12]
    15b4:	54415255 	strbpl	r5, [r1], #-597	; 0x255
    15b8:	004e4f49 	subeq	r4, lr, r9, asr #30
    15bc:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    15c0:	4c4f5254 	sfmmi	f5, 2, [pc], {84}	; 0x54
    15c4:	4154535f 	cmpmi	r4, pc, asr r3
    15c8:	5f004554 	svcpl	0x00004554
    15cc:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    15d0:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    15d4:	545f524f 	ldrbpl	r5, [pc], #-591	; 15dc <__Stack_Size+0x11dc>
    15d8:	00455059 	subeq	r5, r5, r9, asr r0
    15dc:	54544553 	ldrbpl	r4, [r4], #-1363	; 0x553
    15e0:	5f474e49 	svcpl	0x00474e49
    15e4:	50005055 	andpl	r5, r0, r5, asr r0
    15e8:	6f54414d 	svcvs	0x0054414d
    15ec:	72657355 	rsbvc	r7, r5, #1409286145	; 0x54000001
    15f0:	66667542 	strbtvs	r7, [r6], -r2, asr #10
    15f4:	6f437265 	svcvs	0x00437265
    15f8:	52007970 	andpl	r7, r0, #112, 18	; 0x1c0000
    15fc:	52455345 	subpl	r5, r5, #335544321	; 0x14000001
    1600:	31444556 	cmpcc	r4, r6, asr r5
    1604:	54455300 	strbpl	r5, [r5], #-768	; 0x300
    1608:	4e4f435f 	mcrmi	3, 2, r4, cr15, cr15, {2}
    160c:	55474946 	strbpl	r4, [r7, #-2374]	; 0x946
    1610:	49544152 	ldmdbmi	r4, {r1, r4, r6, r8, lr}^
    1614:	57004e4f 	strpl	r4, [r0, -pc, asr #28]
    1618:	5f544941 	svcpl	0x00544941
    161c:	54415453 	strbpl	r5, [r1], #-1107	; 0x453
    1620:	4f5f5355 	svcmi	0x005f5355
    1624:	54005455 	strpl	r5, [r0], #-1109	; 0x455
    1628:	4c41544f 	cfstrdmi	mvd5, [r1], {79}	; 0x4f
    162c:	4552735f 	ldrbmi	r7, [r2, #-863]	; 0x35f
    1630:	53455551 	movtpl	r5, #21841	; 0x5551
    1634:	4e490054 	mcrmi	0, 2, r0, cr9, cr4, {2}
    1638:	46524554 			; <UNDEFINED> instruction: 0x46524554
    163c:	5f454341 	svcpl	0x00454341
    1640:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    1644:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    1648:	7300524f 	movwvc	r5, #591	; 0x24f
    164c:	5f657661 	svcpl	0x00657661
    1650:	6e654c77 	mcrvs	12, 3, r4, cr5, cr7, {3}
    1654:	00687467 	rsbeq	r7, r8, r7, ror #8
    1658:	6e617453 	mcrvs	4, 3, r7, cr1, cr3, {2}
    165c:	64726164 	ldrbtvs	r6, [r2], #-356	; 0x164
    1660:	7465475f 	strbtvc	r4, [r5], #-1887	; 0x75f
    1664:	74617453 	strbtvc	r7, [r1], #-1107	; 0x453
    1668:	45007375 	strmi	r7, [r0, #-885]	; 0x375
    166c:	4f50444e 	svcmi	0x0050444e
    1670:	5f544e49 	svcpl	0x00544e49
    1674:	43534544 	cmpmi	r3, #68, 10	; 0x11000000
    1678:	54504952 	ldrbpl	r4, [r0], #-2386	; 0x952
    167c:	4300524f 	movwmi	r5, #591	; 0x24f
    1680:	49464e4f 	stmdbmi	r6, {r0, r1, r2, r3, r6, r9, sl, fp, lr}^
    1684:	45445f47 	strbmi	r5, [r4, #-3911]	; 0xf47
    1688:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    168c:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    1690:	75427000 	strbvc	r7, [r2, #-0]
    1694:	45700066 	ldrbmi	r0, [r0, #-102]!	; 0x66
    1698:	666e6950 			; <UNDEFINED> instruction: 0x666e6950
    169c:	4553006f 	ldrbmi	r0, [r3, #-111]	; 0x6f
    16a0:	44415f54 	strbmi	r5, [r1], #-3924	; 0xf54
    16a4:	53455244 	movtpl	r5, #21060	; 0x5244
    16a8:	65520053 	ldrbvs	r0, [r2, #-83]	; 0x53
    16ac:	6574616c 	ldrbvs	r6, [r4, #-364]!	; 0x16c
    16b0:	6e455f64 	cdpvs	15, 4, cr5, cr5, cr4, {3}
    16b4:	696f7064 	stmdbvs	pc!, {r2, r5, r6, ip, sp, lr}^	; <UNPREDICTABLE>
    16b8:	5300746e 	movwpl	r7, #1134	; 0x46e
    16bc:	75746174 	ldrbvc	r6, [r4, #-372]!	; 0x174
    16c0:	666e4973 			; <UNDEFINED> instruction: 0x666e4973
    16c4:	4977006f 	ldmdbmi	r7!, {r0, r1, r2, r3, r5, r6}^
    16c8:	7865646e 	stmdavc	r5!, {r1, r2, r3, r5, r6, sl, sp, lr}^
    16cc:	45470030 	strbmi	r0, [r7, #-48]	; 0x30
    16d0:	45445f54 	strbmi	r5, [r4, #-3924]	; 0xf54
    16d4:	49524353 	ldmdbmi	r2, {r0, r1, r4, r6, r8, r9, lr}^
    16d8:	524f5450 	subpl	r5, pc, #80, 8	; 0x50000000
    16dc:	74614400 	strbtvc	r4, [r1], #-1024	; 0x400
    16e0:	61745361 	cmnvs	r4, r1, ror #6
    16e4:	754f6567 	strbvc	r6, [pc, #-1383]	; 1185 <__Stack_Size+0xd85>
    16e8:	41570074 	cmpmi	r7, r4, ror r0
    16ec:	535f5449 	cmppl	pc, #1224736768	; 0x49000000
    16f0:	50555445 	subspl	r5, r5, r5, asr #8
    16f4:	71655200 	cmnvc	r5, r0, lsl #4
    16f8:	74736575 	ldrbtvc	r6, [r3], #-1397	; 0x575
    16fc:	006f4e5f 	rsbeq	r4, pc, pc, asr lr	; <UNPREDICTABLE>
    1700:	54494157 	strbpl	r4, [r9], #-343	; 0x157
    1704:	4154535f 	cmpmi	r4, pc, asr r3
    1708:	5f535554 	svcpl	0x00535554
    170c:	43004e49 	movwmi	r4, #3657	; 0xe49
    1710:	5241454c 	subpl	r4, r1, #76, 10	; 0x13000000
    1714:	4145465f 	cmpmi	r5, pc, asr r6
    1718:	45525554 	ldrbmi	r5, [r2, #-1364]	; 0x554
    171c:	53414c00 	movtpl	r4, #7168	; 0x1c00
    1720:	554f5f54 	strbpl	r5, [pc, #-3924]	; 7d4 <__Stack_Size+0x3d4>
    1724:	41445f54 	cmpmi	r4, r4, asr pc
    1728:	75004154 	strvc	r4, [r0, #-340]	; 0x154
    172c:	6c5f6273 	lfmvs	f6, 2, [pc], {115}	; 0x73
    1730:	752f6269 	strvc	r6, [pc, #-617]!	; 14cf <__Stack_Size+0x10cf>
    1734:	6d5f6273 	lfmvs	f6, 2, [pc, #-460]	; 1570 <__Stack_Size+0x1170>
    1738:	632e6d65 	teqvs	lr, #6464	; 0x1940
    173c:	424e7700 	submi	r7, lr, #0, 14
    1740:	73657479 	cmnvc	r5, #2030043136	; 0x79000000
    1744:	55627000 	strbpl	r7, [r2, #-0]!
    1748:	75427273 	strbvc	r7, [r2, #-627]	; 0x273
    174c:	65740066 	ldrbvs	r0, [r4, #-102]!	; 0x66
    1750:	0031706d 	eorseq	r7, r1, sp, rrx
    1754:	706d6574 	rsbvc	r6, sp, r4, ror r5
    1758:	50770032 	rsbspl	r0, r7, r2, lsr r0
    175c:	7542414d 	strbvc	r4, [r2, #-333]	; 0x14d
    1760:	64644166 	strbtvs	r4, [r4], #-358	; 0x166
    1764:	64700072 	ldrbtvs	r0, [r0], #-114	; 0x72
    1768:	6c615677 	stclvs	6, cr5, [r1], #-476	; 0xfffffe24
	...

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
       0:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
       4:	080001c6 	stmdaeq	r0, {r1, r2, r6, r7, r8}
       8:	c6500001 	ldrbgt	r0, [r0], -r1
       c:	c8080001 	stmdagt	r8, {r0}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
      10:	04080001 	streq	r0, [r8], #-1
      14:	5001f300 	andpl	pc, r1, r0, lsl #6
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
      18:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      1c:	00000000 	andeq	r0, r0, r0
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
      20:	00023800 	andeq	r3, r2, r0, lsl #16
      24:	00023c08 	andeq	r3, r2, r8, lsl #24
      28:	71000508 	tstvc	r0, r8, lsl #10
    if ((wEPVal & EP_CTR_RX) != 0)
      2c:	9f274000 	svcls	0x00274000
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
      30:	0800023c 	stmdaeq	r0, {r2, r3, r4, r5, r9}
      34:	08000240 	stmdaeq	r0, {r6, r9}
      38:	00710007 	rsbseq	r0, r1, r7

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
      3c:	27402740 	strbcs	r2, [r0, -r0, asr #14]

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
      40:	0002409f 	muleq	r2, pc, r0	; <UNPREDICTABLE>
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
      44:	00024208 	andeq	r4, r2, r8, lsl #4
      48:	73000808 	movwvc	r0, #2056	; 0x808
      4c:	27400600 	strbcs	r0, [r0, -r0, lsl #12]

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
      50:	429f2740 	addsmi	r2, pc, #64, 14	; 0x1000000
      54:	61080002 	tstvs	r8, r2
      58:	0b080002 	bleq	200068 <__Stack_Size+0x1ffc68>
      5c:	5c000c00 	stcpl	12, cr0, [r0], {-0}
      60:	40064000 	andmi	r4, r6, r0
      64:	9f274027 	svcls	0x00274027
	...
      70:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
      74:	080002bb 	stmdaeq	r0, {r0, r1, r3, r4, r5, r7, r9}
      78:	bb500001 	bllt	1400084 <__Stack_Size+0x13ffc84>
      7c:	04080002 	streq	r0, [r8], #-2
      80:	04080003 	streq	r0, [r8], #-3
      84:	5001f300 	andpl	pc, r1, r0, lsl #6
      88:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      8c:	00000000 	andeq	r0, r0, r0
      90:	0002a400 	andeq	sl, r2, r0, lsl #8
      94:	0002ce08 	andeq	ip, r2, r8, lsl #28
      98:	30000208 	andcc	r0, r0, r8, lsl #4
      9c:	0002d69f 	muleq	r2, pc, r6	; <UNPREDICTABLE>
      a0:	0002dc08 	andeq	sp, r2, r8, lsl #24
      a4:	30000208 	andcc	r0, r0, r8, lsl #4
      a8:	0002dc9f 	muleq	r2, pc, ip	; <UNPREDICTABLE>
      ac:	0002e708 	andeq	lr, r2, r8, lsl #14
      b0:	53000108 	movwpl	r0, #264	; 0x108
      b4:	080002ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9}
      b8:	08000304 	stmdaeq	r0, {r2, r8, r9}
      bc:	9f300002 	svcls	0x00300002
	...
      c8:	08000304 	stmdaeq	r0, {r2, r8, r9}
      cc:	08000309 	stmdaeq	r0, {r0, r3, r8, r9}
      d0:	09500001 	ldmdbeq	r0, {r0}^
      d4:	10080003 	andne	r0, r8, r3
      d8:	04080003 	streq	r0, [r8], #-3
      dc:	5001f300 	andpl	pc, r1, r0, lsl #6
      e0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
      e4:	00000000 	andeq	r0, r0, r0
      e8:	00031000 	andeq	r1, r3, r0
      ec:	00031508 	andeq	r1, r3, r8, lsl #10
      f0:	50000108 	andpl	r0, r0, r8, lsl #2
      f4:	08000315 	stmdaeq	r0, {r0, r2, r4, r8, r9}
      f8:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
      fc:	01f30004 	mvnseq	r0, r4
     100:	00009f50 	andeq	r9, r0, r0, asr pc
     104:	00000000 	andeq	r0, r0, r0
     108:	031c0000 	tsteq	ip, #0
     10c:	032f0800 	teqeq	pc, #0, 16
     110:	00010800 	andeq	r0, r1, r0, lsl #16
     114:	00032f50 	andeq	r2, r3, r0, asr pc
     118:	00033008 	andeq	r3, r3, r8
     11c:	f3000408 	vshl.u8	d0, d8, d0
     120:	309f5001 	addscc	r5, pc, r1
     124:	32080003 	andcc	r0, r8, #3
     128:	01080003 	tsteq	r8, r3
     12c:	03325000 	teqeq	r2, #0
     130:	033c0800 	teqeq	ip, #0, 16
     134:	00040800 	andeq	r0, r4, r0, lsl #16
     138:	9f5001f3 	svcls	0x005001f3
	...
     144:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
     148:	08000341 	stmdaeq	r0, {r0, r6, r8, r9}
     14c:	41500001 	cmpmi	r0, r1
     150:	48080003 	stmdami	r8, {r0, r1}
     154:	04080003 	streq	r0, [r8], #-3
     158:	5001f300 	andpl	pc, r1, r0, lsl #6
     15c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     160:	00000000 	andeq	r0, r0, r0
     164:	00034800 	andeq	r4, r3, r0, lsl #16
     168:	00035b08 	andeq	r5, r3, r8, lsl #22
     16c:	50000108 	andpl	r0, r0, r8, lsl #2
     170:	0800035b 	stmdaeq	r0, {r0, r1, r3, r4, r6, r8, r9}
     174:	08000366 	stmdaeq	r0, {r1, r2, r5, r6, r8, r9}
     178:	01f30004 	mvnseq	r0, r4
     17c:	03669f50 	cmneq	r6, #80, 30	; 0x140
     180:	03680800 	cmneq	r8, #0, 16
     184:	00010800 	andeq	r0, r1, r0, lsl #16
     188:	00036850 	andeq	r6, r3, r0, asr r8
     18c:	00037008 	andeq	r7, r3, r8
     190:	f3000408 	vshl.u8	d0, d8, d0
     194:	009f5001 	addseq	r5, pc, r1
     198:	00000000 	andeq	r0, r0, r0
     19c:	58000000 	stmdapl	r0, {}	; <UNPREDICTABLE>
     1a0:	66080003 	strvs	r0, [r8], -r3
     1a4:	04080003 	streq	r0, [r8], #-3
     1a8:	5001f300 	andpl	pc, r1, r0, lsl #6
     1ac:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     1b0:	00000000 	andeq	r0, r0, r0
     1b4:	0003ee00 	andeq	lr, r3, r0, lsl #28
     1b8:	0003f208 	andeq	pc, r3, r8, lsl #4
     1bc:	72000508 	andvc	r0, r0, #8, 10	; 0x2000000
     1c0:	9f213c00 	svcls	0x00213c00
	...
     1cc:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
     1d0:	08000439 	stmdaeq	r0, {r0, r3, r4, r5, sl}
     1d4:	39500001 	ldmdbcc	r0, {r0}^
     1d8:	3c080004 	stccc	0, cr0, [r8], {4}
     1dc:	04080004 	streq	r0, [r8], #-4
     1e0:	5001f300 	andpl	pc, r1, r0, lsl #6
     1e4:	00043c9f 	muleq	r4, pc, ip	; <UNPREDICTABLE>
     1e8:	00043f08 	andeq	r3, r4, r8, lsl #30
     1ec:	50000108 	andpl	r0, r0, r8, lsl #2
     1f0:	0800043f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r5, sl}
     1f4:	08000444 	stmdaeq	r0, {r2, r6, sl}
     1f8:	01f30004 	mvnseq	r0, r4
     1fc:	04449f50 	strbeq	r9, [r4], #-3920	; 0xf50
     200:	04920800 	ldreq	r0, [r2], #2048	; 0x800
     204:	00010800 	andeq	r0, r1, r0, lsl #16
     208:	00049250 	andeq	r9, r4, r0, asr r2
     20c:	0004a008 	andeq	sl, r4, r8
     210:	f3000408 	vshl.u8	d0, d8, d0
     214:	009f5001 	addseq	r5, pc, r1
     218:	00000000 	andeq	r0, r0, r0
     21c:	62000000 	andvs	r0, r0, #0
     220:	66080004 	strvs	r0, [r8], -r4
     224:	05080004 	streq	r0, [r8, #-4]
     228:	40007200 	andmi	r7, r0, r0, lsl #4
     22c:	04869f21 	streq	r9, [r6], #3873	; 0xf21
     230:	048c0800 	streq	r0, [ip], #2048	; 0x800
     234:	00060800 	andeq	r0, r6, r0, lsl #16
     238:	ef090071 	svc	0x00090071
     23c:	00009f1a 	andeq	r9, r0, sl, lsl pc
     240:	00000000 	andeq	r0, r0, r0
     244:	066e0000 	strbteq	r0, [lr], -r0
     248:	06700800 	ldrbteq	r0, [r0], -r0, lsl #16
     24c:	00010800 	andeq	r0, r1, r0, lsl #16
     250:	00067050 	andeq	r7, r6, r0, asr r0
     254:	0006ce08 	andeq	ip, r6, r8, lsl #28
     258:	55000108 	strpl	r0, [r0, #-264]	; 0x108
	...
     264:	0800066e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r9, sl}
     268:	08000670 	stmdaeq	r0, {r4, r5, r6, r9, sl}
     26c:	9f300002 	svcls	0x00300002
     270:	08000670 	stmdaeq	r0, {r4, r5, r6, r9, sl}
     274:	08000692 	stmdaeq	r0, {r1, r4, r7, r9, sl}
     278:	01740003 	cmneq	r4, r3
     27c:	0006929f 	muleq	r6, pc, r2	; <UNPREDICTABLE>
     280:	00069408 	andeq	r9, r6, r8, lsl #8
     284:	54000108 	strpl	r0, [r0], #-264	; 0x108
     288:	08000694 	stmdaeq	r0, {r2, r4, r7, r9, sl}
     28c:	080006ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r9, sl}
     290:	01740003 	cmneq	r4, r3
     294:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     298:	00000000 	andeq	r0, r0, r0
     29c:	0006dc00 	andeq	sp, r6, r0, lsl #24
     2a0:	0006e208 	andeq	lr, r6, r8, lsl #4
     2a4:	51000108 	tstpl	r0, r8, lsl #2
     2a8:	080006e2 	stmdaeq	r0, {r1, r5, r6, r7, r9, sl}
     2ac:	080006f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl}
     2b0:	01f30004 	mvnseq	r0, r4
     2b4:	00009f51 	andeq	r9, r0, r1, asr pc
     2b8:	00000000 	andeq	r0, r0, r0
     2bc:	06dc0000 	ldrbeq	r0, [ip], r0
     2c0:	06dc0800 	ldrbeq	r0, [ip], r0, lsl #16
     2c4:	00010800 	andeq	r0, r1, r0, lsl #16
     2c8:	0006dc52 	andeq	sp, r6, r2, asr ip
     2cc:	0006e608 	andeq	lr, r6, r8, lsl #12
     2d0:	72000708 	andvc	r0, r0, #8, 14	; 0x200000
     2d4:	30244800 	eorcc	r4, r4, r0, lsl #16
     2d8:	06e69f29 	strbteq	r9, [r6], r9, lsr #30
     2dc:	06f20800 	ldrbteq	r0, [r2], r0, lsl #16
     2e0:	00080800 	andeq	r0, r8, r0, lsl #16
     2e4:	485201f3 	ldmdami	r2, {r0, r1, r4, r5, r6, r7, r8}^
     2e8:	9f293024 	svcls	0x00293024
	...
     2fc:	00500001 	subseq	r0, r0, r1
     300:	00000000 	andeq	r0, r0, r0
     304:	04000000 	streq	r0, [r0], #-0
     308:	5001f300 	andpl	pc, r1, r0, lsl #6
     30c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     31c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     328:	01f30004 	mvnseq	r0, r4
     32c:	00009f51 	andeq	r9, r0, r1, asr pc
     330:	00000000 	andeq	r0, r0, r0
     334:	06f40000 	ldrbteq	r0, [r4], r0
     338:	06f80800 	ldrbteq	r0, [r8], r0, lsl #16
     33c:	00020800 	andeq	r0, r2, r0, lsl #16
     340:	06f89f30 			; <UNDEFINED> instruction: 0x06f89f30
     344:	06fc0800 	ldrbteq	r0, [ip], r0, lsl #16
     348:	00090800 	andeq	r0, r9, r0, lsl #16
     34c:	000a0070 	andeq	r0, sl, r0, ror r0
     350:	2e301a40 	vsubcs.f32	s2, s0, s0
     354:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     358:	00000000 	andeq	r0, r0, r0
     35c:	00070400 	andeq	r0, r7, r0, lsl #8
     360:	00071f08 	andeq	r1, r7, r8, lsl #30
     364:	50000108 	andpl	r0, r0, r8, lsl #2
     368:	0800071f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl}
     36c:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
     370:	00580001 	subseq	r0, r8, r1
     374:	00000000 	andeq	r0, r0, r0
     378:	04000000 	streq	r0, [r0], #-0
     37c:	1f080007 	svcne	0x00080007
     380:	01080007 	tsteq	r8, r7
     384:	071f5100 	ldreq	r5, [pc, -r0, lsl #2]
     388:	07540800 	ldrbeq	r0, [r4, -r0, lsl #16]
     38c:	00040800 	andeq	r0, r4, r0, lsl #16
     390:	9f5101f3 	svcls	0x005101f3
	...
     39c:	08000704 	stmdaeq	r0, {r2, r8, r9, sl}
     3a0:	08000716 	stmdaeq	r0, {r1, r2, r4, r8, r9, sl}
     3a4:	16520001 	ldrbne	r0, [r2], -r1
     3a8:	20080007 	andcs	r0, r8, r7
     3ac:	04080007 	streq	r0, [r8], #-7
     3b0:	5201f300 	andpl	pc, r1, #0, 6
     3b4:	0007209f 	muleq	r7, pc, r0	; <UNPREDICTABLE>
     3b8:	00074808 	andeq	r4, r7, r8, lsl #16
     3bc:	74000308 	strvc	r0, [r0], #-776	; 0x308
     3c0:	07489f7f 	smlsldxeq	r9, r8, pc, pc	; <UNPREDICTABLE>
     3c4:	074e0800 	strbeq	r0, [lr, -r0, lsl #16]
     3c8:	00030800 	andeq	r0, r3, r0, lsl #16
     3cc:	509f0074 	addspl	r0, pc, r4, ror r0	; <UNPREDICTABLE>
     3d0:	54080007 	strpl	r0, [r8], #-7
     3d4:	03080007 	movweq	r0, #32775	; 0x8007
     3d8:	9f7f7400 	svcls	0x007f7400
	...
     3e4:	08000704 	stmdaeq	r0, {r2, r8, r9, sl}
     3e8:	0800071f 	stmdaeq	r0, {r0, r1, r2, r3, r4, r8, r9, sl}
     3ec:	1f530001 	svcne	0x00530001
     3f0:	54080007 	strpl	r0, [r8], #-7
     3f4:	01080007 	tsteq	r8, r7
     3f8:	00005600 	andeq	r5, r0, r0, lsl #12
     3fc:	00000000 	andeq	r0, r0, r0
     400:	07240000 	streq	r0, [r4, -r0]!
     404:	07360800 	ldreq	r0, [r6, -r0, lsl #16]!
     408:	00010800 	andeq	r0, r1, r0, lsl #16
     40c:	00073655 	andeq	r3, r7, r5, asr r6
     410:	00073808 	andeq	r3, r7, r8, lsl #16
     414:	56000108 	strpl	r0, [r0], -r8, lsl #2
     418:	08000738 	stmdaeq	r0, {r3, r4, r5, r8, r9, sl}
     41c:	08000750 	stmdaeq	r0, {r4, r6, r8, r9, sl}
     420:	00550001 	subseq	r0, r5, r1
     424:	00000000 	andeq	r0, r0, r0
     428:	2e000000 	cdpcs	0, 0, cr0, cr0, cr0, {0}
     42c:	34080008 	strcc	r0, [r8], #-8
     430:	01080008 	tsteq	r8, r8
     434:	00005200 	andeq	r5, r0, r0, lsl #4
     438:	00000000 	andeq	r0, r0, r0
     43c:	08400000 	stmdaeq	r0, {}^	; <UNPREDICTABLE>
     440:	08440800 	stmdaeq	r4, {fp}^
     444:	00010800 	andeq	r0, r1, r0, lsl #16
     448:	00084450 	andeq	r4, r8, r0, asr r4
     44c:	00085408 	andeq	r5, r8, r8, lsl #8
     450:	f3000408 	vshl.u8	d0, d8, d0
     454:	009f5001 	addseq	r5, pc, r1
     458:	00000000 	andeq	r0, r0, r0
     45c:	42000000 	andmi	r0, r0, #0
     460:	4a080008 	bmi	200488 <__Stack_Size+0x200088>
     464:	01080008 	tsteq	r8, r8
     468:	00005300 	andeq	r5, r0, r0, lsl #6
     46c:	00000000 	andeq	r0, r0, r0
     470:	08540000 	ldmdaeq	r4, {}^	; <UNPREDICTABLE>
     474:	08620800 	stmdaeq	r2!, {fp}^
     478:	00020800 	andeq	r0, r2, r0, lsl #16
     47c:	08629f30 	stmdaeq	r2!, {r4, r5, r8, r9, sl, fp, ip, pc}^
     480:	086a0800 	stmdaeq	sl!, {fp}^
     484:	00010800 	andeq	r0, r1, r0, lsl #16
     488:	00086a53 	andeq	r6, r8, r3, asr sl
     48c:	00087608 	andeq	r7, r8, r8, lsl #12
     490:	52000108 	andpl	r0, r0, #8, 2
     494:	08000876 	stmdaeq	r0, {r1, r2, r4, r5, r6, fp}
     498:	08000898 	stmdaeq	r0, {r3, r4, r7, fp}
     49c:	98540001 	ldmdals	r4, {r0}^
     4a0:	9a080008 	bls	2004c8 <__Stack_Size+0x2000c8>
     4a4:	06080008 	streq	r0, [r8], -r8
     4a8:	72007400 	andvc	r7, r0, #0, 8
     4ac:	9a9f1a00 	bls	fe7c6cb4 <BootRAM+0xd737455>
     4b0:	9c080008 	stcls	0, cr0, [r8], {8}
     4b4:	01080008 	tsteq	r8, r8
     4b8:	089c5200 	ldmeq	ip, {r9, ip, lr}
     4bc:	08a00800 	stmiaeq	r0!, {fp}
     4c0:	00120800 	andseq	r0, r2, r0, lsl #16
     4c4:	0070ff08 	rsbseq	pc, r0, r8, lsl #30
     4c8:	1a330194 	bne	cc0b20 <__Stack_Size+0xcc0720>
     4cc:	331aff08 	tstcc	sl, #8, 30
     4d0:	00742424 	rsbseq	r2, r4, r4, lsr #8
     4d4:	00009f1a 	andeq	r9, r0, sl, lsl pc
     4d8:	00000000 	andeq	r0, r0, r0
     4dc:	08540000 	ldmdaeq	r4, {}^	; <UNPREDICTABLE>
     4e0:	08940800 	ldmeq	r4, {fp}
     4e4:	00020800 	andeq	r0, r2, r0, lsl #16
     4e8:	08949f30 	ldmeq	r4, {r4, r5, r8, r9, sl, fp, ip, pc}
     4ec:	08980800 	ldmeq	r8, {fp}
     4f0:	00010800 	andeq	r0, r1, r0, lsl #16
     4f4:	00089855 	andeq	r9, r8, r5, asr r8
     4f8:	00089c08 	andeq	r9, r8, r8, lsl #24
     4fc:	51000108 	tstpl	r0, r8, lsl #2
     500:	0800089c 	stmdaeq	r0, {r2, r3, r4, r7, fp}
     504:	080008a4 	stmdaeq	r0, {r2, r5, r7, fp}
     508:	00520001 	subseq	r0, r2, r1
     50c:	00000000 	andeq	r0, r0, r0
     510:	54000000 	strpl	r0, [r0], #-0
     514:	94080008 	strls	r0, [r8], #-8
     518:	02080008 	andeq	r0, r8, #8
     51c:	949f3000 	ldrls	r3, [pc], #0	; 524 <__Stack_Size+0x124>
     520:	9a080008 	bls	200548 <__Stack_Size+0x200148>
     524:	01080008 	tsteq	r8, r8
     528:	089a5200 	ldmeq	sl, {r9, ip, lr}
     52c:	08a00800 	stmiaeq	r0!, {fp}
     530:	000f0800 	andeq	r0, pc, r0, lsl #16
     534:	0070ff08 	rsbseq	pc, r0, r8, lsl #30
     538:	1a330194 	bne	cc0b90 <__Stack_Size+0xcc0790>
     53c:	331aff08 	tstcc	sl, #8, 30
     540:	009f2424 	addseq	r2, pc, r4, lsr #8
     544:	00000000 	andeq	r0, r0, r0
     548:	54000000 	strpl	r0, [r0], #-0
     54c:	62080008 	andvs	r0, r8, #8
     550:	02080008 	andeq	r0, r8, #8
     554:	629f3000 	addsvs	r3, pc, #0
     558:	66080008 	strvs	r0, [r8], -r8
     55c:	05080008 	streq	r0, [r8, #-8]
     560:	00733400 	rsbseq	r3, r3, r0, lsl #8
     564:	08669f1c 	stmdaeq	r6!, {r2, r3, r4, r8, r9, sl, fp, ip, pc}^
     568:	086a0800 	stmdaeq	sl!, {fp}^
     56c:	00010800 	andeq	r0, r1, r0, lsl #16
     570:	00086a52 	andeq	r6, r8, r2, asr sl
     574:	00087208 	andeq	r7, r8, r8, lsl #4
     578:	34000508 	strcc	r0, [r0], #-1288	; 0x508
     57c:	9f1c0073 	svcls	0x001c0073
	...
     588:	08000854 	stmdaeq	r0, {r2, r4, r6, fp}
     58c:	08000862 	stmdaeq	r0, {r1, r5, r6, fp}
     590:	9f3f0002 	svcls	0x003f0002
     594:	08000862 	stmdaeq	r0, {r1, r5, r6, fp}
     598:	0800086e 	stmdaeq	r0, {r1, r2, r3, r5, r6, fp}
     59c:	733f0005 	teqvc	pc, #5
     5a0:	6e9f2500 	cdpvs	5, 9, cr2, cr15, cr0, {0}
     5a4:	74080008 	strvc	r0, [r8], #-8
     5a8:	01080008 	tsteq	r8, r8
     5ac:	00005400 	andeq	r5, r0, r0, lsl #8
     5b0:	00000000 	andeq	r0, r0, r0
     5b4:	08e40000 	stmiaeq	r4!, {}^	; <UNPREDICTABLE>
     5b8:	08f30800 	ldmeq	r3!, {fp}^
     5bc:	00010800 	andeq	r0, r1, r0, lsl #16
     5c0:	0008f350 	andeq	pc, r8, r0, asr r3	; <UNPREDICTABLE>
     5c4:	00090a08 	andeq	r0, r9, r8, lsl #20
     5c8:	54000108 	strpl	r0, [r0], #-264	; 0x108
     5cc:	0800090a 	stmdaeq	r0, {r1, r3, r8, fp}
     5d0:	08000910 	stmdaeq	r0, {r4, r8, fp}
     5d4:	01f30004 	mvnseq	r0, r4
     5d8:	00009f50 	andeq	r9, r0, r0, asr pc
     5dc:	00000000 	andeq	r0, r0, r0
     5e0:	08ec0000 	stmiaeq	ip!, {}^	; <UNPREDICTABLE>
     5e4:	090a0800 	stmdbeq	sl, {fp}
     5e8:	00010800 	andeq	r0, r1, r0, lsl #16
     5ec:	00000055 	andeq	r0, r0, r5, asr r0
     5f0:	00000000 	andeq	r0, r0, r0
     5f4:	00092400 	andeq	r2, r9, r0, lsl #8
     5f8:	00094c08 	andeq	r4, r9, r8, lsl #24
     5fc:	50000108 	andpl	r0, r0, r8, lsl #2
     600:	0800094c 	stmdaeq	r0, {r2, r3, r6, r8, fp}
     604:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
     608:	01f30004 	mvnseq	r0, r4
     60c:	00009f50 	andeq	r9, r0, r0, asr pc
     610:	00000000 	andeq	r0, r0, r0
     614:	092a0000 	stmdbeq	sl!, {}	; <UNPREDICTABLE>
     618:	09480800 	stmdbeq	r8, {fp}^
     61c:	00020800 	andeq	r0, r2, r0, lsl #16
     620:	09489f32 	stmdbeq	r8, {r1, r4, r5, r8, r9, sl, fp, ip, pc}^
     624:	09580800 	ldmdbeq	r8, {fp}^
     628:	00020800 	andeq	r0, r2, r0, lsl #16
     62c:	00009f30 	andeq	r9, r0, r0, lsr pc
	...
     63c:	00010000 	andeq	r0, r1, r0
     640:	00000050 	andeq	r0, r0, r0, asr r0
     644:	00000000 	andeq	r0, r0, r0
     648:	55000100 	strpl	r0, [r0, #-256]	; 0x100
	...
     654:	01f30004 	mvnseq	r0, r4
     658:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     668:	00010000 	andeq	r0, r1, r0
     66c:	00000051 	andeq	r0, r0, r1, asr r0
     670:	00000000 	andeq	r0, r0, r0
     674:	f3000400 	vshl.u8	d0, d0, d0
     678:	009f5101 	addseq	r5, pc, r1, lsl #2
     67c:	00000000 	andeq	r0, r0, r0
     680:	01000000 	mrseq	r0, (UNDEF: 0)
     684:	00005400 	andeq	r5, r0, r0, lsl #8
     688:	00000000 	andeq	r0, r0, r0
     68c:	00030000 	andeq	r0, r3, r0
     690:	009f0174 	addseq	r0, pc, r4, ror r1	; <UNPREDICTABLE>
     694:	00000000 	andeq	r0, r0, r0
     698:	01000000 	mrseq	r0, (UNDEF: 0)
     69c:	00005400 	andeq	r5, r0, r0, lsl #8
     6a0:	00000000 	andeq	r0, r0, r0
     6a4:	09580000 	ldmdbeq	r8, {}^	; <UNPREDICTABLE>
     6a8:	09920800 	ldmibeq	r2, {fp}
     6ac:	00010800 	andeq	r0, r1, r0, lsl #16
     6b0:	00099250 	andeq	r9, r9, r0, asr r2
     6b4:	0009a408 	andeq	sl, r9, r8, lsl #8
     6b8:	f3000408 	vshl.u8	d0, d8, d0
     6bc:	009f5001 	addseq	r5, pc, r1
     6c0:	00000000 	andeq	r0, r0, r0
     6c4:	68000000 	stmdavs	r0, {}	; <UNPREDICTABLE>
     6c8:	8e080009 	cdphi	0, 0, cr0, cr8, cr9, {0}
     6cc:	01080009 	tsteq	r8, r9
     6d0:	098e5400 	stmibeq	lr, {sl, ip, lr}
     6d4:	09a40800 	stmibeq	r4!, {fp}
     6d8:	00010800 	andeq	r0, r1, r0, lsl #16
     6dc:	00000052 	andeq	r0, r0, r2, asr r0
     6e0:	00000000 	andeq	r0, r0, r0
     6e4:	0009c800 	andeq	ip, r9, r0, lsl #16
     6e8:	0009ce08 	andeq	ip, r9, r8, lsl #28
     6ec:	50000108 	andpl	r0, r0, r8, lsl #2
     6f0:	080009ce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, fp}
     6f4:	080009d2 	stmdaeq	r0, {r1, r4, r6, r7, r8, fp}
     6f8:	00500001 	subseq	r0, r0, r1
     6fc:	00000000 	andeq	r0, r0, r0
     700:	ce000000 	cdpgt	0, 0, cr0, cr0, cr0, {0}
     704:	d2080009 	andle	r0, r8, #9
     708:	07080009 	streq	r0, [r8, -r9]
     70c:	00703f00 	rsbseq	r3, r0, r0, lsl #30
     710:	9f242432 	svcls	0x00242432
     714:	080009d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, fp}
     718:	080009d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, fp}
     71c:	d8500001 	ldmdale	r0, {r0}^
     720:	da080009 	ble	20074c <__Stack_Size+0x20034c>
     724:	04080009 	streq	r0, [r8], #-9
     728:	20007000 	andcs	r7, r0, r0
     72c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     730:	00000000 	andeq	r0, r0, r0
     734:	000a6c00 	andeq	r6, sl, r0, lsl #24
     738:	000a7408 	andeq	r7, sl, r8, lsl #8
     73c:	51000108 	tstpl	r0, r8, lsl #2
     740:	08000a84 	stmdaeq	r0, {r2, r7, r9, fp}
     744:	08000a8c 	stmdaeq	r0, {r2, r3, r7, r9, fp}
     748:	98510001 	ldmdals	r1, {r0}^
     74c:	a408000a 	strge	r0, [r8], #-10
     750:	0108000a 	tsteq	r8, sl
     754:	00005100 	andeq	r5, r0, r0, lsl #2
     758:	00000000 	andeq	r0, r0, r0
     75c:	0aa40000 	beq	fe900764 <BootRAM+0xd870f05>
     760:	0ab20800 	beq	fec82768 <BootRAM+0xdbf2f09>
     764:	00010800 	andeq	r0, r1, r0, lsl #16
     768:	000ab250 	andeq	fp, sl, r0, asr r2
     76c:	000abc08 	andeq	fp, sl, r8, lsl #24
     770:	f3000408 	vshl.u8	d0, d8, d0
     774:	009f5001 	addseq	r5, pc, r1
     778:	00000000 	andeq	r0, r0, r0
     77c:	bc000000 	stclt	0, cr0, [r0], {-0}
     780:	ca08000a 	bgt	2007b0 <__Stack_Size+0x2003b0>
     784:	0108000a 	tsteq	r8, sl
     788:	0aca5000 	beq	ff294790 <BootRAM+0xe204f31>
     78c:	0ad40800 	beq	ff502794 <BootRAM+0xe472f35>
     790:	00040800 	andeq	r0, r4, r0, lsl #16
     794:	9f5001f3 	svcls	0x005001f3
	...
     7a0:	08000ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp}
     7a4:	08000aec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r9, fp}
     7a8:	ec500001 	mrrc	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
     7ac:	fc08000a 	stc2	0, cr0, [r8], {10}
     7b0:	0408000a 	streq	r0, [r8], #-10
     7b4:	5001f300 	andpl	pc, r1, r0, lsl #6
     7b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     7bc:	00000000 	andeq	r0, r0, r0
     7c0:	000afc00 	andeq	pc, sl, r0, lsl #24
     7c4:	000b1808 	andeq	r1, fp, r8, lsl #16
     7c8:	50000108 	andpl	r0, r0, r8, lsl #2
     7cc:	08000b18 	stmdaeq	r0, {r3, r4, r8, r9, fp}
     7d0:	08000b30 	stmdaeq	r0, {r4, r5, r8, r9, fp}
     7d4:	01f30004 	mvnseq	r0, r4
     7d8:	00009f50 	andeq	r9, r0, r0, asr pc
     7dc:	00000000 	andeq	r0, r0, r0
     7e0:	0b500000 	bleq	14007e8 <__Stack_Size+0x14003e8>
     7e4:	0b520800 	bleq	14827ec <__Stack_Size+0x14823ec>
     7e8:	00020800 	andeq	r0, r2, r0, lsl #16
     7ec:	0b529f30 	bleq	14a84b4 <__Stack_Size+0x14a80b4>
     7f0:	0b7a0800 	bleq	1e827f8 <__Stack_Size+0x1e823f8>
     7f4:	00010800 	andeq	r0, r1, r0, lsl #16
     7f8:	00000055 	andeq	r0, r0, r5, asr r0
     7fc:	00000000 	andeq	r0, r0, r0
     800:	000b9e00 	andeq	r9, fp, r0, lsl #28
     804:	000bce08 	andeq	ip, fp, r8, lsl #28
     808:	53000108 	movwpl	r0, #264	; 0x108
     80c:	08000be0 	stmdaeq	r0, {r5, r6, r7, r8, r9, fp}
     810:	08000bed 	stmdaeq	r0, {r0, r2, r3, r5, r6, r7, r8, r9, fp}
     814:	fa530001 	blx	14c0820 <__Stack_Size+0x14c0420>
     818:	fc08000b 	stc2	0, cr0, [r8], {11}
     81c:	0108000b 	tsteq	r8, fp
     820:	0bfe5300 	bleq	fff95428 <BootRAM+0xef05bc9>
     824:	0c040800 	stceq	8, cr0, [r4], {-0}
     828:	00010800 	andeq	r0, r1, r0, lsl #16
     82c:	000c4653 	andeq	r4, ip, r3, asr r6
     830:	000c6208 	andeq	r6, ip, r8, lsl #4
     834:	53000108 	movwpl	r0, #264	; 0x108
     838:	08000c6a 	stmdaeq	r0, {r1, r3, r5, r6, sl, fp}
     83c:	08000c7c 	stmdaeq	r0, {r2, r3, r4, r5, r6, sl, fp}
     840:	86530001 	ldrbhi	r0, [r3], -r1
     844:	8c08000c 	stchi	0, cr0, [r8], {12}
     848:	0108000c 	tsteq	r8, ip
     84c:	0cb45300 	ldceq	3, cr5, [r4]
     850:	0cc40800 	stcleq	8, cr0, [r4], {0}
     854:	00010800 	andeq	r0, r1, r0, lsl #16
     858:	000cca53 	andeq	ip, ip, r3, asr sl
     85c:	000cde08 	andeq	sp, ip, r8, lsl #28
     860:	53000108 	movwpl	r0, #264	; 0x108
     864:	08000d56 	stmdaeq	r0, {r1, r2, r4, r6, r8, sl, fp}
     868:	08000d5c 	stmdaeq	r0, {r2, r3, r4, r6, r8, sl, fp}
     86c:	00530001 	subseq	r0, r3, r1
	...
     87c:	01000000 	mrseq	r0, (UNDEF: 0)
     880:	00005000 	andeq	r5, r0, r0
     884:	00000000 	andeq	r0, r0, r0
     888:	00040000 	andeq	r0, r4, r0
     88c:	9f5001f3 	svcls	0x005001f3
	...
     8a0:	00500001 	subseq	r0, r0, r1
     8a4:	00000000 	andeq	r0, r0, r0
     8a8:	04000000 	streq	r0, [r0], #-0
     8ac:	5001f300 	andpl	pc, r1, r0, lsl #6
     8b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     8c0:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     8cc:	01f30004 	mvnseq	r0, r4
     8d0:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     8e0:	00010000 	andeq	r0, r1, r0
     8e4:	00000051 	andeq	r0, r0, r1, asr r0
     8e8:	00000000 	andeq	r0, r0, r0
     8ec:	f3000400 	vshl.u8	d0, d0, d0
     8f0:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     900:	01000000 	mrseq	r0, (UNDEF: 0)
     904:	00005000 	andeq	r5, r0, r0
     908:	00000000 	andeq	r0, r0, r0
     90c:	00040000 	andeq	r0, r4, r0
     910:	9f5001f3 	svcls	0x005001f3
	...
     91c:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
     920:	08000dd2 	stmdaeq	r0, {r1, r4, r6, r7, r8, sl, fp}
     924:	d2500001 	subsle	r0, r0, #1
     928:	fa08000d 	blx	200964 <__Stack_Size+0x200564>
     92c:	0408000d 	streq	r0, [r8], #-13
     930:	5001f300 	andpl	pc, r1, r0, lsl #6
     934:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     944:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     950:	01f30004 	mvnseq	r0, r4
     954:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     964:	00010000 	andeq	r0, r1, r0
     968:	00000050 	andeq	r0, r0, r0, asr r0
     96c:	00000000 	andeq	r0, r0, r0
     970:	f3000400 	vshl.u8	d0, d0, d0
     974:	009f5001 	addseq	r5, pc, r1
	...
     984:	01000000 	mrseq	r0, (UNDEF: 0)
     988:	00005000 	andeq	r5, r0, r0
     98c:	00000000 	andeq	r0, r0, r0
     990:	00040000 	andeq	r0, r4, r0
     994:	9f5001f3 	svcls	0x005001f3
	...
     9a8:	00500001 	subseq	r0, r0, r1
     9ac:	00000000 	andeq	r0, r0, r0
     9b0:	04000000 	streq	r0, [r0], #-0
     9b4:	5001f300 	andpl	pc, r1, r0, lsl #6
     9b8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     9c8:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     9d4:	01f30004 	mvnseq	r0, r4
     9d8:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     9e8:	00060000 	andeq	r0, r6, r0
     9ec:	30080073 	andcc	r0, r8, r3, ror r0
     9f0:	00009f27 	andeq	r9, r0, r7, lsr #30
     9f4:	00000000 	andeq	r0, r0, r0
     9f8:	00090000 	andeq	r0, r9, r0
     9fc:	30080073 	andcc	r0, r8, r3, ror r0
     a00:	27300827 	ldrcs	r0, [r0, -r7, lsr #16]!
     a04:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     a08:	00000000 	andeq	r0, r0, r0
     a0c:	000dfa00 	andeq	pc, sp, r0, lsl #20
     a10:	000dfc08 	andeq	pc, sp, r8, lsl #24
     a14:	50000108 	andpl	r0, r0, r8, lsl #2
     a18:	08000dfc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, sl, fp}
     a1c:	08000e18 	stmdaeq	r0, {r3, r4, r9, sl, fp}
     a20:	01f30004 	mvnseq	r0, r4
     a24:	00009f50 	andeq	r9, r0, r0, asr pc
     a28:	00000000 	andeq	r0, r0, r0
     a2c:	0e100000 	cdpeq	0, 1, cr0, cr0, cr0, {0}
     a30:	0e140800 	cdpeq	8, 1, cr0, cr4, cr0, {0}
     a34:	00070800 	andeq	r0, r7, r0, lsl #16
     a38:	000a0073 	andeq	r0, sl, r3, ror r0
     a3c:	149f2730 	ldrne	r2, [pc], #1840	; a44 <__Stack_Size+0x644>
     a40:	1808000e 	stmdane	r8, {r1, r2, r3}
     a44:	0b08000e 	bleq	200a84 <__Stack_Size+0x200684>
     a48:	0a007300 	beq	1d650 <__Stack_Size+0x1d250>
     a4c:	0a273000 	beq	9cca54 <__Stack_Size+0x9cc654>
     a50:	9f273000 	svcls	0x00273000
	...
     a64:	00500001 	subseq	r0, r0, r1
     a68:	00000000 	andeq	r0, r0, r0
     a6c:	04000000 	streq	r0, [r0], #-0
     a70:	5001f300 	andpl	pc, r1, r0, lsl #6
     a74:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     a84:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     a90:	01f30004 	mvnseq	r0, r4
     a94:	00009f50 	andeq	r9, r0, r0, asr pc
     a98:	00000000 	andeq	r0, r0, r0
     a9c:	0e180000 	cdpeq	0, 1, cr0, cr8, cr0, {0}
     aa0:	0e1a0800 	cdpeq	8, 1, cr0, cr10, cr0, {0}
     aa4:	00010800 	andeq	r0, r1, r0, lsl #16
     aa8:	000e1a50 	andeq	r1, lr, r0, asr sl
     aac:	000e3408 	andeq	r3, lr, r8, lsl #8
     ab0:	f3000408 	vshl.u8	d0, d8, d0
     ab4:	009f5001 	addseq	r5, pc, r1
	...
     ac4:	01000000 	mrseq	r0, (UNDEF: 0)
     ac8:	00005000 	andeq	r5, r0, r0
     acc:	00000000 	andeq	r0, r0, r0
     ad0:	00040000 	andeq	r0, r4, r0
     ad4:	9f5001f3 	svcls	0x005001f3
	...
     ae8:	00500001 	subseq	r0, r0, r1
     aec:	00000000 	andeq	r0, r0, r0
     af0:	04000000 	streq	r0, [r0], #-0
     af4:	5001f300 	andpl	pc, r1, r0, lsl #6
     af8:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b08:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b14:	01f30004 	mvnseq	r0, r4
     b18:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     b28:	00010000 	andeq	r0, r1, r0
     b2c:	00000050 	andeq	r0, r0, r0, asr r0
     b30:	00000000 	andeq	r0, r0, r0
     b34:	f3000400 	vshl.u8	d0, d0, d0
     b38:	009f5001 	addseq	r5, pc, r1
	...
     b48:	01000000 	mrseq	r0, (UNDEF: 0)
     b4c:	00005000 	andeq	r5, r0, r0
     b50:	00000000 	andeq	r0, r0, r0
     b54:	00040000 	andeq	r0, r4, r0
     b58:	9f5001f3 	svcls	0x005001f3
	...
     b6c:	00500001 	subseq	r0, r0, r1
     b70:	00000000 	andeq	r0, r0, r0
     b74:	04000000 	streq	r0, [r0], #-0
     b78:	5001f300 	andpl	pc, r1, r0, lsl #6
     b7c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     b8c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     b98:	01f30004 	mvnseq	r0, r4
     b9c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     bac:	00010000 	andeq	r0, r1, r0
     bb0:	00000050 	andeq	r0, r0, r0, asr r0
     bb4:	00000000 	andeq	r0, r0, r0
     bb8:	f3000400 	vshl.u8	d0, d0, d0
     bbc:	009f5001 	addseq	r5, pc, r1
	...
     bcc:	01000000 	mrseq	r0, (UNDEF: 0)
     bd0:	00005000 	andeq	r5, r0, r0
     bd4:	00000000 	andeq	r0, r0, r0
     bd8:	00040000 	andeq	r0, r4, r0
     bdc:	9f5001f3 	svcls	0x005001f3
	...
     be8:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
     bec:	08000e36 	stmdaeq	r0, {r1, r2, r4, r5, r9, sl, fp}
     bf0:	36500001 	ldrbcc	r0, [r0], -r1
     bf4:	5408000e 	strpl	r0, [r8], #-14
     bf8:	0408000e 	streq	r0, [r8], #-14
     bfc:	5001f300 	andpl	pc, r1, r0, lsl #6
     c00:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     c04:	00000000 	andeq	r0, r0, r0
     c08:	000e5400 	andeq	r5, lr, r0, lsl #8
     c0c:	000e5608 	andeq	r5, lr, r8, lsl #12
     c10:	50000108 	andpl	r0, r0, r8, lsl #2
     c14:	08000e56 	stmdaeq	r0, {r1, r2, r4, r6, r9, sl, fp}
     c18:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
     c1c:	01f30004 	mvnseq	r0, r4
     c20:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     c30:	00010000 	andeq	r0, r1, r0
     c34:	00000050 	andeq	r0, r0, r0, asr r0
     c38:	00000000 	andeq	r0, r0, r0
     c3c:	f3000400 	vshl.u8	d0, d0, d0
     c40:	009f5001 	addseq	r5, pc, r1
	...
     c50:	01000000 	mrseq	r0, (UNDEF: 0)
     c54:	00005100 	andeq	r5, r0, r0, lsl #2
     c58:	00000000 	andeq	r0, r0, r0
     c5c:	00040000 	andeq	r0, r4, r0
     c60:	9f5101f3 	svcls	0x005101f3
	...
     c74:	00500001 	subseq	r0, r0, r1
     c78:	00000000 	andeq	r0, r0, r0
     c7c:	04000000 	streq	r0, [r0], #-0
     c80:	5001f300 	andpl	pc, r1, r0, lsl #6
     c84:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     c94:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     ca0:	01f30004 	mvnseq	r0, r4
     ca4:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     cb4:	00010000 	andeq	r0, r1, r0
     cb8:	00000051 	andeq	r0, r0, r1, asr r0
     cbc:	00000000 	andeq	r0, r0, r0
     cc0:	f3000400 	vshl.u8	d0, d0, d0
     cc4:	009f5101 	addseq	r5, pc, r1, lsl #2
	...
     cd4:	01000000 	mrseq	r0, (UNDEF: 0)
     cd8:	00005000 	andeq	r5, r0, r0
     cdc:	00000000 	andeq	r0, r0, r0
     ce0:	00040000 	andeq	r0, r4, r0
     ce4:	9f5001f3 	svcls	0x005001f3
	...
     cf8:	00510001 	subseq	r0, r1, r1
     cfc:	00000000 	andeq	r0, r0, r0
     d00:	04000000 	streq	r0, [r0], #-0
     d04:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     d08:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d0c:	00000000 	andeq	r0, r0, r0
     d10:	000e7400 	andeq	r7, lr, r0, lsl #8
     d14:	000e7e08 	andeq	r7, lr, r8, lsl #28
     d18:	50000108 	andpl	r0, r0, r8, lsl #2
     d1c:	08000e7e 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r9, sl, fp}
     d20:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
     d24:	01f30004 	mvnseq	r0, r4
     d28:	00009f50 	andeq	r9, r0, r0, asr pc
     d2c:	00000000 	andeq	r0, r0, r0
     d30:	0e900000 	cdpeq	0, 9, cr0, cr0, cr0, {0}
     d34:	0e9a0800 	cdpeq	8, 9, cr0, cr10, cr0, {0}
     d38:	00010800 	andeq	r0, r1, r0, lsl #16
     d3c:	000e9a50 	andeq	r9, lr, r0, asr sl
     d40:	000eac08 	andeq	sl, lr, r8, lsl #24
     d44:	f3000408 	vshl.u8	d0, d8, d0
     d48:	009f5001 	addseq	r5, pc, r1
     d4c:	00000000 	andeq	r0, r0, r0
     d50:	ac000000 	stcge	0, cr0, [r0], {-0}
     d54:	b608000e 	strlt	r0, [r8], -lr
     d58:	0108000e 	tsteq	r8, lr
     d5c:	0eb65000 	cdpeq	0, 11, cr5, cr6, cr0, {0}
     d60:	0ec80800 	cdpeq	8, 12, cr0, cr8, cr0, {0}
     d64:	00040800 	andeq	r0, r4, r0, lsl #16
     d68:	9f5001f3 	svcls	0x005001f3
	...
     d7c:	00510001 	subseq	r0, r1, r1
     d80:	00000000 	andeq	r0, r0, r0
     d84:	04000000 	streq	r0, [r0], #-0
     d88:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     d8c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     d90:	00000000 	andeq	r0, r0, r0
     d94:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     da0:	01f30004 	mvnseq	r0, r4
     da4:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     db4:	00010000 	andeq	r0, r1, r0
     db8:	00000053 	andeq	r0, r0, r3, asr r0
     dbc:	00000000 	andeq	r0, r0, r0
     dc0:	53000100 	movwpl	r0, #256	; 0x100
	...
     dcc:	00530001 	subseq	r0, r3, r1
     dd0:	00000000 	andeq	r0, r0, r0
     dd4:	c8000000 	stmdagt	r0, {}	; <UNPREDICTABLE>
     dd8:	d408000e 	strle	r0, [r8], #-14
     ddc:	0108000e 	tsteq	r8, lr
     de0:	0ed45000 	cdpeq	0, 13, cr5, cr4, cr0, {0}
     de4:	0f080800 	svceq	0x00080800
     de8:	00040800 	andeq	r0, r4, r0, lsl #16
     dec:	9f5001f3 	svcls	0x005001f3
	...
     df8:	08000ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp}
     dfc:	08000ef6 	stmdaeq	r0, {r1, r2, r4, r5, r6, r7, r9, sl, fp}
     e00:	f6510001 			; <UNDEFINED> instruction: 0xf6510001
     e04:	0808000e 	stmdaeq	r8, {r1, r2, r3}
     e08:	0408000f 	streq	r0, [r8], #-15
     e0c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     e10:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     e14:	00000000 	andeq	r0, r0, r0
     e18:	000ee000 	andeq	lr, lr, r0
     e1c:	000ee808 	andeq	lr, lr, r8, lsl #16
     e20:	53000108 	movwpl	r0, #264	; 0x108
     e24:	08000ee8 	stmdaeq	r0, {r3, r5, r6, r7, r9, sl, fp}
     e28:	08000eea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r9, sl, fp}
     e2c:	00710005 	rsbseq	r0, r1, r5
     e30:	ea9f2535 	b	fe7ca30c <BootRAM+0xd73aaad>
     e34:	ec08000e 	stc	0, cr0, [r8], {14}
     e38:	0108000e 	tsteq	r8, lr
     e3c:	0ef45300 	cdpeq	3, 15, cr5, cr4, cr0, {0}
     e40:	0efc0800 	cdpeq	8, 15, cr0, cr12, cr0, {0}
     e44:	00010800 	andeq	r0, r1, r0, lsl #16
     e48:	00000053 	andeq	r0, r0, r3, asr r0
	...
     e58:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     e64:	01f30004 	mvnseq	r0, r4
     e68:	00009f50 	andeq	r9, r0, r0, asr pc
	...
     e78:	00010000 	andeq	r0, r1, r0
     e7c:	00000050 	andeq	r0, r0, r0, asr r0
     e80:	00000000 	andeq	r0, r0, r0
     e84:	f3000400 	vshl.u8	d0, d0, d0
     e88:	009f5001 	addseq	r5, pc, r1
	...
     e98:	01000000 	mrseq	r0, (UNDEF: 0)
     e9c:	00005000 	andeq	r5, r0, r0
     ea0:	00000000 	andeq	r0, r0, r0
     ea4:	00040000 	andeq	r0, r4, r0
     ea8:	9f5001f3 	svcls	0x005001f3
	...
     ebc:	00510001 	subseq	r0, r1, r1
     ec0:	00000000 	andeq	r0, r0, r0
     ec4:	04000000 	streq	r0, [r0], #-0
     ec8:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
     ecc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     edc:	52000100 	andpl	r0, r0, #0, 2
	...
     ee8:	01f30004 	mvnseq	r0, r4
     eec:	00009f52 	andeq	r9, r0, r2, asr pc
	...
     efc:	00010000 	andeq	r0, r1, r0
     f00:	00000050 	andeq	r0, r0, r0, asr r0
     f04:	00000000 	andeq	r0, r0, r0
     f08:	f3000400 	vshl.u8	d0, d0, d0
     f0c:	009f5001 	addseq	r5, pc, r1
	...
     f1c:	01000000 	mrseq	r0, (UNDEF: 0)
     f20:	00005100 	andeq	r5, r0, r0, lsl #2
     f24:	00000000 	andeq	r0, r0, r0
     f28:	00040000 	andeq	r0, r4, r0
     f2c:	9f5101f3 	svcls	0x005101f3
	...
     f40:	00500001 	subseq	r0, r0, r1
     f44:	00000000 	andeq	r0, r0, r0
     f48:	04000000 	streq	r0, [r0], #-0
     f4c:	5001f300 	andpl	pc, r1, r0, lsl #6
     f50:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
     f60:	51000100 	mrspl	r0, (UNDEF: 16)
	...
     f6c:	01f30004 	mvnseq	r0, r4
     f70:	00009f51 	andeq	r9, r0, r1, asr pc
	...
     f80:	00010000 	andeq	r0, r1, r0
     f84:	00000050 	andeq	r0, r0, r0, asr r0
     f88:	00000000 	andeq	r0, r0, r0
     f8c:	f3000400 	vshl.u8	d0, d0, d0
     f90:	009f5001 	addseq	r5, pc, r1
	...
     fa0:	01000000 	mrseq	r0, (UNDEF: 0)
     fa4:	00005000 	andeq	r5, r0, r0
     fa8:	00000000 	andeq	r0, r0, r0
     fac:	00040000 	andeq	r0, r4, r0
     fb0:	9f5001f3 	svcls	0x005001f3
	...
     fc4:	00500001 	subseq	r0, r0, r1
     fc8:	00000000 	andeq	r0, r0, r0
     fcc:	04000000 	streq	r0, [r0], #-0
     fd0:	5001f300 	andpl	pc, r1, r0, lsl #6
     fd4:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
     fd8:	00000000 	andeq	r0, r0, r0
     fdc:	50000100 	andpl	r0, r0, r0, lsl #2
	...
     fe8:	01f30004 	mvnseq	r0, r4
     fec:	00009f50 	andeq	r9, r0, r0, asr pc
     ff0:	00000000 	andeq	r0, r0, r0
     ff4:	00010000 	andeq	r0, r1, r0
     ff8:	00000050 	andeq	r0, r0, r0, asr r0
	...
    1008:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1014:	01f30004 	mvnseq	r0, r4
    1018:	00009f51 	andeq	r9, r0, r1, asr pc
    101c:	00000000 	andeq	r0, r0, r0
    1020:	00010000 	andeq	r0, r1, r0
    1024:	00000051 	andeq	r0, r0, r1, asr r0
    1028:	00000000 	andeq	r0, r0, r0
    102c:	f3000400 	vshl.u8	d0, d0, d0
    1030:	009f5101 	addseq	r5, pc, r1, lsl #2
    1034:	00000000 	andeq	r0, r0, r0
    1038:	01000000 	mrseq	r0, (UNDEF: 0)
    103c:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    104c:	00010000 	andeq	r0, r1, r0
    1050:	00000052 	andeq	r0, r0, r2, asr r0
    1054:	00000000 	andeq	r0, r0, r0
    1058:	f3000400 	vshl.u8	d0, d0, d0
    105c:	009f5201 	addseq	r5, pc, r1, lsl #4
    1060:	00000000 	andeq	r0, r0, r0
    1064:	01000000 	mrseq	r0, (UNDEF: 0)
    1068:	00005200 	andeq	r5, r0, r0, lsl #4
	...
    1078:	00010000 	andeq	r0, r1, r0
    107c:	00000051 	andeq	r0, r0, r1, asr r0
    1080:	00000000 	andeq	r0, r0, r0
    1084:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1098:	00530001 	subseq	r0, r3, r1
    109c:	00000000 	andeq	r0, r0, r0
    10a0:	05000000 	streq	r0, [r0, #-0]
    10a4:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    10a8:	00009f25 	andeq	r9, r0, r5, lsr #30
    10ac:	00000000 	andeq	r0, r0, r0
    10b0:	00010000 	andeq	r0, r1, r0
    10b4:	00000053 	andeq	r0, r0, r3, asr r0
    10b8:	00000000 	andeq	r0, r0, r0
    10bc:	53000100 	movwpl	r0, #256	; 0x100
	...
    10d0:	00530001 	subseq	r0, r3, r1
    10d4:	00000000 	andeq	r0, r0, r0
    10d8:	01000000 	mrseq	r0, (UNDEF: 0)
    10dc:	00005300 	andeq	r5, r0, r0, lsl #6
	...
    10ec:	00010000 	andeq	r0, r1, r0
    10f0:	00000051 	andeq	r0, r0, r1, asr r0
    10f4:	00000000 	andeq	r0, r0, r0
    10f8:	72000500 	andvc	r0, r0, #0, 10
    10fc:	9f253500 	svcls	0x00253500
	...
    1108:	00510001 	subseq	r0, r1, r1
    110c:	00000000 	andeq	r0, r0, r0
    1110:	01000000 	mrseq	r0, (UNDEF: 0)
    1114:	00005100 	andeq	r5, r0, r0, lsl #2
	...
    1124:	00010000 	andeq	r0, r1, r0
    1128:	00000050 	andeq	r0, r0, r0, asr r0
    112c:	00000000 	andeq	r0, r0, r0
    1130:	f3000400 	vshl.u8	d0, d0, d0
    1134:	009f5001 	addseq	r5, pc, r1
    1138:	00000000 	andeq	r0, r0, r0
    113c:	01000000 	mrseq	r0, (UNDEF: 0)
    1140:	00005000 	andeq	r5, r0, r0
    1144:	00000000 	andeq	r0, r0, r0
    1148:	00040000 	andeq	r0, r4, r0
    114c:	9f5001f3 	svcls	0x005001f3
	...
    1160:	00510001 	subseq	r0, r1, r1
    1164:	00000000 	andeq	r0, r0, r0
    1168:	04000000 	streq	r0, [r0], #-0
    116c:	5101f300 	mrspl	pc, SP_irq	; <UNPREDICTABLE>
    1170:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1174:	00000000 	andeq	r0, r0, r0
    1178:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    118c:	00520001 	subseq	r0, r2, r1
    1190:	00000000 	andeq	r0, r0, r0
    1194:	04000000 	streq	r0, [r0], #-0
    1198:	5201f300 	andpl	pc, r1, #0, 6
    119c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11a0:	00000000 	andeq	r0, r0, r0
    11a4:	52000100 	andpl	r0, r0, #0, 2
	...
    11b8:	00510001 	subseq	r0, r1, r1
	...
    11c8:	01000000 	mrseq	r0, (UNDEF: 0)
    11cc:	00005300 	andeq	r5, r0, r0, lsl #6
    11d0:	00000000 	andeq	r0, r0, r0
    11d4:	00050000 	andeq	r0, r5, r0
    11d8:	25350072 	ldrcs	r0, [r5, #-114]!	; 0x72
    11dc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    11e0:	00000000 	andeq	r0, r0, r0
    11e4:	53000100 	movwpl	r0, #256	; 0x100
	...
    11f0:	00530001 	subseq	r0, r3, r1
	...
    1200:	01000000 	mrseq	r0, (UNDEF: 0)
    1204:	00005000 	andeq	r5, r0, r0
    1208:	00000000 	andeq	r0, r0, r0
    120c:	00040000 	andeq	r0, r4, r0
    1210:	9f5001f3 	svcls	0x005001f3
	...
    121c:	00500001 	subseq	r0, r0, r1
    1220:	00000000 	andeq	r0, r0, r0
    1224:	04000000 	streq	r0, [r0], #-0
    1228:	5001f300 	andpl	pc, r1, r0, lsl #6
    122c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    123c:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    1248:	01f30004 	mvnseq	r0, r4
    124c:	00009f51 	andeq	r9, r0, r1, asr pc
    1250:	00000000 	andeq	r0, r0, r0
    1254:	00010000 	andeq	r0, r1, r0
    1258:	00000051 	andeq	r0, r0, r1, asr r0
	...
    1268:	52000100 	andpl	r0, r0, #0, 2
	...
    1274:	01f30004 	mvnseq	r0, r4
    1278:	00009f52 	andeq	r9, r0, r2, asr pc
    127c:	00000000 	andeq	r0, r0, r0
    1280:	00010000 	andeq	r0, r1, r0
    1284:	00000052 	andeq	r0, r0, r2, asr r0
	...
    1294:	51000100 	mrspl	r0, (UNDEF: 16)
	...
    12a8:	00530001 	subseq	r0, r3, r1
    12ac:	00000000 	andeq	r0, r0, r0
    12b0:	05000000 	streq	r0, [r0, #-0]
    12b4:	35007200 	strcc	r7, [r0, #-512]	; 0x200
    12b8:	00009f25 	andeq	r9, r0, r5, lsr #30
    12bc:	00000000 	andeq	r0, r0, r0
    12c0:	00010000 	andeq	r0, r1, r0
    12c4:	00000053 	andeq	r0, r0, r3, asr r0
    12c8:	00000000 	andeq	r0, r0, r0
    12cc:	53000100 	movwpl	r0, #256	; 0x100
	...
    12e0:	00500001 	subseq	r0, r0, r1
    12e4:	00000000 	andeq	r0, r0, r0
    12e8:	04000000 	streq	r0, [r0], #-0
    12ec:	5001f300 	andpl	pc, r1, r0, lsl #6
    12f0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    1300:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    130c:	01f30004 	mvnseq	r0, r4
    1310:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    1320:	00010000 	andeq	r0, r1, r0
    1324:	00000050 	andeq	r0, r0, r0, asr r0
    1328:	00000000 	andeq	r0, r0, r0
    132c:	f3000400 	vshl.u8	d0, d0, d0
    1330:	009f5001 	addseq	r5, pc, r1
	...
    1340:	01000000 	mrseq	r0, (UNDEF: 0)
    1344:	00005000 	andeq	r5, r0, r0
    1348:	00000000 	andeq	r0, r0, r0
    134c:	00040000 	andeq	r0, r4, r0
    1350:	9f5001f3 	svcls	0x005001f3
	...
    135c:	00500001 	subseq	r0, r0, r1
    1360:	00000000 	andeq	r0, r0, r0
    1364:	04000000 	streq	r0, [r0], #-0
    1368:	5001f300 	andpl	pc, r1, r0, lsl #6
    136c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
	...
    137c:	50000100 	andpl	r0, r0, r0, lsl #2
	...
    1388:	01f30004 	mvnseq	r0, r4
    138c:	00009f50 	andeq	r9, r0, r0, asr pc
	...
    139c:	000e0000 	andeq	r0, lr, r0
    13a0:	ff080070 			; <UNDEFINED> instruction: 0xff080070
    13a4:	7124381a 	teqvc	r4, sl, lsl r8
    13a8:	1aff0800 	bne	fffc33b0 <BootRAM+0xef33b51>
    13ac:	00009f21 	andeq	r9, r0, r1, lsr #30
    13b0:	00000000 	andeq	r0, r0, r0
    13b4:	000f0000 	andeq	r0, pc, r0
    13b8:	085001f3 	ldmdaeq	r0, {r0, r1, r4, r5, r6, r7, r8}^
    13bc:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    13c0:	ff080071 			; <UNDEFINED> instruction: 0xff080071
    13c4:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
	...
    13d4:	01000000 	mrseq	r0, (UNDEF: 0)
    13d8:	00005000 	andeq	r5, r0, r0
    13dc:	00000000 	andeq	r0, r0, r0
    13e0:	00040000 	andeq	r0, r4, r0
    13e4:	9f5001f3 	svcls	0x005001f3
	...
    13f8:	00500001 	subseq	r0, r0, r1
	...
    1408:	0d000000 	stceq	0, cr0, [r0, #-0]
    140c:	38007000 	stmdacc	r0, {ip, sp, lr}
    1410:	08007025 	stmdaeq	r0, {r0, r2, r5, ip, sp, lr}
    1414:	24381aff 	ldrtcs	r1, [r8], #-2815	; 0xaff
    1418:	00009f21 	andeq	r9, r0, r1, lsr #30
    141c:	00000000 	andeq	r0, r0, r0
    1420:	0f0a0000 	svceq	0x000a0000
    1424:	0f700800 	svceq	0x00700800
    1428:	00020800 	andeq	r0, r2, r0, lsl #16
    142c:	0f709f30 	svceq	0x00709f30
    1430:	0f740800 	svceq	0x00740800
    1434:	00070800 	andeq	r0, r7, r0, lsl #16
    1438:	ff0a0073 			; <UNDEFINED> instruction: 0xff0a0073
    143c:	849f1aff 	ldrhi	r1, [pc], #2815	; 1444 <__Stack_Size+0x1044>
    1440:	8e08000f 	cdphi	0, 0, cr0, cr8, cr15, {0}
    1444:	0708000f 	streq	r0, [r8, -pc]
    1448:	0a007300 	beq	1e050 <__Stack_Size+0x1dc50>
    144c:	9f1affff 	svcls	0x001affff
    1450:	08000f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp}
    1454:	08000fa2 	stmdaeq	r0, {r1, r5, r7, r8, r9, sl, fp}
    1458:	00730007 	rsbseq	r0, r3, r7
    145c:	1affff0a 	bne	108c <__Stack_Size+0xc8c>
    1460:	000fee9f 	muleq	pc, pc, lr	; <UNPREDICTABLE>
    1464:	000ffa08 	andeq	pc, pc, r8, lsl #20
    1468:	30000208 	andcc	r0, r0, r8, lsl #4
    146c:	000ffa9f 	muleq	pc, pc, sl	; <UNPREDICTABLE>
    1470:	00103a08 	andseq	r3, r0, r8, lsl #20
    1474:	75000708 	strvc	r0, [r0, #-1800]	; 0x708
    1478:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    147c:	103a9f1a 	eorsne	r9, sl, sl, lsl pc
    1480:	105c0800 	subsne	r0, ip, r0, lsl #16
    1484:	00020800 	andeq	r0, r2, r0, lsl #16
    1488:	00009f30 	andeq	r9, r0, r0, lsr pc
    148c:	00000000 	andeq	r0, r0, r0
    1490:	0f500000 	svceq	0x00500000
    1494:	0f540800 	svceq	0x00540800
    1498:	00070800 	andeq	r0, r7, r0, lsl #16
    149c:	000a0072 	andeq	r0, sl, r2, ror r0
    14a0:	549f2720 	ldrpl	r2, [pc], #1824	; 14a8 <__Stack_Size+0x10a8>
    14a4:	5808000f 	stmdapl	r8, {r0, r1, r2, r3}
    14a8:	0b08000f 	bleq	2014ec <__Stack_Size+0x2010ec>
    14ac:	0a007200 	beq	1dcb4 <__Stack_Size+0x1d8b4>
    14b0:	0a272000 	beq	9c94b8 <__Stack_Size+0x9c90b8>
    14b4:	9f272000 	svcls	0x00272000
    14b8:	08000f58 	stmdaeq	r0, {r3, r4, r6, r8, r9, sl, fp}
    14bc:	08000f68 	stmdaeq	r0, {r3, r5, r6, r8, r9, sl, fp}
    14c0:	0074000c 	rsbseq	r0, r4, ip
    14c4:	20000a06 	andcs	r0, r0, r6, lsl #20
    14c8:	20000a27 	andcs	r0, r0, r7, lsr #20
    14cc:	00009f27 	andeq	r9, r0, r7, lsr #30
    14d0:	00000000 	andeq	r0, r0, r0
    14d4:	0f620000 	svceq	0x00620000
    14d8:	0f660800 	svceq	0x00660800
    14dc:	00060800 	andeq	r0, r6, r0, lsl #16
    14e0:	20080072 	andcs	r0, r8, r2, ror r0
    14e4:	0f669f27 	svceq	0x00669f27
    14e8:	0f760800 	svceq	0x00760800
    14ec:	00090800 	andeq	r0, r9, r0, lsl #16
    14f0:	20080072 	andcs	r0, r8, r2, ror r0
    14f4:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    14f8:	000f769f 	muleq	pc, pc, r6	; <UNPREDICTABLE>
    14fc:	000f7e08 	andeq	r7, pc, r8, lsl #28
    1500:	74000a08 	strvc	r0, [r0], #-2568	; 0xa08
    1504:	20080600 	andcs	r0, r8, r0, lsl #12
    1508:	27200827 	strcs	r0, [r0, -r7, lsr #16]!
    150c:	000f849f 	muleq	pc, pc, r4	; <UNPREDICTABLE>
    1510:	000f8608 	andeq	r8, pc, r8, lsl #12
    1514:	72000908 	andvc	r0, r0, #8, 18	; 0x20000
    1518:	27200800 	strcs	r0, [r0, -r0, lsl #16]!
    151c:	9f272008 	svcls	0x00272008
    1520:	08000f86 	stmdaeq	r0, {r1, r2, r7, r8, r9, sl, fp}
    1524:	08000f92 	stmdaeq	r0, {r1, r4, r7, r8, r9, sl, fp}
    1528:	0074000a 	rsbseq	r0, r4, sl
    152c:	27200806 	strcs	r0, [r0, -r6, lsl #16]!
    1530:	9f272008 	svcls	0x00272008
    1534:	08000f98 	stmdaeq	r0, {r3, r4, r7, r8, r9, sl, fp}
    1538:	08000fa6 	stmdaeq	r0, {r1, r2, r5, r7, r8, r9, sl, fp}
    153c:	0074000a 	rsbseq	r0, r4, sl
    1540:	27200806 	strcs	r0, [r0, -r6, lsl #16]!
    1544:	9f272008 	svcls	0x00272008
	...
    1550:	08000fb8 	stmdaeq	r0, {r3, r4, r5, r7, r8, r9, sl, fp}
    1554:	08000fce 	stmdaeq	r0, {r1, r2, r3, r6, r7, r8, r9, sl, fp}
    1558:	ce530001 	cdpgt	0, 5, cr0, cr3, cr1, {0}
    155c:	ec08000f 	stc	0, cr0, [r8], {15}
    1560:	0408000f 	streq	r0, [r8], #-15
    1564:	06007200 	streq	r7, [r0], -r0, lsl #4
    1568:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    156c:	00000000 	andeq	r0, r0, r0
    1570:	000fda00 	andeq	sp, pc, r0, lsl #20
    1574:	000fee08 	andeq	lr, pc, r8, lsl #28
    1578:	53000108 	movwpl	r0, #264	; 0x108
	...
    158c:	9f300002 	svcls	0x00300002
	...
    1598:	00710007 	rsbseq	r0, r1, r7
    159c:	1affff0a 	bne	11cc <__Stack_Size+0xdcc>
    15a0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    15a4:	00000000 	andeq	r0, r0, r0
    15a8:	71000700 	tstvc	r0, r0, lsl #14
    15ac:	ffff0a00 			; <UNDEFINED> instruction: 0xffff0a00
    15b0:	00009f1a 	andeq	r9, r0, sl, lsl pc
    15b4:	00000000 	andeq	r0, r0, r0
    15b8:	00020000 	andeq	r0, r2, r0
    15bc:	00009f30 	andeq	r9, r0, r0, lsr pc
    15c0:	00000000 	andeq	r0, r0, r0
    15c4:	10940000 	addsne	r0, r4, r0
    15c8:	10a90800 	adcne	r0, r9, r0, lsl #16
    15cc:	00010800 	andeq	r0, r1, r0, lsl #16
    15d0:	0010a950 	andseq	sl, r0, r0, asr r9
    15d4:	0010b808 	andseq	fp, r0, r8, lsl #16
    15d8:	f3000408 	vshl.u8	d0, d8, d0
    15dc:	009f5001 	addseq	r5, pc, r1
    15e0:	00000000 	andeq	r0, r0, r0
    15e4:	b8000000 	stmdalt	r0, {}	; <UNPREDICTABLE>
    15e8:	cd080010 	stcgt	0, cr0, [r8, #-64]	; 0xffffffc0
    15ec:	01080010 	tsteq	r8, r0, lsl r0
    15f0:	10cd5000 	sbcne	r5, sp, r0
    15f4:	10dc0800 	sbcsne	r0, ip, r0, lsl #16
    15f8:	00040800 	andeq	r0, r4, r0, lsl #16
    15fc:	9f5001f3 	svcls	0x005001f3
	...
    1608:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
    160c:	080010f0 	stmdaeq	r0, {r4, r5, r6, r7, ip}
    1610:	f0500001 			; <UNDEFINED> instruction: 0xf0500001
    1614:	6c080010 	stcvs	0, cr0, [r8], {16}
    1618:	04080011 	streq	r0, [r8], #-17
    161c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1620:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1624:	00000000 	andeq	r0, r0, r0
    1628:	0010fe00 	andseq	pc, r0, r0, lsl #28
    162c:	00110008 	andseq	r0, r1, r8
    1630:	71000208 	tstvc	r0, r8, lsl #4
    1634:	00000009 	andeq	r0, r0, r9
    1638:	00000000 	andeq	r0, r0, r0
    163c:	00112600 	andseq	r2, r1, r0, lsl #12
    1640:	00112808 	andseq	r2, r1, r8, lsl #16
    1644:	52000108 	andpl	r0, r0, #8, 2
    1648:	08001128 	stmdaeq	r0, {r3, r5, r8, ip}
    164c:	08001142 	stmdaeq	r0, {r1, r6, r8, ip}
    1650:	00710005 	rsbseq	r0, r1, r5
    1654:	469f1a3f 			; <UNDEFINED> instruction: 0x469f1a3f
    1658:	50080011 	andpl	r0, r8, r1, lsl r0
    165c:	05080011 	streq	r0, [r8, #-17]
    1660:	3f007100 	svccc	0x00007100
    1664:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1668:	00000000 	andeq	r0, r0, r0
    166c:	11740000 	cmnne	r4, r0
    1670:	11fa0800 	mvnsne	r0, r0, lsl #16
    1674:	00030800 	andeq	r0, r3, r0, lsl #16
    1678:	009f1074 	addseq	r1, pc, r4, ror r0	; <UNPREDICTABLE>
    167c:	00000000 	andeq	r0, r0, r0
    1680:	78000000 	stmdavc	r0, {}	; <UNPREDICTABLE>
    1684:	a2080011 	andge	r0, r8, #17
    1688:	01080011 	tsteq	r8, r1, lsl r0
    168c:	11a25300 			; <UNDEFINED> instruction: 0x11a25300
    1690:	11a80800 			; <UNDEFINED> instruction: 0x11a80800
    1694:	00090800 	andeq	r0, r9, r0, lsl #16
    1698:	02941074 	addseq	r1, r4, #116	; 0x74
    169c:	1affff0a 	bne	12cc <__Stack_Size+0xecc>
    16a0:	0011a89f 	mulseq	r1, pc, r8	; <UNPREDICTABLE>
    16a4:	0011bc08 	andseq	fp, r1, r8, lsl #24
    16a8:	53000108 	movwpl	r0, #264	; 0x108
    16ac:	080011bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, ip}
    16b0:	080011bd 	stmdaeq	r0, {r0, r2, r3, r4, r5, r7, r8, ip}
    16b4:	10740009 	rsbsne	r0, r4, r9
    16b8:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    16bc:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    16c0:	00000000 	andeq	r0, r0, r0
    16c4:	7a000000 	bvc	16cc <__Stack_Size+0x12cc>
    16c8:	9c080011 	stcls	0, cr0, [r8], {17}
    16cc:	06080011 			; <UNDEFINED> instruction: 0x06080011
    16d0:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    16d4:	9c9f1aff 	vldmials	pc, {s2-s256}
    16d8:	a0080011 	andge	r0, r8, r1, lsl r0
    16dc:	02080011 	andeq	r0, r8, #17
    16e0:	a09f3400 	addsge	r3, pc, r0, lsl #8
    16e4:	a8080011 	stmdage	r8, {r0, r4}
    16e8:	02080011 	andeq	r0, r8, #17
    16ec:	a89f3700 	ldmge	pc, {r8, r9, sl, ip, sp}	; <UNPREDICTABLE>
    16f0:	b2080011 	andlt	r0, r8, #17
    16f4:	06080011 			; <UNDEFINED> instruction: 0x06080011
    16f8:	08007600 	stmdaeq	r0, {r9, sl, ip, sp, lr}
    16fc:	b29f1aff 	addslt	r1, pc, #1044480	; 0xff000
    1700:	fa080011 	blx	20174c <__Stack_Size+0x20134c>
    1704:	01080011 	tsteq	r8, r1, lsl r0
    1708:	00005600 	andeq	r5, r0, r0, lsl #12
    170c:	00000000 	andeq	r0, r0, r0
    1710:	11c00000 	bicne	r0, r0, r0
    1714:	11c20800 	bicne	r0, r2, r0, lsl #16
    1718:	00010800 	andeq	r0, r1, r0, lsl #16
    171c:	0011c250 	andseq	ip, r1, r0, asr r2
    1720:	0011f008 	andseq	pc, r1, r8
    1724:	59000108 	stmdbpl	r0, {r3, r8}
	...
    1730:	080011aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, ip}
    1734:	080011b2 	stmdaeq	r0, {r1, r4, r5, r7, r8, ip}
    1738:	b2550001 	subslt	r0, r5, #1
    173c:	b8080011 	stmdalt	r8, {r0, r4}
    1740:	16080011 			; <UNDEFINED> instruction: 0x16080011
    1744:	12007500 	andne	r7, r0, #0, 10
    1748:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    174c:	14160073 	ldrne	r0, [r6], #-115	; 0x73
    1750:	22244b40 	eorcs	r4, r4, #64, 22	; 0x10000
    1754:	0001282d 	andeq	r2, r1, sp, lsr #16
    1758:	b89f1316 	ldmlt	pc, {r1, r2, r4, r8, r9, ip}	; <UNPREDICTABLE>
    175c:	e6080011 			; <UNDEFINED> instruction: 0xe6080011
    1760:	01080011 	tsteq	r8, r1, lsl r0
    1764:	00005500 	andeq	r5, r0, r0, lsl #10
    1768:	00000000 	andeq	r0, r0, r0
    176c:	125e0000 	subsne	r0, lr, #0
    1770:	12750800 	rsbsne	r0, r5, #0, 16
    1774:	00010800 	andeq	r0, r1, r0, lsl #16
    1778:	00128450 	andseq	r8, r2, r0, asr r4
    177c:	00128608 	andseq	r8, r2, r8, lsl #12
    1780:	50000108 	andpl	r0, r0, r8, lsl #2
	...
    178c:	0800129c 	stmdaeq	r0, {r2, r3, r4, r7, r9, ip}
    1790:	080012a0 	stmdaeq	r0, {r5, r7, r9, ip}
    1794:	00700006 	rsbseq	r0, r0, r6
    1798:	9f1a7f08 	svcls	0x001a7f08
    179c:	080012a0 	stmdaeq	r0, {r5, r7, r9, ip}
    17a0:	080012c4 	stmdaeq	r0, {r2, r6, r7, r9, ip}
    17a4:	c4500001 	ldrbgt	r0, [r0], #-1
    17a8:	ea080012 	b	2017f8 <__Stack_Size+0x2013f8>
    17ac:	0b080012 	bleq	2017fc <__Stack_Size+0x2013fc>
    17b0:	94007300 	strls	r7, [r0], #-768	; 0x300
    17b4:	1a7f0801 	bne	1fc37c0 <__Stack_Size+0x1fc33c0>
    17b8:	9f1aff08 	svcls	0x001aff08
	...
    17c4:	080012dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, ip}
    17c8:	08001309 	stmdaeq	r0, {r0, r3, r8, r9, ip}
    17cc:	14510001 	ldrbne	r0, [r1], #-1
    17d0:	26080013 			; <UNDEFINED> instruction: 0x26080013
    17d4:	01080013 	tsteq	r8, r3, lsl r0
    17d8:	132c5100 	teqne	ip, #0, 2
    17dc:	132f0800 	teqne	pc, #0, 16
    17e0:	00010800 	andeq	r0, r1, r0, lsl #16
    17e4:	00000051 	andeq	r0, r0, r1, asr r0
    17e8:	00000000 	andeq	r0, r0, r0
    17ec:	0012c400 	andseq	ip, r2, r0, lsl #8
    17f0:	00130608 	andseq	r0, r3, r8, lsl #12
    17f4:	50000108 	andpl	r0, r0, r8, lsl #2
    17f8:	08001314 	stmdaeq	r0, {r2, r4, r8, r9, ip}
    17fc:	08001329 	stmdaeq	r0, {r0, r3, r5, r8, r9, ip}
    1800:	2c500001 	mrrccs	0, 0, r0, r0, cr1	; <UNPREDICTABLE>
    1804:	2f080013 	svccs	0x00080013
    1808:	01080013 	tsteq	r8, r3, lsl r0
    180c:	00005000 	andeq	r5, r0, r0
    1810:	00000000 	andeq	r0, r0, r0
    1814:	12be0000 	adcsne	r0, lr, #0
    1818:	12f60800 	rscsne	r0, r6, #0, 16
    181c:	00060800 	andeq	r0, r6, r0, lsl #16
    1820:	ff080072 			; <UNDEFINED> instruction: 0xff080072
    1824:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1828:	00000000 	andeq	r0, r0, r0
    182c:	133c0000 	teqne	ip, #0
    1830:	13400800 	movtne	r0, #2048	; 0x800
    1834:	00070800 	andeq	r0, r7, r0, lsl #16
    1838:	000a0073 	andeq	r0, sl, r3, ror r0
    183c:	409f2730 	addsmi	r2, pc, r0, lsr r7	; <UNPREDICTABLE>
    1840:	42080013 	andmi	r0, r8, #19
    1844:	0b080013 	bleq	201898 <__Stack_Size+0x201498>
    1848:	0a007300 	beq	1e450 <__Stack_Size+0x1e050>
    184c:	0a273000 	beq	9cd854 <__Stack_Size+0x9cd454>
    1850:	9f273000 	svcls	0x00273000
	...
    185c:	08001370 	stmdaeq	r0, {r4, r5, r6, r8, r9, ip}
    1860:	080013aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, ip}
    1864:	00720006 	rsbseq	r0, r2, r6
    1868:	9f1aff08 	svcls	0x001aff08
    186c:	080013d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip}
    1870:	080013e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip}
    1874:	00720006 	rsbseq	r0, r2, r6
    1878:	9f1aff08 	svcls	0x001aff08
	...
    1884:	08001374 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, ip}
    1888:	08001394 	stmdaeq	r0, {r2, r4, r7, r8, r9, ip}
    188c:	94540001 	ldrbls	r0, [r4], #-1
    1890:	aa080013 	bge	2018e4 <__Stack_Size+0x2014e4>
    1894:	07080013 	smladeq	r8, r3, r0, r0
    1898:	0b007200 	bleq	1e0a0 <__Stack_Size+0x1dca0>
    189c:	9f1aff7f 	svcls	0x001aff7f
    18a0:	080013d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip}
    18a4:	080013e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip}
    18a8:	00720007 	rsbseq	r0, r2, r7
    18ac:	1aff7f0b 	bne	fffe14e0 <BootRAM+0xef51c81>
    18b0:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    18b4:	00000000 	andeq	r0, r0, r0
    18b8:	00138a00 	andseq	r8, r3, r0, lsl #20
    18bc:	0013d308 	andseq	sp, r3, r8, lsl #6
    18c0:	50000108 	andpl	r0, r0, r8, lsl #2
    18c4:	080013d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, ip}
    18c8:	080013da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, r9, ip}
    18cc:	00500001 	subseq	r0, r0, r1
    18d0:	00000000 	andeq	r0, r0, r0
    18d4:	b6000000 	strlt	r0, [r0], -r0
    18d8:	ba080013 	blt	20192c <__Stack_Size+0x20152c>
    18dc:	05080013 	streq	r0, [r8, #-19]
    18e0:	40007200 	andmi	r7, r0, r0, lsl #4
    18e4:	13ba9f27 			; <UNDEFINED> instruction: 0x13ba9f27
    18e8:	13bc0800 			; <UNDEFINED> instruction: 0x13bc0800
    18ec:	00070800 	andeq	r0, r7, r0, lsl #16
    18f0:	27400072 	smlsldxcs	r0, r0, r2, r0	; <UNPREDICTABLE>
    18f4:	009f2740 	addseq	r2, pc, r0, asr #14
    18f8:	00000000 	andeq	r0, r0, r0
    18fc:	c6000000 	strgt	r0, [r0], -r0
    1900:	ca080013 	bgt	201954 <__Stack_Size+0x201554>
    1904:	07080013 	smladeq	r8, r3, r0, r0
    1908:	0a007200 	beq	1e110 <__Stack_Size+0x1dd10>
    190c:	9f271000 	svcls	0x00271000
	...
    1918:	0800140c 	stmdaeq	r0, {r2, r3, sl, ip}
    191c:	0800141e 	stmdaeq	r0, {r1, r2, r3, r4, sl, ip}
    1920:	1e500001 	cdpne	0, 5, cr0, cr0, cr1, {0}
    1924:	28080014 	stmdacs	r8, {r2, r4}
    1928:	04080014 	streq	r0, [r8], #-20
    192c:	5001f300 	andpl	pc, r1, r0, lsl #6
    1930:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1934:	00000000 	andeq	r0, r0, r0
    1938:	00140c00 	andseq	r0, r4, r0, lsl #24
    193c:	00141608 	andseq	r1, r4, r8, lsl #12
    1940:	51000108 	tstpl	r0, r8, lsl #2
    1944:	08001416 	stmdaeq	r0, {r1, r2, r4, sl, ip}
    1948:	0800141c 	stmdaeq	r0, {r2, r3, r4, sl, ip}
    194c:	01f30004 	mvnseq	r0, r4
    1950:	141c9f51 	ldrne	r9, [ip], #-3921	; 0xf51
    1954:	14280800 	strtne	r0, [r8], #-2048	; 0x800
    1958:	00010800 	andeq	r0, r1, r0, lsl #16
    195c:	00000051 	andeq	r0, r0, r1, asr r0
    1960:	00000000 	andeq	r0, r0, r0
    1964:	00141200 	andseq	r1, r4, r0, lsl #4
    1968:	00141808 	andseq	r1, r4, r8, lsl #16
    196c:	53000108 	movwpl	r0, #264	; 0x108
    1970:	08001418 	stmdaeq	r0, {r3, r4, sl, ip}
    1974:	0800141c 	stmdaeq	r0, {r2, r3, r4, sl, ip}
    1978:	12720009 	rsbsne	r0, r2, #9
    197c:	ff0a0294 			; <UNDEFINED> instruction: 0xff0a0294
    1980:	1c9f1aff 	vldmiane	pc, {s2-s256}
    1984:	28080014 	stmdacs	r8, {r2, r4}
    1988:	01080014 	tsteq	r8, r4, lsl r0
    198c:	00005300 	andeq	r5, r0, r0, lsl #6
    1990:	00000000 	andeq	r0, r0, r0
    1994:	147a0000 	ldrbtne	r0, [sl], #-0
    1998:	14840800 	strne	r0, [r4], #2048	; 0x800
    199c:	00110800 	andseq	r0, r1, r0, lsl #16
    19a0:	ff0a0072 			; <UNDEFINED> instruction: 0xff0a0072
    19a4:	24311aff 	ldrtcs	r1, [r1], #-2815	; 0xaff
    19a8:	81c08023 	bichi	r8, r0, r3, lsr #32
    19ac:	939f0480 	orrsls	r0, pc, #128, 8	; 0x80000000
    19b0:	00000004 	andeq	r0, r0, r4
    19b4:	00000000 	andeq	r0, r0, r0
    19b8:	0014ae00 	andseq	sl, r4, r0, lsl #28
    19bc:	0014be08 	andseq	fp, r4, r8, lsl #28
    19c0:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    19c4:	0014be9f 	mulseq	r4, pc, lr	; <UNPREDICTABLE>
    19c8:	0014c008 	andseq	ip, r4, r8
    19cc:	50000108 	andpl	r0, r0, r8, lsl #2
    19d0:	080014c0 	stmdaeq	r0, {r6, r7, sl, ip}
    19d4:	080014cc 	stmdaeq	r0, {r2, r3, r6, r7, sl, ip}
    19d8:	9f320002 	svcls	0x00320002
    19dc:	080014d0 	stmdaeq	r0, {r4, r6, r7, sl, ip}
    19e0:	080014ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, sl, ip}
    19e4:	9f320002 	svcls	0x00320002
    19e8:	080014f8 	stmdaeq	r0, {r3, r4, r5, r6, r7, sl, ip}
    19ec:	080014fe 	stmdaeq	r0, {r1, r2, r3, r4, r5, r6, r7, sl, ip}
    19f0:	fe500001 	cdp2	0, 5, cr0, cr0, cr1, {0}
    19f4:	0e080014 	mcreq	0, 0, r0, cr8, cr4, {0}
    19f8:	02080015 	andeq	r0, r8, #21
    19fc:	0e9f3200 	cdpeq	2, 9, cr3, cr15, cr0, {0}
    1a00:	10080015 	andne	r0, r8, r5, lsl r0
    1a04:	01080015 	tsteq	r8, r5, lsl r0
    1a08:	15105000 	ldrne	r5, [r0, #-0]
    1a0c:	152a0800 	strne	r0, [sl, #-2048]!	; 0x800
    1a10:	00020800 	andeq	r0, r2, r0, lsl #16
    1a14:	152a9f32 	strne	r9, [sl, #-3890]!	; 0xf32
    1a18:	152c0800 	strne	r0, [ip, #-2048]!	; 0x800
    1a1c:	00010800 	andeq	r0, r1, r0, lsl #16
    1a20:	00152c50 	andseq	r2, r5, r0, asr ip
    1a24:	00153808 	andseq	r3, r5, r8, lsl #16
    1a28:	32000208 	andcc	r0, r0, #8, 4	; 0x80000000
    1a2c:	0015389f 	mulseq	r5, pc, r8	; <UNPREDICTABLE>
    1a30:	00153a08 	andseq	r3, r5, r8, lsl #20
    1a34:	50000108 	andpl	r0, r0, r8, lsl #2
    1a38:	0800153a 	stmdaeq	r0, {r1, r3, r4, r5, r8, sl, ip}
    1a3c:	0800154a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip}
    1a40:	9f320002 	svcls	0x00320002
    1a44:	0800154a 	stmdaeq	r0, {r1, r3, r6, r8, sl, ip}
    1a48:	08001552 	stmdaeq	r0, {r1, r4, r6, r8, sl, ip}
    1a4c:	6a500001 	bvs	1401a58 <__Stack_Size+0x1401658>
    1a50:	6c080015 	stcvs	0, cr0, [r8], {21}
    1a54:	01080015 	tsteq	r8, r5, lsl r0
    1a58:	00005000 	andeq	r5, r0, r0
    1a5c:	00000000 	andeq	r0, r0, r0
    1a60:	14ae0000 	strtne	r0, [lr], #0
    1a64:	15720800 	ldrbne	r0, [r2, #-2048]!	; 0x800
    1a68:	00010800 	andeq	r0, r1, r0, lsl #16
    1a6c:	00000054 	andeq	r0, r0, r4, asr r0
    1a70:	00000000 	andeq	r0, r0, r0
    1a74:	00155200 	andseq	r5, r5, r0, lsl #4
    1a78:	00156a08 	andseq	r6, r5, r8, lsl #20
    1a7c:	36000208 	strcc	r0, [r0], -r8, lsl #4
    1a80:	00156c9f 	mulseq	r5, pc, ip	; <UNPREDICTABLE>
    1a84:	00157208 	andseq	r7, r5, r8, lsl #4
    1a88:	53000108 	movwpl	r0, #264	; 0x108
	...
    1a94:	08001572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, ip}
    1a98:	08001588 	stmdaeq	r0, {r3, r7, r8, sl, ip}
    1a9c:	9f300002 	svcls	0x00300002
    1aa0:	08001588 	stmdaeq	r0, {r3, r7, r8, sl, ip}
    1aa4:	0800158a 	stmdaeq	r0, {r1, r3, r7, r8, sl, ip}
    1aa8:	8a530001 	bhi	14c1ab4 <__Stack_Size+0x14c16b4>
    1aac:	92080015 	andls	r0, r8, #21
    1ab0:	02080015 	andeq	r0, r8, #21
    1ab4:	929f3000 	addsls	r3, pc, #0
    1ab8:	94080015 	strls	r0, [r8], #-21
    1abc:	01080015 	tsteq	r8, r5, lsl r0
    1ac0:	15945300 	ldrne	r5, [r4, #768]	; 0x300
    1ac4:	159c0800 	ldrne	r0, [ip, #2048]	; 0x800
    1ac8:	00020800 	andeq	r0, r2, r0, lsl #16
    1acc:	159c9f30 	ldrne	r9, [ip, #3888]	; 0xf30
    1ad0:	159e0800 	ldrne	r0, [lr, #2048]	; 0x800
    1ad4:	00010800 	andeq	r0, r1, r0, lsl #16
    1ad8:	00159e53 	andseq	r9, r5, r3, asr lr
    1adc:	0015a608 	andseq	sl, r5, r8, lsl #12
    1ae0:	30000208 	andcc	r0, r0, r8, lsl #4
    1ae4:	0015a69f 	mulseq	r5, pc, r6	; <UNPREDICTABLE>
    1ae8:	0015a808 	andseq	sl, r5, r8, lsl #16
    1aec:	53000108 	movwpl	r0, #264	; 0x108
    1af0:	080015a8 	stmdaeq	r0, {r3, r5, r7, r8, sl, ip}
    1af4:	08001664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip}
    1af8:	9f300002 	svcls	0x00300002
    1afc:	08001664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip}
    1b00:	08001671 	stmdaeq	r0, {r0, r4, r5, r6, r9, sl, ip}
    1b04:	24530001 	ldrbcs	r0, [r3], #-1
    1b08:	2e080017 	mcrcs	0, 0, r0, cr8, cr7, {0}
    1b0c:	02080017 	andeq	r0, r8, #23
    1b10:	2e9f3000 	cdpcs	0, 9, cr3, cr15, cr0, {0}
    1b14:	44080017 	strmi	r0, [r8], #-23
    1b18:	06080017 			; <UNDEFINED> instruction: 0x06080017
    1b1c:	10b90300 	adcsne	r0, r9, r0, lsl #6
    1b20:	009f0800 	addseq	r0, pc, r0, lsl #16
    1b24:	00000000 	andeq	r0, r0, r0
    1b28:	72000000 	andvc	r0, r0, #0
    1b2c:	76080016 			; <UNDEFINED> instruction: 0x76080016
    1b30:	02080016 	andeq	r0, r8, #22
    1b34:	829f3000 	addshi	r3, pc, #0
    1b38:	98080016 	stmdals	r8, {r1, r2, r4}
    1b3c:	01080016 	tsteq	r8, r6, lsl r0
    1b40:	169c5000 	ldrne	r5, [ip], r0
    1b44:	16a40800 	strtne	r0, [r4], r0, lsl #16
    1b48:	00010800 	andeq	r0, r1, r0, lsl #16
    1b4c:	0016a850 	andseq	sl, r6, r0, asr r8
    1b50:	0016b608 	andseq	fp, r6, r8, lsl #12
    1b54:	50000108 	andpl	r0, r0, r8, lsl #2
    1b58:	08001710 	stmdaeq	r0, {r4, r8, r9, sl, ip}
    1b5c:	0800171c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip}
    1b60:	00500001 	subseq	r0, r0, r1
    1b64:	00000000 	andeq	r0, r0, r0
    1b68:	72000000 	andvc	r0, r0, #0
    1b6c:	6a080015 	bvs	201bc8 <__Stack_Size+0x2017c8>
    1b70:	01080016 	tsteq	r8, r6, lsl r0
    1b74:	16765400 	ldrbtne	r5, [r6], -r0, lsl #8
    1b78:	168c0800 	strne	r0, [ip], r0, lsl #16
    1b7c:	00010800 	andeq	r0, r1, r0, lsl #16
    1b80:	00172454 	andseq	r2, r7, r4, asr r4
    1b84:	00174408 	andseq	r4, r7, r8, lsl #8
    1b88:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1b94:	080015fa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, ip}
    1b98:	08001626 	stmdaeq	r0, {r1, r2, r5, r9, sl, ip}
    1b9c:	00510001 	subseq	r0, r1, r1
    1ba0:	00000000 	andeq	r0, r0, r0
    1ba4:	fa000000 	blx	1bac <__Stack_Size+0x17ac>
    1ba8:	26080015 			; <UNDEFINED> instruction: 0x26080015
    1bac:	09080016 	stmdbeq	r8, {r1, r2, r4}
    1bb0:	08007300 	stmdaeq	r0, {r8, r9, ip, sp, lr}
    1bb4:	ff081a70 			; <UNDEFINED> instruction: 0xff081a70
    1bb8:	00009f1a 	andeq	r9, r0, sl, lsl pc
    1bbc:	00000000 	andeq	r0, r0, r0
    1bc0:	15720000 	ldrbne	r0, [r2, #-0]!
    1bc4:	171c0800 	ldrne	r0, [ip, -r0, lsl #16]
    1bc8:	00020800 	andeq	r0, r2, r0, lsl #16
    1bcc:	17249f30 			; <UNDEFINED> instruction: 0x17249f30
    1bd0:	17440800 	strbne	r0, [r4, -r0, lsl #16]
    1bd4:	00020800 	andeq	r0, r2, r0, lsl #16
    1bd8:	00009f30 	andeq	r9, r0, r0, lsr pc
    1bdc:	00000000 	andeq	r0, r0, r0
    1be0:	16120000 	ldrne	r0, [r2], -r0
    1be4:	16260800 	strtne	r0, [r6], -r0, lsl #16
    1be8:	00010800 	andeq	r0, r1, r0, lsl #16
    1bec:	00000052 	andeq	r0, r0, r2, asr r0
    1bf0:	00000000 	andeq	r0, r0, r0
    1bf4:	00157e00 	andseq	r7, r5, r0, lsl #28
    1bf8:	00158008 	andseq	r8, r5, r8
    1bfc:	73000208 	movwvc	r0, #520	; 0x208
    1c00:	00158003 	andseq	r8, r5, r3
    1c04:	0015a808 	andseq	sl, r5, r8, lsl #16
    1c08:	52000108 	andpl	r0, r0, #8, 2
    1c0c:	08001664 	stmdaeq	r0, {r2, r5, r6, r9, sl, ip}
    1c10:	08001666 	stmdaeq	r0, {r1, r2, r5, r6, r9, sl, ip}
    1c14:	00520001 	subseq	r0, r2, r1
    1c18:	00000000 	andeq	r0, r0, r0
    1c1c:	4c000000 	stcmi	0, cr0, [r0], {-0}
    1c20:	56080017 			; <UNDEFINED> instruction: 0x56080017
    1c24:	01080017 	tsteq	r8, r7, lsl r0
    1c28:	17565300 	ldrbne	r5, [r6, -r0, lsl #6]
    1c2c:	17670800 	strbne	r0, [r7, -r0, lsl #16]!
    1c30:	00080800 	andeq	r0, r8, r0, lsl #16
    1c34:	01940874 	orrseq	r0, r4, r4, ror r8
    1c38:	9f1aff08 	svcls	0x001aff08
    1c3c:	080017d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, r8, r9, sl, ip}
    1c40:	080017de 	stmdaeq	r0, {r1, r2, r3, r4, r6, r7, r8, r9, sl, ip}
    1c44:	de530001 	cdple	0, 5, cr0, cr3, cr1, {0}
    1c48:	e3080017 	movw	r0, #32791	; 0x8017
    1c4c:	08080017 	stmdaeq	r8, {r0, r1, r2, r4}
    1c50:	94087400 	strls	r7, [r8], #-1024	; 0x400
    1c54:	1aff0801 	bne	fffc3c60 <BootRAM+0xef34401>
    1c58:	0017e69f 	mulseq	r7, pc, r6	; <UNPREDICTABLE>
    1c5c:	0017ee08 	andseq	lr, r7, r8, lsl #28
    1c60:	53000108 	movwpl	r0, #264	; 0x108
	...
    1c6c:	08001754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl, ip}
    1c70:	080017d8 	stmdaeq	r0, {r3, r4, r6, r7, r8, r9, sl, ip}
    1c74:	10740003 	rsbsne	r0, r4, r3
    1c78:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1c7c:	00000000 	andeq	r0, r0, r0
    1c80:	00175800 	andseq	r5, r7, r0, lsl #16
    1c84:	00176708 	andseq	r6, r7, r8, lsl #14
    1c88:	52000108 	andpl	r0, r0, #8, 2
	...
    1c94:	0800176c 	stmdaeq	r0, {r2, r3, r5, r6, r8, r9, sl, ip}
    1c98:	08001774 	stmdaeq	r0, {r2, r4, r5, r6, r8, r9, sl, ip}
    1c9c:	74500001 	ldrbvc	r0, [r0], #-1
    1ca0:	86080017 			; <UNDEFINED> instruction: 0x86080017
    1ca4:	01080017 	tsteq	r8, r7, lsl r0
    1ca8:	00005700 	andeq	r5, r0, r0, lsl #14
    1cac:	00000000 	andeq	r0, r0, r0
    1cb0:	175e0000 	ldrbne	r0, [lr, -r0]
    1cb4:	17640800 	strbne	r0, [r4, -r0, lsl #16]!
    1cb8:	00160800 	andseq	r0, r6, r0, lsl #16
    1cbc:	40120076 	andsmi	r0, r2, r6, ror r0
    1cc0:	7222244b 	eorvc	r2, r2, #1258291200	; 0x4b000000
    1cc4:	40141600 	andsmi	r1, r4, r0, lsl #12
    1cc8:	2d22244b 	cfstrscs	mvf2, [r2, #-300]!	; 0xfffffed4
    1ccc:	16000128 	strne	r0, [r0], -r8, lsr #2
    1cd0:	17649f13 			; <UNDEFINED> instruction: 0x17649f13
    1cd4:	17860800 	strne	r0, [r6, r0, lsl #16]
    1cd8:	00010800 	andeq	r0, r1, r0, lsl #16
    1cdc:	00000056 	andeq	r0, r0, r6, asr r0
    1ce0:	00000000 	andeq	r0, r0, r0
    1ce4:	00180c00 	andseq	r0, r8, r0, lsl #24
    1ce8:	00183808 	andseq	r3, r8, r8, lsl #16
    1cec:	50000108 	andpl	r0, r0, r8, lsl #2
    1cf0:	08001838 	stmdaeq	r0, {r3, r4, r5, fp, ip}
    1cf4:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
    1cf8:	01f30004 	mvnseq	r0, r4
    1cfc:	00009f50 	andeq	r9, r0, r0, asr pc
    1d00:	00000000 	andeq	r0, r0, r0
    1d04:	18120000 	ldmdane	r2, {}	; <UNPREDICTABLE>
    1d08:	18140800 	ldmdane	r4, {fp}
    1d0c:	00020800 	andeq	r0, r2, r0, lsl #16
    1d10:	18149f30 	ldmdane	r4, {r4, r5, r8, r9, sl, fp, ip, pc}
    1d14:	18340800 	ldmdane	r4!, {fp}
    1d18:	00010800 	andeq	r0, r1, r0, lsl #16
    1d1c:	00000053 	andeq	r0, r0, r3, asr r0
    1d20:	00000000 	andeq	r0, r0, r0
    1d24:	00181200 	andseq	r1, r8, r0, lsl #4
    1d28:	00183c08 	andseq	r3, r8, r8, lsl #24
    1d2c:	54000108 	strpl	r0, [r0], #-264	; 0x108
	...
    1d38:	0800184c 	stmdaeq	r0, {r2, r3, r6, fp, ip}
    1d3c:	08001857 	stmdaeq	r0, {r0, r1, r2, r4, r6, fp, ip}
    1d40:	5c520001 	mrrcpl	0, 0, r0, r2, cr1
    1d44:	5e080018 	mcrpl	0, 0, r0, cr8, cr8, {0}
    1d48:	01080018 	tsteq	r8, r8, lsl r0
    1d4c:	185e5300 	ldmdane	lr, {r8, r9, ip, lr}^
    1d50:	18640800 	stmdane	r4!, {fp}^
    1d54:	00010800 	andeq	r0, r1, r0, lsl #16
    1d58:	00186452 	andseq	r6, r8, r2, asr r4
    1d5c:	00187308 	andseq	r7, r8, r8, lsl #6
    1d60:	73000808 	movwvc	r0, #2056	; 0x808
    1d64:	08019408 	stmdaeq	r1, {r3, sl, ip, pc}
    1d68:	869f1aff 			; <UNDEFINED> instruction: 0x869f1aff
    1d6c:	91080018 	tstls	r8, r8, lsl r0
    1d70:	01080018 	tsteq	r8, r8, lsl r0
    1d74:	00005300 	andeq	r5, r0, r0, lsl #6
    1d78:	00000000 	andeq	r0, r0, r0
    1d7c:	18a00000 	stmiane	r0!, {}	; <UNPREDICTABLE>
    1d80:	18b80800 	ldmne	r8!, {fp}
    1d84:	00010800 	andeq	r0, r1, r0, lsl #16
    1d88:	0018b850 	andseq	fp, r8, r0, asr r8
    1d8c:	0018ba08 	andseq	fp, r8, r8, lsl #20
    1d90:	70000308 	andvc	r0, r0, r8, lsl #6
    1d94:	18ba9f7e 	ldmne	sl!, {r1, r2, r3, r4, r5, r6, r8, r9, sl, fp, ip, pc}
    1d98:	18ca0800 	stmiane	sl, {fp}^
    1d9c:	00030800 	andeq	r0, r3, r0, lsl #16
    1da0:	ca9f7f70 	bgt	fe7e1b68 <BootRAM+0xd752309>
    1da4:	ce080018 	mcrgt	0, 0, r0, cr8, cr8, {0}
    1da8:	01080018 	tsteq	r8, r8, lsl r0
    1dac:	18ce5000 	stmiane	lr, {ip, lr}^
    1db0:	18d00800 	ldmne	r0, {fp}^
    1db4:	00030800 	andeq	r0, r3, r0, lsl #16
    1db8:	009f7e70 	addseq	r7, pc, r0, ror lr	; <UNPREDICTABLE>
    1dbc:	00000000 	andeq	r0, r0, r0
    1dc0:	a0000000 	andge	r0, r0, r0
    1dc4:	a6080018 			; <UNDEFINED> instruction: 0xa6080018
    1dc8:	01080018 	tsteq	r8, r8, lsl r0
    1dcc:	18a65100 	stmiane	r6!, {r8, ip, lr}
    1dd0:	18d00800 	ldmne	r0, {fp}^
    1dd4:	00040800 	andeq	r0, r4, r0, lsl #16
    1dd8:	9f5101f3 	svcls	0x005101f3
	...
    1de4:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
    1de8:	080018a8 	stmdaeq	r0, {r3, r5, r7, fp, ip}
    1dec:	a8520001 	ldmdage	r2, {r0}^
    1df0:	d0080018 	andle	r0, r8, r8, lsl r0
    1df4:	04080018 	streq	r0, [r8], #-24
    1df8:	5201f300 	andpl	pc, r1, #0, 6
    1dfc:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1e00:	00000000 	andeq	r0, r0, r0
    1e04:	0018b000 	andseq	fp, r8, r0
    1e08:	0018b208 	andseq	fp, r8, r8, lsl #4
    1e0c:	52000108 	andpl	r0, r0, #8, 2
    1e10:	080018b2 	stmdaeq	r0, {r1, r4, r5, r7, fp, ip}
    1e14:	080018ca 	stmdaeq	r0, {r1, r3, r6, r7, fp, ip}
    1e18:	01f3000f 	mvnseq	r0, pc
    1e1c:	ffff0a52 			; <UNDEFINED> instruction: 0xffff0a52
    1e20:	3101231a 	tstcc	r1, sl, lsl r3
    1e24:	1c007326 	stcne	3, cr7, [r0], {38}	; 0x26
    1e28:	0018ca9f 	mulseq	r8, pc, sl	; <UNPREDICTABLE>
    1e2c:	0018cc08 	andseq	ip, r8, r8, lsl #24
    1e30:	f3001008 	vhadd.u8	d1, d0, d8
    1e34:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    1e38:	01231aff 	strdeq	r1, [r3, -pc]!
    1e3c:	00732631 	rsbseq	r2, r3, r1, lsr r6
    1e40:	cc9f2220 	lfmgt	f2, 4, [pc], {32}
    1e44:	d0080018 	andle	r0, r8, r8, lsl r0
    1e48:	0f080018 	svceq	0x00080018
    1e4c:	5201f300 	andpl	pc, r1, #0, 6
    1e50:	1affff0a 	bne	1a80 <__Stack_Size+0x1680>
    1e54:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    1e58:	9f1c0073 	svcls	0x001c0073
	...
    1e64:	080018ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, fp, ip}
    1e68:	080018c2 	stmdaeq	r0, {r1, r6, r7, fp, ip}
    1e6c:	7e700008 	cdpvc	0, 7, cr0, cr0, cr8, {0}
    1e70:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1e74:	18c29f1a 	stmiane	r2, {r1, r3, r4, r8, r9, sl, fp, ip, pc}^
    1e78:	18c60800 	stmiane	r6, {fp}^
    1e7c:	00010800 	andeq	r0, r1, r0, lsl #16
    1e80:	0018c654 	andseq	ip, r8, r4, asr r6
    1e84:	0018ca08 	andseq	ip, r8, r8, lsl #20
    1e88:	70000808 	andvc	r0, r0, r8, lsl #16
    1e8c:	0801947e 	stmdaeq	r1, {r1, r2, r3, r4, r5, r6, sl, ip, pc}
    1e90:	009f1aff 			; <UNDEFINED> instruction: 0x009f1aff
    1e94:	00000000 	andeq	r0, r0, r0
    1e98:	ba000000 	blt	1ea0 <__Stack_Size+0x1aa0>
    1e9c:	ca080018 	bgt	201f04 <__Stack_Size+0x201b04>
    1ea0:	12080018 	andne	r0, r8, #24
    1ea4:	947f7000 	ldrbtls	r7, [pc], #-0	; 1eac <__Stack_Size+0x1aac>
    1ea8:	1aff0801 	bne	fffc3eb4 <BootRAM+0xef34655>
    1eac:	7e702438 	mrcvc	4, 3, r2, cr0, cr8, {1}
    1eb0:	ff080194 			; <UNDEFINED> instruction: 0xff080194
    1eb4:	009f211a 	addseq	r2, pc, sl, lsl r1	; <UNPREDICTABLE>
    1eb8:	00000000 	andeq	r0, r0, r0
    1ebc:	b0000000 	andlt	r0, r0, r0
    1ec0:	b2080018 	andlt	r0, r8, #24
    1ec4:	01080018 	tsteq	r8, r8, lsl r0
    1ec8:	18ca5100 	stmiane	sl, {r8, ip, lr}^
    1ecc:	18cc0800 	stmiane	ip, {fp}^
    1ed0:	000a0800 	andeq	r0, sl, r0, lsl #16
    1ed4:	24320073 	ldrtcs	r0, [r2], #-115	; 0x73
    1ed8:	23220071 	teqcs	r2, #113	; 0x71
    1edc:	18cc9f04 	stmiane	ip, {r2, r8, r9, sl, fp, ip, pc}^
    1ee0:	18ce0800 	stmiane	lr, {fp}^
    1ee4:	000a0800 	andeq	r0, sl, r0, lsl #16
    1ee8:	24327f73 	ldrtcs	r7, [r2], #-3955	; 0xf73
    1eec:	23220071 	teqcs	r2, #113	; 0x71
    1ef0:	00009f04 	andeq	r9, r0, r4, lsl #30
    1ef4:	00000000 	andeq	r0, r0, r0
    1ef8:	18d00000 	ldmne	r0, {}^	; <UNPREDICTABLE>
    1efc:	18e20800 	stmiane	r2!, {fp}^
    1f00:	00010800 	andeq	r0, r1, r0, lsl #16
    1f04:	0018ee50 	andseq	lr, r8, r0, asr lr
    1f08:	0018f008 	andseq	pc, r8, r8
    1f0c:	73000a08 	movwvc	r0, #2568	; 0xa08
    1f10:	70243100 	eorvc	r3, r4, r0, lsl #2
    1f14:	02232200 	eoreq	r2, r3, #0, 4
    1f18:	0018f09f 	mulseq	r8, pc, r0	; <UNPREDICTABLE>
    1f1c:	0018f208 	andseq	pc, r8, r8, lsl #4
    1f20:	73000a08 	movwvc	r0, #2568	; 0xa08
    1f24:	7024317f 	eorvc	r3, r4, pc, ror r1
    1f28:	02232200 	eoreq	r2, r3, #0, 4
    1f2c:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    1f30:	00000000 	andeq	r0, r0, r0
    1f34:	0018d000 	andseq	sp, r8, r0
    1f38:	0018d608 	andseq	sp, r8, r8, lsl #12
    1f3c:	51000108 	tstpl	r0, r8, lsl #2
    1f40:	080018d6 	stmdaeq	r0, {r1, r2, r4, r6, r7, fp, ip}
    1f44:	080018f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip}
    1f48:	01f30004 	mvnseq	r0, r4
    1f4c:	00009f51 	andeq	r9, r0, r1, asr pc
    1f50:	00000000 	andeq	r0, r0, r0
    1f54:	18d00000 	ldmne	r0, {}^	; <UNPREDICTABLE>
    1f58:	18d80800 	ldmne	r8, {fp}^
    1f5c:	00010800 	andeq	r0, r1, r0, lsl #16
    1f60:	0018d852 	andseq	sp, r8, r2, asr r8
    1f64:	0018f408 	andseq	pc, r8, r8, lsl #8
    1f68:	f3000408 	vshl.u8	d0, d8, d0
    1f6c:	009f5201 	addseq	r5, pc, r1, lsl #4
    1f70:	00000000 	andeq	r0, r0, r0
    1f74:	e0000000 	and	r0, r0, r0
    1f78:	e2080018 	and	r0, r8, #24
    1f7c:	01080018 	tsteq	r8, r8, lsl r0
    1f80:	18e25200 	stmiane	r2!, {r9, ip, lr}^
    1f84:	18ee0800 	stmiane	lr!, {fp}^
    1f88:	000f0800 	andeq	r0, pc, r0, lsl #16
    1f8c:	0a5201f3 	beq	1482760 <__Stack_Size+0x1482360>
    1f90:	231affff 	tstcs	sl, #1020	; 0x3fc
    1f94:	73263101 	teqvc	r6, #1073741824	; 0x40000000
    1f98:	ee9f1c00 	cdp	12, 9, cr1, cr15, cr0, {0}
    1f9c:	f0080018 			; <UNDEFINED> instruction: 0xf0080018
    1fa0:	10080018 	andne	r0, r8, r8, lsl r0
    1fa4:	5201f300 	andpl	pc, r1, #0, 6
    1fa8:	1affff0a 	bne	1bd8 <__Stack_Size+0x17d8>
    1fac:	26310123 	ldrtcs	r0, [r1], -r3, lsr #2
    1fb0:	22200073 	eorcs	r0, r0, #115	; 0x73
    1fb4:	0018f09f 	mulseq	r8, pc, r0	; <UNPREDICTABLE>
    1fb8:	0018f408 	andseq	pc, r8, r8, lsl #8
    1fbc:	f3000f08 	vpmax.f32	d0, d0, d8
    1fc0:	ff0a5201 			; <UNDEFINED> instruction: 0xff0a5201
    1fc4:	01231aff 	strdeq	r1, [r3, -pc]!
    1fc8:	00732631 	rsbseq	r2, r3, r1, lsr r6
    1fcc:	00009f1c 	andeq	r9, r0, ip, lsl pc
    1fd0:	00000000 	andeq	r0, r0, r0
    1fd4:	18e00000 	stmiane	r0!, {}^	; <UNPREDICTABLE>
    1fd8:	18e20800 	stmiane	r2!, {fp}^
    1fdc:	00010800 	andeq	r0, r1, r0, lsl #16
    1fe0:	0018e651 	andseq	lr, r8, r1, asr r6
    1fe4:	0018f008 	andseq	pc, r8, r8
    1fe8:	73000a08 	movwvc	r0, #2568	; 0xa08
    1fec:	71243200 	teqvc	r4, r0, lsl #4
    1ff0:	04232200 	strteq	r2, [r3], #-512	; 0x200
    1ff4:	0018f09f 	mulseq	r8, pc, r0	; <UNPREDICTABLE>
    1ff8:	0018f208 	andseq	pc, r8, r8, lsl #4
    1ffc:	73000a08 	movwvc	r0, #2568	; 0xa08
    2000:	7124327f 	teqvc	r4, pc, ror r2
    2004:	04232200 	strteq	r2, [r3], #-512	; 0x200
    2008:	0000009f 	muleq	r0, pc, r0	; <UNPREDICTABLE>
    200c:	00000000 	andeq	r0, r0, r0
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	ffffffff 			; <UNDEFINED> instruction: 0xffffffff
*******************************************************************************/
void CTR_HP(void)
{
  u32 wEPVal = 0;

  while (((wIstr = _GetISTR()) & ISTR_CTR) != 0)
   4:	00000000 	andeq	r0, r0, r0
   8:	0800016c 	stmdaeq	r0, {r2, r3, r5, r6, r8}
   c:	080001b4 	stmdaeq	r0, {r2, r4, r5, r7, r8}
  {
    _SetISTR((u16)CLR_CTR); /* clear CTR flag */
  10:	080001b4 	stmdaeq	r0, {r2, r4, r5, r7, r8}
  14:	080001b8 	stmdaeq	r0, {r3, r4, r5, r7, r8}
	...
    /* extract highest priority endpoint number */
    EPindex = (u8)(wIstr & ISTR_EP_ID);
    /* process related endpoint register */
    wEPVal = _GetENDPOINT(EPindex);
  20:	080001b8 	stmdaeq	r0, {r3, r4, r5, r7, r8}
  24:	080001ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8}
  28:	080001ba 	stmdaeq	r0, {r1, r3, r4, r5, r7, r8}
    if ((wEPVal & EP_CTR_RX) != 0)
  2c:	080001bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_RX(EPindex);
  30:	080001bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8}
  34:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}
  38:	080001be 	stmdaeq	r0, {r1, r2, r3, r4, r5, r7, r8}

      /* call OUT service function */
      (*pEpInt_OUT[EPindex-1])();
  3c:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}

    } /* if((wEPVal & EP_CTR_RX) */
    else if ((wEPVal & EP_CTR_TX) != 0)
  40:	080001c8 	stmdaeq	r0, {r3, r6, r7, r8}
    {
      /* clear int flag */
      _ClearEP_CTR_TX(EPindex);
  44:	080001ca 	stmdaeq	r0, {r1, r3, r6, r7, r8}
  48:	080001cc 	stmdaeq	r0, {r2, r3, r6, r7, r8}
  4c:	080001e4 	stmdaeq	r0, {r2, r5, r6, r7, r8}

      /* call IN service function */
      (*pEpInt_IN[EPindex-1])();
  50:	080001e4 	stmdaeq	r0, {r2, r5, r6, r7, r8}
  54:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
  58:	080001e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, r8}
  5c:	080001e8 	stmdaeq	r0, {r3, r5, r6, r7, r8}
  60:	080001e8 	stmdaeq	r0, {r3, r5, r6, r7, r8}
  64:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
  68:	080001ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, r8}
  6c:	080001ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8}
  70:	080001ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8}
  74:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
  78:	080001ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, r8}
  7c:	080001f0 	stmdaeq	r0, {r4, r5, r6, r7, r8}
  80:	080001f0 	stmdaeq	r0, {r4, r5, r6, r7, r8}
  84:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
  88:	080001fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8}
  8c:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
  90:	080002a4 	stmdaeq	r0, {r2, r5, r7, r9}
  94:	08000304 	stmdaeq	r0, {r2, r8, r9}
  98:	08000304 	stmdaeq	r0, {r2, r8, r9}
  9c:	08000310 	stmdaeq	r0, {r4, r8, r9}
  a0:	08000310 	stmdaeq	r0, {r4, r8, r9}
  a4:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
  a8:	0800031c 	stmdaeq	r0, {r2, r3, r4, r8, r9}
  ac:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
  b0:	0800033c 	stmdaeq	r0, {r2, r3, r4, r5, r8, r9}
  b4:	08000348 	stmdaeq	r0, {r3, r6, r8, r9}
  b8:	08000348 	stmdaeq	r0, {r3, r6, r8, r9}
  bc:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  c0:	08000370 	stmdaeq	r0, {r4, r5, r6, r8, r9}
  c4:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
  c8:	00000001 	andeq	r0, r0, r1
  cc:	00000001 	andeq	r0, r0, r1
  d0:	080003e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9}
  d4:	08000404 	stmdaeq	r0, {r2, sl}
  d8:	08000404 	stmdaeq	r0, {r2, sl}
  dc:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
  e0:	0800041c 	stmdaeq	r0, {r2, r3, r4, sl}
  e4:	080004a0 	stmdaeq	r0, {r5, r7, sl}
  e8:	080004a0 	stmdaeq	r0, {r5, r7, sl}
  ec:	080004c8 	stmdaeq	r0, {r3, r6, r7, sl}
  f0:	080004c8 	stmdaeq	r0, {r3, r6, r7, sl}
  f4:	080004e4 	stmdaeq	r0, {r2, r5, r6, r7, sl}
  f8:	080004e4 	stmdaeq	r0, {r2, r5, r6, r7, sl}
  fc:	080004e8 	stmdaeq	r0, {r3, r5, r6, r7, sl}
 100:	080004e8 	stmdaeq	r0, {r3, r5, r6, r7, sl}
 104:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
 108:	0800050c 	stmdaeq	r0, {r2, r3, r8, sl}
 10c:	0800054c 	stmdaeq	r0, {r2, r3, r6, r8, sl}
 110:	0800054c 	stmdaeq	r0, {r2, r3, r6, r8, sl}
 114:	0800056e 	stmdaeq	r0, {r1, r2, r3, r5, r6, r8, sl}
 118:	08000570 	stmdaeq	r0, {r4, r5, r6, r8, sl}
 11c:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
	...
 128:	08000624 	stmdaeq	r0, {r2, r5, r9, sl}
 12c:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
	...
 138:	08000800 	stmdaeq	r0, {fp}
 13c:	08000804 	stmdaeq	r0, {r2, fp}
 140:	08000806 	stmdaeq	r0, {r1, r2, fp}
 144:	0800080e 	stmdaeq	r0, {r1, r2, r3, fp}
	...
 150:	080008e6 	stmdaeq	r0, {r1, r2, r5, r6, r7, fp}
 154:	080008ea 	stmdaeq	r0, {r1, r3, r5, r6, r7, fp}
 158:	080008ee 	stmdaeq	r0, {r1, r2, r3, r5, r6, r7, fp}
 15c:	080008f0 	stmdaeq	r0, {r4, r5, r6, r7, fp}
	...
 168:	080006dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl}
 16c:	080006f2 	stmdaeq	r0, {r1, r4, r5, r6, r7, r9, sl}
 170:	00000001 	andeq	r0, r0, r1
 174:	00000001 	andeq	r0, r0, r1
 178:	080006f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, r9, sl}
 17c:	08000704 	stmdaeq	r0, {r2, r8, r9, sl}
 180:	08000704 	stmdaeq	r0, {r2, r8, r9, sl}
 184:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 188:	08000754 	stmdaeq	r0, {r2, r4, r6, r8, r9, sl}
 18c:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
 190:	0800079c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, sl}
 194:	080007fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 198:	080007fc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r8, r9, sl}
 19c:	08000824 	stmdaeq	r0, {r2, r5, fp}
 1a0:	08000824 	stmdaeq	r0, {r2, r5, fp}
 1a4:	08000840 	stmdaeq	r0, {r6, fp}
 1a8:	08000840 	stmdaeq	r0, {r6, fp}
 1ac:	08000854 	stmdaeq	r0, {r2, r4, r6, fp}
 1b0:	08000854 	stmdaeq	r0, {r2, r4, r6, fp}
 1b4:	080008c0 	stmdaeq	r0, {r6, r7, fp}
 1b8:	080008c0 	stmdaeq	r0, {r6, r7, fp}
 1bc:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
 1c0:	080008e4 	stmdaeq	r0, {r2, r5, r6, r7, fp}
 1c4:	08000910 	stmdaeq	r0, {r4, r8, fp}
 1c8:	08000910 	stmdaeq	r0, {r4, r8, fp}
 1cc:	08000924 	stmdaeq	r0, {r2, r5, r8, fp}
 1d0:	08000924 	stmdaeq	r0, {r2, r5, r8, fp}
 1d4:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
 1d8:	00000001 	andeq	r0, r0, r1
 1dc:	00000001 	andeq	r0, r0, r1
 1e0:	08000958 	stmdaeq	r0, {r3, r4, r6, r8, fp}
 1e4:	080009a4 	stmdaeq	r0, {r2, r5, r7, r8, fp}
 1e8:	080009a4 	stmdaeq	r0, {r2, r5, r7, r8, fp}
 1ec:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
 1f0:	080009b0 	stmdaeq	r0, {r4, r5, r7, r8, fp}
 1f4:	080009c8 	stmdaeq	r0, {r3, r6, r7, r8, fp}
 1f8:	080009c8 	stmdaeq	r0, {r3, r6, r7, r8, fp}
 1fc:	080009da 	stmdaeq	r0, {r1, r3, r4, r6, r7, r8, fp}
 200:	080009dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r8, fp}
 204:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
 208:	080009ec 	stmdaeq	r0, {r2, r3, r5, r6, r7, r8, fp}
 20c:	08000a04 	stmdaeq	r0, {r2, r9, fp}
	...
 218:	08000a04 	stmdaeq	r0, {r2, r9, fp}
 21c:	08000a60 	stmdaeq	r0, {r5, r6, r9, fp}
 220:	08000a60 	stmdaeq	r0, {r5, r6, r9, fp}
 224:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 228:	00000001 	andeq	r0, r0, r1
 22c:	00000001 	andeq	r0, r0, r1
 230:	08000aa4 	stmdaeq	r0, {r2, r5, r7, r9, fp}
 234:	08000abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp}
 238:	08000abc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r9, fp}
 23c:	08000ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp}
 240:	08000ad4 	stmdaeq	r0, {r2, r4, r6, r7, r9, fp}
 244:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 248:	08000afc 	stmdaeq	r0, {r2, r3, r4, r5, r6, r7, r9, fp}
 24c:	08000b30 	stmdaeq	r0, {r4, r5, r8, r9, fp}
 250:	08000b30 	stmdaeq	r0, {r4, r5, r8, r9, fp}
 254:	08000b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp}
 258:	08000b8c 	stmdaeq	r0, {r2, r3, r7, r8, r9, fp}
 25c:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 260:	00000001 	andeq	r0, r0, r1
 264:	00000001 	andeq	r0, r0, r1
 268:	00000001 	andeq	r0, r0, r1
 26c:	00000001 	andeq	r0, r0, r1
 270:	08000dc0 	stmdaeq	r0, {r6, r7, r8, sl, fp}
 274:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 278:	08000dcc 	stmdaeq	r0, {r2, r3, r6, r7, r8, sl, fp}
 27c:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
	...
 288:	00000001 	andeq	r0, r0, r1
 28c:	00000001 	andeq	r0, r0, r1
 290:	00000001 	andeq	r0, r0, r1
 294:	00000001 	andeq	r0, r0, r1
	...
 2a0:	08000eca 	stmdaeq	r0, {r1, r3, r6, r7, r9, sl, fp}
 2a4:	08000ecc 	stmdaeq	r0, {r2, r3, r6, r7, r9, sl, fp}
 2a8:	08000edc 	stmdaeq	r0, {r2, r3, r4, r6, r7, r9, sl, fp}
 2ac:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
	...
 2b8:	00000001 	andeq	r0, r0, r1
 2bc:	00000001 	andeq	r0, r0, r1
 2c0:	00000001 	andeq	r0, r0, r1
 2c4:	00000001 	andeq	r0, r0, r1
	...
 2d0:	00000001 	andeq	r0, r0, r1
 2d4:	00000001 	andeq	r0, r0, r1
 2d8:	00000001 	andeq	r0, r0, r1
 2dc:	00000001 	andeq	r0, r0, r1
	...
 2e8:	00000001 	andeq	r0, r0, r1
 2ec:	00000001 	andeq	r0, r0, r1
 2f0:	00000001 	andeq	r0, r0, r1
 2f4:	00000001 	andeq	r0, r0, r1
 2f8:	00000001 	andeq	r0, r0, r1
 2fc:	00000001 	andeq	r0, r0, r1
	...
 308:	00000001 	andeq	r0, r0, r1
 30c:	00000001 	andeq	r0, r0, r1
 310:	00000001 	andeq	r0, r0, r1
 314:	00000001 	andeq	r0, r0, r1
	...
 320:	00000001 	andeq	r0, r0, r1
 324:	00000001 	andeq	r0, r0, r1
 328:	00000001 	andeq	r0, r0, r1
 32c:	00000001 	andeq	r0, r0, r1
	...
 338:	00000001 	andeq	r0, r0, r1
 33c:	00000001 	andeq	r0, r0, r1
 340:	00000001 	andeq	r0, r0, r1
 344:	00000001 	andeq	r0, r0, r1
 348:	00000001 	andeq	r0, r0, r1
 34c:	00000001 	andeq	r0, r0, r1
 350:	00000001 	andeq	r0, r0, r1
 354:	00000001 	andeq	r0, r0, r1
 358:	00000001 	andeq	r0, r0, r1
 35c:	00000001 	andeq	r0, r0, r1
 360:	00000001 	andeq	r0, r0, r1
 364:	00000001 	andeq	r0, r0, r1
 368:	00000001 	andeq	r0, r0, r1
 36c:	00000001 	andeq	r0, r0, r1
 370:	00000001 	andeq	r0, r0, r1
 374:	00000001 	andeq	r0, r0, r1
 378:	00000001 	andeq	r0, r0, r1
 37c:	00000001 	andeq	r0, r0, r1
 380:	00000001 	andeq	r0, r0, r1
 384:	00000001 	andeq	r0, r0, r1
 388:	00000001 	andeq	r0, r0, r1
 38c:	00000001 	andeq	r0, r0, r1
 390:	00000001 	andeq	r0, r0, r1
 394:	00000001 	andeq	r0, r0, r1
 398:	00000001 	andeq	r0, r0, r1
 39c:	00000001 	andeq	r0, r0, r1
 3a0:	08000dd0 	stmdaeq	r0, {r4, r6, r7, r8, sl, fp}
 3a4:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
 3a8:	00000001 	andeq	r0, r0, r1
 3ac:	00000001 	andeq	r0, r0, r1
 3b0:	00000001 	andeq	r0, r0, r1
 3b4:	00000001 	andeq	r0, r0, r1
 3b8:	00000001 	andeq	r0, r0, r1
 3bc:	00000001 	andeq	r0, r0, r1
 3c0:	00000001 	andeq	r0, r0, r1
 3c4:	00000001 	andeq	r0, r0, r1
 3c8:	00000001 	andeq	r0, r0, r1
 3cc:	00000001 	andeq	r0, r0, r1
 3d0:	08000dfa 	stmdaeq	r0, {r1, r3, r4, r5, r6, r7, r8, sl, fp}
 3d4:	08000e18 	stmdaeq	r0, {r3, r4, r9, sl, fp}
 3d8:	00000001 	andeq	r0, r0, r1
 3dc:	00000001 	andeq	r0, r0, r1
 3e0:	00000001 	andeq	r0, r0, r1
 3e4:	00000001 	andeq	r0, r0, r1
 3e8:	08000e18 	stmdaeq	r0, {r3, r4, r9, sl, fp}
 3ec:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 3f0:	00000001 	andeq	r0, r0, r1
 3f4:	00000001 	andeq	r0, r0, r1
 3f8:	00000001 	andeq	r0, r0, r1
 3fc:	00000001 	andeq	r0, r0, r1
 400:	00000001 	andeq	r0, r0, r1
 404:	00000001 	andeq	r0, r0, r1
 408:	00000001 	andeq	r0, r0, r1
 40c:	00000001 	andeq	r0, r0, r1
 410:	00000001 	andeq	r0, r0, r1
 414:	00000001 	andeq	r0, r0, r1
 418:	00000001 	andeq	r0, r0, r1
 41c:	00000001 	andeq	r0, r0, r1
 420:	00000001 	andeq	r0, r0, r1
 424:	00000001 	andeq	r0, r0, r1
 428:	00000001 	andeq	r0, r0, r1
 42c:	00000001 	andeq	r0, r0, r1
 430:	00000001 	andeq	r0, r0, r1
 434:	00000001 	andeq	r0, r0, r1
 438:	08000e34 	stmdaeq	r0, {r2, r4, r5, r9, sl, fp}
 43c:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 440:	08000e54 	stmdaeq	r0, {r2, r4, r6, r9, sl, fp}
 444:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
 448:	00000001 	andeq	r0, r0, r1
 44c:	00000001 	andeq	r0, r0, r1
 450:	00000001 	andeq	r0, r0, r1
 454:	00000001 	andeq	r0, r0, r1
 458:	00000001 	andeq	r0, r0, r1
 45c:	00000001 	andeq	r0, r0, r1
 460:	00000001 	andeq	r0, r0, r1
 464:	00000001 	andeq	r0, r0, r1
 468:	08000e74 	stmdaeq	r0, {r2, r4, r5, r6, r9, sl, fp}
 46c:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
 470:	08000e90 	stmdaeq	r0, {r4, r7, r9, sl, fp}
 474:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
 478:	08000eac 	stmdaeq	r0, {r2, r3, r5, r7, r9, sl, fp}
 47c:	08000ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp}
 480:	00000001 	andeq	r0, r0, r1
 484:	00000001 	andeq	r0, r0, r1
 488:	08000ec8 	stmdaeq	r0, {r3, r6, r7, r9, sl, fp}
 48c:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
 490:	00000001 	andeq	r0, r0, r1
 494:	00000001 	andeq	r0, r0, r1
 498:	00000001 	andeq	r0, r0, r1
 49c:	00000001 	andeq	r0, r0, r1
 4a0:	00000001 	andeq	r0, r0, r1
 4a4:	00000001 	andeq	r0, r0, r1
 4a8:	00000001 	andeq	r0, r0, r1
 4ac:	00000001 	andeq	r0, r0, r1
 4b0:	00000001 	andeq	r0, r0, r1
 4b4:	00000001 	andeq	r0, r0, r1
 4b8:	00000001 	andeq	r0, r0, r1
 4bc:	00000001 	andeq	r0, r0, r1
 4c0:	00000001 	andeq	r0, r0, r1
 4c4:	00000001 	andeq	r0, r0, r1
 4c8:	00000001 	andeq	r0, r0, r1
 4cc:	00000001 	andeq	r0, r0, r1
 4d0:	00000001 	andeq	r0, r0, r1
 4d4:	00000001 	andeq	r0, r0, r1
 4d8:	00000001 	andeq	r0, r0, r1
 4dc:	00000001 	andeq	r0, r0, r1
 4e0:	00000001 	andeq	r0, r0, r1
 4e4:	00000001 	andeq	r0, r0, r1
 4e8:	00000001 	andeq	r0, r0, r1
 4ec:	00000001 	andeq	r0, r0, r1
 4f0:	00000001 	andeq	r0, r0, r1
 4f4:	00000001 	andeq	r0, r0, r1
 4f8:	00000001 	andeq	r0, r0, r1
 4fc:	00000001 	andeq	r0, r0, r1
 500:	00000001 	andeq	r0, r0, r1
 504:	00000001 	andeq	r0, r0, r1
 508:	00000001 	andeq	r0, r0, r1
 50c:	00000001 	andeq	r0, r0, r1
	...
 518:	08000f08 	stmdaeq	r0, {r3, r8, r9, sl, fp}
 51c:	0800105c 	stmdaeq	r0, {r2, r3, r4, r6, ip}
 520:	00000001 	andeq	r0, r0, r1
 524:	00000001 	andeq	r0, r0, r1
	...
 530:	0800105c 	stmdaeq	r0, {r2, r3, r4, r6, ip}
 534:	08001094 	stmdaeq	r0, {r2, r4, r7, ip}
	...
 540:	0800139c 	stmdaeq	r0, {r2, r3, r4, r7, r8, r9, ip}
 544:	080013a4 	stmdaeq	r0, {r2, r5, r7, r8, r9, ip}
 548:	080013a8 	stmdaeq	r0, {r3, r5, r7, r8, r9, ip}
 54c:	080013aa 	stmdaeq	r0, {r1, r3, r5, r7, r8, r9, ip}
 550:	080013ac 	stmdaeq	r0, {r2, r3, r5, r7, r8, r9, ip}
 554:	080013bc 	stmdaeq	r0, {r2, r3, r4, r5, r7, r8, r9, ip}
	...
 560:	08001572 	stmdaeq	r0, {r1, r4, r5, r6, r8, sl, ip}
 564:	0800171c 	stmdaeq	r0, {r2, r3, r4, r8, r9, sl, ip}
 568:	08001724 	stmdaeq	r0, {r2, r5, r8, r9, sl, ip}
 56c:	08001744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip}
	...
 578:	08001094 	stmdaeq	r0, {r2, r4, r7, ip}
 57c:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 580:	080010b8 	stmdaeq	r0, {r3, r4, r5, r7, ip}
 584:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
 588:	080010dc 	stmdaeq	r0, {r2, r3, r4, r6, r7, ip}
 58c:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 590:	0800116c 	stmdaeq	r0, {r2, r3, r5, r6, r8, ip}
 594:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
 598:	08001214 	stmdaeq	r0, {r2, r4, r9, ip}
 59c:	0800124c 	stmdaeq	r0, {r2, r3, r6, r9, ip}
 5a0:	0800124c 	stmdaeq	r0, {r2, r3, r6, r9, ip}
 5a4:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
 5a8:	08001294 	stmdaeq	r0, {r2, r4, r7, r9, ip}
 5ac:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 5b0:	08001364 	stmdaeq	r0, {r2, r5, r6, r8, r9, ip}
 5b4:	080013e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip}
 5b8:	080013e8 	stmdaeq	r0, {r3, r5, r6, r7, r8, r9, ip}
 5bc:	0800140c 	stmdaeq	r0, {r2, r3, sl, ip}
 5c0:	0800140c 	stmdaeq	r0, {r2, r3, sl, ip}
 5c4:	08001428 	stmdaeq	r0, {r3, r5, sl, ip}
 5c8:	08001428 	stmdaeq	r0, {r3, r5, sl, ip}
 5cc:	08001468 	stmdaeq	r0, {r3, r5, r6, sl, ip}
 5d0:	08001468 	stmdaeq	r0, {r3, r5, r6, sl, ip}
 5d4:	08001744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip}
 5d8:	08001744 	stmdaeq	r0, {r2, r6, r8, r9, sl, ip}
 5dc:	0800180c 	stmdaeq	r0, {r2, r3, fp, ip}
 5e0:	0800180c 	stmdaeq	r0, {r2, r3, fp, ip}
 5e4:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
 5e8:	08001844 	stmdaeq	r0, {r2, r6, fp, ip}
 5ec:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
 5f0:	00000001 	andeq	r0, r0, r1
 5f4:	00000001 	andeq	r0, r0, r1
	...
 600:	080018a0 	stmdaeq	r0, {r5, r7, fp, ip}
 604:	080018d0 	stmdaeq	r0, {r4, r6, r7, fp, ip}
 608:	080018d0 	stmdaeq	r0, {r4, r6, r7, fp, ip}
 60c:	080018f4 	stmdaeq	r0, {r2, r4, r5, r6, r7, fp, ip}
	...
